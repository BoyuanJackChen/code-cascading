[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize empty lists to store shared elements\n    shared_list1 = []\n    shared_list2 = []\n    \n    # Loop through the two lists and compare each element\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list1.append(element)\n            shared_list2.append(element)\n    \n    # Return a tuple of the shared elements\n    return (shared_list1, shared_list2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared.append(elem)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    # loop through the first tuple and check if each element is in the second tuple\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n            \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for elem in test_tup1:\n        if elem in test_tup2:\n            return elem"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # Check if both lists are of equal length\n    if len(test_tup1) == len(test_tup2):\n        # Iterate over the tuples and compare the elements\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == test_tup2[i]:\n                shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create sets of elements in the two lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    # convert the set to a list and return it\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return True\n    \n    # check if n is divisible by any number between 2 and the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # if none of the above conditions are true, n is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if it is not a prime number, False otherwise.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function returns a boolean indicating whether or not a given number is not prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return True\n    # Check if n is a multiple of 2\n    if n % 2 == 0:\n        return True\n    # Check if n is a multiple of any odd number less than or equal to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number as an input and checks if it is prime or not. If it is prime, it returns True.\n    If it is not prime, it returns False.\n    '''\n    if n == 2:\n        return False\n    elif n % 2 == 0 or n == 1:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return \"Error: n is greater than the length of the list\"\n    \n    # create a min heap from the first n elements of the list\n    min_heap = nums[:n]\n    for num in nums[n:]:\n        heapq.heappush(min_heap, num)\n    \n    # return the n largest elements in descending order\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    max_heap = hq.nlargest(n, nums)\n    # Return the largest n elements of the max heap\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a min-heap using the heapq module\n    hq.heapify(nums)\n    # Extract the n largest integers from the heap and return them in descending order\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)  # push negative numbers to max heap\n        if len(max_heap) > n:  # remove the smallest number if the max heap has more than n numbers\n            hq.heappop(max_heap)\n\n    return [num for num in max_heap][::-1]  # return the n largest numbers in descending order"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min heap\n    hq.heapify(nums)\n    # extract the largest n elements from the heap\n    result = [hq.heappop(nums) for _ in range(n)]\n    # convert the heap back to a list\n    result.reverse()\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a max heap\n    max_heap = [-num for num in nums]\n    heap_size = len(max_heap)\n\n    # remove the n largest elements from the heap\n    for _ in range(n):\n        max_heap[0], max_heap[-1] = max_heap[-1], max_heap[0]\n        heap_size -= 1\n        hq.heapify(max_heap)\n\n    # convert the heap back to a list of numbers\n    largest_nums = [max_heap[i] for i in range(heap_size)]\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap\n    hq.heapify(nums)\n    # Remove and return the n largest elements\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers to a max heap\n    max_heap = hq.nlargest(n, nums)\n    # return the heap as a list of integers\n    return [num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n and populate it with the first n elements of the input list\n    max_heap = []\n    for num in nums[:n]:\n        heapq.heappush(max_heap, num)\n        \n    # Extract the n largest integers from the max heap and add them to a new list\n    largest_nums = []\n    while max_heap:\n        largest_nums.append(heapq.heappop(max_heap))\n        \n    return largest_nums"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0: \n        return True\n    \n    if x & (x-1) == 0: # check if the last bit is 0\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1: \n        if x % 2 == 1: \n            return False\n        x = x // 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # Check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(n):\n    '''\n    This function takes an integer number as input and returns True if the number is a power of two and False otherwise.\n    '''\n    if n & (n - 1) == 0: #if n is a power of 2, n-1 must be 0 as well\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Using bitwise AND operator to find the difference between the two numbers\n    diff = x & (x - 1)\n\n    # If the difference is 0, then the numbers differ at one bit position only\n    if diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # converting x to binary string representation\n    bin_x = bin(x)[2:]\n    # finding the number of set bits in binary representation of x\n    count = bin_x.count('1')\n    # checking whether the difference between x and 2 raised to the power of count is one or not\n    if count ** (count - 1) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x and returns True if the difference between x and its power of 2 is 1, else False.\n    '''\n    diff = x ^ (x-1)\n    return diff == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "Let's write the code for the function.<|im_sep|>"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether a given number is a power of two or not.\n    '''\n    if x & (x-1) == 0 and x!= 0: # check if x is a power of two\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    return pattern.findall(text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b[a-zA-Z][a-zA-Z0-9]{3,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using regex\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are less than 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog slept on the couch.\"\nprint(find_char_long(text))"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b[a-zA-Z]{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog slept well.\"\nwords = find_char_long(text)\nprint(words)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x ** 2 for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through each element in the list\n    for num in nums:\n        # Multiply the element by itself and append the result to a new list\n        squares.append(num ** 2)\n    # Return the new list of squares\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    max_index = n - 1\n    min_index = 0\n    min_rotations = 0\n    \n    while max_index > min_index:\n        mid = (max_index + min_index) // 2\n        if str[mid] > str[max_index]:\n            min_index = mid\n        else:\n            max_index = mid\n    \n    # Check if the string is already in its rotated form\n    if str == str[min_index:max_index+1]:\n        return 0\n    \n    # If not, find the minimum number of rotations\n    for i in range(min_index, max_index+1):\n        if str[i]!= str[i+min_index]:\n            min_rotations = i - min_index\n            break\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # initialize variables\n    num_rotations = 0\n    max_rotations = 0\n    # loop through each character in the string\n    for i in range(len(str)):\n        # keep track of the count of each character\n        count = str.count(str[i])\n        # if the count is odd, then the string is not the same\n        if count % 2!= 0:\n            return -1\n        # calculate the maximum number of rotations required to get the same string\n        max_rotations = max(max_rotations, count // 2)\n        # increment the number of rotations by the maximum number of rotations required\n        num_rotations += count // 2\n    # if the number of rotations is greater than 0, then return the number of rotations required\n    if num_rotations > 0:\n        return max_rotations\n    else:\n        return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = float('inf')\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j] == str[j:i]:\n                min_rotations = min(min_rotations, j-i)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # check if the length of the string is less than 2 \n    if len(str) < 2: \n        return 0\n\n    # create a dictionary to store the frequency of each character in the string \n    freq = {}\n    for char in str: \n        if char in freq: \n            freq[char] += 1\n        else: \n            freq[char] = 1\n\n    # loop through the string and count the number of times each character occurs \n    count = 0\n    for char in str: \n        count += freq[char]\n\n    # check if the number of times each character occurs is odd or even \n    if count % 2 == 0: \n        return 0\n    else: \n        # loop through the string and count the number of times each character occurs \n        count = 0\n        for char in str: \n            count += freq[char]\n\n        # calculate the number of rotations required \n        n = len(str)\n        rotations = count // 2\n\n        # return the minimum number of rotations required \n        return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize result variable and counter for the number of rotations\n    result = 0\n    counter = 0\n    \n    # Loop through all possible rotations of the string\n    for i in range(n):\n        # Check if the current character is at the end of the string\n        if i == n-1:\n            # If yes, check if the last character is also at the end\n            if str[i] == str[0]:\n                # If yes, increment the counter and break the loop\n                counter += 1\n                break\n        # Check if the current character is at the beginning of the string\n        elif i == 0:\n            # If yes, check if the first character is also at the beginning\n            if str[i] == str[n-1]:\n                # If yes, increment the counter and break the loop\n                counter += 1\n                break\n        # If the current character is not at the beginning or end,\n        # check if the character is in the middle of the string\n        else:\n            # If the character is found, increment the counter and break the loop\n            if str[i] == str[i-1] and str[i] == str[i+1]:\n                counter += 1\n                break\n        \n        # Check if the last character is the first character\n        if i == n-2 and str[n-2] == str[0]:\n            # If yes, increment the counter and break the loop\n            counter += 1\n            break\n        \n        # If the current character is not the first or last,\n        # check if the character is at the beginning or end of the string\n        elif i == 1 and str[i] == str[0]:\n            # If yes, increment the counter and break the loop\n            counter += 1\n            break\n        \n        # If the current character is not at the beginning or end,\n        # check if the character is at the beginning or end of the string\n        elif i == n-2 and str[n-2] == str[n-1]:\n            # If yes, increment the counter and break the loop\n            counter += 1\n            break\n        \n        # If the character is not at the beginning or end, check if it is in the middle of the string\n        else:\n            # If the character is found, increment the counter and break the loop\n            if str[i] == str[i-1] or str[i] == str[i+1]:\n                counter += 1\n                break\n    \n    # If the counter is greater than 0, the string can be rotated to get the same string\n    if counter > 0:\n        result = counter\n    \n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Initialize two variables to store the minimum number of rotations and the count of rotations\n    min_rot = float('inf')\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Initialize three variables to store the count of characters in the string, the count of characters to the right of the current character, and the count of characters to the left of the current character\n        left_count = right_count = 0\n        for j in range(len(str)): \n            if j!= i: \n                if str[j] == str[i]: \n                    left_count += 1\n                    right_count += 1\n        \n        # If the count of characters to the left and right of the current character is equal to the count of characters to the right and left of the current character, it means that the current character is the only character in the string, so there is no need to rotate it.\n        if left_count == right_count: \n            return 0\n        \n        # If the count of characters to the left is greater than the count of characters to the right, rotate the current character to the left.\n        elif left_count > right_count: \n            str = str[:i] + str[i:i+1] + str[i+1:]\n        \n        # If the count of characters to the right is greater than the count of characters to the left, rotate the current character to the right.\n        else: \n            str = str[:i] + str[i+1:i+2] + str[i] + str[i+2:]\n        \n        # Increment the count of rotations by 1\n        count += 1\n        \n        # Update the minimum number of rotations if necessary\n        if count < min_rot: \n            min_rot = count\n    \n    # Return the minimum number of rotations\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the maximum frequency of any character\n    max_freq = max(freq.values())\n    \n    # create a set of characters that will be replaced with their maximum frequency\n    max_chars = set()\n    for char, freq in freq.items():\n        if freq == max_freq:\n            max_chars.add(char)\n    \n    # find the number of rotations required\n    count = 0\n    for i in range(len(str)):\n        if str[i] in max_chars:\n            count += 1\n    \n    # return the minimum number of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # convert the string to a list of characters\n    str = list(str)\n\n    # sort the list in ascending order\n    str.sort()\n\n    # initialize the minimum number of rotations\n    min_rotations = 0\n\n    # loop through all possible rotations of the list\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            # if the two sublists are equal, increment the minimum rotations\n            if str[i:j+1] == str[j:i:-1]:\n                min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    # Initialize the two pointers to the start of the string\n    i, j = 0, n-1\n    # Initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n    # Loop through all possible rotations\n    for k in range(n):\n        # Swap the characters at the two pointers\n        str[i], str[j] = str[j], str[i]\n        # Increment the pointers\n        i += 1\n        j -= 1\n        # Update the minimum number of rotations if necessary\n        if str == str[::-1]:\n            min_rotations = min(min_rotations, k+1)\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        count += str.count(str[i:i+n])\n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) > 1:\n        # split the string into parts with the specified character\n        parts = s.split(ch)\n        # join the parts into a new string, but without the first and last parts\n        new_str = ''.join(parts[1:-1])\n        # return the new string\n        return new_str\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return \"\"\n    if ch in s:\n        i = s.index(ch)\n        return s[:i] + s[i+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Convert string to list to enable modification\n    s = list(s)\n    # Find the index of the first occurrence of the character\n    index = s.index(ch)\n    # Remove the first occurrence\n    s.pop(index)\n    # Find the index of the last occurrence of the character\n    index = s.index(ch)\n    # Remove the last occurrence\n    s.pop(index)\n    # Convert the list back to a string and return it\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence\n    if s.startswith(ch):\n        s = s[len(ch):]\n    # remove last occurrence\n    if s.endswith(ch):\n        s = s[:-len(ch)]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Removing first occurrence\n    s = s[1:]\n\n    # Removing last occurrence\n    if s.endswith(ch):\n        s = s[:-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return \"The given character is not present in the string\"\n    else:\n        return s[s.index(ch)+1:]+s[:s.index(ch)]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if len(s) == 0:\n        return \"\"\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of character from string\n    if s.startswith(ch):\n        s = s[len(ch):]\n    # remove last occurrence of character from string\n    if s.endswith(ch):\n        s = s[:-len(ch)]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'') \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    s = s.strip()\n    if len(s) <= 1:\n        return s\n    else:\n        if s[0] == ch:\n            return s[1:]\n        elif s[-1] == ch:\n            return s[:-1]\n        else:\n            return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sum of rows for each column and row\n    col_sum = [sum(row) for row in M]\n    row_sum = [sum(col) for col in zip(*M)]\n\n    # Sort the matrix based on the sum of rows for each column\n    sorted_M = sorted(M, key=lambda x: col_sum.index(sum(x)))\n\n    # Sort the matrix based on the sum of rows for each row\n    for row in range(len(sorted_M)):\n        sorted_M[row] = sorted(sorted_M[row], key=lambda x: row_sum.index(sum(x)))\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a copy of the matrix so we don't modify the original\n    M_sorted = [[0 for j in range(cols)] for i in range(rows)]\n\n    # Loop through each row of the matrix\n    for i in range(rows):\n        # Initialize the current sum to the first element in the row\n        current_sum = M[i][0]\n\n        # Loop through each column of the matrix starting from the second element\n        for j in range(1, cols):\n            # Check if the current element in the current row is less than the current sum\n            if M[i][j] < current_sum:\n                # If so, update the current sum to the current element\n                current_sum = M[i][j]\n            # If the current element is equal to the current sum, ignore it\n            elif M[i][j] == current_sum:\n                continue\n            else:\n                # Otherwise, the current element is greater than the current sum and needs to be placed after the current row\n                break\n        # After looping through all elements in the current row, add the current row to the sorted matrix\n        for k in range(cols):\n            M_sorted[i][k] = M[i][k]\n\n    # Return the sorted matrix\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    # initialize variables\n    n = len(M)\n    sums = [0] * n\n\n    # calculate the sum of each row\n    for i in range(n):\n        for j in range(n):\n            sums[i] += M[i][j]\n\n    # sort the matrix based on the sums of its rows\n    for i in range(n):\n        for j in range(n-i-1):\n            if sums[j] > sums[j+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    # calculate the sum of each row\n    sums = [sum(row) for row in M]\n    # sort the rows in ascending order\n    sorted_rows = sorted(M, key=lambda x: sums.index(sum(x)))\n    # construct the sorted matrix\n    sorted_matrix = [[row[i] for row in sorted_rows] for i in range(len(M[0]))]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    num_rows = len(M)\n    num_cols = len(M[0])\n\n    # Initialize the sum of each row and column\n    row_sums = [0] * num_rows\n    col_sums = [0] * num_cols\n\n    # Calculate the sum of each row and column\n    for i in range(num_rows):\n        for j in range(num_cols):\n            row_sums[i] += M[i][j]\n            col_sums[j] += M[i][j]\n\n    # Sort the matrix by row and column sums\n    sorted_indices = [(i, j) for i in range(num_rows) for j in range(num_cols) if M[i][j] == row_sums[i] + col_sums[j]]\n    sorted_matrix = [[0] * num_cols for _ in range(num_rows)]\n    for i in range(len(sorted_indices)):\n        row, col = sorted_indices[i]\n        sorted_matrix[row][col] = M[row][col]\n\n    # Return the sorted matrix\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][j] > M[j+1][j+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Function to check if a given row is sorted\n    def is_sorted(row):\n        return all(row[i] <= row[i+1] for i in range(len(row)-1))\n\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Sort the row in ascending order\n        M[i].sort()\n        # If the row is not sorted, reverse it\n        while not is_sorted(M[i]):\n            M[i].reverse()\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda x: x[row_sums.index(max(row_sums))])\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula to find the volume of a triangular prism: V = (1/3)(l*b*h)\n    V = (1/3)*(l*b*h)\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    volume = (1/3)*l*b*h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula to calculate the volume of a triangular prism\n    Volume = l*b*h\n    \n    # Print the result\n    print(\"The volume of a triangular prism is:\", Volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l*b)/2\n    volume = l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length of the base and height of the triangular prism as input and returns the volume of the prism.\n    '''\n    volume = (1/3)*l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    '''\n    This function takes the dimensions of a triangular prism as input and returns the volume of the prism.\n    '''\n    Volume = l*b*h\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume using Heron's formula\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z][a-z0-9]*[_][a-z0-9]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!\\w)([a-z])([A-Z])(?!\\w)'\n    matches = re.findall(pattern, text)\n    \n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    return re.search(pattern, text)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<=[a-z])_*(?=[a-z])\"\n    match = re.search(pattern, text)\n    return True if match else False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+_[a-z]+)'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z_]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = re.compile(r'([a-z]+)_([a-z]+)')\n    matches = underscore_pattern.findall(text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<![a-z])[a-z]+(?![a-z_])_+\"\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[A-Z]+(?=[a-z])|(?<=[A-Z])[a-z]+(?=[A-Z])'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a dictionary to store the frequency of each character in the second string\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Create a list of characters to be removed from the first string\n    to_remove = []\n    for char in string:\n        if freq[char] > 1:\n            to_remove.append(char)\n    \n    # Remove the characters from the first string\n    for char in to_remove:\n        string = string.replace(char, '')\n    \n    # Convert the string to a list of integers\n    final_list = [ord(char) for char in string]\n    \n    return final_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the first string\n    freq = {}\n    for char in string:\n        freq[char] = freq.get(char, 0) + 1\n\n    # create a list of the characters in the second string\n    char_set = set(string)\n\n    # create a list of the characters in the first string that should be removed\n    remove_chars = [char for char in string if freq[char] > 1 and char in char_set]\n\n    # remove the characters from the first string\n    for char in remove_chars:\n        string = string.replace(char, \"\")\n\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = \"\"\n    char_set = set(string)\n    \n    for char in string:\n        if char not in char_set:\n            result += char\n            \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count = 0\n    for char in string:\n        if char in string[count:]:\n            continue\n        else:\n            count += 1\n            string = string[:count] + string[count+1:]\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # converting the second string into a set\n    set_chars = set(string)\n    \n    # converting the first string into a list\n    list_chars = list(string)\n    \n    # loop through the first string and remove characters from the list\n    for i in range(len(list_chars)):\n        if list_chars[i] in set_chars:\n            list_chars.pop(i)\n            i -= 1\n    \n    # convert the list back to a string\n    new_string = ''.join(list_chars)\n    \n    # return the new string\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of all possible characters in the first string\n    first_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    \n    # Convert the second string to a set to remove duplicates and convert it to a list\n    second_set = set(string)\n    second_list = list(second_set)\n    \n    # Iterate over the characters in the first string and check if they are present in the second list\n    for char in first_chars:\n        if char in second_list:\n            # If a character is present in the second list, remove it from the first string\n            first_chars.remove(char)\n    \n    # Convert the first list of characters back to a string and return it\n    return ''.join(first_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if i not in string_list:\n            string_list[i] = 0\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Get the list of characters from the first string\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n\n    # Get the list of characters from the second string\n    char_list_2 = [char for char in string]\n\n    # Create a new string without the common characters from both strings\n    new_string = ''.join([char for char in char_list if char not in char_list_2])\n\n    # Convert the new string to a list of integers\n    int_list = [ord(char) for char in new_string]\n\n    # Convert the list of integers back to a list of characters\n    result = [chr(int) for int in int_list]\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string, no_of_chars): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [string[i] for i in range(no_of_chars) if string[i] not in string[no_of_chars:]]\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the modified string\n    modified_string = []\n    # Initialize a set to store the characters in the second string\n    second_set = set(string)\n    # Iterate through each character in the first string\n    for char in string:\n        # If the character is not present in the second string, add it to the modified string\n        if char not in second_set:\n            modified_string.append(char)\n    # Convert the modified string to a list and return it\n    return list(modified_string)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # iterate through the dictionary to check for any duplicates\n    for num, freq in freq_dict.items():\n        if freq > 1:\n            return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to keep track of unique numbers\n    unique_nums = set()\n    # iterate through the array\n    for num in arraynums:\n        # check if the number is already in the set\n        if num in unique_nums:\n            # if it is, return True\n            return True\n        else:\n            # otherwise, add it to the set\n            unique_nums.add(num)\n    # if the loop completes without finding any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_set = set()\n    for num in arraynums:\n        if num in hash_set:\n            return True\n        hash_set.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Initialize a set to store the elements of the array\n    unique_nums = set()\n\n    # Iterate over the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n\n    # Check if there are any duplicates in the set\n    if len(unique_nums) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n    \n    # if the length of the set is less than the length of the original array, there are duplicates\n    if len(unique_nums) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    duplicates = []\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        duplicates.append(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the index of each element in the array\n    indexdict = {}\n    for i in range(len(arraynums)):\n        if arraynums[i] in indexdict:\n            return True\n        else:\n            indexdict[arraynums[i]] = i\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    # Loop through the array and increment the frequency of each element in the dictionary\n    for num in arraynums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    \n    # Check if any element has a frequency greater than 1\n    for num, freq in freq_dict.items():\n        if freq > 1:\n            return True\n    \n    # If no element has a frequency greater than 1, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 7 or x == 11: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x in [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]:\n        return \"Yes, it is a woodball.\"\n    else:\n        return \"No, it is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return \"Woodall number\"\n    else:\n        return \"Not a woodall number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # define the list of possible woodball numbers\n    woodball_numbers = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000]\n\n    # check if the number is in the list\n    if x in woodball_numbers: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    if x % 10 == 2 or x % 10 == 7 or x % 10 == 9:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 5 == 0 and x % 15 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the set of prime numbers less than 1000\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Check if the given number is a prime number\n    if x in primes:\n        return True\n\n    # Check if the given number is a sum of prime numbers less than 1000\n    else:\n        for prime in primes:\n            if x % prime == 0:\n                return True\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the number is divisible by 10 or not\n    if x % 10 == 0: \n        return \"The given number is a woodball.\"\n    else: \n        return \"The given number is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    elif x % 3 == 0:\n        return False\n    elif x % 5 == 0:\n        return False\n    elif x % 7 == 0:\n        return False\n    elif x % 11 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = abs(num)  # To make sure the input is always positive\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num + reverse * 2 == 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Convert the string to a list of characters\n    num_list = list(num_str)\n\n    # Reverse the list\n    num_list.reverse()\n\n    # Convert the list back to a string\n    num_str = ''.join(num_list)\n\n    # Convert the string to an integer\n    num_int = int(num_str)\n\n    # Check if the number is one less than twice its reverse\n    if num_int < 2 * num_int:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num = num // 10\n    return num == 1 and reversed_num < num * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n\n    # convert num to integer and then convert it to a string\n    num_str = str(num)\n\n    # reverse the string and convert it back to integer\n    for i in range(len(num_str)-1, -1, -1):\n        reverse = reverse * 10 + int(num_str[i])\n\n    # check if the sum of the original number and its reverse is equal to one less than twice its reverse\n    if num + reverse == 2 * reverse - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 10:\n        return False\n    else:\n        reverse = 0\n        temp = num\n        while temp > 0:\n            reverse = reverse * 10 + temp % 10\n            temp //= 10\n        return reverse == 10 + num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    temp = num\n    \n    while temp!= 0:\n        digit = temp % 10\n        reverse_num = reverse_num * 10 + digit\n        temp //= 10\n        \n    if reverse_num == 2 * num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2 * rev(num - 1))"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < 2 * (int(str(num)[::-1]) + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # convert the number to a string\n    num_str = str(num)\n    \n    # reverse the string and convert it back to an integer\n    reverse_num = int(num_str[::-1])\n    \n    # check if the original number is one less than twice its reverse\n    if num - 1 < 2 * reverse_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # calculate the reverse of the given number\n    rev_num = 0\n    temp = num\n    while temp!= 0:\n        remainder = temp % 10\n        rev_num = rev_num * 10 + remainder\n        temp = temp // 10\n    \n    # check if the given number is one less than twice its reverse\n    if num < 2 * rev_num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            count = 1\n        elif arr[i] == max_num:\n            count += 1\n        if count > 1:\n            break\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Initialize a variable to store the largest number formed with the given digits\n    max_num = 0\n\n    # Loop through each digit in the list\n    for num in arr:\n\n        # Convert each digit to an integer\n        num = int(num)\n\n        # Check if the current number is larger than the current largest number\n        if num > max_num:\n\n            # Update the largest number to the current number\n            max_num = num\n\n    # Return the largest number formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        arr.sort()\n        max_num = 0\n        for i in range(n):\n            if arr[i] > max_num:\n                max_num = arr[i]\n        return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    max_num_list = []\n    for i in range(1,len(arr)+1):\n        num = 0\n        for j in range(i):\n            num += int(arr[j])\n        if num > max_num:\n            max_num = num\n            max_num_list = [num]\n        elif num == max_num:\n            max_num_list.append(num)\n    return max_num_list\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize max_num to be the smallest possible number\n    max_num = 0\n    \n    # Loop through each digit in the list\n    for digit in arr:\n        # Multiply max_num by 10 to move it to the next digit in the number\n        max_num *= 10\n        \n        # Add the digit to max_num\n        max_num += digit\n    \n    # Return the largest number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in arr:\n        max_num += i\n        if max_num >= 10:\n            max_num = 0\n        else:\n            break\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i] * (10**(len(arr)-i-1))\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        print(\"Both numbers are zero.\")\n        return True\n    elif x == 0:\n        print(\"The first number is zero.\")\n        return False\n    elif y == 0:\n        print(\"The second number is zero.\")\n        return False\n    elif x > 0 and y < 0 or x < 0 and y > 0:\n        print(\"The two numbers have opposite signs.\")\n        return True\n    else:\n        print(\"The two numbers have same signs.\")\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x<0 and y<0) or (x>0 and y>0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>=0 and y>=0) or (x<=0 and y<=0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x >= 0)!= (y >= 0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y >= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0) ^ (y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y >= 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number and False otherwise.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % (i**2)!= 0:\n                return False\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    while n > 0:\n        if n % 2 == 0:\n            a = a + b\n        else:\n            b = b + a\n        n = n // 2\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0: \n        return False\n    if n == 1:\n        return True\n    for i in range(1, n+1):\n        if (i*(i**2-1))**0.5!= i**2:\n            return False\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = (8 * n * n - 7) // 2\n    return oct_num\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = 0\n    i = 1\n    while i <= n:\n        oct_num = is_octagonal(i)\n        i += 1\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('n must be a positive integer.')\n    \n    # Calculate the nth octagonal number\n    octagonal_n = 0\n    for i in range(1, n+1):\n        octagonal_n += 2*i*i-1\n    \n    return octagonal_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal = 0\n    while i <= n:\n        octagonal += (i*i*i)\n        i += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    b = 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is less than 0\n    if n < 0:\n        return \"Invalid input. n must be a non-negative integer.\"\n    \n    # Calculate the nth octagonal number\n    octagonal_num = ((n * (3 * n - 1)) ** 0.5) - 1\n    \n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    This function checks whether a given number is an octagonal number or not.\n\n    Parameters:\n        n (int): An integer\n\n    Returns:\n        bool: True if the given number is an octagonal number, False otherwise.\n    \"\"\"\n    if n % 12 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the count of substrings of length i\n    counts = defaultdict(int)\n    \n    # Iterate through all possible substrings of s\n    for i in range(len(s)):\n        # Compute the sum of digits in the substring\n        substring_sum = sum(int(d) for d in s[i:i+len(s)//2])\n        \n        # If the sum is equal to the length of the substring, increment the count\n        if substring_sum == len(s):\n            counts[len(s)] += 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    substrings = defaultdict(int)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            digits = sum(int(digit) for digit in substring)\n            substrings[digits] += 1\n\n    return sum(1 for count in substrings.values() if count >= 2)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digits = defaultdict(int)\n    for char in s:\n        digits[int(char)] += 1\n        \n    count = 0\n    for digit in range(10):\n        count += min(digits[digit], digits[10-digit])\n        \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    substrings = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if len(set(substring)) == len(substring) and sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n                substrings[substring] += 1\n    return count, substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in s:\n        digit_count[int(i)] += 1\n        \n    count = 0\n    for i in range(1, len(s)+1):\n        for j in range(i, len(s)+1):\n            substring = s[j-i:j]\n            if sum(int(digit) for digit in substring) == i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i, char in enumerate(s):\n        digit_count[ord(char) - ord('0')] += 1\n    \n    total_count = 0\n    for count in digit_count.values():\n        total_count += count\n    \n    return total_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the count of substrings with a given digit sum\n    digit_sum = defaultdict(int)\n\n    # Iterate through the string and calculate the digit sum for each substring\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the digit sum for the current substring\n            digit_sum[sum(int(c) for c in s[i:j+1])] += 1\n\n    # Return the count of substrings with a digit sum equal to their length\n    return sum(1 for count in digit_sum.values() if count > 0)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(map(int, s[i:j])) == j-i:\n                count[j] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    dp = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            dp[int(substring)] += 1\n\n    for key, value in dp.items():\n        if sum(int(digit) for digit in str(key)) == len(str(key)):\n            count += value\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings of each length\n    count = defaultdict(int)\n    # Loop through the characters in the string\n    for i in range(len(s)):\n        # Loop through the remaining characters in the string\n        for j in range(i, len(s)):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(int(c) for c in s[i:j+1]) == len(s[i:j+1]):\n                # Increment the count of substrings of this length\n                count[len(s[i:j+1])] += 1\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(smallest_num(xs[1:]), xs[0])"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as an argument and returns the smallest number in the list.\n    '''\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    # Iterate over the list from the second element\n    for i in range(1, len(xs)):\n        # If the current element is smaller than the current smallest, update the smallest number\n        if xs[i] < smallest:\n            smallest = xs[i]\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and returns the maximum difference between the pairs in the list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = set()\n    for pair in test_list:\n        pairs.add(pair)\n    max_diff = float('-inf')\n    for pair in pairs:\n        for other_pair in pairs:\n            if pair!= other_pair and pair[1] > other_pair[0]:\n                diff = abs(pair[0] - other_pair[0])\n                max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] - test_list[i][0] > max_diff:\n                max_diff = test_list[j][0] - test_list[i][0]\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Create a new list with the same elements as the input list, but sorted by the second value\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        if isinstance(lst, list):\n            return sum([flatten(x) for x in lst])\n        else:\n            return lst\n    \n    return flatten(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == list:\n        flattened_list = []\n        for element in data_list:\n            if type(element) == list:\n                flattened_list.extend(recursive_list_sum(element))\n            else:\n                flattened_list.append(element)\n        return sum(flattened_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten(lst):\n        if isinstance(lst, list):\n            return [item for sublist in lst for item in flatten(sublist)]\n        else:\n            return [lst]\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(lst):\n        \"\"\"\n        Flatten a list recursively.\n        \"\"\"\n        if isinstance(lst, list):\n            for sub_lst in lst:\n                flatten(sub_lst)\n        else:\n            yield lst\n    \n    # flatten the list\n    flat_list = list(flatten(data_list))\n    \n    # sum the flattened list\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Define a recursive function to flatten the list and sum its elements\n    def flatten_and_sum(lst):\n        if not lst:\n            return 0\n        elif isinstance(lst[0], list):\n            return flatten_and_sum(lst[0]) + flatten_and_sum(lst[1:])\n        else:\n            return lst[0] + flatten_and_sum(lst[1:])\n    \n    # Call the flatten_and_sum function to flatten the list and sum its elements\n    return flatten_and_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list contains only one element, return that element\n    if len(data_list) == 1:\n        return data_list[0]\n\n    # Recursive case: Concatenate the first element with the flattened rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        result = []\n        for element in lst:\n            if isinstance(element, list):\n                result.extend(flatten(element))\n            else:\n                result.append(element)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list, depth=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item, depth + 1)\n        else:\n            total += item\n    return total"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    :param lst: list to count positive numbers in\n    :return: number of positive numbers in the list\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes in a list as an argument and counts the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return 2*n+1\n    \n    return helper(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n\n    Args:\n        n (int): The upper limit of the set of Bell numbers to consider.\n\n    Returns:\n        int: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n    def recursive_bell_number(n, a, b):\n        \"\"\"\n        Compute the number of ways to partition a set of Bell numbers.\n\n        Args:\n            n (int): The upper limit of the set of Bell numbers to consider.\n            a (int): The current value of the partition variable.\n            b (int): The previous value of the partition variable.\n\n        Returns:\n            int: The number of ways to partition the set of Bell numbers.\n        \"\"\"\n        if n == 0:\n            return 1\n\n        if a > b:\n            raise ValueError(\"a cannot be greater than b\")\n\n        if a == 0:\n            return recursive_bell_number(n, b, b)\n\n        if a == b:\n            return recursive_bell_number(n-1, a-1, b)\n\n        return recursive_bell_number(n-1, a, b-1) + recursive_bell_number(n-1, a-1, b)\n\n    return recursive_bell_number(n, n, 0)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (n * (n - 1) // 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = {0, 1}\n    bell_set = bell_set.union(set(range(2, n+1)))\n    count = 0\n    for i in range(2, n+1):\n        if i in bell_set:\n            count += 1\n        bell_set = bell_set.union(set(range(2*i, n+1, i)))\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def count_ways(b, k):\n        if k == 0:\n            return 1\n        elif b == k:\n            return 1\n        elif b < k:\n            return 0\n\n        count = 0\n        for i in range(b+1, k+1):\n            count += count_ways(b, i-1)\n        return count\n\n    bell_numbers = [i for i in range(1, n+1)]\n    return count_ways(0, max(bell_numbers))\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n\nprint(bell_number(5))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    # Initialize the count variable to zero\n    count = 0\n    \n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Count the number of ways to partition the current Bell number into two parts\n        count += (n-i) * i // 2\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize an array to store the count of ways\n    count = [0] * (n + 1)\n    # Initialize the count of ways for 0 to n\n    for i in range(1, n + 1):\n        count[i] = i\n    # Initialize the count of ways for 1 to n\n    for i in range(2, n + 1):\n        count[i] += count[i - 1]\n    # Return the count of ways for n\n    return count[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (1 + bell_number(n-1) + bell_number(n-2))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    else:\n        if A[0] < A[1]:\n            for i in range(1, n):\n                if A[i] >= A[i-1]:\n                    return False\n            return True\n        else:\n            for i in range(1, n):\n                if A[i] <= A[i-1]:\n                    return False\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    \n    if A[0] > A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    It returns True if the array is monotonic and False otherwise.\n\n    If the array is monotonic, then for every i <= j, the following condition is satisfied:\n    A[i] <= A[j] if i < j\n\n    For example, [1, 2, 3, 4, 5] is monotonic because the condition is satisfied for every i <= j.\n    '''\n\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # Check if the array has only two elements\n    if len(A) == 2:\n        if A[0] <= A[1]:\n            return True\n        else:\n            return False\n\n    # Check if the array has three or more elements\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(n - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    if A[0] == A[-1]: \n        return is_Monotonic(A[1:-1])\n    if A[0] < A[-1]: \n        for i in range(1, len(A)-1): \n            if A[i] < A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)-1): \n            if A[i] > A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Check whether the given array is monotonic or not.\n    A is a list of numbers.\n    Return True if it is monotonic, False otherwise.\n    '''\n\n    if len(A) == 1:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n    elif A[0] > A[1]:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n    else:\n        return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(n-1):\n        if A[i] >= A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Initialize a variable to store the result\n    result = False\n    # Initialize two pointers for the lists\n    i = 0\n    j = 0\n    # Loop through each element in the sublist\n    while j < len(s):\n        # If the current element is the same as the next element in the list, increment both pointers\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        # If the current element is not the same as the next element in the list, reset both pointers to the beginning of the list\n        else:\n            i = 0\n            j = 0\n    # If we have looped through the entire sublist without finding a mismatch, the sublist is a sublist of the list\n    if i == len(s):\n        result = True\n    # Return the result\n    return result"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    elif len(l) == len(s):\n        return l == s\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(s)):\n        if s[i] not in l[i:]:\n            return False\n\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if is_sublist(l[i:], s[1:]):\n                return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        if is_sublist(l[1:], s[1:]):\n            return True\n        else:\n            return False\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[i+1]):\n            count += 1\n    if count == len(Input)-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, otherwise returns False.\n    \"\"\"\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(i) for i in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple_ in Input:\n        if len(tuple_)!= len(set(tuple_)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    # Define a function to check whether a tuple has equal length or not\n    def check_length(t):\n        return len(t) == len(set(t))\n\n    # Apply the check_length function to each tuple in the input list\n    for tup in Input:\n        if not check_length(tup):\n            return False\n\n    # If all tuples have equal length, the function returns True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            gap //= 1\n            if gap == 0:\n                break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize variables for the sorting\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    # Iterate through the array until no more swaps are made\n    while swapped:\n        swapped = False\n\n        # Iterate through the array in steps of gap size\n        for i in range(gap):\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        # Decrease the gap size by a factor of 1.3\n        gap = int(gap * 1.3)\n\n        # If the gap is now 1 or less, the array is sorted\n        if gap <= 1:\n            break\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    # Define the default values for the parameters\n    gap = len(nums) // 2  # Set the gap size to half the length of the list\n    swapped = True  # Set the swapped flag to True\n\n    # Loop until the gap size is less than 1 or the list is sorted\n    while gap > 1 or swapped:\n        # Reset the swapped flag to True\n        swapped = False\n\n        # Loop through the list\n        for i in range(len(nums) - gap):\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        # Decrease the gap size by a factor of 1.3\n        gap = int(gap * 1.3)\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): A list of elements to be sorted.\n\n    Returns:\n    The sorted list.\n    \"\"\"\n\n    # Initialize the start and end indices of the range to be sorted.\n    start = 0\n    end = len(nums) - 1\n\n    # While the start and end indices are not equal...\n    while start < end:\n        #...check if the range is sorted.\n        if nums[start] <= nums[end]:\n            # If it is sorted, the algorithm has found the correct position for the\n            # pivot element, so we can exit the loop.\n            break\n\n        # If the range is not sorted, swap the elements at the start and end indices.\n        nums[start], nums[end] = nums[end], nums[start]\n\n        # Update the start and end indices to move the range closer to the pivot.\n        start += 1\n        end -= 1\n\n    # Return the sorted list.\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = min(gap, n // gap)\n\n        for i in range(gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n\n        n -= gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    Args:\n        nums: A list of elements to be sorted.\n\n    Returns:\n        A sorted list of elements.\n    '''\n\n    gap = len(nums) // 2\n    while gap > 0:\n        for i in range(gap, len(nums)):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n        gap = gap // 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        gap = (gap + n) // 2\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = (gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize gap to a large number\n    gap = n\n\n    # Traverse the array\n    while gap > 1:\n        # Find the largest gap\n        for i in range(n):\n            if nums[i] > nums[i+gap]:\n                # Swap adjacent elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        # Decrease gap size\n        gap = int(gap / 1.3)\n\n    # Print the sorted array\n    print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Convert the given number to a list of digits\n    num_list = list(str(n))\n    \n    # Check if the number is divisible by 26\n    if n % 26 == 0:\n        return \"The given number is divisible by 26.\"\n        \n    # Check if the number is divisible by 13\n    elif n % 13 == 0:\n        return \"The given number is divisible by 13.\"\n        \n    # Check if the number is divisible by 7\n    elif n % 7 == 0:\n        return \"The given number is divisible by 7.\"\n        \n    # Check if the number is divisible by 5\n    elif n % 5 == 0:\n        return \"The given number is divisible by 5.\"\n        \n    # Check if the number is divisible by 3\n    elif n % 3 == 0:\n        return \"The given number is divisible by 3.\"\n        \n    # Check if the number is divisible by 2\n    elif n % 2 == 0:\n        return \"The given number is divisible by 2.\"\n        \n    # Check if the number is divisible by 1\n    elif n % 1 == 0:\n        return \"The given number is divisible by 1.\"\n        \n    # Check if the number is divisible by 4\n    elif n % 4 == 0:\n        return \"The given number is divisible by 4.\"\n        \n    # Check if the number is divisible by 6\n    elif n % 6 == 0:\n        return \"The given number is divisible by 6.\"\n        \n    # Check if the number is divisible by 8\n    elif n % 8 == 0:\n        return \"The given number is divisible by 8.\"\n        \n    # Check if the number is divisible by 9\n    elif n % 9 == 0:\n        return \"The given number is divisible by 9.\"\n        \n    # Check if the number is divisible by 10\n    elif n % 10 == 0:\n        return \"The given number is divisible by 10.\"\n        \n    # Check if the number is divisible by 11\n    elif n % 11 == 0:\n        return \"The given number is divisible by 11.\"\n        \n    # Check if the number is divisible by 12\n    elif n % 12 == 0:\n        return \"The given number is divisible by 12.\"\n        \n    # Check if the number is divisible by 14\n    elif n % 14 == 0:\n        return \"The given number is divisible by 14.\"\n        \n    # Check if the number is divisible by 15\n    elif n % 15 == 0:\n        return \"The given number is divisible by 15.\"\n        \n    # Check if the number is divisible by 16\n    elif n % 16 == 0:\n        return \"The given number is divisible by 16.\"\n        \n    # Check if the number is divisible by 17\n    elif n % 17 == 0:\n        return \"The given number is divisible by 17.\"\n        \n    # Check if the number is divisible by 18\n    elif n % 18 == 0:\n        return \"The given number is divisible by 18.\"\n        \n    # Check if the number is divisible by 19\n    elif n % 19 == 0:\n        return \"The given number is divisible by 19.\"\n        \n    # Check if the number is divisible by 20\n    elif n % 20 == 0:\n        return \"The given number is divisible by 20.\"\n        \n    # Check if the number is divisible by 21\n    elif n % 21 == 0:\n        return \"The given number is divisible by 21.\"\n        \n    # Check if the number is divisible by 22\n    elif n % 22 == 0:\n        return \"The given number is divisible by 22.\"\n        \n    # Check if the number is divisible by 23\n    elif n % 23 == 0:\n        return \"The given number is divisible by 23.\"\n        \n    # Check if the number is divisible by 24\n    elif n % 24 == 0:\n        return \"The given number is divisible by 24.\"\n        \n    # Check if the number is divisible by 25\n    elif n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1): \n        if i**2 + n - i**2 == n: \n            return True \n    return False \n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # initialize variables\n    prev_square = 0\n    curr_square = 0\n    result = False\n\n    # check if n is a positive integer\n    if n < 0 or not n.isdigit():\n        return \"Invalid input\"\n\n    # find the previous square and the current square\n    while n > 0:\n        curr_square = n**2\n        if curr_square == n:\n            prev_square = n\n            break\n        n -= 1\n\n    # check if the difference is a square\n    if prev_square!= 0:\n        diff_square = n - prev_square\n        if diff_square**2 == n:\n            result = True\n\n    return result"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # calculate the square of the given number\n    square_n = n * n\n    # check whether the square of the given number can be represented as the sum of two squares or not\n    if square_n % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    if n < 0:\n        return \"The given number cannot be represented as the difference of two squares.\"\n\n    sqrt_n = int(n**0.5) + 1\n    squares = []\n\n    for i in range(sqrt_n):\n        for j in range(sqrt_n):\n            squares.append(i**2 + j**2)\n\n    if n in squares:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # base case\n    if n < 1:\n        return \"The number must be greater than or equal to 1.\"\n\n    # check if n can be represented as the difference of two squares\n    square_root = int(n ** 0.5)\n    if n == square_root ** 2 + square_root ** 2:\n        return True\n    elif n == (square_root ** 2 + 1) ** 2 or n == (square_root ** 2 - 1) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        return False\n    # Check if the number is divisible by 3 or 5\n    elif n % 3 == 0 or n % 5 == 0:\n        return False\n    # Check if the number is divisible by 7 or 11\n    elif n % 7 == 0 or n % 11 == 0:\n        return False\n    # If none of the above conditions are true, then the number can be represented as the difference of two squares\n    else:\n        # Find the square of the number\n        square = n * n\n        # Check if the square of the number is even or odd\n        if square % 2 == 0:\n            return False\n        # If the square of the number is odd, then the number cannot be represented as the difference of two squares\n        else:\n            return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(n**0.5)\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Create a dictionary to store the squares of numbers up to n\n    squares = {}\n    for i in range(1, n+1):\n        squares[i] = i*i\n    \n    # Check whether the given number can be represented as the difference of two squares\n    for i in range(1, n+1):\n        if squares[i] - n in squares and squares[i] - n!= n:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    This function takes an integer as input and returns True if it can be represented as the difference of two squares, otherwise it returns False.\n    '''\n    # First, we check if the number is even. If it is, then it cannot be represented as the difference of two squares.\n    if n % 2 == 0:\n        return False\n    \n    # Next, we calculate the square of the number.\n    sq = n ** 0.5\n    \n    # We now check if the difference of two squares is equal to the square of the number.\n    if sq ** 2 == n:\n        return True\n    \n    # If the difference of two squares is not equal to the square of the number, then we cannot represent it as the difference of two squares.\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n    for color in colors:\n        color_count[color] = color_count.get(color, 0) + 1\n    \n    for pattern in patterns:\n        if pattern[0] not in color_count or color_count[pattern[0]] == 0:\n            return False\n        color_count[pattern[0]] -= 1\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a counter for each pattern in the patterns array\n    pattern_count = [0] * len(patterns)\n    \n    # Loop through each color in the colors list\n    for color in colors:\n        # Find the index of the pattern that matches the current color\n        pattern_index = next((index for (pattern, index) in enumerate(patterns) if pattern == color), None)\n        \n        # If the pattern was found, increment the counter for that pattern\n        if pattern_index is not None:\n            pattern_count[pattern_index] += 1\n        \n        # If all patterns have been counted, return True\n        if all(count == len(patterns) for count in pattern_count):\n            return True\n    \n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Create a set of colors and patterns to check for duplicates\n    color_set = set()\n    pattern_set = set()\n\n    # Add all the colors and patterns to the sets\n    for color, pattern in zip(colors, patterns):\n        color_set.add(color)\n        pattern_set.add(pattern)\n\n    # Check if the color set and pattern set are the same\n    return len(color_set) == len(pattern_set)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n-1):\n        if colors[i]!= colors[i+1]:\n            return False\n        if patterns[i]!= patterns[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n    for i in range(n-1):\n        if patterns[i]!= patterns[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the length of the colors array is equal to the length of the patterns array\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize variables to keep track of the current index and the length of the pattern\n    current_index = 0\n    pattern_length = len(patterns[0])\n\n    # Loop through the colors array and compare each color to the pattern at the current index\n    for i, color in enumerate(colors):\n        if color!= patterns[i][current_index]:\n            return False\n        current_index = (current_index + 1) % pattern_length\n\n    # If we make it through the entire colors array without finding a mismatch, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Calculate the sum of the colors in the patterns array\n    total_sum = sum(patterns)\n\n    # Check if the total sum is equal to the total number of colors\n    if total_sum == len(colors):\n        # Check if each pattern in the patterns array is present in the colors array\n        for pattern in patterns:\n            if pattern not in colors:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n    \n    # Count the frequency of each color in the colors array\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n    \n    # Check if the colors in the patterns array are present in the color_count dictionary\n    for pattern in patterns:\n        if pattern not in color_count:\n            return False\n    \n    # Check if the color_count dictionary has the same count for each pattern\n    for pattern in patterns:\n        if color_count[pattern]!= patterns.count(pattern):\n            return False\n    \n    # If all the checks pass, the colors in the patterns array are all present and match the color_count dictionary\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the number of colors is same as the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Initialize a variable to keep track of the current pattern\n    current_pattern = 0\n    \n    # Loop through the colors and patterns arrays\n    for color, pattern in zip(colors, patterns):\n        # Check if the current color matches the pattern in the current pattern\n        if color!= pattern[current_pattern]:\n            return False\n        # Increment the current pattern\n        current_pattern += 1\n    \n    # If the loop completes without finding any mismatches, then the colors and patterns match\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n\n    count = [0] * 5\n    for color in colors:\n        count[color] += 1\n\n    for pattern in patterns:\n        if count[pattern[0]] == 0:\n            return False\n        count[pattern[0]] -= 1\n        if count[pattern[1]] == 0:\n            return False\n        count[pattern[1]] -= 1\n\n    for i in range(2, 5):\n        if count[i]!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input.\n    It returns a list of tuples where all elements of each tuple are divisible by K.\n    '''\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            tuples.append(tup)\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        divisible_count = 0\n        for num in tup:\n            if num % K == 0:\n                divisible_count += 1\n            if divisible_count == len(tup):\n                result.append(tup)\n                break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    :param test_list: list of tuples\n    :param K: integer\n    :return: list of tuples\n    \"\"\"\n    return [tuple(t) for t in test_list if all(t[i] % K == 0 for i in range(len(t)))]"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input, and returns a new list of tuples that have all elements divisible by K from the input list.\n    '''\n    # initialize a list to store the result\n    result = []\n    \n    # iterate through the input list of tuples\n    for t in test_list:\n        # check if all elements of the tuple are divisible by K\n        if all(x % K == 0 for x in t):\n            # if all elements are divisible by K, append the tuple to the result list\n            result.append(t)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                divisible_tuples.append((test_list[i], test_list[j]))\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns a list of all tuples in the input list that have all elements divisible by K.\n    '''\n\n    # Initialize an empty list to store the results\n    result = []\n\n    # Loop through each tuple in the input list\n    for tup in test_list:\n\n        # Check if all elements in the tuple are divisible by K\n        if all(i % K == 0 for i in tup):\n\n            # If all elements are divisible by K, append the tuple to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as an argument and returns True if the number is divisible by 11, else False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns a boolean value indicating whether the number is divisible by 11 or not.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    # Remove all the non-alphanumeric characters from the string\n    s = ''.join(e for e in s if e.isalnum())\n    # Split the string into a list of words\n    words = s.split()\n    # Loop through each word and check its length\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word)\n    # If no odd word was found, print a message\n    if not words:\n        print(\"No odd words found in the string.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"{word} has an odd length\")\n        else:\n            print(f\"{word} has an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 0: # Check if length is even\n            print(f\"{word} is even length.\")\n        else:\n            print(f\"{word} is odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # split the string into a list of words\n    words = s.split()\n\n    # iterate through the list of words and check if the length is odd or even\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"{word} is an odd length\")\n        else:\n            print(f\"{word} is an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Convert string to list of characters\n    s_list = list(s)\n\n    # Count the number of vowels in the word\n    vowels = 0\n    for c in s_list:\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            vowels += 1\n\n    # Check if the length of the word is odd or even\n    if vowels % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # splitting the sentence into words\n    for word in words:\n        if len(word) % 2 == 0:  # checking if length is even\n            return False\n        else:\n            return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word in a given string is odd or even.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(\"The length of the word is even\")\n        else:\n            print(\"The length of the word is odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for char in s:\n        count += 1\n    if count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    words = s.split()  # Split the string into words using space as the delimiter\n    for word in words:\n        if len(word) % 2 == 1:  # If the length of the word is odd, return True\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 24\n    else:\n        return 6 * tetrahedral_number(n-1) + 6 * tetrahedral_number(n-2) - 6 * tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the variables for the calculation\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    # Initialize the variables for the result\n    count = 0\n    # Loop through the numbers from 1 to n-1\n    for i in range(1, n+1):\n        # Calculate the next number in the sequence\n        a = i * (i - 1)\n        b = 2 * (n * n - 4 * n + 4)\n        c = a * b\n        # Calculate the number of divisors of a^3\n        divisor_count = 0\n        for j in range(1, int(a**0.5)+1):\n            if a % j == 0:\n                divisor_count += 1\n        # Check if the number of divisors of a^3 is equal to n-1\n        if divisor_count == n-1:\n            count += 1\n    # Return the result\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def helper(n, p, q, r):\n        if n == 1:\n            return (p + q + r + 1) // 2\n        else:\n            return (helper(n - 1, p - r, q, r) + 1) // 4\n    \n    return helper(n, 1, 1, 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c, d = 0, 1, 0, 0\n    for i in range(1, n+1):\n        a, b, c, d = b, c+b, d+a, a\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 4 * n * (n - 1) * (n - 2) // 6\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 20\n    elif n == 3:\n        return 50\n    else:\n        return 120 + tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    t = 0\n    i = 1\n    while i <= n:\n        t += i\n        i += 1\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 14\n    elif n == 3:\n        return 120\n    elif n == 4:\n        return 243\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4*n*(n-1)*(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Find the difference between the square of i and the cube of i^2\n        diff = i**2 - i**3\n\n        # Add the difference to the sum\n        sum += diff\n\n    return sum"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function calculates the volume of a sphere with given radius r.\n    \"\"\"\n    # Calculate the surface area of the sphere\n    surface_area = (4/3) * math.pi * r**3\n    \n    # Calculate the volume of the sphere\n    volume = (4/3) * math.pi * r**3\n    \n    # Return the volume of the sphere\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of the sphere as an argument and returns its volume.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    sum_val = 0\n    for char in strr:\n        sum_val += ord(char)\n    return chr((sum_val % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    sum = 0\n    for char in strr:\n        ascii_value = ord(char)\n        sum = (sum + ascii_value) % 26\n    return chr(sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initialize the sum variable to 0\n    sum_ASCII = 0\n\n    # loop through each character of the string\n    for char in strr:\n        # get the ASCII value of the character\n        ASCII = ord(char)\n\n        # add the ASCII value to the sum variable\n        sum_ASCII += ASCII\n\n        # check if the sum variable is greater than or equal to 26\n        if sum_ASCII >= 26:\n            # if so, subtract 26 from it\n            sum_ASCII -= 26\n\n    # convert the sum variable back to a character\n    char_ASCII = chr(sum_ASCII)\n\n    # return the character as a string\n    return char_ASCII"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    # initialize the sum of ASCII values of all characters as 0\n    sum_of_ASCII = 0\n\n    # iterate through each character of the string\n    for char in strr:\n        # add the ASCII value of each character to the sum\n        sum_of_ASCII += ord(char)\n\n    # find the character made by adding the ASCII value of all characters modulo 26\n    char = chr(((sum_of_ASCII % 26) + 65) % 91)\n\n    # return the character made\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for char_temp in strr:\n        char += ord(char_temp)\n    char %= 26\n    char_ascii = chr(char + ord('a'))\n    return char_ascii"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize variables\n    char = 0\n    ascii_val = 0\n\n    # Loop through all the characters in the string\n    for i in range(len(strr)):\n\n        # Calculate the ASCII value of the current character\n        ascii_val = ord(strr[i])\n\n        # Add the ASCII value to the current character\n        char += ascii_val\n\n    # Return the character by subtracting the ASCII value of the first character and taking the modulus by 26\n    return chr(char - ord(strr[0]) % 26)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    sum_ASCII = 0\n    \n    for i in range(len(strr)):\n        sum_ASCII += ord(strr[i])\n        \n    return chr((sum_ASCII % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # First number in the sequence is 0\n    first_number = 0\n    # Initialize a list to store the sequence\n    sequence_list = []\n    # Start the sequence with the first number\n    sequence_list.append(first_number)\n    # Loop through n-1 numbers and append each subsequent number to the sequence list\n    for i in range(1, n):\n        # Calculate the next number in the sequence\n        next_number = (first_number + 3) % 2\n        # Append the next number to the sequence list\n        sequence_list.append(next_number)\n        # Update the value of the first number\n        first_number = next_number\n    # Return the nth number in the sequence\n    return sequence_list[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        prev_num = sequence(n-1)\n        return prev_num + 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth number in the Newman Conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    conway_sequence = [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1]*2)\n        else:\n            sequence.append(sequence[-1]+1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    next_sequence = [0] * n\n\n    for i in range(n):\n        next_sequence[i] = sequence[i] * 2 + 1\n\n    for i in range(n):\n        sequence.append(next_sequence[i])\n\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with the first two numbers\n    sequence = [1, 1]\n\n    # loop through the remaining numbers in the sequence\n    for i in range(2, n+1):\n        # calculate the next number in the sequence\n        next_num = 4 * sequence[-1] + sequence[-2]\n\n        # add the next number to the sequence\n        sequence.append(next_num)\n\n    # return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2]\n    for i in range(2, n + 1):\n        next_number = 0\n        for j in range(len(sequence)):\n            if j == 0 or j == len(sequence) - 1:\n                next_number = sequence[j]\n            else:\n                next_number = sequence[j - 1] + sequence[j]\n        sequence.append(next_number)\n    return sequence[-1]\n\n\nn = 1000\nprint(f\"The {n}th number in the newman conway sequence is: {sequence(n)}\")"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    sequence = [2, 3]\n    i = 0\n    while len(sequence) < n:\n        next_sequence = []\n        for j in range(len(sequence) // 2):\n            if sequence[j] % 2 == 0:\n                next_sequence.append(sequence[j] + 1)\n            else:\n                next_sequence.append(sequence[j] - 1)\n        sequence = next_sequence\n        i += 1\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4*math.pi*r**2\n    return s"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Find the surface area of a sphere with radius r.\n    \"\"\"\n    surface_area = (4 * math.pi * r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula to find surface area of a sphere: pi/4 * r^2\n    surface_area = math.pi / 4 * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in the radius of the sphere and returns its surface area.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Define the mathematical constant pi\n    pi = math.pi\n\n    # Calculate the surface area of the sphere\n    surface_area = 4 * pi * r ** 2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # Base calculation for centered hexagonal numbers\n    base = (5 * n * n) + 1\n    \n    # Calculate the hexagonal number\n    hexagonal = base * (2 * n - 1)\n    \n    # Return the centered hexagonal number\n    return hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Convert the input number to a list of digits\n    num_list = [int(digit) for digit in str(n)]\n\n    # Calculate the number of digits in the list\n    num_digits = len(num_list)\n\n    # Initialize the sum of digits to 0\n    total_sum = 0\n\n    # Initialize the sum of squares of digits to 0\n    digit_square_sum = 0\n\n    # Loop through the digits of the number from right to left\n    for digit in reversed(num_list):\n        # Calculate the sum of squares of digits\n        digit_square_sum += digit ** 2\n\n        # If the number of digits is odd, add the current digit to the sum of digits\n        if num_digits % 2!= 0:\n            total_sum += digit\n\n    # Calculate the centered hexagonal number\n    centered_hexagonal = (total_sum + digit_square_sum) / 2\n\n    # Return the centered hexagonal number\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Formula: (6n^2 + 10n + 16)/3\n    # Convert to decimal form and return\n    return (6*n**2 + 10*n + 16)//3"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n\n    Args:\n    n (int): The nth centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n\n    # The centered hexagonal numbers are the squares of the centered odd numbers.\n    # We define the centered odd numbers as 1, 5, 9,..., 25.\n    centered_odd_numbers = list(range(1, 26))\n    centered_odd_numbers = [x ** 2 for x in centered_odd_numbers]\n\n    # The centered hexagonal numbers are centered in the sequence.\n    # We shift the centered hexagonal numbers by n and take the first n elements.\n    centered_hexagonal_numbers = centered_odd_numbers[(n - 1) * 6:]\n\n    return centered_hexagonal_numbers[0]\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Finding the value of n in centered hexagonal number system\n    n = n * (3*n - 1) // 2\n\n    # Using arithmetic operations to find the value of centered hexagonal number\n    centered_hexagonal_number = (5 * n**2 - 3 * n + 6) // 10\n\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431, 1540, 1653, 1770, 1891, 2016, 2145, 2278, 2415, 2556, 2701, 2850, 3003, 3160, 3321, 3486, 3655, 3828, 4005, 4186, 4371, 4560, 4753, 4950, 5151, 5356, 5565, 5778, 6005, 6236, 6471, 6710, 6953, 7200, 7451, 7706, 7965, 8228, 8495, 8766, 9041, 9320, 9603, 9890, 10181, 10476, 10775, 11078, 11385, 11696, 12011, 12330, 12653, 12980, 13311, 13646, 13985, 14328, 14675, 15026, 15381, 15740, 16103, 16470, 16841, 17216, 17595, 17978, 18365, 18756, 19151, 19550, 19953, 20360, 20771, 21186, 21605, 22028, 22455, 22886, 23321, 23760, 24203, 24650, 25101, 25556, 26015, 26478, 26945, 27416, 27891, 28370, 28853, 29340, 29831, 30326, 30825, 31328, 31835, 32346, 32861, 33380, 33903, 34430, 34961, 35496, 36035, 36578, 37125, 37676, 38231, 38790, 39353, 39920, 40491, 41066, 41645, 42228, 42815, 43406, 44001, 44600, 45203, 45810, 46421, 47036, 47655, 48"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth centered hexagonal number is:\", centered_hexagonal_number(n))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_num(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            hex_num = n * (3 * n - 1) // 2\n            return hex_num\n    return centered_hexagonal_num(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case for n=0\n    if n == 0:\n        return 1\n    \n    # Initialize variables\n    x = 0\n    y = n + 1\n    \n    # Loop until x and y are equal\n    while x!= y:\n        # Add y to x and subtract y from y\n        x += y\n        y -= x\n    \n    # Return the value of x\n    return x"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Calculate the formula for centered hexagonal number\n    num = (2 * n * n) + 1\n    den = 6 * n * n - 1\n\n    # Calculate the centered hexagonal number using the formula\n    centered_num = (num / den)\n\n    # Return the centered hexagonal number\n    return centered_num"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a single dictionary \n    that contains all the key-value pairs of the input dictionaries.\n    '''\n    # Create an empty dictionary to store the merged dictionary\n    merged_dict = {}\n    # Loop through each dictionary and add its key-value pairs to the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \n    Parameters:\n    -----------\n    dict1: dict\n        First dictionary to be merged.\n    dict2: dict\n        Second dictionary to be merged.\n    dict3: dict\n        Third dictionary to be merged.\n    \n    Returns:\n    --------\n    dict:\n        Merged dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1: A dictionary.\n    - dict2: A dictionary.\n    - dict3: A dictionary.\n\n    Returns:\n    - A single dictionary that contains all the key-value pairs from the input dictionaries.\n    \"\"\"\n\n    # Create an empty dictionary to store the merged key-value pairs.\n    merged_dict = {}\n\n    # Loop through each key-value pair in the input dictionaries.\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a new dictionary that has all the \n    key-value pairs from all the input dictionaries.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            if key in dict3.keys():\n                merged_dict[key] = [dict1[key], dict2[key], dict3[key]]\n            else:\n                merged_dict[key] = dict1[key]\n        elif key in dict2.keys():\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and merges them into one dictionary.\n\n    :param dict1: First dictionary to be merged.\n    :param dict2: Second dictionary to be merged.\n    :param dict3: Third dictionary to be merged.\n    :return: Merged dictionary containing all the elements of the input dictionaries.\n    \"\"\"\n    # Merge the three dictionaries into one\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    # Sort the keys of the merged dictionary\n    sorted_keys = sorted(merged_dict.keys())\n\n    # Return the sorted merged dictionary\n    return ct.OrderedDict(sorted(merged_dict.items()))"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the elements in the list and the values are their frequencies.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    count_dict = collections.Counter(lst)\n    return count_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.defaultdict(int)\n    for i in list1:\n        freq[i] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n\n    freq_dict = collections.Counter(list1)\n\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    small = float('inf')\n    closest = float('inf')\n    num = N\n\n    # Find the closest smaller number\n    while num > 0:\n        num -= 1\n        if num < small:\n            small = num\n            closest = small\n        elif num - small <= closest - num:\n            closest = num\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = 0\n    for i in range(1, N):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = i\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    smallest_diff = abs(N - smallest)\n    for i in range(1, N):\n        diff = abs(N - i)\n        if diff < smallest_diff:\n            smallest = i\n            smallest_diff = diff\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest = None\n    for i in range(N):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for i in range(1, N):\n        if N - i < smallest:\n            smallest = N - i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    largest = -float('inf')\n\n    for num in range(1, N):\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n        else:\n            return num\n    \n    if smallest!= float('inf'):\n        return smallest\n    else:\n        return largest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n\n    # Initialize a list to store the numbers less than N\n    nums_less_than_N = []\n\n    # Initialize a variable to store the closest smaller number\n    closest_num = None\n\n    # Loop through the numbers from 1 to N-1 and append each smaller number to the list\n    for i in range(1, N):\n        if i < N:\n            nums_less_than_N.append(i)\n        else:\n            break\n\n    # Loop through the list of numbers and find the closest smaller number\n    for num in nums_less_than_N:\n        if closest_num is None or abs(closest_num - num) > abs(closest_num - N):\n            closest_num = num\n\n    # Return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    closest = float('inf')\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n            closest = smallest\n        elif num > largest:\n            largest = num\n            closest = largest\n        elif abs(num - smallest) < abs(num - largest):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    smallest = N\n    largest = N\n    \n    for i in range(1, N+1):\n        if i < smallest:\n            smallest = i\n        elif i > largest:\n            largest = i\n    \n    return min(smallest, largest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Convert the input number to string\n    num = str(N)\n    # Initialize the variable to store the absolute difference between the input and the closest smaller number\n    diff = 10**9 + 1\n    \n    # Iterate through the range of numbers from 1 to 10^5\n    for i in range(1, 10**5):\n        # Check if the current number is smaller than the input number\n        if int(num) < i:\n            # Calculate the absolute difference between the input number and the current number\n            temp_diff = abs(N - i)\n            # If the absolute difference is smaller than the previous absolute difference, update the variable\n            if temp_diff < diff:\n                diff = temp_diff\n                # Update the closest smaller number\n                closest_num = i\n    \n    return closest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = list1\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    longest = 0\n    for word in list1:\n        length = len(word)\n        if length > longest:\n            longest = length\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Check if the sub_str is present in the list of str1\n    if sub_str in str1:\n        print(\"Substring '{}' found in the list of string values.\".format(sub_str))\n    else:\n        print(\"Substring '{}' not found in the list of string values.\".format(sub_str))"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for item in str_list:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present as a substring in {str1}\")\n    else:\n        print(f\"{sub_str} is not present as a substring in {str1}\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    for word in str1:\n        if word.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Split the string into a list of substrings\n    substrings = str1.split(sub_str)\n    # Check if the list has any substrings\n    if len(substrings) > 0:\n        # Return True if the substrings list is not empty\n        return True\n    # Otherwise, return False if the substrings list is empty\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Check if the substring is present in the given string\n    if str1.find(sub_str)!= -1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Initialize variables to store the count of even and odd numbers\n    even_count = 0\n    odd_count = 0\n\n    # Iterate over the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is even or odd\n        if i % 2 == 0:\n            # If the number is even, increment the even count\n            even_count += 1\n        else:\n            # If the number is odd, increment the odd count\n            odd_count += 1\n\n    # Check if the even count is greater than the odd count\n    if even_count > odd_count:\n        # If yes, the number is undulating\n        return \"Even\"\n    else:\n        # If no, the number is not undulating\n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0: \n        return False \n    elif n == 1: \n        return True \n    elif n % 2 == 0: \n        return is_undulating(n//2) \n    else: \n        return is_undulating((n*3)+1) "
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    if n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n/2)\n    else:\n        return is_undulating((n*3)+1)\n\nprint(is_undulating(10)) # Output: True\nprint(is_undulating(9))  # Output: False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    if n == 1:\n        return \"The number is undulating.\"\n    else:\n        return \"The number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Undulating'\n    else:\n        return 'Not undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 10:\n        return False\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Define a custom sorting function\n    def sort_tuples(x):\n        return x[1]\n\n    # Sort the list of tuples using the custom sorting function\n    test_list = sorted(test_list, key=sort_tuples)\n\n    # Return the index of the first value of the smallest tuple\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=lambda x: x[1][1])[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = float('inf')\n    for i, tuple_item in enumerate(test_list):\n        if tuple_item[1] < min_value:\n            min_index = i\n            min_value = tuple_item[1]\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sorting the list of tuples based on the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Returning the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Use the itemgetter function from the operator module to access the second value of each tuple\n    second_values = list(map(itemgetter(1), test_list))\n    # Use the min function from the math module to find the index of the minimum value in the list\n    min_index = min(range(len(second_values)), key=lambda i: second_values[i])\n    # Return the first value of the tuple at the minimum index\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for index, item in enumerate(test_list):\n        if item[1] < test_list[min_index][1]:\n            min_index = index\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on the second value using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: (x[1], x[0]))[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = None\n    for sub_list in lst:\n        if min_length is None or len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')  # initialize minimum length to infinity\n    for sublist in lst:  # iterate through each sublist\n        if len(sublist) < min_len:  # if current sublist is shorter than current minimum length\n            min_len = len(sublist)  # update minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 999999999999999999999999999999\n    for sub_list in lst:\n        if len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Given a list of lists, return the length of the smallest list in the list.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to keep track of the length of the smallest list\n    min_length = float('inf')\n\n    # Loop through each list in the list of lists\n    for sublist in lst:\n\n        # Check if the length of the current sublist is less than the current minimum length\n        if len(sublist) < min_length:\n\n            # Update the minimum length to be the length of the current sublist\n            min_length = len(sublist)\n\n    # Return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Initialize variables\n    count = 0\n    divisor_count = 1\n    \n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Increment count\n            count += 1\n            \n            # Check if i is also a divisor of n\n            if i == n // i:\n                divisor_count += 1\n    \n    # Return the final count\n    return count * divisor_count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Iterate through each element in the flattened list\n    for item in flat_list:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Flatten the list of lists\n    flat_list = [num for sublist in list1 for num in sublist]\n    # Loop through the flattened list and count the frequency of each element\n    for num in flat_list:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Flatten the list of lists\n    flat_lst = [item for sublist in lst for item in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for item in flat_lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create an empty dictionary to store frequency counts\n    freq_dict = {}\n    # loop through each element in the flattened list\n    for element in list1:\n        # if the element is not in the dictionary yet, add it with a count of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # if the element is already in the dictionary, increment its count by 1\n        else:\n            freq_dict[element] += 1\n    # return the dictionary with frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # convert the list to a set to get unique elements\n    unique_elements = set(itertools.chain.from_iterable(list1))\n    \n    # create an empty dictionary to store the frequencies of each element\n    freq_dict = {}\n    \n    # iterate through the unique elements and count their frequency in the list\n    for element in unique_elements:\n        count = list1.count(element)\n        freq_dict[element] = count\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through each element in the flattened list\n    for element in list1:\n        # if the element is not already in the dictionary, add it and set its frequency to 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[element] += 1\n\n    # return the final dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if isinstance(elem, list):\n            for subelem in elem:\n                if subelem in freq:\n                    freq[subelem] += 1\n                else:\n                    freq[subelem] = 1\n        else:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if elem in freq:\n            freq[elem] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[elem] = 1\n    # Return the frequency dictionary\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    total = 1\n    for num in numbers:\n        total *= num\n\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result // len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize an empty string to hold the binary equivalent\n    binary_string = \"\"\n\n    # Iterate through the decimal number and append each digit as a binary digit to the binary string\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n //= 2\n\n    # If the binary string is empty, return \"0\" since any non-zero decimal number must have at least one binary digit\n    if not binary_string:\n        return \"0\"\n\n    # Remove any leading zeros from the binary string\n    while binary_string[0] == \"0\":\n        binary_string = binary_string[1:]\n\n    # Return the binary string\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize variables\n    decimal = n\n    binary = \"\"\n\n    # Convert decimal to binary using while loop\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        binary_representation = ''\n        temp = n\n        while temp > 0:\n            remainder = temp % 2\n            binary_representation = str(remainder) + binary_representation\n            temp = temp // 2\n        return binary_representation"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Converts decimal number to binary string without leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to binary\n    binary = bin(n)[2:]\n    # If the binary number has leading zeros, remove them\n    while binary[0] == '0':\n        binary = binary[1:]\n    # Convert the binary number to a string and return it\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return 'Not a positive decimal number.'\n    else:\n        binary_num = ''\n        while n > 0:\n            binary_num = str(n % 2) + binary_num\n            n //= 2\n        return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary equivalent as a string.\n    The function does not include any leading zeros in the binary representation.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize the two variables to store the current and next smallest palindrome\n    smallest = 0\n    next_smallest = 0\n    \n    # Find the smallest palindrome less than or equal to num\n    while smallest <= num:\n        next_smallest = (smallest * 10) + num % 10\n        num //= 10\n        if next_smallest < smallest:\n            break\n        smallest = next_smallest\n    \n    # Return the next smallest palindrome\n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    A function to check if a number is a palindrome.\n    \"\"\"\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    A function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 10:\n        return 10\n    if num < 100:\n        return 100\n    if num < 1000:\n        return 1000\n    for i in range(1, int(num**0.5) + 1):\n        if is_palindrome(num - i) and is_palindrome(num + i):\n            return num - i\n    return -1\n\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number: \"))\n    print(\"Next smallest palindrome is:\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Find the next smallest palindrome less than or equal to the given number\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            break\n\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindromes = []\n    for i in range(1, 10):\n        for j in range(10):\n            palindromes.append(100 * i + j)\n    palindromes.append(0)\n    palindromes.sort()\n    for i in range(len(palindromes)):\n        if palindromes[i] < num:\n            return palindromes[i]\n    return None\n\nnum = int(input(\"Enter a positive integer: \"))\nif num <= 0:\n    print(\"Invalid input!\")\nelse:\n    print(\"Next smallest palindrome:\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_greater_than_num(n):\n        return is_palindrome(n + 1) and not is_palindrome(n - 1)\n\n    def is_greater_than_num_and_smaller_than_num(n):\n        return is_greater_than_num(n) and n > num\n\n    next_num = num\n    while True:\n        if is_greater_than_num_and_smaller_than_num(next_num):\n            break\n        next_num += 1\n\n    return next_num - 1\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    print(f\"The next smallest palindrome of {num} is: {result}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    # Find the smallest palindrome greater than or equal to the given integer\n    min_palindrome = 10**(len(str(num))+1)\n    while not is_palindrome(min_palindrome):\n        min_palindrome += 1\n\n    # Find the next smallest palindrome greater than or equal to the given integer\n    next_min_palindrome = min_palindrome + 1\n    while not is_palindrome(next_min_palindrome) or next_min_palindrome <= num:\n        next_min_palindrome += 1\n\n    return next_min_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Initialize a flag variable to keep track of whether the number is a palindrome or not\n    is_palindrome = True\n\n    # Convert the input number to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Loop through each character in the string\n    for char in num_str:\n        # Check if the character is different from its corresponding odd-indexed character\n        if int(char)!= int(num_str[num_str.index(char)+1]):\n            # If not, set the flag variable to False and exit the loop\n            is_palindrome = False\n            break\n\n    # Check if the number is already a palindrome\n    if is_palindrome:\n        return num\n\n    # Find the next smallest palindrome by adding the original number to 1 and then converting it to a string\n    next_num_str = str(int(num)+1)[::-1]\n\n    # Loop through each character in the next smallest palindrome string\n    for char in next_num_str:\n        # Check if the character is different from its corresponding odd-indexed character\n        if int(char)!= int(next_num_str[next_num_str.index(char)+1]):\n            # If not, return the next smallest palindrome\n            return int(num)+1\n\n    # If no next smallest palindrome is found, return the original number\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Create a list of numbers from 1 to 9 (inclusive)\n    nums = [1] * 9\n\n    # Initialize variables for the current and next smallest palindromes\n    current = 999999999\n    next_current = 1000000000\n\n    # Loop through the numbers from 1 to 8 (inclusive) and check if the current number is a palindrome\n    for i in range(1, 9):\n        if nums[i] == nums[i-1]:\n            current = nums[i]\n            break\n\n    # Calculate the next smallest palindrome\n    for i in range(1, 9):\n        if current < 100000000:\n            break\n        if current % 10 == 9:\n            next_current = current * 10 - 9\n        else:\n            next_current = current * 10 + 1\n        if next_current > 999999999:\n            next_current = current * 10 - 1\n        if next_current % 10 == 9:\n            break\n        current = next_current\n\n    # Return the next smallest palindrome\n    return next_current"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Reverse the string\n    num_str = num_str[::-1]\n\n    # Convert the string back to an integer\n    num = int(num_str)\n\n    # Find the next smallest palindrome\n    i = 1\n    while True:\n        new_num = num + i\n        new_num_str = str(new_num)\n\n        # Reverse the new string\n        new_num_str = new_num_str[::-1]\n\n        # Convert the new string back to an integer\n        new_num = int(new_num_str)\n\n        # Check if the new number is a palindrome\n        if new_num == new_num_str:\n            return new_num\n\n        i += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = [int(digit) for digit in str(num)]\n    reverse_digits = digits[::-1]\n    for i in range(len(digits)):\n        if digits[i] < reverse_digits[i]:\n            digits[i], reverse_digits[i] = reverse_digits[i], digits[i]\n            break\n    digits = [str(digit) for digit in digits]\n    return int(''.join(digits))"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k < 1:\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError('Array length should be greater than or equal to k')\n    elif k < 1:\n        raise ValueError('k should be greater than or equal to 1')\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Return the kth element\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    # Check if k is valid\n    if k < 1 or k > len(arr):\n        return None\n\n    # Initialize variables\n    low = 1\n    high = len(arr)\n\n    # Perform binary search\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid - 1] <= k <= arr[mid]:\n            return arr[mid - 1]\n        elif arr[mid - 1] > k:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    # If we reach here, k was not found in the array\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    for i in range(1, n+1):\n        if i <= k:\n            print(f\"{i}: {arr[i-1]}\")"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a number k as input, and returns the kth element of the array.\n    The input array is assumed to have at least k elements.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    else:\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return arr[left]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert the first letter to lowercase\n    result = word[0].lower()\n    \n    # loop through the rest of the letters in the word\n    for i in range(1, len(word)):\n        # if the letter is uppercase, append a space before it\n        if word[i].isupper():\n            result +=''\n        # append the lowercase letter\n        result += word[i].lower()\n    \n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[:i].lower() + word[i:i+1].upper() for i in range(len(word)) if word[i]!= '_'])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the string into words\n    words = word.split('_')\n    # Capitalize the first word\n    words[0] = words[0].capitalize()\n    # Join the words back into a string\n    camel_case_word = '_'.join(words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word by underscores\n    words = word.split('_')\n    # capitalize the first letter of each word\n    result = ''.join([word.capitalize() for word in words])\n    # return the camel case string\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_words = []\n    for word in words:\n        camel_words.append(word.capitalize())\n    return ''.join(camel_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0 or (i > 0 and word[i]!= '_'):\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the string into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    return ''.join(p.capitalize() for p in parts)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    components = word.split('_')\n    camel_components = []\n    for component in components:\n        if component.isupper():\n            camel_components.append(component.lower())\n        else:\n            camel_components.append(component)\n    return ''.join(camel_components)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the Eulerian number\n    a = 0\n    \n    # Calculate the first term of the sequence\n    a += (n**2 + m**2 + 2*n*m + 2*m**2 - 3*n*m**2) / 2\n    \n    # Calculate the second term of the sequence\n    a += (n**2 - m**2 + 2*n*m - 2*m**2 + 3*n*m**2) / 2\n    \n    # Return the final value of the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1: \n        return m \n    elif n > 1: \n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function finds the Eulerian number a(n, m).\n\n    Inputs:\n    n: an integer representing the number of rows in the matrix\n    m: an integer representing the number of columns in the matrix\n\n    Output:\n    The Eulerian number a(n, m)\n    '''\n\n    # Create a list of lists to store the matrix\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(0)\n        matrix.append(row)\n\n    # Fill the matrix with 1's and 0's\n    for i in range(n):\n        for j in range(m):\n            if i < n-m and j < m-n:\n                matrix[i][j] = 1\n            elif i >= n-m and j >= m-n:\n                matrix[i][j] = 1\n\n    # Calculate the Eulerian number\n    result = 1\n    for i in range(n):\n        for j in range(m):\n            result *= matrix[i][j]\n\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Helper function to find the number of triangles that can be formed\n    def find_triangles(n, m):\n        return n * (n-1) // 2 * m\n\n    # Find the number of triangles that can be formed\n    triangles = find_triangles(n, m)\n\n    # Calculate the Eulerian number a(n, m) as the number of triangles divided by the total number of triangles\n    a = triangles // (n * (n-1) // 2 * (m-1))\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    factorial = lambda x: 1 if x == 0 else x * factorial(x - 1)\n    return factorial(n) // (factorial(m) * factorial(n - m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the first row of Pascal's triangle with 1\n    row = [1] * (m+1)\n\n    # Fill in the first m rows of Pascal's triangle recursively\n    for i in range(1, n):\n        next_row = [1]\n        for j in range(1, m):\n            next_row.append(row[j-1] + row[j])\n        row = next_row\n\n    # Find the Eulerian number in the last row of Pascal's triangle\n    euler_num = row[-1]\n\n    return euler_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function calculates the Eulerian number a(n, m).\n\n    Parameters:\n    n (int): Number of vertices in a graph.\n    m (int): Number of edges in a graph.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n    \"\"\"\n\n    # Initialize the number of Eulerian paths\n    euler_paths = 0\n\n    # Iterate over all possible combinations of edges\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    # Check if the edge (i,j) is an Eulerian path\n                    if (j == l and k == l) or (j == l and i == l) or (j == i and k == i):\n                        euler_paths += 1\n\n    # Calculate the Eulerian number\n    euler_num = euler_paths / (m*(m-1))\n\n    # Return the Eulerian number\n    return int(euler_num)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m * (m + 1) // 2\n    else:\n        return eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Define the pattern\n    pattern = [[0 for j in range(n)] for i in range(m)]\n\n    # Define the initial values of the pattern\n    for i in range(m):\n        pattern[i][i] = 1\n\n    # Iterate over the pattern to find the Eulerian number\n    for i in range(m):\n        for j in range(i, m):\n            pattern[i][j] = pattern[i][j-1] + pattern[i+1][j]\n\n    # Return the final Eulerian number\n    return pattern[0][m-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the 2D matrix with zeros\n    matrix = [[0 for i in range(n+1)] for j in range(m+1)]\n    \n    # Fill the matrix with 1s\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            matrix[i][j] = 1\n    \n    # Fill the matrix with 2s\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == j:\n                matrix[i][j] = 2\n    \n    # Calculate the determinant of the matrix\n    det = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            det *= matrix[i][j]\n    \n    # Calculate the trace of the matrix\n    trace = sum([matrix[i][i] for i in range(1, n+1)])\n    \n    # Calculate the Eulerian number\n    euler_num = (trace - det) // 2\n    \n    return euler_num"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Creating a new list\n    new_list = test_list[:]\n\n    # Appending the list to the tuple\n    test_tup = test_tup + (new_list,)\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Append the list to the tuple\n    test_tup.append(test_list)\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += (test_list,)\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Append the given list to the tuple\n    test_list.extend(test_list)\n    # Convert the list back to a tuple\n    test_tup = tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert lists to tuples if necessary\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    \n    # append the list to the tuple\n    test_tup = test_tup + test_list\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Append the new tuple to the original tuple\n    new_tup = (test_tup, new_list)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Create a list of tuples containing the elements of each list\n    lst = [(num1[i], i) for i in range(len(num1))]\n    lst.extend([(num2[i], len(num1) + i) for i in range(len(num2))])\n    lst.extend([(num3[i], len(num1) + len(num2) + i) for i in range(len(num3))])\n\n    # Sort the list based on the first element in each tuple\n    heapq.heapify(lst)\n\n    # Create a new list to hold the merged sorted list\n    merged_lst = []\n\n    # Iterate through the sorted list and add the elements to the new list\n    for i in range(len(lst)):\n        num = lst[i][0]\n        index = lst[i][1]\n\n        # Add the element to the merged list\n        merged_lst.append(num)\n\n        # Remove the element from the list to be merged\n        del lst[index]\n\n    return merged_lst"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    :param num1: a list of integers\n    :param num2: a list of integers\n    :param num3: a list of integers\n    :return: a list of integers, containing all the elements from num1,\n             num2, and num3 in ascending order\n    \"\"\"\n    # Combine all three lists into a single list\n    all_numbers = num1 + num2 + num3\n\n    # Create a min heap of the combined list\n    min_heap = []\n    for num in all_numbers:\n        heapq.heappush(min_heap, num)\n\n    # Combine the sorted lists by comparing the minimum element from each list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            if num1[i] < num3[k]:\n                result.append(num1[i])\n                i += 1\n            else:\n                result.append(num3[k])\n                k += 1\n        else:\n            if num2[j] < num3[k]:\n                result.append(num2[j])\n                j += 1\n            else:\n                result.append(num3[k])\n                k += 1\n\n    while i < len(num1):\n        result.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        result.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        result.append(num3[k])\n        k += 1\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list using heapq.merge\n    merged_list = heapq.merge(num1, num2, num3)\n\n    # Remove duplicates from the merged list using set() and list()\n    merged_list = list(set(merged_list))\n\n    # Sort the merged list in ascending order using sorted()\n    sorted_list = sorted(merged_list)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge num1 and num2\n    merged_list = num1 + num2\n    # sort merged_list\n    heapq.heapify(merged_list)\n    # merge merged_list and num3\n    merged_list = heapq.merge(merged_list, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list using heap sort\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    \n    # Merge the three sorted lists into a single sorted list\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n            \n    # Merge the remaining elements of the three sorted lists\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Convert all the lists to tuples\n    lst1 = tuple(num1)\n    lst2 = tuple(num2)\n    lst3 = tuple(num3)\n\n    # Merge the three tuples using heapq module\n    merged_list = heapq.merge(lst1,lst2,lst3)\n\n    # Convert the merged tuple back to a list\n    merged_list = list(merged_list)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three lists into a single sorted list using heapq\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine three lists into one\n    combined_list = num1 + num2 + num3\n    \n    # Use heapq to sort the combined list\n    sorted_list = []\n    while combined_list:\n        sorted_list.append(heapq.heappop(combined_list))\n    \n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        count += s.count('1')\n        s = ''.join(s[i:] + s[:i])\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    s = list(s) # convert binary string to a list\n    for i in range(n):\n        s.append(s.pop(0)) # rotate binary string by appending and popping the first element of the list\n    count = 0\n    for i in range(len(s)):\n        if s[i] % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    temp = \"\"\n    for i in range(len(s)):\n        temp = temp + s[i]\n        if i % n == 0:\n            temp = temp[1:] + temp[0]\n            count += temp.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    if len(s) % 2 == 0:\n        return \"Invalid input. String should have an odd length.\"\n    else:\n        count = 0\n        for i in range(n):\n            s = s[::-1]\n        for j in range(len(s)):\n            if int(s[j]) % 2!= 0:\n                count += 1\n        return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    # Compute the number of bits in the binary string\n    nbits = len(s)\n\n    # Initialize a variable to store the number of odd numbers\n    count = 0\n\n    # Loop n times\n    for _ in range(n):\n        # Create a copy of the binary string with the last bit shifted to the left\n        s_new = s[-1:] + s[:-1]\n\n        # Check if the new string contains an odd number of bits\n        if sum(int(b) for b in s_new) % 2 == 1:\n            count += 1\n\n        # Update the binary string\n        s = s_new\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    # convert binary string to list of bits\n    bits = [int(bit) for bit in s]\n    # rotate the bits n times\n    for i in range(n):\n        bits.append(bits.pop(0))\n    # count the number of odd bits\n    for bit in bits:\n        if bit%2!=0:\n            count+=1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #initialize count and index variables\n    count = 0\n    index = 0\n    #initialize empty list to store odd values\n    odd_lst = []\n    \n    #loop through the binary string n times\n    for i in range(n):\n        #rotate the binary string\n        s = s[::-1]\n        #iterate through the binary string\n        for j in s:\n            #if the value is odd, add it to the odd_lst list\n            if int(j) % 2 == 1:\n                odd_lst.append(int(j))\n    #iterate through the odd_lst list and count the number of odd values\n    for num in odd_lst:\n        count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize the count variable\n    count = 0\n\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n\n    # Rotate the binary list the given number of times\n    for i in range(n):\n        temp = binary_list[0]\n        for j in range(len(binary_list) - 1):\n            binary_list[j] = binary_list[j + 1]\n        binary_list[len(binary_list) - 1] = temp\n\n    # Count the number of odd numbers in the rotated binary list\n    for i in binary_list:\n        if i % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n): \n    # Convert binary string to list of integers\n    lst = list(s)\n    # Initialize the count to 0\n    count = 0\n    # Iterate over the list n times\n    for i in range(n):\n        # Reverse the list\n        lst = lst[::-1]\n        # Iterate over the list\n        for j in range(len(lst)):\n            # Check if the number is odd\n            if lst[j] % 2 == 1:\n                # Increment the count\n                count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize the count variable to zero\n    count = 0\n    # Convert the binary string to a list of characters\n    s = list(s)\n    # Rotate the string n times\n    for i in range(n):\n        # Append the first character to the end of the list\n        s.append(s[0])\n        # Remove the first character from the list\n        s.pop(0)\n    # Iterate through the list and count the occurrences of odd numbers\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    # Return the count of odd numbers found\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common.append(i)\n                break\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is already in the set, add it to the common set\n            if element in common:\n                common.add(element)\n            # Otherwise, add the element to the set of common elements\n            else:\n                common.add(element)\n\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            intersection = set(nestedlist[i]) & set(nestedlist[j])\n            if intersection:\n                common_elements.append(list(intersection))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i!= j:\n                for k in range(len(nestedlist[j])):\n                    if nestedlist[i][j] == nestedlist[j][k]:\n                        if nestedlist[i][k] not in common_elements:\n                            common_elements.append(nestedlist[i][k])\n                        break\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        if i in common_elements:\n            continue\n        else:\n            common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not isinstance(nestedlist, list):\n        return []\n    common = []\n    for i in range(len(nestedlist)):\n        if isinstance(nestedlist[i], list):\n            common.extend(common_in_nested_lists(nestedlist[i]))\n        else:\n            if nestedlist.count(nestedlist[i]) > 1:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in common and item in sublist:\n                common.append(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        common.update(sublist)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[0][j])):\n                if nestedlist[i][j][k] in common_list:\n                    common_list.remove(nestedlist[i][j][k])\n                else:\n                    common_list.append(nestedlist[i][j][k])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Flatten the nested list\n    flat_list = [item for sublist in nestedlist for item in sublist]\n\n    # Compare the flattened lists element by element\n    common = []\n    for i in range(len(flat_list)):\n        if flat_list.count(flat_list[i]) == len(nestedlist):\n            common.append(flat_list[i])\n\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and returns True if it represents an integer, False otherwise.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for dic in list1:\n        if dic:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for d in list1:\n        if len(d)!= 0:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Check if all dictionaries in list are empty or not\n    for item in list1:\n        if item:\n            return False\n        else:\n            continue\n\n    # If all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for d in list1:\n        if len(d)!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize an empty string\n    num_str = \"\"\n    # Iterate through the tuple elements\n    for num in nums:\n        # Convert the current element to a string and append it to the num_str\n        num_str += str(num)\n    # Convert the num_str to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the sum variable to 0\n    sum_var = 0\n    # Iterate over the list and add each element to the sum variable\n    for num in nums_list:\n        sum_var += num\n    # Return the sum variable as an integer\n    return sum_var"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n\n    # Convert tuple to list\n    nums = list(nums)\n\n    # Initialize variable to store the result\n    result = 0\n\n    # Loop through each element in the list\n    for num in nums:\n\n        # Add the current element to the result\n        result += num\n\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    result_list = []\n\n    for row in test_list:\n        converted_row = []\n        for element in row:\n            if isinstance(element, (int, float)):\n                converted_row.append(float(element))\n            else:\n                converted_row.append(element)\n        result_list.append(converted_row)\n\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                continue\n            except ValueError:\n                pass\n            finally:\n                element = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n                row[row.index(item)] = float(item)\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, (int, float, str)):\n            if isinstance(item, str):\n                try:\n                    test_list[test_list.index(item)] = float(item)\n                except ValueError:\n                    pass\n        elif isinstance(item, list):\n            list_to_float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Initialize an empty list to hold the converted values\n    converted_list = []\n    \n    # Iterate through each element in the input list\n    for element in test_list:\n        # If the element is already a float, add it to the converted list\n        if isinstance(element, float):\n            converted_list.append(element)\n        # If the element is a list, recursively call the function on that list and add the converted values to the converted list\n        elif isinstance(element, list):\n            converted_list += list_to_float(element)\n        # If the element is a tuple, recursively call the function on that tuple and add the converted values to the converted list\n        elif isinstance(element, tuple):\n            converted_list += list_to_float(list(element))\n        # If the element is a set, recursively call the function on that set and add the converted values to the converted list\n        elif isinstance(element, set):\n            converted_list += list_to_float(list(element))\n        # If the element is an int, convert it to a float and add it to the converted list\n        elif isinstance(element, int):\n            converted_list.append(float(element))\n        # If the element is a string, try to convert it to a float and add it to the converted list\n        elif isinstance(element, str):\n            try:\n                converted_list.append(float(element))\n            except ValueError:\n                # If the conversion fails, add the original element to the converted list\n                converted_list.append(element)\n    \n    # Return the converted list\n    return converted_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Convert the list to a list of strings\n    result = [word for word in words]\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i!= arr[i]:\n            if arr[i] not in arr[i+1:]:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # find the first element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        raise ValueError(\"The array contains duplicate elements.\")\n    \n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            raise ValueError(\"The array contains duplicate elements.\")\n        elif arr[i] < unique_element:\n            unique_element = arr[i]\n    \n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None\n    \n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n    for i in range(n):\n        count_dict[arr[i]] = count_dict.get(arr[i], 0) + 1\n    \n    # Traverse the array and check if each element appears only once\n    for i in range(n):\n        if count_dict[arr[i]] == 1:\n            return arr[i]\n    \n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for num in count:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        # Check if the current element is already in the dictionary\n        if arr[i] in freq:\n            # If it is, increment its frequency by 1\n            freq[arr[i]] += 1\n        else:\n            # If not, add it to the dictionary with a frequency of 1\n            freq[arr[i]] = 1\n    \n    # Find the element that appears only once\n    result = None\n    for key, value in freq.items():\n        # If the frequency is 1, it means that the element appears only once\n        if value == 1:\n            # Store the result in the `result` variable\n            result = key\n            break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(0, n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    count = {}\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    # Check if all the elements have a count of 1 in the dictionary\n    for value in count.values():\n        if value > 1:\n            return arr[arr.index(value)]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return -1\n    else:\n        for i in range(1, n-1):\n            if arr[i] == arr[i-1] or arr[i] == arr[i+1]:\n                return arr[i]\n        return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize the frequency array and the count of each element\n    freq = [0] * (n+1)\n    count = [0] * (n+1)\n\n    # Traverse the array and update the frequency and count arrays\n    for i in range(n):\n        freq[arr[i]] += 1\n        count[arr[i]] += 1\n\n    # Traverse the frequency array and find the element that appears only once\n    for i in range(n+1):\n        if freq[i] == 1 and count[i] == 1:\n            return i"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes in a list of tuples and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    '''\n\n    # initialize variables to keep track of the maximum product and the maximum sum of absolute products\n    max_abs_product = 0\n    max_product = 0\n\n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        # loop through each tuple in the list\n        for j in range(i+1, len(list1)):\n            # get the product of the two tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            # get the absolute value of the product\n            abs_product = abs(product)\n            # update the maximum absolute product if the current product is greater than the current maximum product\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n            # update the maximum product if the current product is greater than the current maximum product and the current absolute product is greater than the current maximum sum of absolute products\n            if abs_product > max_product and abs_product > max_abs_product:\n                max_product = abs_product\n\n    # return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_product = float('-inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i] * list1[j])\n            max_product = max(max_product, pair_product)\n            \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_product_tuple = ()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n                max_product_tuple = (list1[i][0], list1[j][1])\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # initialize variables\n    max_product = float('-inf')\n    max_pair = None\n    \n    # iterate over tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # compute the product of the pair of numbers and its absolute value\n            product = abs(list1[i] * list1[j])\n            \n            # update the max_product and max_pair if necessary\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i], list1[j])\n    \n    # return the maximum absolute product and the pair of numbers that maximized the product\n    return max_product, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create an empty list to store the products\n    product_list = []\n    \n    # Loop through each tuple in the list\n    for tup in list1:\n        # Calculate the product of the first and second elements of the tuple\n        product = tup[0] * tup[1]\n        \n        # Add the product to the product_list\n        product_list.append(product)\n    \n    # Find the maximum absolute product between numbers in the product_list\n    max_product = max(product_list, key=lambda x: abs(x))\n    \n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize maximum product and maximum absolute difference to 0\n    max_product = 0\n    max_difference = 0\n    \n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        # loop through the rest of the list to find the next pair of tuples\n        for j in range(i+1, len(list1)):\n            # calculate the absolute difference between the numbers in each pair\n            difference = abs(list1[i][0] - list1[j][0])\n            \n            # update the maximum product and maximum absolute difference if the new pair yields a higher product\n            if difference * max(list1[i][1], list1[j][1]) > max_product:\n                max_product = difference * max(list1[i][1], list1[j][1])\n                max_difference = difference\n    \n    # return the maximum absolute difference and maximum product\n    return (max_difference, max_product)"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable(n):\n    '''\n    Check if a number is amicable or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum_amicable_numbers(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to the sum of its proper divisors.\n    '''\n    divisors = []\n    for i in range(1, num):\n        if (num % i == 0) and (i!= num // i):\n            divisors.append(i)\n    return (num in divisors) and (sum(divisors) == num)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable_pair(n):\n    '''\n    Helper function to check if a number is an amicable pair or not.\n    '''\n    sum_of_divisors = sum([i for i in range(1, int(n**0.5) + 1) if n % i == 0])\n    return sum_of_divisors == n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for num in range(1, limit + 1):\n        if is_amicable_pair(num):\n            sum_amicable += num\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_amicable(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    if num == sum:\n        return True\n    else:\n        return False\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i % 2 == 0:\n            continue\n        elif i == 2 or i == 3:\n            amicable_sum += i\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    amicable_sum += i\n                    break\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    sum_of_squares = sum([x**2 for x in range(1, num//2+1)])\n    if sum_of_squares == num**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i == 1:\n            continue\n        if i in amicable_numbers:\n            continue\n        sum = 0\n        j = 1\n        while i * j <= limit:\n            if i * j == j * i:\n                sum += j\n            j += 1\n        if sum == i:\n            amicable_numbers.append(i)\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum and count variables\n    sum_amicable = 0\n    count = 0\n\n    # iterate through numbers from 1 to the limit\n    for i in range(1, limit+1):\n        # check if i is amicable to a number greater than i\n        for j in range(i, limit+1):\n            if i!= j and i % j == 0 and j % i == 0:\n                count += 1\n                if i + j == limit:\n                    sum_amicable += i + j\n\n    # print the sum of amicable numbers\n    print(\"The sum of amicable numbers from 1 to\", limit, \"is\", sum_amicable)\n\n    # print the count of amicable numbers\n    print(\"The count of amicable numbers from 1 to\", limit, \"is\", count)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Create a dictionary to store the pair of numbers and their respective sum\n    amicable_dict = {}\n\n    # Iterate through all numbers from 1 to the specified limit\n    for i in range(1, limit + 1):\n        # Check if the current number is amicable to any other number in the range\n        for j in range(i + 1, limit + 1):\n            # If the current number is amicable to the next number, add the pair to the dictionary\n            if i + j == 1:\n                amicable_dict[(i, j)] = i + j\n            elif i + j == j:\n                amicable_dict[(i, j)] = i - j\n\n    # Calculate the sum of all the pairs in the dictionary\n    sum_amicable = sum(amicable_dict.values())\n\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize the list to store amicable numbers\n    amicable_numbers = []\n    \n    # Loop through all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is an amicable number\n        if is_amicable(num):\n            # Add the number to the list of amicable numbers\n            amicable_numbers.append(num)\n    \n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a given number is an amicable number or not.\n    '''\n    # Check if the number is divisible by any number from 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    # If the number is not divisible by any number from 1 to the square root of the number, it's an amicable number\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle.\n    \"\"\"\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.angle(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the complex number's magnitude\n    mag = cmath.sqrt(a**2 + b**2)\n    # Calculate the complex number's argument (in radians)\n    arg = cmath.phase(a+b*1j)\n    # Convert the argument from radians to degrees\n    arg_deg = arg * 180/cmath.pi\n    # Return the result in degrees\n    return arg_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    Args:\n    a: float or complex number, the real part of the complex number.\n    b: float or complex number, the imaginary part of the complex number.\n\n    Returns:\n    angle: float, the angle of the complex number in radians.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle.imag\n    angle = angle / 2\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    count = [0] * 2  # initialize count array with 0s and 1s\n    \n    # traverse through each character of the string\n    for char in string:\n        if char == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n            \n    # find the maximum difference between the count of 0s and 1s\n    max_diff = 0\n    for i in range(2):\n        for j in range(i, 2):\n            if count[i] - count[j] > max_diff:\n                max_diff = count[i] - count[j]\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    # Initialize variables for 0s and 1s count\n    count_zero = 0\n    count_one = 0\n    \n    # Iterate through the string\n    for char in string:\n        if char == '0':\n            count_zero += 1\n        elif char == '1':\n            count_one += 1\n    \n    # Initialize variables for maximum difference\n    max_diff = 0\n    \n    # Iterate through all possible substrings\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j+1]\n            \n            # Check for difference between 0s and 1s count in the sub-string\n            count_zero_sub = sub_string.count('0')\n            count_one_sub = sub_string.count('1')\n            \n            diff = abs(count_zero_sub - count_one_sub)\n            \n            # Update maximum difference if current sub-string has a smaller difference\n            max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count_0 = count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [0] * n\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            dp[i] = 1\n        else:\n            dp[i] = 0\n        if i > 0:\n            dp[i] += dp[i-1]\n        if dp[i] > max_diff:\n            max_diff = dp[i]\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            curr_count = 1\n        else:\n            curr_count = 0\n        diff = curr_count - prev_count\n        if diff > max_diff:\n            max_diff = diff\n        prev_count = curr_count\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    prev_count = 0\n    curr_count = 0\n    \n    for char in string:\n        if char == '0':\n            curr_count += 1\n        elif char == '1':\n            curr_count -= 1\n            \n        if prev_count == 0 and curr_count == 0:\n            max_diff = max(max_diff, abs(prev_count - curr_count))\n            \n        prev_count = curr_count\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # convert the binary string to a list of integers\n    binary_list = [int(digit) for digit in string]\n    # initialize two variables to keep track of the number of 0s and 1s\n    zero_count = 0\n    one_count = 0\n    # loop through each element in the list\n    for i in range(len(binary_list)):\n        # if the current element is a 0, increment the number of 0s\n        if binary_list[i] == 0:\n            zero_count += 1\n        # if the current element is a 1, increment the number of 1s\n        else:\n            one_count += 1\n        # if the number of 0s is greater than the number of 1s, update the maximum difference\n        if zero_count > one_count:\n            maximum_diff = i - zero_count + 1\n        # if the number of 1s is greater than the number of 0s, update the maximum difference\n        else:\n            maximum_diff = i - one_count + 1\n    # return the maximum difference found\n    return maximum_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables for number of 0s and 1s in the given string\n    num_0s = 0\n    num_1s = 0\n\n    # Loop through each character in the given string\n    for char in string:\n        # If the character is a 0, increment the number of 0s\n        if char == '0':\n            num_0s += 1\n        # If the character is a 1, increment the number of 1s\n        elif char == '1':\n            num_1s += 1\n        # If the character is neither a 0 nor a 1, it is neither a 0 nor a 1 so we can continue looping\n        else:\n            continue\n\n        # Initialize variables for the current sub-string and the maximum difference between 0s and 1s\n        max_diff = 0\n        curr_diff = 0\n\n        # Loop through each character in the sub-string\n        for i in range(1, len(string)):\n            # If the i-th character is a 0, then we have to subtract the number of 0s in the sub-string starting from i-2\n            if string[i-1] == '0' and string[i] == '1':\n                curr_diff -= num_0s\n            # If the i-th character is a 1, then we have to add the number of 1s in the sub-string starting from i-2\n            elif string[i-1] == '1' and string[i] == '0':\n                curr_diff += num_1s\n\n            # Update the maximum difference if the current difference is greater than the maximum difference\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n\n        # Return the maximum difference between 0s and 1s in the current sub-string\n        return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    one_count = 0\n\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        elif char == '1':\n            one_count += 1\n\n    max_diff = 0\n    for i in range(zero_count + 1):\n        for j in range(one_count + 1):\n            if i + j > max_diff:\n                max_diff = i + j\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            count0 = 0\n            count1 = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    count0 += 1\n                else:\n                    count1 += 1\n                diff = max(diff, abs(count0 - count1))\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Function to check if a number is a divisor of another number\n    def is_divisor(num, divisor):\n        return (num % divisor == 0)\n\n    # Function to find the common divisors of two numbers\n    def common_divisors(num1, num2):\n        divisors = []\n        for i in range(1, num1+1):\n            if is_divisor(i, num1) and is_divisor(i, num2):\n                divisors.append(i)\n        return divisors\n\n    # Find the common divisors of the given numbers\n    divisors1 = common_divisors(a, b)\n    divisors2 = common_divisors(b, a)\n\n    # Find the sum of the common divisors\n    sum_of_divisors = sum(divisors1) + sum(divisors2)\n\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding the smallest common divisor using Euclid's algorithm\n    while b:\n        a, b = b, a % b\n\n    # Finding the sum of common divisors\n    sum_common_divisors = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            sum_common_divisors += i\n\n    # Printing the sum of common divisors\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    divisors_set = set()\n    # Find all the divisors of both numbers\n    divisors_list = [i for i in range(1, min(a, b)+1) if a % i == 0 or b % i == 0]\n    # Find the common divisors of both numbers\n    for num in divisors_list:\n        if num in divisors_set:\n            divisors_set.remove(num)\n        else:\n            divisors_set.add(num)\n    # Return the sum of common divisors\n    return sum(divisors_set)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    def gcd(a, b):\n        \"\"\"\n        Returns the greatest common divisor of two numbers using the Euclidean algorithm.\n        \"\"\"\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def sum_of_divisors(n):\n        \"\"\"\n        Returns the sum of all divisors of a given number.\n        \"\"\"\n        divisor_sum = 1\n        for i in range(2, n + 1):\n            if n % i == 0:\n                divisor_sum += i\n        return divisor_sum\n\n    div1 = gcd(a, b)\n    div2 = gcd(b, a)\n\n    if div1 == div2:\n        return sum_of_divisors(div1)\n    else:\n        return -1"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(num1, num2):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # First, find the set of divisors for the given numbers\n    div1 = set(find_divisors(num1))\n    div2 = set(find_divisors(num2))\n    \n    # Find the intersection of the two sets\n    common = div1.intersection(div2)\n    \n    # Sum the elements of the intersection\n    return sum(common)\n\n\ndef find_divisors(num):\n    '''\n    Write a python function to find the set of divisors for a given number.\n    '''\n    # Create a list of all the numbers from 1 to the given number\n    nums = list(range(1, num+1))\n    \n    # Find the divisors of each number\n    divisors = [num for num in nums if num % nums[0] == 0]\n    \n    # Return the set of divisors\n    return set(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n\n    # Find the common divisors of a and b\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Calculate the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, a+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    common_divisors = []\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n        i += 1\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    divisors = set()\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        temp = x % y\n        x = y\n        y = temp\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        temp = y\n        y = x % y\n        x = temp\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words_list = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    \n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # initialize an empty list to store the words longer than n characters\n    long_words_list = []\n    \n    # loop over each word in the list\n    for word in words:\n        # check if the length of the word is greater than n characters\n        if len(word) > n:\n            # if it is, append it to the long_words_list\n            long_words_list.append(word)\n            \n    # return the long_words_list\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = [word for word in words if len(word) > n] # filter out words that are longer than n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"The matrix is not square.\"\n\n    # Check if all the elements in the matrix are unique\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if i < j:\n                if my_matrix[i][j] == my_matrix[i][j+1] or my_matrix[i][j] == my_matrix[i+1][j]:\n                    return \"The matrix does not have unique elements.\"\n\n    # Check if the sum of each row and column is equal to the diagonal element\n    for i in range(len(my_matrix)):\n        sum_i = sum(my_matrix[i])\n        sum_j = sum(my_matrix[j] for j in range(len(my_matrix)))\n        if sum_i!= my_matrix[i][i] or sum_j!= my_matrix[i][i]:\n            return \"The matrix does not have the correct sum.\"\n\n    # Check if the sum of each row, column, and main diagonal is equal to the total number of elements\n    sum_main = sum(sum(row) for row in my_matrix)\n    if sum_main!= len(my_matrix) ** 2:\n        return \"The matrix does not have the correct sum.\"\n\n    return \"The matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is of appropriate size\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"Matrix must be square.\"\n    \n    # Check for zeroes in the matrix\n    for row in my_matrix:\n        for elem in row:\n            if elem == 0:\n                return \"Matrix cannot contain zeroes.\"\n    \n    # Check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i == j:\n                magic_sum += my_matrix[i][j]\n            elif i + j == len(my_matrix) - 1:\n                magic_sum += my_matrix[i][j]\n    \n    if magic_sum == sum(range(1, 10))**2:\n        return \"The matrix is a magic square.\"\n    else:\n        return \"The matrix is not a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix has n^2 elements\n    if n**2!= len(my_matrix[0]):\n        return False\n    # Check if the matrix is symmetric\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix has the right dimensions\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        if my_matrix[i]!= my_matrix[len(my_matrix)-1-i]:\n            return False\n    \n    # Check if the matrix is antisymmetric\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] + my_matrix[len(my_matrix)-1-i][len(my_matrix)-1-j] == len(my_matrix)*len(my_matrix[0])*2:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if each row, column and diagonal is a magic square\n    for i in range(n):\n        row = my_matrix[i]\n        for j in range(n):\n            if row[j]!= n*(j+1):\n                return False\n        diag = [row[i] for i in range(n)]\n        if diag!= list(range(1, n+1)):\n            return False\n        diag = [row[i] for i in range(n-1, -1, -1)]\n        if diag!= list(range(n-1, -1, -1)):\n            return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(set(my_matrix)) == 1:\n        return True\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= (i+j) % 10:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if all rows have the same sum\n    row_sums = []\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        row_sums.append(row_sum)\n    if row_sums!= row_sums[0:len(row_sums)-1]:\n        return False\n    \n    # Check if all columns have the same sum\n    col_sums = []\n    for i in range(len(my_matrix[0])):\n        col_sum = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n        col_sums.append(col_sum)\n    if col_sums!= col_sums[0:len(col_sums)-1]:\n        return False\n    \n    # Check if all diagonal elements are the same\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diagonal_sum!= sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))):\n        return False\n    \n    # Check if all diagonal elements are the same\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diagonal_sum!= sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))):\n        return False\n    \n    # If all checks pass, then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    row_sum = []\n    col_sum = []\n    diag_sum = []\n    for i in range(len(my_matrix)):\n        row_sum.append(sum(my_matrix[i]))\n        col_sum.append(sum(my_matrix[j][i] for j in range(len(my_matrix))))\n        diag_sum.append(sum(my_matrix[i][i]))\n    row_max = max(row_sum)\n    col_max = max(col_sum)\n    diag_max = max(diag_sum)\n    if row_max == col_max == diag_max:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # Initialize variables\n    magic_square = True\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    num_sum = 0\n\n    # Check if all elements of the matrix are non-negative integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int) or num < 0:\n                magic_square = False\n                break\n            num_sum += num\n    \n    # Check if the matrix is a magic square\n    if magic_square:\n        for i in range(rows):\n            for j in range(cols):\n                # Check if the element is in its correct position\n                if i == j:\n                    if my_matrix[i][j]!= i + 1:\n                        magic_square = False\n                # Check if the element is in the same row as its neighbor\n                elif j == i:\n                    if my_matrix[i][j]!= my_matrix[i][j-1] + 1:\n                        magic_square = False\n                # Check if the element is in the same column as its neighbor\n                elif i == cols - 1 - j:\n                    if my_matrix[i][j]!= my_matrix[i-1][j] + 1:\n                        magic_square = False\n    \n    # Check if the total sum of all elements is equal to the number of elements\n    if magic_square and num_sum == rows * cols * (rows + cols) / 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # check if the sum of each row and column is equal to the diagonal\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(row[i] for row in my_matrix)\n        if row_sum!= col_sum:\n            return False\n    # check if the sum of the diagonals is equal to the sum of the matrix\n    diagonal_sum = sum(sum(row[i] for row in my_matrix) for i in range(len(my_matrix)))\n    if diagonal_sum!= sum(sum(row[i] for row in my_matrix) for row in my_matrix):\n        return False\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with the maximum frequency\n    max_item = max(freq, key=freq.get)\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_num = -1\n    max_freq = -1\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_num = num\n            max_freq = freq\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = -1\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_num = max(freq, key=freq.get)\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_key = max(freq_dict, key=freq_dict.get)\n\n    return max_key, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_num = max(freq_dict, key=freq_dict.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Create a defaultdict to store the count of each item\n    count = defaultdict(int)\n\n    # Iterate through the list and update the count of each item\n    for num in nums:\n        count[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in count.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers and returns the item with the maximum frequency.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_item = None\n    max_freq = 0\n    for item, count in freq.items():\n        if count > max_freq:\n            max_item = item\n            max_freq = count\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = [char for char in str1 if char in vowels]\n    reversed_str = \"\".join(vowel_list[::-1])\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a vowel, add it to the beginning of the reversed string\n        if char in vowels:\n            reversed_str += char\n    \n    # Return the reversed string\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    \n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    \n    vowel_indices.reverse()\n    \n    for i in vowel_indices:\n        str1 = str1[:i] + str1[i+1:]\n    \n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n\n    result = \"\"\n    for char in str1:\n        if char not in vowels_set:\n            result += char\n\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = []\n    for char in string:\n        if char.lower() in vowels:\n            result.append(char)\n    result = ''.join(reversed(result))\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = []\n    for letter in str1:\n        if letter in vowels:\n            vowel_list.append(letter)\n    vowel_list.reverse()\n    reversed_str = \"\"\n    for letter in vowel_list:\n        reversed_str += letter\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    reversed_vowels = \"\"\n    for char in string:\n        if char in vowels and char not in reversed_vowels:\n            reversed_vowels += char\n    return reversed_vowels"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_vowels = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_vowels += char\n    reversed_str = ''\n    for char in reversed_vowels:\n        reversed_str += char\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for i in tup1:\n        string += str(i)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    str_tup = str(tup1)\n    # Print the string\n    print(str_tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    total = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize sum to 0\n    total = 0\n    # loop through each number in the list\n    for num in nums:\n        # check if the number is negative\n        if num < 0:\n            # add the negative number to the total\n            total += num\n    # return the total\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a, b = 1, 1\n    for i in range(n):\n        print(a + b)\n        a, b = b, a + b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # base case: if n is 1 or 0, return 1\n    if n == 1 or n == 0:\n        return 1\n    else:\n        # recursively calculate the nth hexagonal number\n        return n * hexagonal_num(n-1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*(3*n-1))//2)+1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num = num + (2*i*i - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the value of the first hexagon to 1\n    hexagon = 1\n    # Loop n-1 times to find the nth hexagon\n    for i in range(1, n):\n        # Multiply the current hexagon by 2 and add 1\n        hexagon = 2 * hexagon + 1\n    # Return the nth hexagon\n    return hexagon"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1  # start with 1\n    b = 1  # start with 1\n    for i in range(n):\n        a += b\n        b += 2\n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * (2 * n - 1) + (2 * n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))  # initialize an array of zeros with the same length as the input array\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1  # increment the corresponding element in the array of zeros\n\n    nonzeros = sum(num for num in nums if num!= 0)  # count the number of non-zero elements in the input array\n\n    return zeros[0] / nonzeros  # return the ratio of zeros to non-zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * 1000)\n    non_zero_count = array('i', [0] * 1000)\n\n    for num in nums:\n        if num == 0:\n            zero_count[num] += 1\n        else:\n            non_zero_count[num] += 1\n\n    for i in range(1000):\n        if zero_count[i]!= 0 and non_zero_count[i]!= 0:\n            ratio = non_zero_count[i] / zero_count[i]\n            return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = sum(arr) - sum(x for x in arr if x!= 0)\n    non_zero_count = len(nums)\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    ratio = zeros/non_zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0 for _ in range(len(nums))])\n    non_zero_count = array('i', [0 for _ in range(len(nums))])\n    \n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(num)] += 1\n        else:\n            non_zero_count[non_zero_count.index(num)] += 1\n    \n    zero_count = [num for num in zero_count if num!= 0]\n    non_zero_count = [num for num in non_zero_count if num!= 0]\n    \n    return len(zero_count) / len(non_zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create a new array of non-zeroes and set all values to 1\n    non_zeroes = array('i', [1]*len(nums))\n    \n    # count the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    ratio = float(zero_count) / non_zero_count\n    \n    # return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if zero_count == 0:\n        return 0\n    else:\n        return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))  # Initialize array to count number of zeroes\n    for num in nums:\n        if num == 0:\n            count[0] += 1\n    non_zero_count = sum(count)\n    if non_zero_count == 0:\n        return 0\n    return count[0]/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = sum(zero_count) - sum(1 for num in nums if num == 0)\n    zero_ratio = non_zero_count / sum(1 for num in nums)\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the input array to an array of boolean values\n    boolean_array = array('b', [1 if num == 0 else 0 for num in nums])\n    # Calculate the count of zeroes and non-zeroes\n    zero_count = boolean_array.count(0)\n    non_zero_count = len(boolean_array) - zero_count\n    # Return the ratio of zeroes to non-zeroes\n    return float(zero_count) / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is greater than 0\n    if n <= 0:\n        return \"Error: Input must be a positive integer.\"\n    \n    # Initialize variables\n    power = 1\n    sum = 0\n    \n    # Loop through all powers of 2 from 2^0 to 2^30\n    while power <= 30:\n        # Check if the current power of 2 can divide n\n        if n % power == 0:\n            # If it can, add the current power to the sum and divide n by the power\n            sum += power\n            n /= power\n        # If it cannot, move on to the next power of 2\n        else:\n            power *= 2\n    \n    # Check if n is now 1 or 0\n    if n == 1 or n == 0:\n        return \"Yes, the number can be represented as sum of non-zero powers of 2.\"\n    else:\n        return \"No, the number cannot be represented as sum of non-zero powers of 2.\""
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is less than or equal to 0\n    if n <= 0: \n        return False \n\n    # Check if the given number is divisible by 2\n    if n % 2 == 0: \n        return False \n\n    # Initialize two pointers i and j\n    i = 1\n    j = 1\n\n    # Loop while i is less than or equal to n/2\n    while i <= n/2: \n        # Check if the value of j is a power of 2\n        if n % j == 0: \n            # Subtract j from n to get the sum of powers of 2\n            n -= j\n            # Subtract j from i to get the sum of powers of 2\n            i -= j\n            # Check if the sum of powers of 2 is equal to n\n            if n == 0: \n                return True\n        # Increment j\n        j += 1\n\n    # If no power of 2 found, then the given number cannot be represented as sum of powers of 2\n    return False \n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    if n < 0:\n        n = -n\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n % 4 == 0:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n % 6 == 0:\n        return False\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n % 8 == 0:\n        return False\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n % 10 == 0:\n        return False\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n % 12 == 0:\n        return False\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n % 14 == 0:\n        return False\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n % 16 == 0:\n        return False\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n % 18 == 0:\n        return False\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n % 20 == 0:\n        return False\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n % 22 == 0:\n        return False\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n % 24 == 0:\n        return False\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n % 26 == 0:\n        return False\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n % 28 == 0:\n        return False\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n % 30 == 0:\n        return False\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n % 32 == 0:\n        return False\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n % 34 == 0:\n        return False\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n % 36 == 0:\n        return False\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n % 38 == 0:\n        return False\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n % 40 == 0:\n        return False\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n % 42 == 0:\n        return False\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n % 44 == 0:\n        return False\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n % 46 == 0:\n        return False\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n % 48 == 0:\n        return False\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n % 50 == 0:\n        return False\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n % 52 == 0:\n        return False\n    if n == 53:\n        return True\n    if n == "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is 0\n    if n == 0: \n        return True\n\n    # Check if the given number is 1\n    if n == 1: \n        return True\n\n    # Check if the given number is a power of 2\n    if n & (n-1) == 0: \n        return True\n\n    # Check if the given number is even\n    if n % 2 == 0: \n        return False\n\n    # Check if the given number is odd\n    if n % 2 == 1: \n\n        # Initialize the sum of powers of 2 as 0\n        power_sum = 0\n\n        # Loop through the bits of the given number\n        while n > 0: \n\n            # Check if the bit is a power of 2\n            if n & 1 == 1: \n                power_sum += 1\n\n            # Shift the bit to the right\n            n >>= 1\n\n        # Check if the sum of powers of 2 is even\n        if power_sum % 2 == 0: \n            return True\n        else: \n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check for divisibility by 2\n    if n % 2 == 0:\n        return False\n    \n    # check for sum of powers of 2\n    power_of_two = 1\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            return False\n        power_of_two *= 2\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_set = set()\n    for i in range(1, n+1):\n        power_set.add(i)\n        power_set.add(i*i)\n        power_set.add(i*i*i)\n        power_set.add(i*i*i*i)\n    \n    if n in power_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Iterate over all possible sums of powers of 2 from 1 to 31 (inclusive)\n    for i in range(1, 32):\n        # Check if the sum of powers of 2 is equal to n\n        if bin(i)[2:].zfill(31) == bin(n)[2:].zfill(31):\n            return True\n\n    # If we reach this point, n cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n & (n - 1) == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    if n % 5 == 0:\n        return True\n    if n % 7 == 0:\n        return True\n    if n % 11 == 0:\n        return True\n    if n % 13 == 0:\n        return True\n    if n % 17 == 0:\n        return True\n    if n % 19 == 0:\n        return True\n    if n % 23 == 0:\n        return True\n    if n % 29 == 0:\n        return True\n    if n % 31 == 0:\n        return True\n    if n % 37 == 0:\n        return True\n    if n % 41 == 0:\n        return True\n    if n % 43 == 0:\n        return True\n    if n % 47 == 0:\n        return True\n    if n % 53 == 0:\n        return True\n    if n % 59 == 0:\n        return True\n    if n % 61 == 0:\n        return True\n    if n % 67 == 0:\n        return True\n    if n % 71 == 0:\n        return True\n    if n % 73 == 0:\n        return True\n    if n % 79 == 0:\n        return True\n    if n % 83 == 0:\n        return True\n    if n % 89 == 0:\n        return True\n    if n % 97 == 0:\n        return True\n    if n % 101 == 0:\n        return True\n    if n % 103 == 0:\n        return True\n    if n % 107 == 0:\n        return True\n    if n % 109 == 0:\n        return True\n    if n % 113 == 0:\n        return True\n    if n % 127 == 0:\n        return True\n    if n % 131 == 0:\n        return True\n    if n % 137 == 0:\n        return True\n    if n % 139 == 0:\n        return True\n    if n % 149 == 0:\n        return True\n    if n % 151 == 0:\n        return True\n    if n % 157 == 0:\n        return True\n    if n % 163 == 0:\n        return True\n    if n % 167 == 0:\n        return True\n    if n % 173 == 0:\n        return True\n    if n % 179 == 0:\n        return True\n    if n % 181 == 0:\n        return True\n    if n % 191 == 0:\n        return True\n    if n % 193 == 0:\n        return True\n    if n % 197 == 0:\n        return True\n    if n % 199 == 0:\n        return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Function to check if a number can be represented as sum of non-zero powers of 2 or not.\n    # Here we are using a helper function to check if a number is power of 2 or not.\n    def is_power_of_two(num): \n        if num == 0: \n            return True\n        elif num % 2 == 0: \n            return is_power_of_two(num // 2)\n        else: \n            return False\n\n    # Check if the given number is a power of two or not.\n    if is_power_of_two(n): \n        # If the given number is power of two, then check if the sum of powers of 2 can be represented as a power of 2.\n        if n == 1: \n            return True\n        elif n % 2 == 0: \n            # If the number is even, then check if the sum of powers of 2 can be represented as a power of 2.\n            return is_power_of_two(n // 2)\n        else: \n            # If the number is odd, then check if the sum of powers of 2 can be represented as a power of 2.\n            return is_power_of_two((n // 2) + 1)\n    else: \n        # If the given number is not power of two, then check if the sum of powers of 2 can be represented as a sum of powers of 2.\n        for i in range(1, n+1): \n            if is_power_of_two(i): \n                if is_power_of_two(n - i): \n                    return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while n:\n        if n & 1:\n            # check if n has power of 2\n            while i < 31 and (n >> i) == 0:\n                i += 1\n            if i == 31:\n                return False\n        n >>= 1\n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2*3.14159*r #multiplying the pi value with the radius and storing it in a variable\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialize an empty set to store the flattened list\n    flattened = set()\n    # loop through each list in the input list\n    for sublist in test_list:\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the element is not already in the flattened set, add it\n            if element not in flattened:\n                flattened.add(element)\n    # return the flattened set of numbers\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Recursively flatten a list of lists.\n    \"\"\"\n    if not lst:\n        return []\n    elif isinstance(lst[0], list):\n        return flatten_list(lst[0]) + flatten_list(lst[1:])\n    else:\n        return [lst]\n\n\ndef extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened = flatten_list(test_list)\n    return set(flattened)\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        flattened_list.extend(item)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # initialize the count of swaps to zero\n    count = 0\n    # start from the last element and iterate over it\n    for i in range(n-1, -1, -1):\n        # find the index of the smallest element\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            # swap the elements\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n            # increment the count of swaps\n            count += 1\n            # move the pointer to the next element\n            j -= 1\n        # print the swaps made\n        print(nums)\n    # return the count of swaps made\n    return count"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to swap two elements\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to reverse the order of elements from start to i-1\n    def reverse(nums, start, i):\n        while start < i:\n            swap(nums, start, i)\n            start += 1\n            i -= 1\n\n    # Start with the largest element as pivot\n    pivot = max(nums)\n\n    # Find the index of the smallest element greater than pivot\n    index = 0\n    for i in range(len(nums)):\n        if nums[i] > pivot:\n            index = i\n            break\n\n    # Reverse the order of elements from start to index\n    reverse(nums, 0, index - 1)\n\n    # Reverse the order of elements from index to end\n    reverse(nums, index, len(nums) - 1)\n\n    # Reverse the order of elements from start to end\n    reverse(nums, 0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Get the length of the list\n    n = len(nums)\n    \n    # For each element in the list\n    for i in range(n):\n        \n        # Get the index of the maximum element in the list up to index i\n        max_index = i\n        \n        # For each element after the current element in the list\n        for j in range(i+1, n):\n            \n            # If the current element is greater than the maximum element found so far\n            if nums[j] > nums[max_index]:\n                \n                # Update the max_index to j\n                max_index = j\n        \n        # If the current element is not already in its correct position\n        if i!= max_index:\n            \n            # Swap the current element with the element at max_index\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # For each element after the current element in the list\n        for j in range(i+1, n):\n            \n            # If the current element is less than or equal to the maximum element found so far\n            if nums[j] <= nums[max_index]:\n                \n                # Move the element after the current element to the correct position\n                temp = nums[j]\n                for k in range(j-1, max_index-1, -1):\n                    if nums[k] < temp:\n                        nums[k+1] = nums[k]\n                    else:\n                        break\n                nums[max_index] = temp\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # initialize the length of the longest increasing subsequence\n    l = [1] * n\n    # initialize the length of the longest decreasing subsequence\n    r = [1] * n\n    # initialize the cumulative sum of increasing subsequences\n    c = [0] * n\n    # initialize the cumulative sum of decreasing subsequences\n    d = [0] * n\n    # initialize the index of the last element in the current increasing subsequence\n    i = 0\n    # initialize the index of the last element in the current decreasing subsequence\n    j = 0\n    # initialize the index of the last element in the current subsequence\n    k = 0\n    # loop through the list of elements\n    while k < n:\n        if nums[k] >= nums[i]:\n            # add the current element to the current increasing subsequence\n            l[k] += l[i]\n            c[k] = max(c[k], c[i] + l[k])\n            # update the index of the last element in the current increasing subsequence\n            i += 1\n        else:\n            # add the current element to the current decreasing subsequence\n            r[k] += r[j]\n            d[k] = max(d[k], d[j] + r[k])\n            # update the index of the last element in the current decreasing subsequence\n            j += 1\n        # update the index of the last element in the current subsequence\n        k += 1\n    # initialize the list of indices of the sorted elements\n    sorted_indices = [0] * n\n    # loop through the list of elements again, but this time use the cumulative sums to find the indices\n    k = 0\n    while k < n:\n        if c[k] <= d[k]:\n            # add the current element to the list of sorted elements and increment the index\n            sorted_indices[k] = k\n            k += 1\n        else:\n            # the current element is smaller than the largest element in the decreasing subsequence, so we need to\n            # find the smallest element in the decreasing subsequence that is larger than the current element\n            while d[k] > c[k]:\n                sorted_indices[k] = d[k] - c[k]\n                k += 1\n            # update the cumulative sum of increasing subsequences to include the current element\n            c[d[k]] += l[k]\n            # update the cumulative sum of decreasing subsequences to include the current element\n            d[c[k]] += r[k]\n            # add the current element to the list of sorted elements and increment the index\n            sorted_indices[k] = k\n            k += 1\n    # sort the list of indices using merge sort\n    merge_sort(sorted_indices, 0, n - 1)\n    # use the sorted indices to sort the original list of elements\n    for k in range(n):\n        nums[k] = nums[sorted_indices[k]]\n\ndef merge_sort(nums, left, right):\n    if left < right:\n        # find the middle index of the subarray\n        mid = (left + right) // 2\n        # recursively sort the left subarray\n        merge_sort(nums, left, mid)\n        # recursively sort the right subarray\n        merge_sort(nums, mid + 1, right)\n        # merge the sorted subarrays\n        i = left\n        j = mid + 1\n        for k in range(left, right + 1):\n            if i > mid:\n                nums[k] = nums[j]\n                j += 1\n            elif j > mid:\n                nums[k] = nums[i]\n                i += 1\n            elif nums[i] <= nums[j]:\n                nums[k] = nums[i]\n                i += 1\n            else:\n                nums[k] = nums[j]\n                j += 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n\n    This algorithm works by selecting the largest or smallest element in the list, and then swapping it with the last element of the list. This process is repeated for each element of the list, and the sorted list is the result.\n    '''\n\n    # Define the length of the list and the maximum value\n    n = len(nums)\n    max_val = max(nums)\n\n    # Perform the pancake sort algorithm for each element of the list\n    for i in range(n):\n        # Find the index of the maximum or minimum value\n        max_index = i\n\n        # Find the index of the second largest or smallest value\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum or minimum value with the second largest or smallest value\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # create a copy of the original list\n    nums_sorted = nums[:]\n    # loop through the length of the list\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums_sorted[j] > nums_sorted[max_index]:\n                max_index = j\n        # swap the maximum element with the last element of the unsorted part of the list\n        nums_sorted[i], nums_sorted[max_index] = nums_sorted[max_index], nums_sorted[i]\n        # print the sorted list after each iteration\n        print(nums_sorted)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # pick the largest element\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the elements\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the count of swaps\n    swap_count = 0\n\n    # Loop through the list of elements\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the last element in the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        swap_count += 1\n\n    return nums, swap_count"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Helper function to swap two elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to reverse the sublist starting at index i\n    def reverse(nums, i, n):\n        j = i\n        while j < n:\n            swap(nums, j, n-1)\n            j += 1\n\n    # Helper function to reverse the entire list\n    def reverse_list(nums):\n        reverse(nums, 0, len(nums))\n\n    # Helper function to perform one pancake sort step\n    def pancake_sort_step(nums):\n        n = len(nums)\n        # Find the maximum element in the list\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # Reverse the sublist starting at index 0 to max_index\n        reverse(nums, 0, max_index)\n        # Reverse the sublist starting at index max_index to n-1\n        reverse(nums, max_index, n)\n        # Reverse the entire list\n        reverse_list(nums)\n\n    # Perform pancake sort steps n times to sort the list\n    for i in range(len(nums)-1, 0, -1):\n        pancake_sort_step(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # sort the list in decreasing order\n    nums.sort(reverse=True)\n    # perform pancake sort algorithm\n    for i in range(len(nums)):\n        # find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the elements if necessary\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n    # return the sorted list\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    # loop through list1 and compare with list2 and list3\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as an input and returns the number of lists present in the tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count \n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order \n    arr.sort() \n\n    # Find the difference between the second and the last element \n    max_diff = arr[1] - arr[len(arr)-1] \n\n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in a list of integers as input and returns the maximum absolute difference between any two\n    elements in the list.\n\n    Parameters:\n    arr (list): a list of integers\n\n    Returns:\n    int: the maximum absolute difference between any two elements in the list\n    '''\n\n    # Initialize variables to store the minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # Iterate through the list and update the minimum and maximum values\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n\n    # Calculate the maximum absolute difference between any two elements in the list\n    max_diff = abs(max_val - min_val)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() # sort the array in ascending order\n    max_diff = arr[1] - arr[0] # calculate the maximum difference between the first and second elements\n    for i in range(2, len(arr)-1): # loop through the remaining elements in the array\n        if arr[i]-arr[i-1] > max_diff:\n            max_diff = arr[i]-arr[i-1] # update the maximum difference if a larger difference is found\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    # Initialize variables to store the maximum and minimum values in the array\n    max_val = arr[0]\n    min_val = arr[0]\n    \n    # Loop through each element in the array\n    for num in arr[1:]:\n        # Update the maximum and minimum values if the current element is greater than or equal to the maximum\n        if num >= max_val:\n            max_val = num\n        # Update the maximum and minimum values if the current element is less than or equal to the minimum\n        elif num <= min_val:\n            min_val = num\n        # Calculate the absolute difference between the maximum and minimum values and update the maximum and minimum values if the difference is greater than the current maximum or minimum value\n        elif num > max_val - min_val:\n            max_val = num\n        elif num < min_val - max_val:\n            min_val = num\n    \n    # Return the maximum absolute difference between any two elements in the array\n    return abs(max_val - min_val)"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a is not zero\n    if a == 0:\n        return None\n\n    # Compute the number of solutions\n    solutions = 0\n    while b!= 0:\n        b, solutions = divmod(b, a)\n    if solutions == 0:\n        return None\n\n    # Compute the values of x and y\n    x = (-b) // a\n    y = n // a\n\n    # Check if the values satisfy the equation\n    if x * a + y * b!= n:\n        return None\n\n    # Return the solution\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the coefficients of the quadratic equation\n    d = b**2 - 4*a*n\n    \n    # check if the equation has two distinct solutions\n    if d < 0:\n        return None\n    \n    # calculate the two solutions\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n    \n    # check if the solutions are distinct\n    if x1 == x2:\n        return None\n    \n    # return the two solutions as a tuple\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Check if the coefficients of the quadratic equation are zero\n    if a == 0 and b == 0:\n        return None\n\n    # Find the discriminant of the quadratic equation\n    discriminant = b ** 2 - 4 * a * n\n\n    # Check if the discriminant is negative, which means there are no real roots\n    if discriminant < 0:\n        return None\n\n    # Calculate the two real roots of the quadratic equation\n    root1 = (-b + discriminant ** 0.5) / (2 * a)\n    root2 = (-b - discriminant ** 0.5) / (2 * a)\n\n    # Check if the roots are integers\n    if not root1.is_integer() or not root2.is_integer():\n        return None\n\n    # Return the tuple (root1, root2) as a solution\n    return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are 0, in which case there's no solution\n    if a == 0 or b == 0:\n        return None\n    \n    # Check if the discriminant is less than 0, in which case there's no solution\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    \n    # Calculate the roots of the discriminant\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if both roots are integers, in which case there's a solution\n    if int(root1) == int(root2):\n        return (int(root1), int(root2))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n//a):\n        if a*i*i + b*i + n == 0:\n            return (i*a, i*b)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:  # If a = 0, there is no solution\n        return None\n    else:\n        # Initialize variables to keep track of the solutions\n        x = 0\n        y = 0\n        # Iterate n times, adding x and y to n until the sum equals n\n        while n!= x + y:\n            x += 1\n            if a > 0:\n                y -= 1\n            else:\n                y += 1\n        # If the sum is equal to n, return the solution as a tuple\n        if n == x + y:\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive or negative\n    if disc > 0:\n        x1 = (-b + disc**0.5) / (2*a)\n        x2 = (-b - disc**0.5) / (2*a)\n        return (x1, x2)\n    elif disc == 0:\n        x = -b / (2*a)\n        return (x, x)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, b + 1):\n        if a * i + b * (b + 1) == n:\n            return (i, b + 1)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the given values of a, b, and n are valid inputs\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(n, (int, float))):\n        return None\n    \n    # Initialize variables to store the value of x and y\n    x = None\n    y = None\n    \n    # Iterate through all possible values of x and y\n    for i in range(-10**9, 10**9+1):\n        if a*i + b*i == n:\n            x = i\n            y = a*i + b*i\n            break\n            \n    # Check if the solution exists\n    if x is None:\n        return None\n    else:\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # calculate discriminant\n    discriminant = b**2 - 4*a*n\n\n    # if discriminant is positive, then there exists a solution\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (x1, x2)\n    \n    # if discriminant is zero, then there exists a unique solution\n    elif discriminant == 0:\n        return ((-b) / (2*a), (-b) / (2*a))\n    \n    # if discriminant is negative, then there is no solution\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store the unique elements\n    unique_list = []\n    # Iterate over both the lists\n    for element in list1:\n        # Check if the element is present in the second list\n        if element not in list2:\n            # If the element is not present in the second list, add it to the unique list\n            unique_list.append(element)\n    # Return the unique list\n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through list1 and remove elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # create a new list to store the unique elements of list1\n    unique_list = []\n\n    # loop through each element of list1\n    for i in list1:\n        # check if the element is not present in list2\n        if i not in list2:\n            # if not, add it to unique_list\n            unique_list.append(i)\n\n    # return the unique_list\n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Parameters:\n    list1 (list): List of elements to be removed\n    list2 (list): List of elements to be searched\n\n    Returns:\n    list: A new list without any elements present in the second list\n    \"\"\"\n\n    # Create a new list to store the elements from list1 that are not present in list2\n    new_list = []\n\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Using a set to remove duplicates and then list() to convert to a list\n    unique_list = list(set(list1) - set(list2))\n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2):\n        s += n - 2 * i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i * 2 <= n:\n        sum += n - 2 * i\n        i += 1\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of series from 0 to n is:\", sum_series(n))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum_val = 0\n        for i in range(n // 2):\n            sum_val += n - 2*i\n        return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2 * i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1:\n        i = 0\n        while i < n // 2:\n            x = (n - 2*i)\n            if x >= 0:\n                sum_value = sum_value + x\n            else:\n                break\n            i = i + 1\n    else:\n        i = 0\n        while i < n // 2:\n            x = (n - 2*i)\n            if x >= 0:\n                sum_value = sum_value + x\n            else:\n                break\n            i = i + 1\n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate from 0 to n//2\n    for i in range(n//2):\n        # Calculate the sum of the series for i\n        temp_sum = sum + (n - 2*i)\n        \n        # Update the sum if the sum is less than the current maximum sum\n        if temp_sum < sum:\n            sum = temp_sum\n    \n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # calculate the sum of the series\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += (n - 2*i)\n    \n    return total_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    sp = (s * (l - 2)) / 2\n    # Calculate the area of the polygon using the Heron's formula\n    area = 0.5 * sp * tan(pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += s * (tan(i*2*pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-l)/(2*pi))**0.5\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s\n    area = area * (s**2) / (4 * pi * (tan(pi/l)))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-l+1)/2)/tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2 * l) / (4 * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2) * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2) * (tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l * math.sin(math.pi / l))\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2 * pi * i) / l)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns a boolean value indicating whether the sum of its divisors is the same or not.\n    \"\"\"\n    # Calculate the sum of divisors of n\n    div_sum = sum(i for i in range(1, n+1) if n % i == 0)\n\n    # Check if the sum of divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_list.append(i)\n            if n//i!= i:\n                divisors_list.append(n//i)\n    divisors_sum = sum(divisors_list)\n    return divisors_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of \n    the input integer is the same, otherwise it returns False.\n    '''\n\n    if n <= 1:\n        return False\n    \n    # Find all the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n\n    # Calculate the sum of divisors\n    div_sum = sum(divisors)\n\n    # Check if the sum of divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Find all the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    # Check if the sum of the divisors is the same as n\n    divisors_sum = sum(divisors)\n    if divisors_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # calculate the sum of divisors\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i + n // i\n\n    # check if the sum of divisors is equal to the original number\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same for both positive and negative numbers.\n    It also returns False if the sum of the divisors is not the same for both positive and negative numbers.\n    '''\n    divisors_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_sum += i\n            if i!= n // i:\n                divisors_sum += n // i\n    if divisors_sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # calculate the sum of the divisors of n \n    div_sum = sum(set(math.factorial(i) for i in range(1, int(math.sqrt(n))+1) if n % i == 0))\n    # check if the sum of the divisors of n and n+1 are equal\n    if div_sum == sum(set(math.factorial(i) for i in range(1, n+1) if n % i == 0)):\n        print(\"Yes, the sum of the divisors of\", n, \"and\", n+1, \"are equal.\")\n    else:\n        print(\"No, the sum of the divisors of\", n, \"and\", n+1, \"are not equal.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n \n    are the same as n, and False otherwise.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n \n    divisor_sum = sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n\n    # check if the sum of the divisors is equal to n \n    if divisor_sum == n: \n        print(\"The sum of the divisors of\", n, \"is\", divisor_sum)\n    else: \n        print(\"The sum of the divisors of\", n, \"is not\", divisor_sum)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # create a dictionary to store the position of each character in the English alphabet\n    char_position = {}\n    for i, char in enumerate('abcdefghijklmnopqrstuvwxyz'):\n        char_position[char] = i\n    \n    # count the number of occurrences of each character in the string\n    count = 0\n    for char in str1:\n        if char.lower() in char_position:\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if i == ord(str1[i].upper()) - ord('A'):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        for j in range(len(str1)):\n            if str1[j].lower() == chr(i+97).lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    This function takes a string as input and returns the count of characters that occur at the same position in the English alphabet.\n    The function works by converting both the string to lowercase and then comparing the position of each character in the English alphabet.\n    If the character at the same position in both strings is the same, the function increments a counter.\n    The counter is returned as the output.\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Create an empty dictionary to store the character counts\n    char_counts = {}\n\n    # Loop through the English alphabet\n    for i in range(97, 123): # 'a' is at index 97\n\n        # Create a character string from the current index\n        char_string = chr(i)\n\n        # Check if the character string exists in the string\n        if char_string in str1:\n\n            # Increment the count for this character\n            if char_string in char_counts:\n                char_counts[char_string] += 1\n            else:\n                char_counts[char_string] = 1\n\n    # Return the character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for char in str1:\n        if char.lower() in alphabet.lower():\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters\n    count = {}\n\n    # Loop through the English alphabet\n    for i in range(ord('a'), ord('z') + 1):\n        # Convert the current character to lowercase\n        char = chr(i).lower()\n\n        # Check if the current character exists in the string\n        if char in str1:\n            # If it does, add it to the dictionary with a count of 1\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n\n    # Return the final count dictionary\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if i == 0:\n            # If the character at the current position is uppercase, check if the character at the next position is uppercase\n            if str1[i] == str1[i+1] and (str1[i].isupper() or str1[i+1].isupper()):\n                count += 1\n        else:\n            # If the character at the current position is uppercase and the character at the next position is uppercase, check if they are the same character in the English alphabet (case insensitive)\n            if str1[i] == str1[i+1] and (str1[i].isupper() and str1[i+1].isupper() and str1[i] == str1[i+1][0].upper()):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower() == chr(i+97).lower():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower() == alpha[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in str1.lower():\n        if i in alphabet:\n            for j in alphabet:\n                if i == j:\n                    count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == 0 and (A[i] & 1) == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                xor_val = A[i] ^ A[j]\n                if xor_val % 2 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the smallest power of 2 greater than or equal to `n`.\n    \"\"\"\n    if n == 0:\n        return 1\n    while n % 2 == 0:\n        n //= 2\n    return 2 * n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result to 2\n    result = 2\n    \n    # Loop until the result is greater than or equal to n\n    while result < n:\n        # Multiply the result by 2 and add 1 to get the next power of 2\n        result *= 2\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2 ** (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the power of 2 that is greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    \n    # The binary representation of n has a 1 in the least significant bit, so we can start by doubling it.\n    # We can stop once the least significant bit of the result is 0, which means we've doubled the number.\n    result = 2 * n\n    \n    # We can then shift the result left by one bit and subtract 1 to get the next power of 2.\n    # This is because a power of 2 is a number that is a power of 2 minus 1.\n    # For example, the next power of 2 of 8 is 16, which is 2 * 8 - 1 = 16.\n    while result & 1 == 0:\n        result <<= 1\n    \n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is already a power of 2\n    if n == 2**int(log2(n)):\n        return n\n\n    # Find the smallest power of 2 greater than or equal to n\n    power = 2**int(log2(n))\n    while power < n:\n        power <<= 1\n\n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        i = 1\n        while i <= n:\n            i <<= 1\n        return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1)!= 0:\n        n = n | (n & -n)\n    return n << 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # if n is already a power of 2, return n\n    if n & (n-1) == 0:\n        return n\n\n    # loop through powers of 2 from 1 to 64 (64 is the largest integer that can be represented as an integer)\n    for i in range(1, 65):\n        if i <= n:\n            # check if n is a power of 2\n            if i == n:\n                return i\n            \n            # check if i is a power of 2\n            if i & (i-1) == 0:\n                # if i is a power of 2, return the greater power of 2\n                return i << 1\n                \n            # if i is not a power of 2, check if (i-1) is a power of 2\n            if (i-1) & (i-1) == 0:\n                # if (i-1) is a power of 2, return the greater power of 2\n                return (i << 1) << 1\n                \n    # if no power of 2 is found, return None\n    return None"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of occurrences of the number x in the list lst.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # check if indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        raise ValueError('Invalid index range')\n\n    # sum the range of numbers in the list\n    total_sum = sum(list1[m:n+1])\n\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the list from m to n (inclusive)\n    for i in range(m, n+1):\n        # add each number in the range to the sum\n        sum += list1[i-1]\n    # return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    if m < 0 or n >= len(list1):\n        return None\n    sum_range = sum(list1[m:n+1])\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the list from index m to index n\n    for i in range(m, n+1):\n        # Add the value of the i-th element to the sum variable\n        sum += list1[i-1]\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for finding the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a + 5*a**2 + 10*math.sqrt(5)*a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a)\n\na = float(input(\"Enter the length of the side of the pentagon: \"))\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon from its side length a.\n    \"\"\"\n    # Use the Law of Cosines to calculate the length of the hypotenuse\n    h = math.sqrt(3) * a\n    \n    # Use Heron's formula to calculate the perimeter\n    return 5 * a + h"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = s.find('std')\n    while i!= -1:\n        count += 1\n        i = s.find('std', i+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if'std' in word:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in a tuple have the same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 1:\n        return True\n\n    first_element_type = type(test_tuple[0])\n\n    for element in test_tuple:\n        if type(element)!= first_element_type:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        return \"Error: Input must be a tuple.\"\n\n    # Check if all the elements in the tuple have the same data type\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return \"Error: All elements must have the same data type.\"\n\n    # If all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for elem in test_tuple:\n        data_types.add(type(elem))\n    return all(elem == data_types.pop() for elem in test_tuple)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if the length of the tuple is greater than 0\n    if len(test_tuple) == 0:\n        return \"Empty tuple\"\n\n    # get the first element of the tuple\n    first_element = type(test_tuple[0])\n\n    # loop through the tuple and check if all the elements have the same data type\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return \"Mixed data types\"\n\n    # all the elements in the tuple have the same data type\n    return \"All elements have the same data type\""
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for element in test_tuple:\n        if element is None:\n            types.append(type(None))\n        else:\n            types.append(type(element))\n    \n    unique_types = list(set(types))\n    \n    if len(unique_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = set()\n    for element in test_tuple:\n        types.add(type(element))\n    if len(types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    # Initialize a counter variable\n    counter = 0\n\n    # Iterate through the array and count the occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            counter += 1\n\n    # If the counter is greater than or equal to n/2, x is the majority element\n    if counter >= n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Determine if the element x is the majority element in the given sorted array.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize count and current element to 0\n    count = 0\n    current_element = arr[0]\n    \n    # Loop through the array\n    for i in range(1, n):\n        # If the current element is equal to the target element\n        if current_element == arr[i]:\n            # Increment the count\n            count += 1\n        # If the count is greater than n/2, return True\n        elif count > n//2:\n            return True\n        # If the current element is not equal to the target element, reset the count and current element\n        else:\n            count = 0\n            current_element = arr[i]\n    \n    # If the loop completes without finding a majority, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        i += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count >= n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n > 0):\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n!= 0): \n        count += n & 1 \n        n = n >> 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through each bit in the number and check if it's set (1)\n    for i in range(n.bit_length()): \n        if n & (1 << i): \n            count += 1\n    \n    # Return the count of set bits\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes a positive integer as input and returns the number of set bits in it.\n\n    The set bits are binary digits with a value of 1. A number with only one set bit is said to be a power of 2.\n    For example, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808, 18446744073709551615\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the modified string\n    modified_str = ''\n    # iterate over each character in the input string\n    for char in str:\n        # check if the index of the current character is odd\n        if (int(char) % 2) == 1:\n            # if it is odd, add it to the modified string\n            modified_str += char\n    # return the modified string\n    return modified_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters at odd index positions in a given string.\n    \n    :param str: a string\n    :return: the modified string with odd index values removed\n    \"\"\"\n    # split the string into a list of characters\n    chars = list(str)\n    # loop through the characters, starting from the second position\n    for i in range(1, len(chars), 2):\n        # remove the character at the current index\n        del chars[i]\n    # join the modified characters into a new string\n    return ''.join(chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    # create a list to store the odd values of the input string\n    odd_values = []\n    # loop through each character in the string\n    for char in str:\n        # check if the character index is odd\n        if char % 2!= 0:\n            # if it is, append the character to the odd_values list\n            odd_values.append(char)\n    # join the list of odd values into a string and return it\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # create an empty string to store the result\n    result = ''\n    # loop through each character in the input string\n    for char in str:\n        # if the index of the character is odd, add it to the result string\n        if (ord(char) - 96) % 2!= 0:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Check if the three numbers are integers\n    if isinstance(a,int) and isinstance(b,int) and isinstance(c,int): \n        # Find the minimum number among the three numbers\n        if a < b and a < c: \n            return a \n        elif b < a and b < c: \n            return b \n        else: \n            return c\n    else: \n        # If any of the numbers are not integers, return an error message\n        return \"Error: All the numbers must be integers.\""
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments n, l and r where n is a positive integer and l, r are positive integers.\n    The function returns True if all the bits are set in the given range else False.\n    '''\n    mask = 0\n    for i in range(l, r+1):\n        mask |= 1 << i\n    return (n & mask) == mask"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # initialize a variable to store the count of unset bits\n    count = 0\n\n    # loop through each bit of the binary representation of n\n    for i in range(l,r+1):\n        if n & (1<<i) == 0:\n            count += 1\n\n    # check if all the bits are unset in the given range or not\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r + 1):\n        count += bin(i).count('1')\n\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize the count of unset bits in the given range\n    count = 0\n    # Iterate over each bit in the range\n    for i in range(l, r + 1):\n        # Get the value of the bit at the current index\n        bit_value = (n >> i) & 1\n        # If the bit is set, increment the count of unset bits\n        if bit_value == 1:\n            count += 1\n            # If the count reaches the number of bits in the range, return True\n            if count == r - l + 1:\n                return True\n    # If the loop completes without finding all unset bits, return False\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i).count('1')!= n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize variables to keep track of the number of unset bits and the number of unset bits in the range\n    unset_bits = 0\n    unset_bits_in_range = 0\n\n    # Iterate over the range and check if each bit is set or not\n    for i in range(l, r+1):\n        # If the current bit is unset, increment the number of unset bits\n        if n & (1 << i):\n            unset_bits += 1\n        else:\n            # If the current bit is set in the range, increment the number of unset bits in the range\n            if i >= l and i <= r:\n                unset_bits_in_range += 1\n\n    # Check if all the bits are unset in the given range\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # find the least significant bit set to 1 in the range\n    least_set_bit = 1\n    while (l & least_set_bit) == 0:\n        least_set_bit <<= 1\n    # count the number of bits set to 1 in the range\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n    # check if all bits are set to 1 in the range\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments: n - the number of bits, l - the lower bound of the range and r - the upper bound of the range.\n    The function returns True if all the bits are unset in the given range, else it returns False.\n    \"\"\"\n    # loop through all the bits in the range\n    for i in range(l, r+1):\n        # check if the i-th bit is set\n        if (n & (1 << i))!= 0:\n            # if the i-th bit is set, return False\n            return False\n    # if all the bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        # Check if all the bits are unset in the given range\n        if i & n!= i:\n            return False\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize three variables to keep track of the indices of the positive, negative and zero elements\n    pos = 0\n    neg = n\n    zero = n\n    \n    # Iterate over the array and swap elements accordingly\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n        elif arr[i] == 0:\n            arr[i], arr[zero] = arr[zero], arr[i]\n            zero += 1\n        else:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables for the positive and negative elements\n    pos_elems = []\n    neg_elems = []\n    \n    # Loop through the array and split them into positive and negative elements\n    for elem in arr:\n        if elem > 0:\n            pos_elems.append(elem)\n        else:\n            neg_elems.append(elem)\n            \n    # Sort the positive and negative elements separately and then combine them into the final result\n    pos_elems.sort()\n    neg_elems.sort(reverse=True)\n    \n    result = pos_elems + neg_elems[:n] + neg_elems[n:]\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # sort the array in reverse order to get the indices of the first n negative elements\n    negative_indices = sorted(range(len(arr)-1, -1, -1), key=lambda i: arr[i])[:n]\n    \n    # re-arrange the array by moving the first n negative elements to the beginning and the rest to the end\n    result = []\n    for i in range(n):\n        if i in negative_indices:\n            result.append(arr[i])\n        else:\n            result.append(arr[len(arr)-n+i])\n    \n    # reverse the result to get the original order of the elements\n    result.reverse()\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, create a list to store the negative and positive elements\n    negative = []\n    positive = []\n    \n    # Loop through the array and append negative and positive elements to the two lists\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # Sort the negative list in ascending order\n    negative.sort()\n    \n    # Loop through the array and replace negative elements with the sorted negative list\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = negative.pop(0)\n    \n    # Loop through the array and append positive elements to the end of the array\n    for i in range(n):\n        if arr[i] > 0:\n            arr[i+n] = positive.pop(0)\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists to hold the negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Loop through the input array and add elements to the appropriate lists\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    \n    # Concatenate the negative and positive lists into a single list\n    sorted_arr = neg_list + pos_list\n    \n    # Return the sorted array\n    return sorted_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, separate the array into two sub-arrays: negative and positive\n    neg_arr = []\n    pos_arr = []\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n    \n    # Then, sort the negative sub-array in descending order\n    neg_arr.sort(reverse=True)\n    \n    # Finally, merge the sorted negative sub-array with the positive sub-array\n    merged_arr = neg_arr + pos_arr\n    \n    # Truncate the original array to the first n elements, and return the merged array\n    return merged_arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Define the position of negative and positive elements in the array\n    neg_pos = [-1] * n\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the element is negative, set its position to n\n        if arr[i] < 0:\n            neg_pos[n - i - 1] = i\n    \n    # Iterate through the negative position array\n    for i in range(n):\n        # If the element is negative, swap it with the last positive element\n        if neg_pos[i]!= -1:\n            arr[i], arr[neg_pos[i]] = arr[neg_pos[i]], arr[i]\n    \n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    positive_elements = []\n    negative_elements = []\n\n    for element in arr:\n        if element >= 0:\n            positive_elements.append(element)\n        else:\n            negative_elements.append(element)\n\n    for _ in range(n):\n        if negative_elements:\n            arr[0], arr[len(negative_elements)] = arr[len(negative_elements)], arr[0]\n            negative_elements.pop(0)\n        else:\n            arr[0], arr[len(positive_elements)] = arr[len(positive_elements)], arr[0]\n            positive_elements.pop(0)\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_elements = []\n    pos_elements = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_elements.append(arr[i])\n        else:\n            pos_elements.append(arr[i])\n    neg_elements.extend(pos_elements)\n    return neg_elements"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create two lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Loop through the array and append negative elements to the neg_list and positive elements to the pos_list\n    for i in arr:\n        if i < 0:\n            neg_list.append(i)\n        else:\n            pos_list.append(i)\n    \n    # Merge the two lists in the desired order using the zip function\n    merged_list = [x for x in zip(neg_list, pos_list)]\n    \n    # Truncate the merged list to the first n elements\n    truncated_list = merged_list[:n]\n    \n    # Concatenate the truncated list with the original array\n    rearranged_arr = truncated_list + arr\n    \n    return rearranged_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\".format(char))"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i == \" \":\n            str2 += char\n        else:\n            str2 += i\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return list(max_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a max heap to store the n largest items from the list\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        # Keep only the n largest items in the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap back to a list and return it\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n >= len(list1):\n        return list1\n    \n    # heapify the list to get the n largest elements\n    heapq.heapify(list1)\n    for i in range(n,len(list1)):\n        heapq.heappushpop(list1, heapq.heappop(list1))\n    \n    return list1"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        min_heap.append(list1[i])\n    # extract the top n elements from the heap and add them to a new list\n    larg_list = []\n    for i in range(n):\n        heapq.heappushpop(min_heap, list1[i])\n        larg_list.append(heapq.heappop(min_heap))\n    return larg_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Create a min-heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n        \n    # Fill the min-heap with the remaining elements of the list\n    for i in range(n,len(list1)):\n        heapq.heappush(heap, -list1[i])\n        \n    # Extract the top n elements from the min-heap and return them as a list\n    return [-heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2*math.pi*r*h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2 * r * h + 2 * r ** 2 * h - 2 * r ** 3 * (3 * h ** 2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*r**2*h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to find the lateral surface area of a cylinder\n    lateral_area = (2*math.pi*r*h) + (2*math.pi*r*r)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * pi * r * (h**2)\n    return lateral_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius r and height h of a cylinder and returns the lateral surface area of the cylinder.\n    \"\"\"\n\n    # Formula for lateral surface area of a cylinder\n    lateral_area = 2 * r * h\n\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * r * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n\n    # Calculate the surface area of the cylinder using the formula A = pi * r^2 * h\n    lateral_surface_area = math.pi * r**2 * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l * l * l\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(16):\n        if (n & (1 << i)) == 0: # checking if the ith bit is 0\n            n = n | (1 << i) # setting the ith bit to 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = 0\n    while i < len(bin(n)[2:][::-1]):\n        if n & (1 << i):\n            n |= (1 << i)\n        i += 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for i in range(32):\n        if (n & (1 << i)):\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the set bits\n    even_bits = []\n    # Traverse through the bits of the given number\n    while n > 0:\n        # Check if the current bit is even\n        if n % 2 == 0:\n            # If it is even, add it to the even_bits list\n            even_bits.append(n)\n        # Shift the bit to the right\n        n = n >> 1\n    # Join the even_bits list to form the final number\n    return sum(even_bits)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits\n    even_bits = 0\n    # Iterate through the bits of the number and check if each bit is even\n    for bit in bin(n)[2:]:\n        if int(bit) % 2 == 0:\n            even_bits |= 1 << int(bit)\n    # Return the modified number with all even bits set\n    return n ^ even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store even bits \n    even_bits = [] \n    # Iterate through each bit in the given number \n    for i in range(32): \n        # If the current bit is even, add it to the even_bits list \n        if n & (1 << i): \n            even_bits.append(i) \n    # Reverse the list to set the bits in the correct order \n    even_bits.reverse() \n    # Set all the even bits in the given number to 1 \n    for i in even_bits: \n        n |= (1 << i) \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the set bits\n    set_bits = []\n    # loop through each bit in the binary representation of the given number\n    for i in range(len(bin(n)[2:])):\n        # check if the current bit is even\n        if i % 2 == 0:\n            # if it is, add it to the set_bits list\n            set_bits.append(i)\n    # loop through each bit in the set_bits list\n    for bit in set_bits:\n        # set the corresponding bit to 1 in the binary representation of the given number\n        n = n ^ (1 << bit)\n    # return the new binary representation of the given number with even bits set to 1\n    return bin(n)[2:].zfill(len(bin(n)[2:]))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of the number\n    even_bits = []\n    # Loop through each bit of the number and append it to the list if it's even\n    while n > 0:\n        if n % 2 == 0:\n            even_bits.append(n)\n        n //= 2\n    # Combine all the even bits into a single number\n    even_bits_num = sum(even_bits)\n    # Return the combined even bits number\n    return even_bits_num"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the number of even bits\n    count = 0\n    # Iterate through each bit of the number\n    for i in range(32):\n        # If the bit is even\n        if (n & 1) == 0:\n            # Set the bit to 1\n            n = n | (1 << i)\n            # Increment the count\n            count += 1\n    # Return the final number with all even bits set to 1\n    return n, count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n    \n    # Loop through each bit of n\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # If it is, add it to the even_bits list\n            even_bits.append(i)\n    \n    # Convert the even_bits list to a bitwise OR of integers\n    even_bits_bitwise_or = 0\n    for bit in even_bits:\n        even_bits_bitwise_or |= (1 << bit)\n    \n    # Return the bitwise OR of the original number and the even_bits_bitwise_or\n    return n | even_bits_bitwise_or"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter()\n    for item in test_list:\n        count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the occurrences of each tuple\n    count_dict = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    \n    # Return the dictionary with the counts of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Convert the list of tuples into a list of lists\n    converted_list = [list(item) for item in test_list]\n    \n    # Use Counter to count the number of occurrences of each tuple\n    count_dict = Counter(converted_list)\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the occurrence count of each tuple\n    count_dict = {}\n    # Use the Counter class from the collections module to count the occurrence of each tuple in the list\n    for tuple_ in test_list:\n        count_dict[tuple_] = Counter(tuple_).most_common(1)[0][1]\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment the count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of unique tuples and their counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment the count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize variables\n    count = 0\n    prev = 0\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Check if the current character is an empty string\n        if str[i] == '':\n            # If it is, check if there are any non-empty substrings of the string\n            for j in range(i, len(str)):\n                if str[j]!= '':\n                    count += j - prev + 1\n                    prev = j\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # convert the string to lowercase and remove all spaces\n    str = str.lower().replace(\" \", \"\")\n\n    # initialize a variable to keep track of the number of substrings\n    count = 0\n\n    # loop through all possible substrings of the string\n    for i in range(len(str)+1):\n        for j in range(i, len(str)+1):\n            if i!= j:\n                count += 1\n\n    # return the count of substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n\n    substrings = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                substrings += 1\n    return substrings"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    previous_element = -1\n    for i in range(n):\n        # Check if the current element is between 2*previous_element and m\n        if 2*previous_element >= 2*m:\n            break\n        elif 2*previous_element >= 2*i and 2*previous_element <= m:\n            total_sequences += 1\n        previous_element = 2*i\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_number_of_sequences_helper(n, m):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return m\n        else:\n            return (m - n + 1) * get_number_of_sequences_helper(n-1, m)\n\n    return get_number_of_sequences_helper(n, m)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the count to 0\n    count = 0\n    # Loop through all possible sequences of length n\n    for i in range(m, 2 * m, m):\n        # Check if each element is within the range\n        if i <= m:\n            continue\n        if i <= n:\n            continue\n        # Check if each element is greater than or equal to twice the previous element\n        if i % 2 == 0:\n            continue\n        # Check if each element is less than or equal to m\n        if i > m:\n            break\n        # Count the sequence\n        count += 1\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Base cases\n    if n == 0 or m == 0:\n        return 1\n    if n == 1 or m == 1:\n        return m\n\n    # Initialize a list to store the number of sequences\n    num_sequences = []\n\n    # Generate all possible sequences of length 1 and add them to the list\n    for i in range(m):\n        num_sequences.append(1)\n\n    # Generate all possible sequences of length 2 and add them to the list\n    for i in range(m - 1):\n        num_sequences.append(2)\n\n    # Generate all possible sequences of length greater than 2 and add them to the list\n    for i in range(2, n + 1):\n        num_sequences.append(0)\n        for j in range(1, m):\n            if j - i >= 0 and j - i < m and num_sequences[j - i] < num_sequences[j - 1] + 1:\n                num_sequences[j] += num_sequences[j - i]\n\n    return num_sequences[-1]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n): \n    # Initialize the count to zero\n    count = 0\n    # Initialize the last element as None\n    prev_element = None\n    # Loop through each element from 2 to m\n    for i in range(2, m+1):\n        # Check if the current element is less than or equal to twice the previous element\n        if i <= 2 * prev_element:\n            # If the condition is true, then we cannot form a sequence of length n with this element\n            continue\n        # Check if the current element is less than or equal to n\n        if i <= n:\n            # If the condition is true, then we can form a sequence of length n with this element\n            count += 1\n    # Return the count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2,m+1):\n        for j in range(2,m):\n            if i % 2 == 0:\n                count += j // i\n            else:\n                count += (m-j) // i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize count variable to 0\n    count = 0\n    \n    # Initialize two variables to keep track of the previous and current elements\n    prev_element = 0\n    current_element = 2\n    \n    # Loop until current element is greater than or equal to m\n    while current_element >= m:\n        # If the current element is greater than or equal to twice the previous element and less than or equal to m, increment count\n        if current_element >= 2 * prev_element and current_element <= m:\n            count += 1\n        # Update the previous and current elements\n        prev_element = current_element\n        current_element += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    prev_num = 0\n    for i in range(1,m+1):\n        if i >= 2*prev_num and i <= m:\n            total_sequences += 1\n        prev_num = i\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(seq):\n        return all(seq[i] <= m and seq[i] >= seq[i - 1] * 2 for i in range(1, len(seq)))\n\n    def find_combinations(seq):\n        res = []\n        for i in range(2, n + 1):\n            for j in range(len(seq) - i + 1):\n                res.append(seq[j:j + i])\n        return res\n\n    def count_combinations(seq):\n        count = 0\n        for comb in find_combinations(seq):\n            if is_valid_sequence(comb):\n                count += 1\n        return count\n\n    total_sequences = 0\n    for i in range(1, m + 1):\n        total_sequences += count_combinations([i])\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize the number of possible sequences to 0\n    count = 0\n\n    # iterate through the possible lengths for sequences\n    for length in range(2, n+1):\n        # initialize the current sequence to empty\n        sequence = []\n\n        # iterate through the possible starting elements for the sequence\n        for start in range(m, m + length - 1):\n            # if the current element is greater than or equal to twice the previous element and less than or equal to m\n            if start >= 2 * sequence[-1] <= m:\n                # add the current element to the sequence and break out of the inner loop\n                sequence.append(start)\n                break\n\n        # if the sequence is not empty, increment the count\n        if sequence:\n            count += 1\n\n    # return the total number of possible sequences\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == 0:\n        raise ValueError(\"List1 is empty\")\n    if len(list2) == 0:\n        raise ValueError(\"List2 is empty\")\n    if len(list2) > len(list1):\n        raise ValueError(\"List2 is longer than List1\")\n    \n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Create a copy of the list to modify it\n    list1_modified = list1.copy()\n\n    # Get the last element of the first list\n    last_element = list1_modified.pop()\n\n    # Add the elements of the second list to the end of the first list\n    list1_modified.extend(list2)\n\n    # Add the last element of the first list back to the end of the list\n    list1_modified.append(last_element)\n\n    # Return the modified list\n    return list1_modified"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Get the last element of the first list\n    last_element = list1[length-1]\n    \n    # Remove the last element of the first list\n    list1 = list1[:length-1]\n    \n    # Append the elements of the second list to the end of the first list\n    list1 += list2\n    \n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_index = len(list1) - 1\n    for i in range(len(list1)):\n        list1[last_index] = list2[i]\n        last_index -= 1\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) == 0:\n        raise ValueError(\"The second list cannot be empty.\")\n\n    if len(list1) == 0:\n        list1 = list2\n        return list1\n\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_characters(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Define a function to calculate the square root of a number using Taylor series expansion\n    def sqrt_approximation(x):\n        y = 1/2*(x - x**3/3! + x**5/5! - x**7/7!)\n        return y\n\n    # Define a function to calculate the square root of a perfect square\n    def perfect_square_root(x):\n        y = sqrt_approximation(x + 1)\n        return y\n\n    # Calculate the square root of the given number using Taylor series expansion\n    sqrt_x = perfect_square_root(N)\n\n    # Calculate the next perfect square greater than the given number using the formula\n    next_sqrt = sqrt_x + 1\n\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the sqrt(N)\n    sqrtN = int(math.sqrt(N))\n    # make the square of sqrt(N)\n    sqrtNSq = sqrtN * sqrtN\n    \n    # find the power of 2 less than sqrt(N)\n    pow2 = 1\n    while pow2*pow2 <= sqrtNSq:\n        pow2 += 1\n    \n    # calculate the square of the power of 2\n    pow2Sq = pow2 * pow2\n    \n    # if N is a perfect square\n    if pow2Sq == sqrtN * sqrtN:\n        # find the next greater perfect square\n        while pow2Sq < sqrtN * sqrtN:\n            pow2 += 1\n            pow2Sq = pow2 * pow2\n        \n        # return the next perfect square\n        return pow2\n    \n    # if N is not a perfect square\n    else:\n        # find the previous perfect square\n        while pow2Sq > sqrtN * sqrtN:\n            pow2 -= 1\n            pow2Sq = pow2 * pow2\n        \n        # return the previous perfect square\n        return pow2\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return 1\n    if N <= 4:\n        return 5\n    sqrtN = int(math.sqrt(N))\n    sqr = sqrtN*sqrtN\n    while True:\n        if sqr < N:\n            return sqr\n        else:\n            N = (4*sqr - N)//2\n            sqrtN = int(math.sqrt(N))\n            sqr = sqrtN*sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        if N % 4 == 0:\n            return N + 1\n        else:\n            N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while i**2 <= N:\n        i += 1\n    return i**2\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    # Initialize a variable to keep track of the current perfect square\n    current_psq = N\n\n    # Initialize a variable to keep track of the current digit of the square root\n    current_digit = int(math.sqrt(current_psq))\n\n    # Initialize a variable to keep track of the next digit of the square root\n    next_digit = 0\n\n    # Loop until we find the next perfect square greater than the current number\n    while True:\n        # Increment the current digit by one\n        current_digit += 1\n\n        # Calculate the next perfect square with the current digit\n        next_psq = current_digit * current_digit\n\n        # Check if the next perfect square is greater than N\n        if next_psq > N:\n            # Calculate the next perfect square with the next digit\n            next_psq = next_digit * next_digit\n\n            # Check if the next perfect square is greater than N\n            if next_psq > N:\n                # Return the next perfect square greater than N\n                return next_psq\n\n            # Return the next perfect square greater than N\n            return current_digit * current_digit\n\n        # Check if the next perfect square is greater than N\n        if next_psq > N:\n            # Return the next perfect square greater than N\n            return current_digit * current_digit\n\n        # Update the current digit and the next digit\n        next_digit = current_digit"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 2\n    while (i**2 <= N):\n        i += 1\n    return i**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a positive integer N and returns the next perfect square number greater than N.\n    If there is no such number, it returns -1.\n    '''\n\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # If the square root is an odd integer, find the next odd integer greater than sqrt_N\n    if sqrt_N**2 < N:\n        next_sqrt_N = sqrt_N + 1\n        while next_sqrt_N**2 <= N:\n            next_sqrt_N += 1\n        return next_sqrt_N - 1\n    else:\n        # If the square root is an even integer, find the next even integer greater than sqrt_N\n        next_sqrt_N = sqrt_N + 2\n        while next_sqrt_N**2 <= N:\n            next_sqrt_N += 2\n        return next_sqrt_N - 2\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # Increment the square root until N becomes a perfect square\n    while N!= int(N ** 2):\n        sqrt_N += 1\n\n    # Return the next perfect square greater than N\n    return sqrt_N * sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Find the integer part of the square root\n    int_sqrt_N = int(sqrt_N)\n    # Multiply the integer part by the integer part to get the next perfect square\n    next_psq = int_sqrt_N * int_sqrt_N\n    # If the next perfect square is greater than N, return the next perfect square\n    if next_psq > N:\n        return next_psq\n    # If the next perfect square is less than N, return the next perfect square plus 1\n    else:\n        return next_psq + 1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a bitonic subsequence for the given array.\n\n    Args:\n        arr: list of integers\n\n    Returns:\n        int: the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n\n    # Initialize the maximum sum variables\n    max_left = arr[0]\n    max_right = arr[n - 1]\n\n    # Iterate through the array\n    while left < right:\n        # Check if the current array element is increasing\n        if arr[left] < arr[right]:\n            # If yes, check if the subsequence is increasing\n            if arr[left] < max_left and arr[right] > max_right:\n                max_left = arr[left]\n                max_right = arr[right]\n\n            # If the current array element is smaller than the left pointer, move the left pointer\n            if arr[left] < max_right:\n                left += 1\n        else:\n            # If no, check if the subsequence is decreasing\n            if arr[left] > max_left and arr[right] < max_right:\n                max_left = arr[left]\n                max_right = arr[right]\n\n            # If the current array element is larger than the right pointer, move the right pointer\n            if arr[right] > max_left:\n                right -= 1\n\n    # Return the maximum sum of the subsequence\n    return max_left + max_right"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables to store the maximum sum and the current subsequence sum\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, len(arr)):\n        # If the current element is less than the previous element, update the current subsequence sum\n        if arr[i] < arr[i - 1]:\n            curr_sum = arr[i]\n        # If the current element is greater than the previous element, update the maximum sum and reset the current subsequence sum\n        else:\n            max_sum = max(max_sum, curr_sum + arr[i])\n            curr_sum = arr[i]\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Create a copy of the array to avoid modifying the original array\n    arr_copy = arr.copy()\n\n    # Sort the copy of the array in increasing order\n    arr_copy.sort()\n\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = arr_copy[0]\n    current_sum = 0\n\n    # Iterate through the sorted copy of the array\n    for num in arr_copy:\n        # Add the current number to the current sum\n        current_sum += num\n        # If the current sum is less than the maximum sum, update the maximum sum\n        if current_sum < max_sum:\n            max_sum = current_sum\n        # If the current sum is greater than the maximum sum, reset the current sum to the current number\n        elif current_sum > max_sum:\n            current_sum = num\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    def is_bitonic(arr):\n        \"\"\"\n        Helper function to check if a given array is bitonic.\n        \"\"\"\n        if len(arr) < 3:\n            return False\n\n        if arr[1] < arr[0]:\n            return False\n\n        for i in range(1, len(arr) - 1):\n            if arr[i] < arr[i - 1] and arr[i] > arr[i + 1]:\n                return False\n            elif arr[i] > arr[i - 1] and arr[i] < arr[i + 1]:\n                return False\n\n        return True\n\n    def is_decreasing(arr):\n        \"\"\"\n        Helper function to check if a given array is decreasing.\n        \"\"\"\n        if len(arr) < 2:\n            return True\n\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                return False\n\n        return True\n\n    def is_increasing(arr):\n        \"\"\"\n        Helper function to check if a given array is increasing.\n        \"\"\"\n        if len(arr) < 2:\n            return True\n\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                return False\n\n        return True\n\n    def max_subsequence_sum(arr):\n        \"\"\"\n        Helper function to find the maximum sum of a subsequence of the given array.\n        \"\"\"\n        if is_increasing(arr):\n            return sum(arr)\n        elif is_decreasing(arr):\n            return -sum(arr[::-1])\n        elif is_bitonic(arr):\n            if is_increasing(arr[1:]):\n                return max_subsequence_sum(arr[1:])\n            else:\n                return -max_subsequence_sum(arr[:-1])\n        else:\n            return None\n\n    max_sum_subsequence = max_subsequence_sum(arr)\n\n    return max_sum_subsequence"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Check if the array is bitonic\n    is_bitonic = True\n    for i in range(1, n-1):\n        if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n            is_bitonic = False\n            break\n    if not is_bitonic:\n        return 0\n\n    # Initialize variables\n    dp = [0] * n\n    max_sum = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            dp[i] = max_ending_here + arr[i]\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n        elif arr[i] >= arr[i+1]:\n            dp[i] = max_ending_here + arr[i]\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n        else:\n            if dp[i-1] > dp[i+1]:\n                dp[i] = dp[i-1]\n            else:\n                dp[i] = dp[i+1]\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n        max_ending_here = max(arr[i], max_ending_here)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Check if the array is empty or not\n    if len(arr) < 2:\n        return 0\n\n    # Initialize variables for the maximum sum of a bitonic subsequence\n    left_sum = 0\n    right_sum = 0\n    max_sum = 0\n\n    # Initialize variables for the current sum of a bitonic subsequence\n    current_sum = 0\n\n    # Traverse through the array and update the current sum of the bitonic subsequence\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            current_sum += arr[i] - arr[i + 1]\n        else:\n            current_sum -= arr[i + 1] - arr[i]\n\n        # Update the maximum sum of the bitonic subsequence if it is greater than the current maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Update the sum of the left and right subsequences\n        if arr[i] > arr[i - 1]:\n            left_sum += arr[i] - arr[i - 1]\n        else:\n            left_sum -= arr[i - 1] - arr[i]\n\n        if arr[i] < arr[i + 1]:\n            right_sum += arr[i + 1] - arr[i]\n        else:\n            right_sum -= arr[i] - arr[i - 1]\n\n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    if arr[0] < arr[1] and arr[1] < arr[2]:\n        return max(arr[0], arr[2])\n    elif arr[n-1] > arr[n-2] and arr[n-2] > arr[n-3]:\n        return max(arr[n-1], arr[n-3])\n    else:\n        return max(arr[0], arr[n-1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # create a copy of the array\n    arr_copy = arr.copy()\n\n    # sort the copy in ascending order\n    arr_copy.sort()\n\n    # initialize two pointers, one for the left side and one for the right side\n    left = 0\n    right = len(arr_copy) - 1\n\n    # initialize the maximum sum and the maximum sum ending at each pointer\n    max_sum_left = arr_copy[left]\n    max_sum_right = arr_copy[right]\n\n    # loop through the array, checking for bitonicity and updating the maximum sum and sum ending at each pointer\n    while left < right:\n        if arr_copy[left] < arr_copy[right]:\n            # left pointer is increasing and right pointer is decreasing, so update the maximum sum\n            max_sum_left += arr_copy[left]\n        elif arr_copy[left] > arr_copy[right]:\n            # left pointer is decreasing and right pointer is increasing, so update the maximum sum\n            max_sum_right += arr_copy[right]\n        else:\n            # left pointer is equal to right pointer, so the subsequence is increasing and decreasing, so update both pointers\n            left += 1\n            right -= 1\n\n        # update the maximum sum ending at the left pointer\n        max_sum_left = max(max_sum_left, max_sum_right)\n\n        # update the maximum sum ending at the right pointer\n        max_sum_right = max(max_sum_left, max_sum_right)\n\n    return max_sum_left"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Find the local minima\n    local_minima = [arr[0]]\n    for i in range(1, n):\n        if arr[i] < local_minima[-1]:\n            local_minima.append(arr[i])\n    \n    # Find the global minima and maxima\n    global_min = float('inf')\n    global_max = float('-inf')\n    for i in range(n):\n        if local_minima[i] < global_min:\n            global_min = local_minima[i]\n        if local_minima[i] > global_max:\n            global_max = local_minima[i]\n    \n    # Find the maximum sum of a bitonic subsequence\n    local_max = 0\n    for i in range(n):\n        if local_minima[i] < global_max:\n            local_max = max(local_max + local_minima[i], 0)\n        else:\n            local_max = max(local_max, 0)\n    \n    return local_max"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    dp = [0] * n\n    max_sum = float('-inf')\n    \n    # Calculate the maximum sum for each subarray\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize guess to the middle value of the interval [1, number]\n    guess = (number + 1) // 2\n    \n    # Initialize error to half the difference between the guess and the square root of the number\n    error = (number - guess ** 2) // 2\n    \n    while error > 0.00001:\n        guess = guess - error\n        error = (number - guess ** 2) // 2\n        \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Use the babylonian method to compute the square root of the input number\n    x = 1\n    y = number / x\n    while y < 0.001:\n        x = x - 1\n        y = number / x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Check if the input is a number\n    if not isinstance(number, (int, float)):\n        raise ValueError('Input must be a number')\n\n    # Initialize variables\n    x = number / 2\n    y = x\n    n = 0\n\n    # Iterate until the difference between x and y is smaller than a certain threshold\n    while abs(x - y) > 0.0001:\n        y = 0.5 * (x + number / x)\n        x = y\n        n += 1\n\n    # Return the value of x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    # initialize variables\n    x = number / 2\n    y = number / x\n    count = 0\n    \n    # use Babylonian method to find square root\n    while abs(x - y) > 0.00001:\n        x = y\n        y = (x + number / x) / 2\n        count += 1\n    \n    # return the square root and the number of iterations used\n    return y, count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = number\n    epsilon = 1e-10\n    i = 0\n    while abs(x - x**2) > epsilon:\n        x = (x + number/x) / 2\n        i += 1\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function uses the Babylonian method to compute the square root of a given number.\n\n    Args:\n    number (float): The number whose square root is desired.\n\n    Returns:\n    float: The square root of the input number using the Babylonian method.\n    '''\n    # Use the Babylonian method to find the square root of the input number.\n    x = number\n    y = (x + number / x) / 2\n    while abs(x - y) > 0.0001:\n        x = y\n        y = (x + number / x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Number cannot be negative.\"\n    elif number == 0:\n        return 0\n    else:\n        guess = 1\n        while True:\n            next_guess = guess + (number / guess) / 2\n            if abs(next_guess - guess) < 0.00001:\n                return next_guess\n            guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 1e-10:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess**2 > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    if number <= 0:\n        return \"Invalid input. Please enter a positive number.\"\n\n    # Start with a guess of 1/2 the number and repeatedly calculate the\n    # next guess by adding or subtracting half the guess from the square\n    # root of the original number.\n    guess = number / 2\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 1e-9:\n            break\n        guess = next_guess\n\n    return round(guess, 6)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [1] * n\n    max_length = 1\n    start = 0\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-1] + 2\n            if dp[i] > max_length:\n                max_length = dp[i]\n                start = i-dp[i]\n        else:\n            dp[i] = 1\n            if dp[i] > max_length:\n                max_length = dp[i]\n                start = i\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 1:\n        return 1\n    lps_table = [0] * n\n    max_length = 1\n    start = 0\n\n    for i in range(1, n):\n        if str[i] == str[i - 1]:\n            lps_table[i] = lps_table[i - 1] + 1\n            max_length = max(max_length, lps_table[i])\n        else:\n            if lps_table[start] > max_length:\n                start = i - lps_table[start]\n            while str[i]!= str[start] and start!= 0:\n                start = lps_table[start - 1]\n            lps_table[i] = start + 1\n            max_length = max(max_length, lps_table[i])\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(string):\n    n = len(string)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    max_len = 1\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                max_len = max(max_len, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store the length of the longest palindromic subsequence ending at i \n    # in the string str\n    table = [[0] * n for i in range(n)]\n\n    # Initialize the length of the longest palindromic subsequence as 1 \n    for i in range(n):\n        table[i][i] = 1\n\n    # Iterate over all possible substrings and check if they are palindromes or not\n    # and update the length of the longest palindromic subsequence accordingly\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                table[i][j] = 2 + table[i+1][j-1]\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # The length of the longest palindromic subsequence is stored in table[0][n-1]\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Check if the string is empty\n    if not str:\n        return 0\n\n    # Create a 2D array to store the length of the longest palindromic subsequence for each substring\n    dp = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the first row and first column of the 2D array\n    for i in range(len(str)):\n        dp[i][i] = 1\n\n    # Fill the rest of the array using dynamic programming\n    for length in range(3, len(str) + 1):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][len(str) - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Initialize a 2D table to store the lengths of longest palindromic subsequences\n    # for each substring in the string.\n    table = [[0 for j in range(len(str))] for i in range(len(str)+1)]\n    \n    # Initialize the base cases for the table:\n    # For empty string, the longest palindromic subsequence is empty\n    table[0][0] = 0\n    \n    # Fill the table using dynamic programming.\n    # Start from the second character and fill the table in all possible ways.\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            # If the characters at i-1 and j-1 are same,\n            # then the longest palindromic subsequence of length i+j-1 is the\n            # concatenation of the subsequences of length i and length j.\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            # If the characters at i-1 and j-1 are different,\n            # then the longest palindromic subsequence of length i+j-1 is the maximum of\n            # the longest palindromic subsequences of length i and length j.\n            else:\n                table[i][j] = max(table[i][j-1], table[i-1][j])\n    \n    # The length of the longest palindromic subsequence is stored in table[len(str)][len(str)]\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store LPS lengths\n    L = [[0] * n for i in range(n)]\n\n    # fill the table in bottom up manner\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i] == str[j]:\n                L[i][j] = L[i-1][j-1] + 2\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # return the length of the longest palindromic subsequence\n    return L[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(string):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(string)\n    # Initialize variables to store lengths of longest palindromic subsequence of odd length and even length respectively\n    palindrome_odd = 0\n    palindrome_even = 0\n    # Initialize variables to store the start and end of the longest palindromic subsequence\n    start_odd = 0\n    start_even = 0\n    # Loop through each character in the string\n    for i in range(n):\n        # Check if the current character is a palindrome\n        if string[i] == string[i:i+2][::-1]:\n            # If the current character is a palindrome of odd length, check if it is the longest palindromic subsequence seen so far\n            if i+1-palindrome_odd >= 0 and string[i+1-palindrome_odd] == string[i:i+2][::-1]:\n                palindrome_odd += 1\n                # If the current palindrome of odd length is longer than the longest palindromic subsequence seen so far, update the variables\n                if palindrome_odd > palindrome_even:\n                    palindrome_even = palindrome_odd\n                    start_even = i-palindrome_even+1\n            # If the current character is a palindrome of even length, check if it is the longest palindromic subsequence seen so far\n            elif i-palindrome_even >= 0 and string[i-palindrome_even] == string[i:i+2]:\n                palindrome_even += 1\n                # If the current palindrome of even length is longer than the longest palindromic subsequence seen so far, update the variables\n                if palindrome_even > palindrome_odd:\n                    palindrome_odd = palindrome_even\n                    start_odd = i-palindrome_even\n        else:\n            # Reset variables if a non-palindrome is encountered\n            palindrome_odd = 0\n            palindrome_even = 0\n            start_odd = 0\n            start_even = 0\n    # Return the length of the longest palindromic subsequence\n    return max(palindrome_odd, palindrome_even)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    n = len(str)\n    # Create a 2D table to store length of longest palindromic subsequence for substrings of length i \n    # and ending at index j in the string. \n    table = [[0] * n for _ in range(n)]\n    # Initialize length of longest palindromic subsequence for the empty string and all substrings of length 1 \n    for i in range(n): \n        table[i][i] = 1\n        if str[i] == str[i+1]: # if the first and last characters are same, length of palindromic substring is 2 \n            table[i][i+1] = 2 \n    # Fill the table in bottom up manner by checking all substrings of length 2 to n-1 and updating the table \n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1\n            if str[i] == str[j]: # if the first and last characters are same, length of palindromic substring is 2 + length of subsequence ending at i+1 and j-1 \n                table[i][j] = 2 + table[i+1][j-1] \n    return table[-1][-1] # return the length of the longest palindromic subsequence for the entire string \n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize a dictionary to store the length of the longest palindromic subsequence ending at each index\n    length_dict = {0: 1}\n\n    # Iterate over the string and update the length_dict accordingly\n    for i in range(1, len(str)):\n        # Check if the current character is a palindrome\n        if str[i] == str[i-1]:\n            length_dict[i] = length_dict[i-1] + 2\n        else:\n            # Check if the current character is a palindrome using a sliding window approach\n            j = length_dict[i-1] - 1\n            while j >= 0 and str[i]!= str[j]:\n                j = length_dict[j-1]\n            # If the current character is a palindrome using a sliding window approach, update the length_dict accordingly\n            if j >= 0 and str[i] == str[j]:\n                length_dict[i] = j + 2\n            else:\n                # If the current character is not a palindrome, update the length_dict accordingly\n                length_dict[i] = 1\n\n    # Return the length of the longest palindromic subsequence in the string\n    return max(length_dict.values())"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/(1/2 + 1/3 +... + 1/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return n * (n - 1) / (2 * (n - 1) + 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Calculate the sum of harmonic numbers up to n-1\n    harmonic_sum = sum([1 / i for i in range(1, n)])\n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 / n) * ((1 + 1 / n)**(n-1) - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1) / (2*(n-1)**2)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    harmonic_sum = 0\n\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the harmonic sum to 0\n    sum_of_harmonic_numbers = 0\n    # Loop through the range of n-1\n    for i in range(n-1):\n        # Add 1/i^2 to the harmonic sum\n        sum_of_harmonic_numbers += 1/(i*i)\n    # Return the harmonic sum\n    return sum_of_harmonic_numbers"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set for storing the intersection\n    intersection = set()\n\n    # Iterate through the first array\n    for num1 in array_nums1:\n        # Check if the number is present in the second array\n        if num1 in array_nums2 and num1 not in intersection:\n            intersection.add(num1)\n\n    # Return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set for each array to store unique values\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the two sets using the intersection() method\n    intersection_set = set_nums1.intersection(set_nums2)\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two dictionaries to store the elements and their indices in both arrays\n    dict1 = {}\n    dict2 = {}\n\n    # iterate through the first array and add each element to the dictionary\n    for i, num in enumerate(array_nums1):\n        dict1[num] = i\n\n    # iterate through the second array and add each element to the dictionary\n    for num in array_nums2:\n        if num in dict1:\n            dict2[num] = dict1[num]\n\n    # create an empty list to store the intersection\n    intersection = []\n\n    # iterate through the dictionary and add the elements to the intersection list\n    for num in dict2:\n        intersection.append(array_nums1[dict2[num]])\n\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the sets\n    intersection = set_nums1.intersection(set_nums2)\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Find the intersection by comparing each element of the arrays\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each number in the second array\n    freq_dict = {}\n    for num in array_nums2:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # Create a list to store the intersection of the two arrays\n    intersection = []\n\n    # Iterate through the first array and check if each number appears in the second array\n    for num in array_nums1:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty dictionary to store the counts of elements in array_nums1\n    count_dict1 = {}\n\n    # Loop through each element in array_nums1 and increment its count in count_dict1\n    for num in array_nums1:\n        count_dict1[num] = count_dict1.get(num, 0) + 1\n\n    # Create an empty set to store the common elements between array_nums1 and array_nums2\n    common_set = set()\n\n    # Loop through each element in array_nums2 and check if its count is in count_dict1\n    for num in array_nums2:\n        if num in count_dict1:\n            # If it is, add it to the common_set and subtract its count from count_dict1\n            common_set.add(num)\n            count_dict1[num] -= 1\n\n    # Return the elements in common_set as a list\n    return list(common_set)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1 \n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(0, list[i])\n    new_list.insert(0, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[:i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(element)\n        new_list.append(lst[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Initialize a new list to store the modified list\n    modified_list = []\n    \n    # Iterate through each element in the original list\n    for i in range(len(lst)):\n        # Insert the element before the current element\n        modified_list.insert(i, element)\n    \n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Define an empty list to store the inserted elements\n    inserted_list = []\n    # Loop through each element in the list\n    for item in list:\n        # Insert the element before the current item\n        inserted_list.insert(0, item)\n    # Return the list with the inserted elements\n    return inserted_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and converts them to polar coordinates.\n    The polar coordinates are returned as a list of tuples.\n    '''\n    polars = []\n    for number in numbers:\n        polar = (abs(number), cmath.phase(number))\n        polars.append(polar)\n    return polars"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        # extract real and imaginary parts of complex number\n        real = numbers[i].real\n        imag = numbers[i].imag\n        \n        # calculate absolute value of imaginary part\n        abs_imag = abs(imag)\n        \n        # calculate polar angle\n        theta = abs_imag / abs_imag + cmath.pi/2\n        \n        # calculate magnitude of complex number\n        magnitude = abs(numbers[i])\n        \n        # add polar coordinates to list\n        polar_coordinates = [theta, magnitude]\n        numbers[i] = complex(polar_coordinates[0] * magnitude * cmath.cos(theta), \n                                polar_coordinates[0] * magnitude * cmath.sin(theta))\n        \n        print(numbers[i])"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n\n    Args:\n        numbers (list[complex]): a list of complex numbers\n\n    Returns:\n        list[float]: a list of polar coordinates\n    \"\"\"\n\n    polar_coords = []\n    for num in numbers:\n        # calculate the magnitude and phase of the complex number\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        phase = cmath.phase(num)\n\n        # convert the magnitude and phase to polar coordinates\n        polar_num = magnitude * cmath.exp(1j * phase)\n\n        # add the polar number to the output list\n        polar_coords.append(polar_num)\n\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        num = complex(num)\n        if num == 0:\n            result.append(0)\n        else:\n            r = abs(num)\n            phi = cmath.phase(num)\n            result.append([r, phi])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # convert the complex number to polar coordinates using the cmath module\n        r = abs(number)\n        theta = cmath.phase(number)\n        # create a tuple of polar coordinates for each complex number\n        polar_coords = (r, theta)\n        result.append(polar_coords)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns the corresponding polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        polar_num = cmath.polar(num)\n        # Extract the real and imaginary components\n        real_part = polar_num[0]\n        imag_part = polar_num[1]\n        # Print the polar coordinates\n        print(f\"({real_part:.2f}, {imag_part:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        x, y = num\n        r = cmath.sqrt(x ** 2 + y ** 2)\n        theta = cmath.phase(num)\n        print(f\"({r}, {theta})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input, and returns a list of their polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        modulus = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((modulus, angle))\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)-n+1):\n        comb = tuple(l[i:i+n])\n        combs.append(comb)\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # iterate over all possible combinations of length n using itertools.combinations_with_replacement()\n    for combo in combinations_with_replacement(l, n):\n        # convert the combination to a tuple and append it to the result list\n        result.append(tuple(combo))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = list(combinations_with_replacement(l, n))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n-1):\n            result.append((l[i],)+j)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations with replacement using itertools.combinations_with_replacement() function\n    combinations = list(combinations_with_replacement(l, n))\n\n    # Iterate over all combinations and convert them to a list of tuples\n    result = []\n    for comb in combinations:\n        result.append(tuple(comb))\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create a list of all possible combinations of length n with replacement\n    combinations = combinations_with_replacement(l, n)\n    # create an empty list to store the tuples\n    result = []\n    # iterate over the combinations and add a tuple for each combination to the result list\n    for comb in combinations:\n        result.append(tuple(comb))\n    # return the result list\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations of length n\n    for i in range(1, len(l) + 1):\n        for j in combinations_with_replacement(l, i):\n            # print the combination with repetition\n            print(j)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes a non-negative integer as input and returns the number of prime numbers less than the input number.\n    '''\n    prime_count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n+1):\n        isPrime = True\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b,a)\n\nprint(swap_numbers(10,20)) # Output: (20, 10)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        elif test_tup1[i] < test_tup2[i]:\n            max_tup += (test_tup2[i],)\n        else:\n            max_tup += (test_tup1[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1)\n    max_tuple = test_tup1\n    for tup in test_tup2:\n        if tup > max_val:\n            max_val = tup\n            max_tuple = tup\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Find the maximum element in both tuples\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # Compare the maximum elements and return the tuple with the maximum element\n    if max1 > max2:\n        return test_tup1\n    elif max1 < max2:\n        return test_tup2\n    else:\n        return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the input tuples are valid\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        return \"Invalid input\"\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Invalid input\"\n\n    # Compare the elements of the tuples and return the max value\n    max_value = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_value = test_tup1[i]\n        else:\n            max_value = test_tup2[i]\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # Check if all elements of the tuples are equal\n        if all(x == y for x, y in zip(test_tup1, test_tup2)):\n            # All elements are equal, so return the first tuple\n            return test_tup1\n        # Check if all elements of the tuples are different\n        elif all(x!= y for x, y in zip(test_tup1, test_tup2)):\n            # All elements are different, so return the second tuple\n            return test_tup2\n        # Check if some elements of the tuples are equal and some are different\n        else:\n            # Find the index of the first element that is different\n            index_diff = next((i for i, x in enumerate(test_tup1) if x!= y), None)\n            # If found, return the first tuple with that element replaced by the max value\n            return tuple(x if i == index_diff else max(x, y) for i, x, y in zip(range(len(test_tup1)), test_tup1, test_tup2))\n    # Check if one of the tuples is shorter\n    elif len(test_tup1) < len(test_tup2):\n        # Return the first tuple\n        return test_tup1\n    # Check if one of the tuples is longer\n    else:\n        # Return the second tuple\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return (max(test_tup1), max(test_tup2))"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    if max_val1 > max_val2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the array of primes\n    primes = [2]\n    \n    # Loop through the range of primes\n    for i in range(3, n+1, 2):\n        # Check if the number is prime\n        is_prime = True\n        for j in range(2, i//2+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    \n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n\n    # Initialize a variable to keep track of the current prime number\n    current_prime = 2\n\n    # Find the nth newman\u2013shanks\u2013williams prime number\n    for i in range(1, n + 1):\n        if is_prime(current_prime):\n            print(current_prime)\n        # Increment the current prime number\n        current_prime += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    count = 0\n    while count < n:\n        prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            count += 1\n            if count == n:\n                return i\n        i += 1\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize variables\n    prime = 0\n    count = 1\n    x = 2\n\n    # Calculate the first prime number\n    while count < n:\n        if is_prime(x):\n            prime = x\n            count += 1\n        x += 1\n\n    # Calculate the nth newman-shanks-williams prime number\n    count = 0\n    x = 2\n    while count < n - 1:\n        if is_prime(x):\n            prime = x\n            count += 1\n        x += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return prime\n\n\ndef is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    count = 0\n    current_number = 2\n    \n    # loop through numbers starting from 2\n    while count < n:\n        # check if the current number is a newman-shanks-williams prime number\n        if is_newman_prime(current_number):\n            count += 1\n            \n        # update the current number\n        current_number += 1\n        \n    # return the nth newman-shanks-williams prime number\n    return current_number - 1\n\ndef is_newman_prime(n):\n    '''\n    Define a function to check if a given number is a newman-shanks-williams prime number.\n    '''\n    # initialize variables\n    count = 0\n    current_number = 2\n    \n    # loop through numbers starting from 2\n    while current_number < n:\n        # check if the current number is a newman-shanks-williams prime number\n        if n % current_number == 0 and is_prime(current_number):\n            return False\n        \n        # update the current number\n        current_number += 1\n        \n    # return True if the number is a newman-shanks-williams prime number, otherwise False\n    return True\n\ndef is_prime(n):\n    '''\n    Define a function to check if a given number is prime.\n    '''\n    # initialize variables\n    count = 0\n    divisor = 2\n    \n    # loop through numbers starting from 2\n    while divisor <= n:\n        # check if the current number is divisible by the divisor\n        if n % divisor == 0:\n            return False\n        \n        # update the divisor\n        divisor += 1\n        \n    # return True if the number is prime, otherwise False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    p = 2\n    \n    # Loop through prime numbers up to sqrt(n)\n    while p * p <= n:\n        # Check if p is a prime number\n        if n % p == 0:\n            return None  # n is not a newman-shanks-williams prime number\n        # Check if n - p is a newman-shanks-williams prime number\n        count += 1\n        q = n - p\n        if q > p and is_prime(q):\n            return count\n        # Increment p by 1 and check if n - p is a newman-shanks-williams prime number\n        p += 1\n        count += 1\n\n    # Return None if p is greater than sqrt(n) and n - p is not a newman-shanks-williams prime number\n    return None\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = []\n    count = 0\n    \n    # iterate through all numbers from 2 to n\n    for i in range(2, n + 1):\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            count += 1\n            if count == n:\n                return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    # Check if n is valid\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the nth Newman-Shanks-Williams prime\n    while len(primes) < n:\n        primes.extend([next_prime(p) for p in primes])\n\n    return primes[n-1]\n\ndef next_prime(n):\n    \"\"\"\n    Calculate the next prime number after n.\n    \"\"\"\n    if n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n % 2 == 0:\n        return next_prime(n + 1)\n    else:"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initializing a list to store the prime numbers\n    prime_list = [2]\n\n    # iterating over numbers from 3 to n\n    for i in range(3, n+1):\n        # checking if i is a prime number\n        is_prime = True\n        for j in prime_list:\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, adding it to the list\n        if is_prime:\n            prime_list.append(i)\n\n    # returning the nth prime number in the list\n    return prime_list[n-3]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Define a function to find the nth newman prime number\n    def nth_newman_prime():\n        num = 1\n        while True:\n            if is_prime(num) and is_prime(num + 2):\n                return num\n            num += 4\n    \n    # Find the nth newman prime number\n    return nth_newman_prime()"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n    Args:\n        test_tup1: a tuple of numbers\n        test_tup2: a tuple of numbers\n\n    Returns:\n        A tuple of the same length as test_tup1 with the element-wise division result between the corresponding elements of test_tup1 and test_tup2.\n    \"\"\"\n    return tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of two tuples must be equal.\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] == 0:\n                print(\"Error: Division by zero is not allowed.\")\n                return None\n            else:\n                test_tup1[i] = test_tup1[i] / test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Use zip to create a list of tuples of corresponding elements from both tuples\n    zipped_tup = zip(test_tup1, test_tup2)\n    # Use a list comprehension to perform element-wise division\n    result_tup = [tup[0] / tup[1] for tup in zipped_tup]\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]/test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize an empty list to hold the results\n    result_list = []\n\n    # Loop through each element in the first tuple\n    for num1 in test_tup1:\n        # Loop through each element in the second tuple\n        for num2 in test_tup2:\n            # Perform the division operation and append the result to the result_list\n            result_list.append(num1 / num2)\n\n    # Return the result_list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples should have the same length.\")\n    \n    # create an empty list to store the result\n    result_list = []\n    \n    # iterate through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division\n        result = test_tup1[i] / test_tup2[i]\n        # add the result to the result list\n        result_list.append(result)\n    \n    # return the result list\n    return result_list"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        print(\"List length is not a multiple of L\")\n        return\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use slicing to split the list into two parts of length L\n    list2 = list1[L:]\n    list1 = list1[:L]\n    # Return the two lists as a tuple\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n:\n        print(\"L should be less than or equal to the length of the list.\")\n        return\n    elif L == 0 or L == n:\n        return (list1[:L], [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Initialize the two parts of the list as empty lists\n    part1 = []\n    part2 = []\n    \n    # Iterate through the original list and add elements to the first part of the list until the length of the first part is equal to L\n    for i in range(L):\n        if i < len(list1):\n            part1.append(list1[i])\n        else:\n            break\n    \n    # Iterate through the original list again and add elements to the second part of the list until the end of the list is reached\n    for i in range(L, len(list1)):\n        part2.append(list1[i])\n    \n    # Return the two parts of the list in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # initialize variables for first part and second part\n    part1 = []\n    part2 = []\n\n    # loop through the list and add elements to the appropriate part\n    for i in range(len(list1)):\n        if i < L:\n            part1.append(list1[i])\n        else:\n            part2.append(list1[i])\n\n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Sort the list\n    sorted_list = sorted(list1)\n\n    # Calculate the length of the first part\n    first_length = L\n\n    # Calculate the second part length\n    second_length = len(sorted_list) - first_length\n\n    # Split the list into two parts\n    first_part = sorted_list[:first_length]\n    second_part = sorted_list[first_length:]\n\n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than or equal to L\n    if len(list1) >= L:\n        # Split the list into two parts with length L\n        first_part = list1[:L]\n        second_part = list1[L:]\n        # Return the resulting lists in a tuple\n        return (first_part, second_part)\n    else:\n        # If the length of the list is less than L, raise an exception\n        raise ValueError('The length of the list must be greater than or equal to L.')"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts and store them in two lists\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    return h_age * dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate dog's age in dog's years\n    dog_years = 7 * h_age\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's years by subtracting the owner's age from current year\n    dog_years = 2021 - h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    split_list = []\n    for i in range(n):\n        if i % step == 0:\n            split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step < 1:\n        raise ValueError(\"Step must be a positive integer\")\n    if not isinstance(S, list):\n        raise TypeError(\"Input must be a list\")\n    if step == 1:\n        return [S]\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Convert the list to a list of lists of size step\n    result = [S[i:i+step] for i in range(0, len(S), step)]\n    # Remove the empty last list\n    result.pop()\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)] + [S[len(S)-1:]]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Define a list to store the resulting lists\n    result = []\n    \n    # Initialize a counter for the number of items processed so far\n    count = 0\n    \n    # Iterate over the input list\n    for item in S:\n        # Increment the counter for the number of items processed so far\n        count += 1\n        \n        # If the counter is a multiple of the step value, append the item to the result list\n        if count % step == 0:\n            result.append(item)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step == 0:\n        return [[]]\n    elif len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        n = len(S) // step + 1\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    surface_area = 6 * (l ** 2)\n\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    volume = l ** 3\n    lateral_surface_area = 2 * 3.14159 * l ** 2\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l  # Calculating the lateral surface area of a cube\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    print(\"The lateral surface area of the cube is:\", area)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [x for x in range(1, 2*n+1, 2)] # generating a list of odd numbers from 1 to 2n\n    sum_of_squares = sum([x**2 for x in odd_numbers]) # calculating the sum of squares of odd numbers\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through first n odd numbers\n    for i in range(2, n+1, 2):\n        # calculate square of odd number i\n        square = i**2\n        # add square to sum variable\n        sum += square\n\n    # return sum of squares of odd numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0  \n    for i in range(1, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to keep track of the sum of squares\n    sum_of_squares = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd natural number to the sum of squares\n        sum_of_squares += i*i\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 1\n    \n    while count <= n:\n        sum_of_squares += count ** 2\n        count += 2\n    \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the first two numbers to 1\n    prev_num = 1\n    current_num = 2\n    \n    # Loop n times to find then'th star number\n    for i in range(n-1): \n        # Find the sum of the previous and current numbers\n        sum_num = prev_num + current_num\n        \n        # Update the previous and current numbers\n        prev_num = current_num\n        current_num = sum_num\n    \n    # Return then'th star number\n    return current_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print(\"Invalid input\")\n        return\n    elif n == 1:\n        print(\"*\")\n        return\n    else:\n        i = 1\n        while i <= n:\n            print(\"*\" * i)\n            i += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the count variable to 0\n    count = 0\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # loop through the numbers from 1 to i\n        for j in range(1, i+1):\n            # if i divides j, print a star and increment the count\n            if i % j == 0:\n                print('*', end='')\n                count += 1\n        # print a newline character to move to the next line\n        print()\n    # return the final count value\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    return n * (n - 1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the result variable to 0\n    result = 0\n\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # add 1 to the result for each number that is a multiple of 3\n        if i % 3 == 0:\n            result += 1\n\n    # return the final result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the base value to 1\n    base = 1\n    # Initialize the result value to 0\n    result = 0\n    \n    # Loop through each digit from 1 to n\n    for i in range(1, n+1):\n        # Add the current digit to the result value\n        result += base**i\n    \n    # Return the result value\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first star number to 1\n    current_star = 1\n    # loop through the n-1 numbers and add 1 to each star number\n    for i in range(1, n):\n        current_star += 1\n    return current_star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variables to hold the digits of the number\n    hundreds = 0\n    tens = 0\n    ones = 0\n\n    # iterate through the digits of the number until it reaches n\n    while n > 0:\n        # find the number of times each digit appears in n\n        hundreds = n // 100\n        tens = (n % 100) // 10\n        ones = (n % 100) % 10\n\n        # add the number of stars for each digit to the total number of stars\n        if ones == 0:\n            n = hundreds * 10 + tens\n        else:\n            n = hundreds * 10 + tens + ones\n\n        # subtract the number of stars for each digit from n\n        n -= hundreds * 100 + tens * 10 + ones\n\n    # return the total number of stars\n    return n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    #initialize the counter variable to 1\n    counter = 1\n    #initialize the result variable to 1\n    result = 1\n    #loop through the range of n\n    for i in range(1, n+1):\n        #multiply the result by counter\n        result *= counter\n        #increment the counter\n        counter += 1\n    #return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the result variable to zero\n    result = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the current number to the result\n        result += i\n        \n        # if the result is greater than 10, stop the loop\n        if result > 10:\n            break\n        \n    # return the result\n    return result"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert the character to its ASCII value\n    ascii_value = ord(k)\n    # return the ascii value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for i in range(ord('a'), ord('z')+1):\n        if chr(i).lower() == k.lower():\n            return i\n    return -1"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = []\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            even_sum += num\n            if i % 2 == 0:\n                even_index.append(i)\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            index += 1\n            \n    return sum_even, index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_at_even_index = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += 1\n            if count % 2 == 0:\n                sum_even += arr[i]\n            else:\n                sum_even_at_even_index += arr[i]\n    return sum_even + sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and i % 2 == 0:\n            even_sum += num\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            if arr[i]%2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through the first n even natural numbers\n    for i in range(n): \n        # calculate the even number raised to the fifth power\n        result = 25**i\n\n        # add the result to the sum variable\n        sum += result\n\n    # return the sum of the first n even natural numbers that are raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum_power = 0\n    for i in range(n):\n        sum_power += i ** 5\n    return sum_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize a variable to store the sum of even raised to the fifth power\n    even_power_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        # Calculate the value of i raised to the fifth power\n        power = i ** 5\n        # Check if the value is even\n        if power % 2 == 0:\n            # Add the value to the sum\n            even_power_sum += power\n\n    # Return the sum of even raised to the fifth power\n    return even_power_sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    return [x[1] for x in test_list[::-1]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    # initialize an empty list to hold the rear elements\n    rear_list = []\n    \n    # iterate through the list of tuples\n    for tup in test_list:\n        # append the rear element to the rear_list\n        rear_list.append(tup[1])\n    \n    # return the rear_list\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must be the same length.\")\n        return\n    \n    # loop through the elements of the first tuple and subtract the corresponding element of the second tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            continue\n        elif test_tup1[i] > test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n        else:\n            test_tup1[i] = 0\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the number of elements in the first and second tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The number of elements in the first and second tuples are not equal.\"\n    \n    # Loop through the tuple and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    # loop through the tuples\n    for i in range(len(test_tup1)):\n        # subtract the elements of the first tuple and the second tuple\n        # with the same index\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    \n    # Create a new tuple with the substracted elements\n    substracted_tup = tuple([x - y for x, y in zip(test_tup1, test_tup2)])\n    \n    return substracted_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    # Iterate through the tuples and subtract the elements with the same index\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    # Return the resulting tuple\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize variables\n    sum_even = 0\n    index = 0\n\n    # Calculate sum of even index binomial coefficients\n    while index * (2*index + 1) <= n:\n        if index * (2*index + 1) % 2 == 0:\n            sum_even += math.comb(n, index)\n        index += 1\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through odd indices\n    for i in range(1, n+1, 2):\n        # calculate the even index binomial coefficient\n        coeff = math.comb(n, i)\n        # add the even index binomial coefficient to the sum\n        sum += coeff\n        \n    # return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = 1\n    even_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            even_sum += coeff\n        coeff *= (n-i)/i\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize a variable to store the sum of even binomial coefficients\n    sum_even_coeffs = 0\n\n    # loop through even indices\n    for i in range(2, n+1, 2):\n        # compute the binomial coefficient using math.comb function\n        coeff = math.comb(n, i)\n        # check if the coefficient is even\n        if coeff % 2 == 0:\n            # add the even coefficient to the sum\n            sum_even_coeffs += coeff\n\n    # return the sum of even binomial coefficients\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeffs = [1]\n    for i in range(1, n+1):\n        coeffs.append(math.factorial(2*i) // (math.factorial(i) * math.factorial(n-i)))\n    total_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            total_sum += coeffs[i]\n    return total_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Initialize sum and count\n    sum_even = 0\n    count_even = 0\n    \n    # Loop through all possible values of n\n    for i in range(2, n+1): \n        # Calculate the binomial coefficient\n        coeff = math.comb(n, i-1)\n        \n        # Check if the index is even\n        if i % 2 == 0: \n            # Add the coefficient to sum\n            sum_even += coeff\n            \n            # Increment count\n            count_even += 1\n            \n    # Return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    even_sum = 0\n    for i in range(2, n+1):\n        j = i\n        while j <= n:\n            even_sum += binomial(j, i)\n            j += 2\n    return even_sum\n\ndef binomial(n, k):\n    \"\"\"\n    This function returns the binomial coefficient of n choose k.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial(n-1, k-1) + binomial(n-1, k)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through the range of 0 to n\n    for i in range(n+1):\n        # calculate the binomial coefficient for i\n        binomial_coeff = math.comb(n, i)\n        \n        # check if the index is even\n        if i % 2 == 0:\n            # add the binomial coefficient to the sum\n            sum += binomial_coeff\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff = math.comb(n, 2)\n    sum_even_coeffs = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum_even_coeffs += coeff\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeff_sum = 0\n    for i in range(2, n+1):\n        even_binomial_coeff_sum += math.comb(n, i) * (2*i-1)\n    \n    return even_binomial_coeff_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3)*pi*r**2*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for volume of a cylinder: V = \u03c0r^2h\n    volume = (3.14 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*(h/3)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * (r**2) * h\n    return V"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # create an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    # iterate through the dictionary and add entries to the filtered dictionary if the value is greater than or equal to n\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n, and returns a new dictionary that contains only the entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i-1] < test_tup[i]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i] < test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n            continue\n        break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, element in enumerate(test_tup):\n        if element == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Calculate the sum of the decagonal numbers up to n\n    decagonal_sum = (n * (n + 1)) // 2\n\n    # Return True if the sum is odd, False otherwise\n    return decagonal_sum % 2!= 0"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    return (n * (2 * n - 1)) ** 2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the base number\n    base_num = 1\n    # Initialize the number of rows\n    num_rows = 1\n    # Initialize the number of columns\n    num_cols = n\n    # Initialize the sum of the rows\n    sum_rows = 0\n    # Initialize the sum of the columns\n    sum_cols = 0\n\n    # Check if the number of rows is less than or equal to 0\n    while num_rows <= 0:\n        # Add the base number to the sum of the rows\n        sum_rows += base_num\n        # Increment the number of rows\n        num_rows += 1\n\n    # Check if the number of columns is less than or equal to 0\n    while num_cols <= 0:\n        # Add the base number to the sum of the columns\n        sum_cols += base_num\n        # Increment the number of columns\n        num_cols += 1\n\n    # Check if the sum of the rows is equal to the n-th decagonal number\n    if sum_rows == n:\n        return True\n    # Check if the sum of the columns is equal to the n-th decagonal number\n    elif sum_cols == n:\n        return True\n    # If none of the above conditions are met, the number is not a decagonal number\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_valid_decagonal(num):\n        if num < 1:\n            return False\n        sqrt_num = int(num ** 0.5)\n        return num % 2 == 0 or sqrt_num % 2 == 0\n\n    num = 1\n    while num <= n:\n        if is_valid_decagonal(num):\n            return num\n        num += 1\n\n    return None"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # calculate the value of the nth decagonal number\n    decagonal = 1\n    for i in range(1, n + 1):\n        decagonal += (2 * i) + 1\n    # check if the nth decagonal number is a multiple of 3\n    if decagonal % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initializing the base number to 1\n    base = 1\n\n    # Looping through the values of n\n    for i in range(1, n+1):\n        # Multiplying the base number with 2*i and adding 1\n        decagonal_number = base * (2*i - 1)\n        # Checking if the decagonal number is equal to n\n        if decagonal_number == n:\n            return True\n    # If the loop completes without finding the nth decagonal number, then return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 12\n    elif n == 4:\n        return 22\n    elif n == 5:\n        return 35\n\n    # Calculate the decagonal number\n    decagonal = (4 * n) ** 0.5 + 1\n\n    # Check if the decagonal number is divisible by 2 and return the corresponding value\n    if decagonal % 2 == 0:\n        return 10 + 2 * decagonal - 1\n    else:\n        return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i*i\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    if n <= 0:\n        return False\n\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += i * (2*i - 1)\n\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    decagonal_numbers = [1, 12, 22, 32, 42, 52, 62, 72, 82, 92]\n\n    if n <= len(decagonal_numbers):\n        return decagonal_numbers[n - 1]\n    else:\n        return None"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    \n    # Check if the set has the same length as the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add unique elements to the set\n    for element in test_list:\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if the elements of a given list are unique or not.\n\n    :param test_list: List of elements to check for uniqueness.\n    :type test_list: list\n    :return: True if all elements in the list are unique, False otherwise.\n    :rtype: bool\n    \"\"\"\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to set and then back to list to remove duplicates\n    unique_list = list(set(test_list))\n    # check if the length of the original list is equal to the length of the unique list\n    if len(test_list) == len(unique_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists are not of equal length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    return [a - b for a, b in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n        \n    return sub"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # create a new list to store the result\n    result = []\n    # iterate over the elements of the two lists\n    for i in range(len(nums1)):\n        # subtract the corresponding elements from nums1 and nums2\n        result.append(nums1[i] - nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths.\")\n        return\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate through both lists\n    for i in range(len(nums1)):\n        # subtract the elements and add the result to the result list\n        result.append(nums1[i] - nums2[i])\n        \n    # return the result list\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # create a list of zeros to store frequency of each digit\n\n    # loop through each digit in the number\n    for digit in str(n):\n        freq[int(digit)] += 1  # increment the frequency of the digit\n\n    # check if each digit's frequency is less than or equal to itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    \n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n\n    for digit in digits:\n        freq[digit] += 1\n\n    for digit in range(10):\n        if freq[digit] > 0 and freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # count frequency of each digit in the integer\n    freq = [0]*10\n    for i in range(len(str(n))):\n        freq[int(str(n)[i])] += 1\n    \n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    \n    # if all the digits are valid, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 #initialize a list of 10 zeros to store the frequency of each digit in the integer\n    \n    for i in range(len(str(n))):\n        freq[int(str(n)[i])] += 1\n    \n    for i in range(10):\n        if freq[i] > n:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # Count the frequency of each digit in the integer\n    freq = [0] * 10\n    for i in str(n):\n        freq[int(i)] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    frequency = [0] * 10\n    for digit in str(n):\n        frequency[int(digit)] += 1\n    for i in range(10):\n        if frequency[i] > frequency[n % 10]:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    freq = [0]*10\n    for d in str(n):\n        freq[int(d)] += 1\n        if freq[int(d)] > d:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    \n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element,\n    and False otherwise.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(set(list)) == 1:\n        if all(list[i] == element for i in range(len(list))):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?=[bB]{2,3})')\n    matches = pattern.findall(text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\s*[bB]\\s*[bB]\\s*[bB]'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        print(\"The string contains the pattern 'a(b{2,3})'\")\n    else:\n        print(\"The string does not contain the pattern 'a(b{2,3})'\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba(?:b{2,3})*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b(2|3)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[^b]*b(.{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?:b{2,3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a copy of the array to avoid modifying the original array\n    b = a.copy()\n    \n    # Calculate the sum of the modified array\n    modified_sum = sum(a) * k\n    \n    # Initialize the maximum sum and the index of the maximum sum\n    max_sum = modified_sum\n    max_index = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # Calculate the sum of the current subarray\n        current_sum = 0\n        for j in range(i, min(i+k, n)):\n            current_sum += b[j]\n        \n        # Update the maximum sum and the index of the maximum sum if the current subarray has a higher sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n            \n    # Return the maximum sum and the index of the maximum sum\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Get the maximum subarray sum\n    max_sum = max(a)\n    # Initialize the sum of a modified array\n    modified_sum = 0\n    # Initialize the maximum sum of a modified array\n    max_modified_sum = 0\n    # Repeat the array k times\n    for i in range(k):\n        # Add the previous maximum subarray sum to the modified array\n        modified_sum += max_sum\n        # Update the maximum sum of the modified array\n        max_modified_sum = max(max_modified_sum, modified_sum)\n    # Return the maximum sum of a modified array\n    return max_modified_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the maximum sum and the window sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    # loop through the array k times\n    for _ in range(k):\n        # add the first element of the array to the sum\n        curr_sum += a[0]\n        # add the current element to the sum\n        curr_sum += a[n-1]\n        # update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, curr_sum)\n        # remove the first element of the array\n        a = a[1:]\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum for the original array\n    max_sum = max(a)\n    \n    # Initialize the modified array\n    modified_array = a.copy()\n    \n    # Repeat the array k times\n    for i in range(k):\n        # Calculate the sum of the modified array\n        modified_sum = sum(modified_array)\n        \n        # Update the maximum sum if the modified sum is greater\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n        \n        # Reverse the modified array\n        modified_array = modified_array[::-1]\n    \n    # Reverse the original array\n    original_array = a[::-1]\n    \n    # Calculate the sum of the original array\n    original_sum = sum(original_array)\n    \n    # Update the maximum sum if the original sum is greater\n    if original_sum > max_sum:\n        max_sum = original_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n-k+1):\n        # Sum of the first k elements\n        current_sum = sum(a[i:i+k])\n        # Sum of the repeated elements\n        repeated_sum = sum([a[i] for j in range(k)])\n        # Update the maximum sum\n        max_sum = max(max_sum, current_sum + repeated_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = a * k\n    arr = list(arr)\n    max_sum = float('-inf')\n    prev_sum = float('-inf')\n    i = 0\n    while i < n - 1:\n        if i > 0 and prev_sum == max_sum:\n            break\n        elif i == 0:\n            prev_sum = max(arr[i], arr[i+1])\n            max_sum = prev_sum\n            i += 1\n        else:\n            curr_sum = max(arr[i], arr[i+1])\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            prev_sum = curr_sum\n            i += 1\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize the maximum sum and the current sum of the first element of the array\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    # Iterate through the array from the second element\n    for i in range(1, n):\n        # If the current sum is greater than the maximum sum and the index of the element is divisible by k, update the maximum sum\n        if current_sum > max_sum and i % k == 0:\n            max_sum = current_sum\n        \n        # Add the current element to the current sum\n        current_sum += a[i]\n    \n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the sum of the first element\n    max_sum = a[0]\n    first_sum = a[0]\n    \n    # Initialize the index of the first element\n    first_index = 0\n    \n    # Initialize the index of the last element\n    last_index = 0\n    \n    # Initialize the repeated element\n    repeated_element = a[0]\n    \n    # Loop until the last element\n    while last_index < n:\n        # If the last element is equal to the repeated element, increment the count of repeated elements\n        if a[last_index] == repeated_element:\n            repeated_element += 1\n            \n            # If the count of repeated elements is equal to k, update the maximum sum and the repeated element\n            if repeated_element == k:\n                max_sum = max(max_sum, a[last_index])\n                repeated_element = a[last_index]\n                \n                # If the count of repeated elements is greater than k, update the repeated element\n                if repeated_element > k:\n                    repeated_element = a[last_index]\n        else:\n            # If the count of repeated elements is greater than k, update the maximum sum and the first element\n            if repeated_element > k:\n                max_sum = max(max_sum, first_sum)\n                first_sum = a[first_index]\n                repeated_element = a[first_index]\n                \n            # Move the first index to the next position\n            first_index += 1\n            \n            # If the last element is not equal to the repeated element, reset the repeated element and the count\n            repeated_element = a[last_index]\n            repeated_element = 1\n        \n        # Move the last index to the next position\n        last_index += 1\n        \n    # If the count of repeated elements is greater than k, update the maximum sum and the first element\n    if repeated_element > k:\n        max_sum = max(max_sum, first_sum)\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the sum of the first k elements in the given array\n    first_sum = sum(a[:k])\n\n    # Initialize the maximum sum to be the first sum\n    max_sum = first_sum\n\n    # Iterate over the remaining elements in the array\n    for i in range(k, n): \n        # Sum the element and the sum of the first k elements of the array\n        sum_of_elements = a[i] + first_sum\n\n        # If the sum is greater than the maximum sum, update the maximum sum\n        if sum_of_elements > max_sum: \n            max_sum = sum_of_elements\n\n        # Update the first_sum by subtracting the first element from it\n        first_sum = first_sum - a[i]\n\n        # If the first_sum becomes negative, it means we have exceeded the array\n        if first_sum < 0: \n            first_sum = 0\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    repeated_array = []\n\n    for i in range(k):\n        repeated_array.append(a)\n\n    for i in range(n):\n        curr_sum += a[i]\n        if i >= k - 1:\n            for j in range(k):\n                repeated_array[j] = a[i - j]\n            for j in range(k):\n                curr_sum -= a[i - j]\n                if curr_sum < 0:\n                    curr_sum = 0\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0  \n    count = 0  \n    while count < n:  \n        count += 1  \n        sum += count*count  \n    return sum  \n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of squares of even natural numbers\n    even_sum = 0\n    \n    # iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the even natural number to the sum of squares\n        even_sum += i*i\n    \n    # return the sum of squares of even natural numbers\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    i = 0\n    while count < n:\n        i += 2\n        if i % 2 == 0:\n            sum += i**2\n            count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        num = 2 * count\n        sum += num**2\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = [i for i in range(2, 2*n+1, 2)] # generating list of even numbers from 2 to n+1\n    sum_of_squares = sum([i**2 for i in even_numbers]) # sum of squares of even numbers\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum_of_squares += count**2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        num = count*2\n        sum += num**2\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    # initialize sum to zero\n    sum = 0\n\n    # iterate from 0 to n\n    for i in range(0, n+1, 2):\n        # calculate square of i\n        square = i**2\n        # add square to sum\n        sum += square\n\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length in the input list.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths) or not max_lengths:\n            max_lengths = [len(lst)]\n        elif len(lst) == max(max_lengths):\n            max_lengths.append(len(lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    for i in list1:\n        if len(i) > maxLength:\n            maxLength = len(i)\n    return maxLength"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes in a list of lists and returns a list containing the maximum length of each list.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length = len(sublist)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for item in list1:\n        max_lengths.append(len(item))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length_sublist = max(len(sublist) for sublist in list1)\n        max_lengths.append(max_length_sublist)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = [sublist]\n        elif len(sublist) == len(max_lengths):\n            max_lengths.append(sublist)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # create an array to store the number of ways for each color\n    ways = [1] * k\n\n    # set the initial condition\n    ways[0] = 1\n\n    # loop through the remaining posts\n    for i in range(1, n):\n        # loop through all the colors\n        for j in range(k):\n            # if the adjacent posts have different colors\n            if i-2 >= 0 and j == ways[j-1]:\n                # update the number of ways for that color\n                ways[j] += ways[j-1]\n\n    # return the number of ways for the last color\n    return ways[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    def paint_fence(left, right, color):\n        '''\n        Helper function to paint the fence.\n        '''\n        if left == right:\n            return 1\n        \n        if fence[left][color] == fence[right][color]:\n            return paint_fence(left+1, right, color)\n        \n        return paint_fence(left+1, right, color) + paint_fence(left, right-1, color)\n    \n    fence = [[0 for x in range(k)] for x in range(n+1)]\n    for i in range(n):\n        color1, color2 = map(int, input().split())\n        fence[i][color1-1] += 1\n        fence[i][color2-1] += 1\n    \n    ways = 0\n    for i in range(k):\n        ways += paint_fence(0, n, i)\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        if k % 2 == 0:\n            return 1\n        else:\n            return 0\n\n    # recursive case\n    dp = [0] * (k+1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n+1):\n        for j in range(k):\n            if j >= i:\n                dp[j+1] += dp[j]\n\n    return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    def count_ways(n, k, ways, prev_color, post_count):\n        if post_count == n:\n            if prev_color is None or prev_color!= k-1:\n                ways[post_count] += 1\n        else:\n            for color in range(k):\n                if prev_color is None or prev_color!= color:\n                    count_ways(n, k, ways, color, post_count+1)\n\n    ways = [0] * (n+1)\n    count_ways(n, k, ways, None, 0)\n    return ways[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Create a 2D list to store the number of ways to paint the fence\n    fence = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Initialize the fence to have only one color\n    for i in range(1, n+1):\n        fence[i][1] = 1\n    \n    # Fill the fence in each way by considering each adjacent post and the difference in colors\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            fence[i][j] = fence[i-1][j] + fence[i-1][j-1]\n            \n    # Return the final count of ways to paint the fence\n    return fence[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, color, fence):\n        if start == n:\n            if fence.count(color) <= k:\n                return 1\n            return 0\n        if color in fence:\n            return backtrack(start + 1, color, fence) + backtrack(start + 1, fence.index(color), fence)\n        return backtrack(start + 1, fence[0], fence) + backtrack(start + 1, fence[-1], fence)\n\n    fence = list(range(1, n + 1))\n    return backtrack(0, fence[0], fence)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "Here's the Python code:"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = sum([dp[j] for j in range(1, k + 1) if i - j >= 0 and dp[i - j] >= 1])\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1: # If there is only one color, there is only one way to paint the fence\n        return 1\n    \n    # Check if the number of posts is odd or even\n    if n % 2 == 0: # Even number of posts\n        # There are two ways to paint the fence\n        # One way with n/2 colors and the other with (n-1)/2 colors\n        return count_no_of_ways(n/2, k) + count_no_of_ways((n-1)/2, k)\n    \n    else: # Odd number of posts\n        # There are three ways to paint the fence\n        # One way with n/2 colors and the other with (n-1)/2 colors and the same color\n        # and the last way with the same color and (n-2)/2 colors\n        return count_no_of_ways(n/2, k) + count_no_of_ways((n-1)/2, k) + count_no_of_ways((n-2)/2, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # This is a memoization technique to store the number of ways that have at most 2 adjacent posts of the same color\n    dp = [0] * (n+1)\n\n    # Initialize the first row with the number of ways that have 0 posts or 1 post\n    dp[0] = 1\n    dp[1] = k\n\n    # Fill in the rest of the rows using dynamic programming\n    for i in range(2, n+1):\n        dp[i] = dp[i-1]\n        for j in range(1, k+1):\n            if i-1 >= j:\n                dp[i] += dp[i-j]\n\n    # Return the final value in the array\n    return dp[n]\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Calculate the quotient of two numbers rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    This function takes two integers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n // m\n    return result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the semi-perimeter\n    s = (w+h)/2\n\n    # calculate the area of a right triangle\n    area = math.sqrt(s*(s-w)*(s-h))\n\n    # calculate the length of the third side of the right triangle\n    third_side = math.sqrt(area)\n\n    # return the third side of the right triangle\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n\n    # Calculate the other side of the triangle\n    other_side = math.sqrt(s**2 - w**2 - h**2)\n\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = math.sqrt(w**2 + h**2)\n    side2 = math.sqrt(w**2 + (h/2)**2)\n    side3 = math.sqrt(w**2 + (h/2)**2)\n    return side3"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # formula for the length of the third side\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    a = w / 2\n    c = a * math.sqrt(3) / 2\n    third_side = s * (a + c)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    third_side = side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w\n    b = h\n    c = math.sqrt(a**2 + b**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the square root of the sum of the squares of the two sides\n    sqrt_sum = math.sqrt(w**2 + h**2)\n    # Return the third side of the right angled triangle\n    return sqrt_sum"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = (w + h) / 2\n    side2 = math.sqrt(w ** 2 + h ** 2)\n    side3 = w\n\n    if w > h:\n        side3 = h\n    elif h > w:\n        side3 = w\n\n    return side3"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function takes a list of values and returns the maximum value in the list.\n    \"\"\"\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize variables\n    max_value = None\n    max_type = None\n    \n    # iterate through the list\n    for value in listval:\n        # check if the current value is the maximum value\n        if max_value is None or value > max_value:\n            max_value = value\n            max_type = type(value)\n    \n    # return the maximum value of the same type as the first value\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        raise TypeError(\"Input should be a list\")\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max variable to the first element in the list\n    max_value = listval[0]\n    # iterate through the rest of the list\n    for i in range(1, len(listval)):\n        # if the current element is greater than the max variable, update the max variable\n        if listval[i] > max_value:\n            max_value = listval[i]\n    # return the maximum value found\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    if not listval:\n        return None\n\n    max_val = listval[0]\n    for value in listval:\n        if type(value) == type(max_val):\n            if value > max_val:\n                max_val = value\n        else:\n            if value > max_val:\n                max_val = value\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"Empty list\")\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if isinstance(listval[i], int):\n            max_val = max(listval[i], max_val)\n        elif isinstance(listval[i], str):\n            max_val = max(len(listval[i]), max_val)\n        elif isinstance(listval[i], float):\n            max_val = max(listval[i], max_val)\n        elif isinstance(listval[i], bool):\n            max_val = max(listval[i], max_val)\n        else:\n            max_val = max(max_val, max_val)\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Check if the list is empty\n    if not listval:\n        return None\n\n    # Initialize the maximum value\n    max_value = listval[0]\n\n    # Loop through the list and compare each value with the current maximum\n    for value in listval:\n        if value > max_value:\n            max_value = value\n\n    return max_value"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    \n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    \n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array and returns the count of inversions in the array.\n    '''\n\n    def merge_sort(arr): \n        '''\n        This function sorts the array using the merge sort algorithm.\n        '''\n        if len(arr) > 1: \n            mid = len(arr) // 2\n            left = arr[:mid] \n            right = arr[mid:] \n\n            merge_sort(left) \n            merge_sort(right) \n\n            i = j = k = 0\n            while i < len(left) and j < len(right): \n                if left[i] <= right[j]: \n                    arr[k] = left[i] \n                    i += 1 \n                else: \n                    arr[k] = right[j] \n                    j += 1 \n                k += 1 \n\n            while i < len(left): \n                arr[k] = left[i] \n                i += 1 \n                k += 1 \n\n            while j < len(right): \n                arr[k] = right[j] \n                j += 1 \n                k += 1 \n\n    merge_sort(arr) \n    inv_count = 0\n    for i in range(1, len(arr)): \n        for j in range(i): \n            if arr[i] < arr[j]: \n                inv_count += len(arr) - i - j \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0 \n    # Traverse the array from 1 to n-1 \n    for i in range(1, n): \n        # find the maximum element in the unsorted part of the array \n        max_idx = i \n        for j in range(i, n): \n            if arr[j] > arr[max_idx]: \n                max_idx = j \n        # swap the current element with the maximum element in the unsorted part of the array \n        arr[i], arr[max_idx] = arr[max_idx], arr[i] \n        # count the inversions \n        left = 0 \n        right = i - 1 \n        while left < right: \n            if arr[left] > arr[i] and arr[right] < arr[i]: \n                count += right - left + 1 \n                left += 1 \n            elif arr[left] < arr[i]: \n                left += 1 \n            else: \n                right -= 1 \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        # Sorting the array in ascending order\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                # Swapping the elements\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n - j\n                j = i  # Resetting j to avoid redundant swaps\n            elif arr[i] < arr[j]:\n                # Reducing the range\n                j = n\n        # Counting inversions after each iteration\n        print(inv_count)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n\n    for i in range(len(sorted_arr)):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += len(sorted_arr) - i - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array and returns the count of inversions in the array.\n    An inversion is when one element of the array is greater than its corresponding element in the reversed array.\n    '''\n    # Reverse the array\n    reverse_arr = arr[::-1]\n\n    # Count inversions using two pointers\n    left, right = 0, len(arr)-1\n    inversion_count = 0\n    while left < right:\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n            inversion_count += left - right\n    \n    return inversion_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # initialize two counters for left and right arrays\n    left = 0\n    right = len(arr) - 1\n\n    # initialize a counter for inversions\n    inv_count = 0\n\n    # iterate through the array from left to right\n    while left < right:\n\n        # increment the left pointer if the right element is smaller\n        if arr[left] <= arr[right]:\n            left += 1\n\n        # decrement the right pointer if the left element is greater\n        else:\n            right -= 1\n\n            # increment the inversion counter if the left and right elements are swapped\n            inv_count += right - left + 1\n\n    # return the inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize two pointers for left and right subarrays\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize an array to store the inversions count\n    inv_count = [0] * (right + 1)\n\n    # Traverse the array using two pointers\n    while left < right:\n        # If the left and right subarrays are sorted, compare and count inversions\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            right -= 1\n            inv_count[right] += (right - left + 1)\n\n    # Return the final inversion count\n    return inv_count[right]"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversions are a type of sorting algorithm where elements are sorted in non-decreasing order.\n    This function uses the merge sort algorithm to sort the array and count the number of inversions.\n    '''\n\n    # Sort the array using merge sort algorithm\n    arr = merge_sort(arr)\n\n    # Count the number of inversions in the sorted array\n    n = len(arr)\n    count = 0\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j - i\n\n    return count\n\n\ndef merge_sort(arr): \n    '''\n    This function takes an array as input and sorts it using the merge sort algorithm.\n    '''\n\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        # Recursively sort the left and right subarrays\n        merge_sort(left)\n        merge_sort(right)\n\n        # Merge the sorted subarrays\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n                count += len(left) - i\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n    return arr\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    '''\n    A function to flatten a given nested list structure.\n\n    Parameters:\n    - lst (list): A nested list to be flattened.\n\n    Returns:\n    - flattened_lst (list): A flattened list of all elements in the original list.\n    '''\n    flattened_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_lst.extend(flatten_list(item))\n        else:\n            flattened_lst.append(item)\n    return flattened_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for s, t in stdata:\n        data[s].append(t)\n    max_agg = 0\n    for val in data.values():\n        max_agg = max(max_agg, max(val))\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n    \n    # iterate through the list of tuples\n    for tup in stdata:\n        # extract the customer name and the aggregate value\n        cust_name, agg_val = tup\n        \n        # update the maximum aggregate for the customer\n        max_aggs[cust_name] = max(max_aggs[cust_name], agg_val)\n    \n    # get the maximum aggregate for each customer\n    max_agg_dict = dict(max_aggs)\n    \n    # get the maximum aggregate from the max_agg_dict\n    max_agg = max(max_agg_dict.values())\n    \n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for t in stdata:\n        if t[0] in max_dict:\n            max_dict[t[0]] += t[1]\n        else:\n            max_dict[t[0]] = t[1]\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the sum of each product\n    sums = defaultdict(int)\n    # loop through the list of tuples\n    for item in stdata:\n        # add the price of each product to the sum of that product\n        sums[item[1]] += item[0]\n    # initialize max aggregate to 0\n    max_agg = 0\n    # loop through the defaultdict to find the maximum aggregate\n    for price, count in sums.items():\n        # calculate the maximum aggregate for the current price and count\n        current_agg = price * count\n        # update the max_agg if necessary\n        if current_agg > max_agg:\n            max_agg = current_agg\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the aggregate counts for each state\n    counts = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for state, value in stdata:\n        # Increment the count for the current state\n        counts[state] += value\n\n    # Find the maximum aggregate value\n    max_aggregate = max(counts.values())\n\n    # Return the maximum aggregate value\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    max_agg_dict = defaultdict(int)\n    for i in range(len(stdata)):\n        st = stdata[i]\n        if st[1] > max_agg[st[0]]:\n            max_agg[st[0]] = st[1]\n        if st[2] > max_agg_dict[st[0]]:\n            max_agg_dict[st[0]] = st[2]\n\n    for key in max_agg:\n        max_agg[key] += max_agg_dict[key]\n    max_agg_list = sorted(max_agg.items(), key=lambda x: x[1], reverse=True)\n    return max_agg_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for (item, price) in stdata:\n        max_dict[item] = max(max_dict[item], price)\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for item in stdata:\n        for i in range(len(item)):\n            aggregate[i] += item[i]\n    return max(aggregate.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input, where each tuple contains a student ID and their grade.\n    It then calculates the maximum aggregate from the list of tuples and returns the result.\n    '''\n    # create a defaultdict to store the maximum aggregate for each student ID\n    max_grades = defaultdict(int)\n    for student_id, grade in stdata:\n        # check if the current grade is greater than the current maximum grade\n        if grade > max_grades[student_id]:\n            max_grades[student_id] = grade\n    # calculate the maximum aggregate for each student ID and return the result\n    max_aggregate = max(max_grades.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples (total_sales, quantity, price) as input and returns the maximum aggregate.\n    '''\n    max_agg = defaultdict(int)\n    for sales, quantity, price in stdata:\n        max_agg[quantity] += sales * price\n    max_agg_list = list(max_agg.items())\n    max_agg_list.sort(key=lambda x: x[1], reverse=True)\n    return max_agg_list[0][1]"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n+1):\n        if i % (2**n) == 0:\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n): \n        sum1 = 0\n        sum2 = 0\n        for j in range(i): \n            sum1 += (i >> j) & 1\n        for k in range(i): \n            sum2 += (i >> k) & 1\n        if sum1 == sum2: \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(2*n)\n        first_half = bits[:n]\n        last_half = bits[-n:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count\n\nn = int(input(\"Enter the length of binary sequence (2n): \"))\nprint(\"Count of binary sequences:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def is_valid_seq(seq):\n        '''\n        Check if a sequence is valid or not. A sequence is valid if the sum of the first n bits is same as the sum of the last n bits.\n        '''\n        if len(seq)!= 2*n:\n            return False\n        \n        first_n_bits = seq[:n]\n        last_n_bits = seq[-n:]\n        \n        return sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits)\n    \n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(2*n)\n        if is_valid_seq(seq):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2 ** n): \n        binary_seq = bin(i)[2:]\n        if sum(int(x) for x in binary_seq[:n]) == sum(int(x) for x in binary_seq[-n:]): \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def generate_binary_seq(n):\n    seq = []\n    for i in range(2**n):\n        seq.append(format(i, '0'+str(n)+'b'))\n    return seq"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(1, 2 ** n + 1):\n        num = bin(i)[2:]\n        if sum(int(bit) for bit in num[:n]) == sum(int(bit) for bit in num[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    def binary_seq(k):\n        return [bin(i)[2:].zfill(n) for i in range(2**k)]\n\n    def is_valid_binary_seq(seq):\n        return sum([int(i) for i in seq]) % 2 == 0\n\n    count = 0\n    for k in range(1, n+1):\n        binary_sequences = binary_seq(k)\n        for seq in binary_sequences:\n            if is_valid_binary_seq(seq):\n                count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n, 2**(n+1)):\n        # Calculate the sum of first n bits and last n bits\n        first_sum = i & ((1 << n) - 1)\n        last_sum = (i >> n) & ((1 << n) - 1)\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        # Convert binary number to list of bits\n        bits = [int(bit) for bit in bin(i)[2:]]\n        # Calculate sum of first n bits and sum of last n bits\n        if sum(bits[:n]) == sum(bits[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        for key in d:\n            dict_depth(d[key], depth+1)\n    else:\n        print(depth)"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a depth counter\n    depth = 0\n    \n    # Iterate through the keys of the dictionary\n    for key in d:\n        # If the value is a dictionary, increment the depth counter by one\n        if isinstance(d[key], dict):\n            depth += 1\n        \n        # If the value is a list, iterate through the list and increment the depth counter by one for each dictionary in the list\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n    \n    # Return the depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter for the depth\n    depth = 0\n    \n    # Loop through the dictionary keys\n    for key in d:\n        # Check if the key is a dictionary or a list\n        if isinstance(d[key], dict):\n            # If it's a dictionary, increment the depth counter\n            depth += 1\n        elif isinstance(d[key], list):\n            # If it's a list, loop through the list elements recursively\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n    \n    # Return the depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max([dict_depth(v) for k, v in d.items()])\n        return depth\n    elif isinstance(d, list):\n        depth = max([dict_depth(v) for v in d])\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth counter\n    depth = 0\n    \n    # iterate through the dictionary\n    for key in d:\n        # check if the key is a dictionary\n        if isinstance(d[key], dict):\n            # recursively call the function on the dictionary\n            depth = max(depth, dict_depth(d[key]))\n            \n    # return the depth of the dictionary\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1 + dict_depth(v)\n        elif isinstance(v, list):\n            for item in v:\n                if isinstance(item, dict):\n                    depth += 1 + dict_depth(item)\n        elif isinstance(v, tuple):\n            for item in v:\n                if isinstance(item, dict):\n                    depth += 1 + dict_depth(item)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Finding number of rotations required to reach the given index\n    rotation = 0\n    for i in range(len(ranges)):\n        if index <= ranges[i]:\n            rotation += 1\n        else:\n            break\n    \n    # Checking if there is an element to be found\n    if rotation == 0:\n        return None\n    \n    # Finding element at the required index after rotations\n    for i in range(rotations-rotation):\n        arr = arr[1:] + [arr[0]]\n    \n    return arr[index-ranges[0]]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of range tuples, number of rotations, and the index of the element to find as input.\n    It then returns the element at the given index after the specified number of rotations.\n\n    If the index is already within the array, it returns the original element.\n    If the index is outside the array, it returns None.\n    \"\"\"\n\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        current_index = index % len(arr)\n        if current_index < 0:\n            current_index += len(arr)\n\n        for i in range(rotations):\n            current_index = (current_index + ranges[i][0] + ranges[i][1]) % len(arr)\n            if current_index < 0:\n                current_index += len(arr)\n\n        return arr[current_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize the current index and element to None\n    curr_index = index\n    curr_elem = None\n\n    # Iterate over the rotations and the range of each rotation\n    for i in range(len(rotations)):\n        # Calculate the new index after the current rotation\n        new_index = (curr_index + rotations[i]) % len(arr)\n\n        # Check if the new index falls in the current range\n        if new_index >= ranges[i][0] and new_index <= ranges[i][1]:\n            # Update the current index and element\n            curr_index = new_index\n            curr_elem = arr[curr_index]\n\n    # Return the current element\n    return curr_elem"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Given an array of elements arr, a list of ranges, and a list of rotations,\n    find the element at the given index after rotating the array by the given rotations.\n    \"\"\"\n\n    # initialize the current index\n    curr_index = index\n\n    # loop through the rotations\n    for i in range(len(rotations)):\n        # rotate the array\n        left_rotate(arr, curr_index, rotations[i])\n        # find the element at the current index\n        curr_index = find_element(arr, curr_index, curr_index + ranges[i])\n\n    # return the element at the final index\n    return arr[curr_index]\n\ndef left_rotate(arr, index, k):\n    \"\"\"\n    Rotate the array to the left by k elements.\n    \"\"\"\n    n = len(arr)\n    k = k % n\n    arr[index:n] = arr[index:index+k] + arr[:index]\n    arr[:n-k] = arr[:n-k+k]\n\ndef find_element(arr, start, end):\n    \"\"\"\n    Find the element at the given index.\n    \"\"\"\n    for i in range(start, end):\n        if arr[i]!= 0:\n            return i\n    return end"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges of rotations and an index.\n    It returns the element at the given index after rotating the array by the number of rotations specified.\n    \"\"\"\n    # Function to calculate the next index after rotating the array\n    def next_index(i, j, n):\n        return (i + j) % n\n\n    # Calculate the number of rotations needed\n    n = len(arr)\n    rotations = rotations % n\n\n    # Perform the rotations\n    for i in range(rotations):\n        # Initialize variables to keep track of the elements in each sub-array\n        i1 = 0\n        i2 = n - 1\n\n        # Perform the rotations\n        for j in range(n // 2):\n            # Swap elements\n            arr[i1], arr[i2] = arr[i2], arr[i1]\n            i1 = next_index(i1, i2, n)\n            i2 = next_index(i1, i2, n)\n\n        # Update the sub-arrays\n        n = n // 2\n\n    # Calculate the next index after rotating the array\n    i1 = 0\n    i2 = n - 1\n\n    # Find the element at the given index\n    while i1!= index and i2!= index:\n        # Swap elements\n        arr[i1], arr[i2] = arr[i2], arr[i1]\n\n        # Update the sub-arrays\n        i1 = next_index(i1, i2, n)\n        i2 = next_index(i1, i2, n)\n\n    # Return the element at the given index\n    if i1 == index:\n        return arr[i2]\n    else:\n        return arr[i1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the first and last elements in each range\n    first_elements = []\n    last_elements = []\n    for i in range(len(ranges)):\n        first_elements.append(arr[ranges[i][0] + rotations * index])\n        last_elements.append(arr[ranges[i][1] + rotations * index])\n\n    # Find the element at the given index\n    if index >= 0:\n        element = arr[first_elements[index]]\n    else:\n        element = arr[last_elements[-index]]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, and rotations as input and returns the element at the given index after rotations.\n\n    Input:\n    - arr: array of integers\n    - ranges: list of ranges (lists)\n    - rotations: number of rotations to perform\n    - index: index of the element to find\n\n    Output:\n    - element at the given index after rotations\n    '''\n    # Check if rotations is valid\n    if rotations > len(ranges):\n        return \"Invalid rotation count.\"\n\n    # Initialize variables\n    element = None\n    rotation_count = 0\n\n    # Loop through rotations and find element\n    while rotation_count < rotations:\n        # Get range for current rotation\n        current_range = ranges[rotation_count]\n        # Get position of element in the current range\n        current_position = index - rotation_count\n        # Check if position is within the range\n        if current_position >= 0 and current_position < len(current_range):\n            # If position is within the range, set element to the current value at that position\n            element = arr[current_range[current_position]]\n            # Increment rotation count\n            rotation_count += 1\n        else:\n            # If position is outside the range, increment index and continue with the next rotation\n            index += len(current_range)\n\n    # Return element if found\n    if element is not None:\n        return element\n    else:\n        return \"Element not found after rotations.\""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # find the number of rotations needed to get to the desired index\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1]:\n            rotations = i\n            break\n    # return the element at the desired index after the number of rotations\n    return arr[index - ranges[rotations][0]][rotations]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Initialize the current rotation index\n    current_rotation = 0\n    \n    # Iterate through the rotations and their corresponding ranges\n    for i in range(len(rotations)):\n        # Find the number of rotations that have been performed\n        num_rotations = rotations[i]\n        \n        # Check if the current rotation index is within the range of rotations\n        if current_rotation >= num_rotations:\n            # Calculate the remaining rotations after this one\n            remaining_rotations = rotations[i+1] - rotations[i]\n            \n            # Calculate the index of the element that needs to be found after the rotations\n            new_index = index + (remaining_rotations - (current_rotation - num_rotations))\n            \n            # Check if the new index is within the range of the array\n            if new_index >= 0 and new_index < len(arr):\n                # Return the element at the new index\n                return arr[new_index]\n                \n        # Move to the next rotation\n        current_rotation += 1\n        \n        # Check if the current rotation index is the last rotation\n        if current_rotation >= len(rotations):\n            # If so, return the element at the given index\n            return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at a given index after rotations of the given array\n    \"\"\"\n    # Compute the number of rotations required\n    num_rotations = 0\n    for i in range(len(ranges)):\n        num_rotations += ranges[i] // rotations[i]\n    num_rotations += ranges[-1] // rotations[-1]\n    \n    # Find the element at the given index after rotations\n    element = arr[0]\n    for i in range(1, len(arr)):\n        if i < index:\n            element = element ^ arr[i]\n        else:\n            element = element ^ arr[(i - index) % len(arr)]\n    \n    # Apply the required rotations\n    for i in range(num_rotations):\n        element = element ^ arr[index]\n    \n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]*') # regex pattern to match words starting with 'p'\n    matches = re.findall(pattern, words) # find all matches in the list of words\n    \n    if len(matches) > 1:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.search(r'^p', word):\n            return word, words[words.index(word)+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word, next(word for word in words if pattern.match(word))\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern for finding words starting with letter 'p'\n    pattern = r'p\\w+'\n\n    # Find the two words starting with letter 'p' in the list of words\n    matches = re.findall(pattern, words)\n\n    # Return the two words starting with letter 'p'\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    matches = [match for match in pattern.finditer(word) if match]\n    if len(matches) == 0:\n        return None\n    return [word[match.start():match.end()] for word in words for match in pattern.finditer(word)]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_pattern = re.compile(r'^p\\w+', re.IGNORECASE)\n    for word in words:\n        match = p_pattern.search(word)\n        if match:\n            return word, match.group(0)\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'^p\\w+'\n\n    # Use the re.findall() method to find all the words starting with 'p' in the list\n    matches = re.findall(pattern,''.join(words))\n\n    # Check if there are any matches\n    if len(matches) == 0:\n        return None\n\n    # Extract the two matches and return them as a tuple\n    return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern to match words starting with 'p'\n    pattern = r'p\\w+'\n    # Use re.findall() to extract all words that match the pattern from the list of words\n    result = re.findall(pattern, words)\n    # Check if there are at least two matches\n    if len(result) >= 2:\n        # Return two random matches\n        return random.sample(result, 2)\n    else:\n        # If there are not at least two matches, return None\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i].startswith('p'):\n            return words[i], words[i+1]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the maximum sum of increasing subsequence until ith index\n    dp = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence until the 0th index\n    dp[0] = a[0]\n\n    # Iterate through the array from 1 to n-1\n    for i in range(1, n):\n        # Check if the current element is greater than kth element\n        if a[i] > a[k]:\n            # If it is, update the maximum sum of increasing subsequence until the ith index\n            dp[i] = max(dp[i], dp[i-1] + a[i])\n        else:\n            # If it is not, update the maximum sum of increasing subsequence until the kth index\n            dp[i] = dp[k]\n\n    # Return the maximum sum of increasing subsequence from prefix until the ith index\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    prefix_sum = [0] * (n+1)\n    max_sum = float('-inf')\n    max_seq = []\n\n    # Calculate prefix sum\n    for i in range(1, n+1):\n        prefix_sum[i] = a[i-1] + prefix_sum[i-1]\n\n    # Traverse from the last index to the first index\n    for i in range(n, -1, -1):\n        # If the kth element is after i, continue to the next iteration\n        if i == index and a[i] < k:\n            continue\n\n        # If the sum of the increasing subsequence from the current index to i is greater than max sum, update max sum and max sequence\n        current_sum = prefix_sum[i] - prefix_sum[i+1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_seq = [a[i]]\n\n        # If the sum of the increasing subsequence from the current index to i is equal to max sum, add the current element to the max sequence\n        elif current_sum == max_sum:\n            max_seq.append(a[i])\n\n    # Return the max sum and max sequence\n    return max_sum, max_seq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0 for _ in range(k+1)] for _ in range(n)]\n    max_sum = float('-inf')\n\n    for i in range(n):\n        for j in range(k+1):\n            if i == 0:\n                dp[i][j] = 0 if j == 0 else dp[i-1][j-1]\n            elif a[i] > a[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                if j > i:\n                    dp[i][j] += dp[i-1][k]\n\n    for i in range(index, n):\n        max_sum = max(max_sum, dp[i][k])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    dp = [0] * n\n    dp[0] = a[0]\n\n    # Calculate dp[i] for all i in range(1, n)\n    for i in range(1, n):\n        dp[i] = max(a[i], dp[i - 1])\n\n        # If dp[i] >= k, then add i to the increasing subsequence\n        if dp[i] >= k:\n            max_sum = max(max_sum, dp[i] + i)\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize a list to store the sum of increasing subsequence from each index\n    sum_list = [0] * n\n    \n    # Initialize a variable to store the maximum sum of increasing subsequence found so far\n    max_sum = 0\n    \n    # Initialize a variable to store the index of the element with the maximum sum of increasing subsequence found so far\n    max_sum_index = 0\n    \n    # Traverse through the array and find the sum of increasing subsequence from prefix until ith index and including kth element\n    for i in range(index, n):\n        # If i is k-th element, then include it in the sum of increasing subsequence\n        if i == k-1:\n            sum_list[i] = a[i] + sum_list[i-1]\n        # If i is not k-th element, then exclude it in the sum of increasing subsequence\n        else:\n            sum_list[i] = max(a[i], sum_list[i-1])\n        \n        # If sum of increasing subsequence from prefix until i is greater than or equal to the maximum sum of increasing subsequence found so far, then update max_sum and max_sum_index\n        if sum_list[i] >= max_sum:\n            max_sum = sum_list[i]\n            max_sum_index = i\n            \n    # Return the maximum sum of increasing subsequence found so far\n    return max_sum, max_sum_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    # Initialize the maximum sum of increasing subsequence\n    max_sum = float('-inf')\n    \n    # Initialize the maximum sum of increasing subsequence excluding the ith element\n    max_sum_excluding = float('-inf')\n    \n    # Initialize the list to store the index of the previous element of the increasing subsequence\n    prev_index = [-1] * n\n    \n    # Loop through the array from index to n-1\n    for i in range(index, n):\n        # If the element at index i is greater than the kth element, update the maximum sum of increasing subsequence excluding the kth element\n        if a[i] > a[k-1]:\n            max_sum_excluding = max(max_sum_excluding, max_sum_increasing_subseq(a, n, i, k-1))\n        \n        # Update the maximum sum of increasing subsequence excluding the kth element and the kth element itself\n        max_sum_including = max(a[i] + max_sum_increasing_subseq(a, n, i+1, k), max_sum_excluding)\n        \n        # If the maximum sum of increasing subsequence including the kth element is greater than the maximum sum of increasing subsequence, update the maximum sum of increasing subsequence and the index of the previous element of the increasing subsequence\n        if max_sum_including > max_sum:\n            max_sum = max_sum_including\n            prev_index[i] = prev_index[k-1]\n    \n    # Backtrack to find the actual increasing subsequence\n    curr_sum = max_sum\n    path = []\n    i = n - 1\n    while curr_sum > 0 and i >= index:\n        curr_sum -= a[prev_index[i]]\n        path.append(i)\n        i = prev_index[i]\n    \n    # Reverse the list to get the increasing subsequence\n    path.reverse()\n    \n    return max_sum, path"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if index == n - 1:\n        # If it is the last index, then it can only be a subsequence of length 1 or 2\n        if k == 0:\n            return 0\n        elif k == 1:\n            return a[index]\n        else:\n            return float('-inf')\n\n    # Initialize the maximum sum to negative infinity\n    max_sum = float('-inf')\n\n    # For each possible value of i, we can either include or exclude the value of a[i]\n    for i in range(index + 1, n):\n        if i == k:\n            # If the value of a[i] is k, then it is part of the subsequence of length i+1\n            sum_including_k = max_sum_increasing_subseq(a, n, i + 1, k) + a[i]\n        elif i > k:\n            # If the value of a[i] is not k, then it is part of the subsequence of length i\n            sum_excluding_k = max_sum_increasing_subseq(a, n, i, k)\n        else:\n            # If the value of a[i] is greater than k, then it is not part of the subsequence of length i\n            continue\n\n        # Update the maximum sum if the current sum is greater than the previous maximum sum\n        if sum_excluding_k > max_sum:\n            max_sum = sum_excluding_k\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    if index == n - 1:\n        return a[index]\n    sum_max = 0\n    sum_curr = 0\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        sum_curr = max_sum_increasing_subseq(a, n, index + 1, k)\n        sum_curr = max(sum_curr, a[index])\n        if index == 0:\n            return max(sum_curr, a[k])\n        else:\n            sum_max = max_sum_increasing_subseq(a, n, index - 1, k)\n            sum_max = max(sum_max, sum_curr + a[index])\n            return max(sum_max, sum_curr)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    dp = [0] * n\n    dp[index] = a[index]\n\n    # Calculate the maximum sum of increasing subsequence for prefix till i-1\n    for i in range(index - 1, -1, -1):\n        dp[i] = max(dp[i], dp[i + 1] + a[i])\n\n    # Initialize variables\n    max_sum = dp[0]\n    current_sum = dp[0]\n\n    # Iterate over k elements starting from index\n    for i in range(index, n):\n        current_sum += a[i]\n\n        # If the current sum is greater than the max sum so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the sum of the kth element is greater than the sum of the current element\n        # and current element is greater than the kth element\n        if current_sum > a[i] and a[i] > k:\n            current_sum = a[i]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    elif index == k:\n        return a[index]\n    else:\n        left_sum = max_sum_increasing_subseq(a, n, index - 1, k)\n        right_sum = max_sum_increasing_subseq(a, n, index, k + 1)\n        if left_sum + a[index] > right_sum + a[index]:\n            return left_sum + a[index]\n        else:\n            return right_sum + a[index]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new tuple by copying the original tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Divide the new tuple into m parts\n    new_tuplex = tuple(zip(*[new_tuplex[i::m] for i in range(m)]))\n    \n    # Get the first n elements of the new tuple\n    colon = tuple(new_tuplex[0][:n])\n    \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the length of the new tuple\n    new_length = len(new_tuplex)\n\n    # Get the index of the first element to be included in the colon\n    first_index = new_length - m\n\n    # Get the index of the last element to be included in the colon\n    last_index = new_length - n\n\n    # Get the index of the last element to be included in the colon\n    if first_index < 0:\n        first_index = 0\n    if last_index > new_length - 1:\n        last_index = new_length - 1\n\n    # Slice the tuple to include the elements in the colon\n    colon_tuplex = new_tuplex[first_index:last_index+1]\n\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    This function takes a tuple and its row and column indices,\n    and returns the corresponding element of the colon.\n\n    Parameters:\n    tuplex: tuple\n        A tuple to be colonized.\n    m: int\n        The row index of the colonization.\n    n: int\n        The column index of the colonization.\n\n    Returns:\n    object\n        The element of the colonization.\n    \"\"\"\n    row, col = m, n\n    row_start, col_start = 0, 0\n    row_end, col_end = len(tuplex), len(tuplex[0])\n\n    while row >= row_start and row < row_end and col >= col_start and col < col_end:\n        if tuplex[row][col] is not None:\n            return tuplex[row][col]\n        row -= 1\n        col -= 1\n        row_start -= 1\n        col_start -= 1\n        row_end += 1\n        col_end += 1\n        row += 1\n        col += 1\n\n    return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    colon = deepcopy(tuplex)\n    # Iterate through the tuple and print the elements in the colon\n    for i in range(m):\n        for j in range(n):\n            print(colon[i][j], end=' ')\n        print()\n    # Return the colon tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    while m > 0 and n > 0:\n        new_tuplex = tuple(new_tuplex[i:i+n] for i in range(0, len(new_tuplex), n))\n        m -= 1\n        n -= 1\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colonized_tuple = deepcopy(tuplex)\n    colonized_tuple = colonized_tuple[:m]\n    return colonized_tuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return ((),)\n    elif m==1:\n        return (tuplex[n-1],)\n    else:\n        new_tuplex = deepcopy(tuplex)\n        new_tuplex = new_tuplex[:n] + (None,) + new_tuplex[n:]\n        new_tuplex = new_tuplex[:m] + tuple(new_tuplex[m-1]) + new_tuplex[m:]\n        return colon_tuplex(new_tuplex,m-1,n)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # get the number of rows and columns in the input tuple\n    rows, cols = len(tuplex_copy), len(tuplex_copy[0])\n    \n    # check if the requested position is within bounds\n    if m < 0 or m >= rows:\n        raise ValueError(\"m value out of bounds\")\n    if n < 0 or n >= cols:\n        raise ValueError(\"n value out of bounds\")\n    \n    # create a new tuple of length m\n    colon = tuple([tuplex_copy[i][j] for i in range(m) for j in range(n)])\n    \n    # return the new tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \n    Args:\n        tuplex (tuple): A tuple.\n        m (int): The number of rows in the colon.\n        n (int): The number of columns in the colon.\n    \n    Returns:\n        tuple: A tuple containing the colon of the input tuple.\n    \"\"\"\n    # Create a copy of the input tuple\n    new_tuple = deepcopy(tuplex)\n    \n    # Fill the new tuple with n copies of the first element of the original tuple\n    for i in range(n):\n        new_tuple += (tuplex[0],)\n        \n    # Split the new tuple into n colon-separated sub-tuples\n    colons = [new_tuple[i:i+m] for i in range(0, len(new_tuple), m)]\n    \n    return colons"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Initialize a list to store the colon\n    colon = []\n\n    # Loop through the rows\n    for i in range(m):\n        # Initialize a list to store the row\n        row = []\n\n        # Loop through the columns\n        for j in range(n):\n            # Append the jth element of the tuplex to the row\n            row.append(tuplex[j])\n\n        # Append the row to the colon list\n        colon.append(row)\n\n    # Return the colon list\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables for the largest products and the number of largest products we have found so far\n    largest_product = 0\n    num_largest_products = 0\n\n    # Loop through each element in the sorted input lists\n    for i in range(N):\n        # Calculate the product of the first N elements of nums1 and the first N elements of nums2\n        product1 = nums1[0] * nums2[0]\n\n        # Calculate the product of the (N-i)th element of nums1 and the (N-i)th element of nums2\n        product2 = nums1[N-i-1] * nums2[N-i-1]\n\n        # Update the largest product and the number of largest products we have found so far\n        if product1 > largest_product:\n            largest_product = product1\n            num_largest_products = 1\n        elif product1 == largest_product:\n            num_largest_products += 1\n\n        if product2 > largest_product:\n            largest_product = product2\n            num_largest_products = 1\n        elif product2 == largest_product:\n            num_largest_products += 1\n\n    # Return the number of largest products we have found so far\n    return num_largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the maximum value\n    max_value = -1\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through the first list of N numbers\n    for i in range(N):\n        # Initialize the product\n        product = 1\n        # Loop through the second list of N numbers\n        for j in range(N):\n            # Check if this is the largest product\n            if i == j:\n                # Update the maximum value\n                if nums1[i] * nums2[j] > max_value:\n                    max_value = nums1[i] * nums2[j]\n            # Update the product\n            product *= nums1[i] * nums2[j]\n        # Append the product to the result list\n        result.append(product)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables to store the maximum product found so far\n    max1 = max2 = float('-inf')\n\n    # Loop through all possible combinations of selecting one factor from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the current product\n            curr_product = nums1[i] * nums2[j]\n\n            # Update the maximum product found so far\n            max1 = max(max1, curr_product)\n            max2 = max(max2, curr_product)\n\n            # If we have found the desired number of products, stop\n            if max1 <= max2 and i + 1 == N:\n                return max1\n\n            # If we have found the desired number of products, stop\n            if max2 <= max1 and j + 1 == N:\n                return max2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize variables\n    largest_products = []\n    largest_product = 0\n    \n    # Loop through the two lists and select one factor from each list\n    for i in range(N):\n        factor1 = max(nums1)\n        factor2 = max(nums2)\n        if factor1 > factor2:\n            nums1 = [num / factor1 for num in nums1]\n        else:\n            nums2 = [num / factor2 for num in nums2]\n            \n        # Find the largest product of the selected factor for each list\n        product1 = max(nums1)\n        product2 = max(nums2)\n        largest_product = max(largest_product, product1 * product2)\n        \n        # Append the largest product to the list of largest products\n        largest_products.append(largest_product)\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables for the product and maximum product\n    product = 1\n    max_product = nums1[0] * nums2[0]\n\n    # Loop through the possible combinations of two factors\n    for i in range(N):\n        # Get the two factors for the current combination\n        factor1 = nums1[i]\n        factor2 = nums2[i]\n\n        # Calculate the product of the factors\n        product = factor1 * factor2\n\n        # Check if the product is greater than the current maximum\n        if product > max_product:\n            max_product = product\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return \"Invalid input. N must be less than or equal to the length of the larger list.\"\n    \n    largest_products = []\n    for i in range(len(nums1)):\n        product1 = nums1[i] * max(nums1[i:], key=lambda x: nums2.index(x))\n        product2 = nums2[i] * max(nums2[i:], key=lambda x: nums1.index(x))\n        largest_products.append(product1 * product2)\n        if len(largest_products) == N:\n            break\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize two variables to store the maximum product found so far\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n\n    # Initialize two variables to store the largest product found so far in the first and second list\n    largest1 = float('-inf')\n    largest2 = float('-inf')\n\n    # Initialize two variables to store the current product being considered\n    product1 = 1\n    product2 = 1\n\n    # Loop through the lists and compare the products with the current maximum products\n    for i in range(N):\n        # Update the maximum products if the current product is greater than the maximum product\n        if nums1[i] * product1 > max_product1:\n            max_product1 = nums1[i] * product1\n            largest1 = nums1[i]\n        if nums2[i] * product2 > max_product2:\n            max_product2 = nums2[i] * product2\n            largest2 = nums2[i]\n\n        # Update the products considering the current factor\n        product1 *= nums1[i]\n        product2 *= nums2[i]\n\n    # Return the largest N products found\n    return max_product1, max_product2, largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        largest_product = max(nums1[i]*nums2[i], nums1[i]*nums2[N-1-i], nums2[i]*nums1[N-1-i], nums2[N-1-i]*nums1[i])\n        largest_products.append(largest_product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # sort the given lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize the maximum product and the number of products found so far\n    max_product = 0\n    num_products = 0\n\n    # loop through the first N elements of the lists\n    for i in range(N):\n        # calculate the product of the current element of nums1 with all the elements of nums2\n        current_product = nums1[i] * nums2[0]\n\n        # update the maximum product if the current product is greater than the maximum so far\n        if current_product > max_product:\n            max_product = current_product\n            num_products = 1\n\n        # check if the current product is the largest product found so far\n        if current_product == max_product:\n            num_products += 1\n\n        # loop through the rest of the lists\n        for j in range(1, len(nums2)):\n            # calculate the product of the current element of nums1 with all the elements of nums2 up to the current element\n            next_product = nums1[i] * nums2[j]\n\n            # update the maximum product if the current product is greater than the maximum so far\n            if next_product > max_product:\n                max_product = next_product\n\n            # check if the current product is the largest product found so far\n            if next_product == max_product:\n                num_products += 1\n\n    return max_product, num_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two input lists must have the same length.\")\n\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError(\"The specified number N cannot be greater than the length of the input lists.\")\n\n    largest_products = []\n\n    for i in range(len(nums1)):\n        current_product = max(nums1[i], nums2[i])\n        largest_products.append(current_product)\n\n    for i in range(N - 1, -1, -1):\n        current_product = max(largest_products[i], largest_products[i + 1])\n        largest_products[i] = current_product\n\n    return largest_products\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = list(str1)\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # initialize an empty tuple\n    result = ()\n    \n    # iterate through the string\n    for char in str1:\n        # append the character to the tuple\n        result += (char,)\n    \n    # return the tuple\n    return result"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Split the given string into a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Initialize an empty list to store the characters\n    char_list = []\n    # Loop through each character in the string\n    for char in str1:\n        # Append the character to the list\n        char_list.append(char)\n    # Convert the list to a tuple and return it\n    return tuple(char_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the left most unset bit\n    while n & 1 == 0:\n        n >>= 1\n\n    # Set the left most unset bit to 1\n    n |= 1\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the result variable to 1\n    result = 1\n    \n    # loop through all the bits in the binary representation of n\n    for i in range(32):\n        # get the current bit value\n        bit_value = (n >> i) & 1\n        \n        # if the current bit is 0, unset the bit in the result and move on to the next bit\n        if bit_value == 0:\n            result &= ~(1 << i)\n    \n    # return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the count of unset bits\n    count = 0\n    # Loop through each bit of the binary representation of n\n    for i in range(32):\n        # If the i-th bit is set\n        if n & (1 << i):\n            # If the i-th bit is unset\n            if (1 << i) == n:\n                # Increment the count of unset bits\n                count += 1\n            else:\n                # Set the i-th bit to 1\n                n = n | (1 << i)\n                # Exit the loop\n                break\n    # If there are more than 32 unset bits, return n\n    if count > 32:\n        return n\n    else:\n        # Otherwise, return the leftmost unset bit\n        return n & ~(0xffffffff << count)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer to binary\n    binary = bin(n)[2:]\n    # Initialize the position of the left most unset bit\n    pos = len(binary) - 1\n    # Loop through the binary number and set the leftmost unset bit\n    while pos >= 0:\n        if binary[pos] == '0':\n            binary = binary[:pos] + '1' + binary[pos+1:]\n            break\n        else:\n            pos -= 1\n    # Convert the binary back to an integer and return the result\n    return int(binary, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function will set the left most unset bit in the given number.\n    '''\n    i = 0\n    while n & (1 << i) == 0:\n        i += 1\n    n |= (1 << i)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while not n & (1 << len(bin(n)[2:])):\n        n <<= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while n & (1 << i): \n        i += 1\n    return (1 << i)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer as input and returns the integer with the leftmost unset bit set.\n    '''\n    # Find the position of the leftmost set bit in binary representation of n\n    left_most_set_bit = n & -(n & -n)\n    # Shift the binary representation of n to the left by the position of the leftmost set bit\n    return (n << left_most_set_bit) & ((1 << left_most_set_bit) - 1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Convert the binary number to integer\n    n = int(n, 2)\n\n    # Set the leftmost unset bit to 1\n    n |= 1\n\n    # Convert the integer back to binary and return the result\n    return bin(n)[2:]"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the leftmost unset bit\n    left_most_unset_bit = n.bit_length() - n.leading_zeros()\n    return n | (1 << left_most_unset_bit)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r ** 2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Using the formula V = 1/3 * \u03c0 * r^2 * h\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculates the volume of a cone.\n    \n    Parameters:\n    r (float): radius of the cone\n    h (float): height of the cone\n    \n    Returns:\n    float: the volume of the cone\n    '''\n    \n    # calculate the volume of the cone using the formula A*h/3\n    A = math.pi * r * r\n    volume = A * h / 3\n    \n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    volume = math.pi * (r ** 2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # If n is less than or equal to 0, return 0\n    if n <= 0:\n        return 0\n    \n    # Find the highest power of 2 that is less than or equal to n\n    i = 0\n    while n > 1:\n        n = n // 2\n        i += 1\n    \n    return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes a number as an input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable to store the highest power of 2\n    highest = 1\n\n    # Loop through all numbers from 2 to n (inclusive)\n    for i in range(2, n+1):\n        # Check if i is a power of 2\n        if i == 2**highest:\n            # If i is a power of 2, update highest to i\n            highest = i\n\n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n//2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    power = 1\n    \n    while power <= n:\n        highest_power = power\n        power *= 2\n        \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n >>= 1\n        count += 1\n    return count"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        if n & (n - 1) == 0:\n            return n\n        n = n >> 1\n    return 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # We can use the binary search algorithm to find the highest power of 2 less than or equal to n\n    left, right = 1, n\n    while left <= right: \n        mid = left + (right - left) // 2\n        if mid * mid <= n: \n            left = mid + 1 \n        else: \n            right = mid - 1 \n    return left - 1 # We need to subtract 1 from the highest power of 2 since Python indices start from 0."
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 1\n    \n    while highest_power < n:\n        highest_power <<= 1\n    \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n >>= 1 \n    return n "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # convert n to a binary string\n    binary = bin(n)[2:]\n    # iterate over all binary digits\n    for i in range(len(binary)):\n        # if the binary digit is 1, the power of 2 is this digit + 1\n        if binary[i] == '1':\n            return int(binary[:i+1], 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 2\n    else: \n        lucas = find_lucas(n-1) \n        return (lucas + find_lucas(n-2)) "
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns the n-th Lucas number.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    \n    # Base case\n    if n == 0 or n == 1:\n        return n\n    \n    # Recursive case\n    lucas_num = find_lucas(n-1)\n    if n % 2 == 0:\n        return lucas_num * lucas_num\n    else:\n        return (lucas_num ** 2) + lucas_num"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n and returns then'th lucas number.\n    '''\n    # initialize the first two numbers of the sequence\n    a, b = 2, 1\n    # loop through the sequence to get to the nth number\n    for i in range(2, n+1):\n        # calculate the next number in the sequence\n        c = a + b\n        # update the values of a and b for the next iteration\n        a = b\n        b = c\n    # return the nth number in the sequence\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    This function finds then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    elif n % 2 == 0:\n        return (2**n - 1) * find_lucas(n//2)\n    else:\n        return find_lucas(n-1) + find_lucas(n-1)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        prev_lucas = 2\n        curr_lucas = 1\n        for i in range(2, n+1): \n            prev_lucas, curr_lucas = curr_lucas, (prev_lucas + curr_lucas)\n        return curr_lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Apply the format string to each element in the list\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(elem) for elem in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # use a list comprehension to iterate through the list and apply the format string to each element\n    new_list = [string.format(elem) for elem in list_]\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_element = string.format(element)\n        formatted_list.append(formatted_element)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(item) for item in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(x) for x in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the final nested dictionary\n    final_dict = {}\n    # Loop through each list and append the elements to the final dictionary\n    for i in range(len(l1)):\n        final_dict[l1[i]] = {l2[i]: l3[i]}\n    # Return the final dictionary\n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define a nested dictionary\n    nested_dict = {}\n\n    # Iterate through each list\n    for i in range(len(l1)):\n        for j in range(len(l2[i])):\n            # Add the values to the nested dictionary\n            nested_dict[l1[i]][l2[i][j]] = l3[i][j]\n\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the converted data\n    data = {}\n    \n    # iterate over each list\n    for i in range(len(l1)):\n        # get the current item from each list\n        item1 = l1[i]\n        item2 = l2[i]\n        item3 = l3[i]\n        \n        # check if the current item is a dictionary\n        if isinstance(item1, dict):\n            # if it is, recursively convert it to a nested dictionary\n            data.update({item1['key']: convert_list_dictionary(item1['sublist1'], item1['sublist2'], item1['sublist3'])})\n        elif isinstance(item1, list):\n            # if it's not a dictionary, convert it to a list\n            data.update({item1[0]: item1[1:]})\n        else:\n            # if it's neither a dictionary nor a list, convert it to a scalar value\n            data.update({item1: item2})\n    \n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Define the empty dictionary to hold the nested dictionary\n    nested_dict = {}\n    # Loop through the first list\n    for i in range(len(l1)):\n        # Check if the current element is a dictionary\n        if isinstance(l1[i], dict):\n            # If it is, loop through the keys of the dictionary\n            for key in l1[i]:\n                # Check if the key already exists in the nested dictionary\n                if key in nested_dict:\n                    # If it does, append the corresponding value to the existing list\n                    nested_dict[key].append(l1[i][key])\n                else:\n                    # If it doesn't, create a new list and append the value\n                    nested_dict[key] = [l1[i][key]]\n        else:\n            # If it's not a dictionary, append it to the list of values for the current key\n            if l1[i] in nested_dict:\n                nested_dict[l1[i]].append(l2[i])\n            else:\n                nested_dict[l1[i]] = [l2[i]]\n    # Loop through the second list\n    for i in range(len(l3)):\n        # Check if the current element is a dictionary\n        if isinstance(l3[i], dict):\n            # If it is, loop through the keys of the dictionary\n            for key in l3[i]:\n                # Check if the key already exists in the nested dictionary\n                if key in nested_dict:\n                    # If it does, append the corresponding value to the existing list\n                    nested_dict[key].append(l3[i][key])\n                else:\n                    # If it doesn't, create a new list and append the value\n                    nested_dict[key] = [l3[i][key]]\n        else:\n            # If it's not a dictionary, append it to the list of values for the current key\n            if l3[i] in nested_dict:\n                nested_dict[l3[i]].append(l2[i])\n            else:\n                nested_dict[l3[i]] = [l2[i]]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Converts more than one list to nested dictionary.\n\n    Parameters:\n    *lists: A variable number of lists, where each list contains elements that can be converted to a dictionary.\n\n    Returns:\n    A dictionary that contains the elements of all the input lists, with keys taken from the input lists.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            if isinstance(item, dict):\n                for key, value in item.items():\n                    result[lst[j][key]] = value\n            else:\n                result[lst[j]] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Check if all the lists have the same length\n    if len(l1)!= len(l2)!= len(l3):\n        raise ValueError(\"All lists should have the same length\")\n\n    # Create empty dictionary\n    nested_dict = {}\n\n    # Loop through each list and add values to nested dictionary\n    for i in range(len(l1)):\n        # Add key to nested dictionary with value of first list\n        nested_dict[str(i)] = l1[i]\n\n        # Add key to nested dictionary with value of second list\n        nested_dict[str(i) + 'a'] = l2[i]\n\n        # Add key to nested dictionary with value of third list\n        nested_dict[str(i) + 'b'] = l3[i]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List of strings\n        l2 (list): List of strings\n        l3 (list): List of integers\n\n    Returns:\n        dict: Nested dictionary with keys matching the lists and values being lists of strings and integers.\n    \"\"\"\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = [l2[i], l3[i]]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i*len(l2)+j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {l1[i]: {'name': l2[i], 'age': l3[i]} for i in range(len(l1))}\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    # If the number of digits is 1, the maximum sum is just the number itself\n    if n == 2:\n        return 2\n\n    # If the number of digits is 3, the maximum sum is 2 + 3 = 5\n    if n == 3:\n        return 5\n\n    # If the number of digits is 4, the maximum sum is 5 + 4 + 1 = 12\n    if n == 4:\n        return 12\n\n    # If the number of digits is 5, the maximum sum is 12 + 5 + 4 + 1 = 25\n    if n == 5:\n        return 25\n\n    # If the number of digits is greater than 5, we need to calculate the maximum sum using the given equation\n    f = get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)\n    return n + max(f, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Calculate the sum of f(n/2), f(n/3), f(n/4), f(n/5)\n    sum1 = n/2 + n/3 + n/4 + n/5\n    \n    # Calculate the sum of f(2), f(3), f(4), f(5)\n    sum2 = 2 + 3 + 4 + 5\n    \n    # Calculate the sum of f(n), f(n-1), f(n-2),..., f(2), f(1), f(0)\n    sum3 = sum1 + sum2\n    \n    # Calculate the sum of f(n) and f(n-1)\n    sum4 = n + (n-1)\n    \n    # Return the maximum sum possible\n    return max(sum3, sum4)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return 2 * get_max_sum(n//2)\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 14\n    elif n == 4:\n        return 28\n    elif n == 5:\n        return 45\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n, total_sum):\n        if n == 1:\n            return total_sum\n\n        mid = n // 2\n        left_sum = helper(mid, total_sum)\n        right_sum = helper(n - mid, total_sum)\n\n        if left_sum > right_sum:\n            return left_sum + n\n        else:\n            return right_sum + n\n\n    return helper(n, 0)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 5:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Check if n is divisible by 5\n    if n % 5 == 0:\n        return n\n    else:\n        # Calculate the sum of first five elements\n        sum_1 = (n/2) + (n/3) + (n/4) + (n/5) + n\n        # Calculate the sum of other elements\n        sum_2 = ((n//5)*5) + n\n        # Compare the two sums and return the larger one\n        if sum_1 > sum_2:\n            return sum_1\n        else:\n            return sum_2"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    # Find the length of each list in the input_list\n    list_lengths = [len(i) for i in input_list]\n    # Find the maximum length among all lists\n    max_length = max(list_lengths)\n    # Find the index of the maximum length in the input_list\n    max_index = list_lengths.index(max_length)\n    # Return the list at the maximum index\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function checks if the given tuple contains no duplicates.\n    \"\"\"\n    # Use a set to remove duplicates from the tuple\n    unique_tup = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(unique_tup) == len(test_tup):\n        # If yes, return True\n        return True\n    else:\n        # If no, return False\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set, which automatically removes duplicates\n    test_set = set(test_tup)\n    # if the length of the set is equal to the length of the tuple, it means no duplicates were found\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set from the given tuple\n    set_test_tup = set(test_tup)\n    # if the length of set is equal to the length of the tuple, there are no duplicates\n    if len(set_test_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # initialize a dictionary to store the frequency of each character\n    freq = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it and set its frequency to 1\n        else:\n            freq[char] = 1\n    \n    # loop through the dictionary again to find the first non-repeating character\n    for char in str1:\n        # if the frequency of the character is 1, return that character\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    # Create a dictionary to store the frequency of characters in the string\n    freq = {}\n    # Iterate through the string and count the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeating character in the string\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    first_non_repeating_char = None\n    for char in char_count:\n        if char_count[char] == 1:\n            first_non_repeating_char = char\n            break\n\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char, count in char_count.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    # Count the frequency of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # Find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n            \n    # If all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeated character in the string\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if (len(numbers) % 2) == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    sorted_numbers = sorted(numbers)\n    length = len(sorted_numbers)\n    \n    if length % 2 == 0:\n        median = (sorted_numbers[length//2 - 1] + sorted_numbers[length//2]) / 2\n    else:\n        median = sorted_numbers[length//2]\n        \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes in three numbers and returns the median of those numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    length = len(sorted_numbers)\n\n    if length % 2 == 0:\n        middle_index = length // 2\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        middle_index = length // 2\n        median = sorted_numbers[middle_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # First, sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Next, find the median based on the length of the list\n    if len(sorted_nums) % 2 == 0:\n        # If the list has an even number of elements, the median is the average of the two middle elements\n        median = (sorted_nums[len(sorted_nums)//2 - 1] + sorted_nums[len(sorted_nums)//2]) / 2\n    else:\n        # If the list has an odd number of elements, the median is the middle element\n        median = sorted_nums[len(sorted_nums)//2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Calculate the median based on the number of elements in the list\n    median = sorted_list[len(sorted_list) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Get the length of the sorted list\n    length = len(sorted_nums)\n\n    # Calculate the middle index\n    middle_index = length // 2\n\n    # If the length of the sorted list is odd, the median is the middle number\n    if length % 2 == 1:\n        return sorted_nums[middle_index]\n    # If the length of the sorted list is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_nums[middle_index - 1] + sorted_nums[middle_index]) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    # sorting the numbers\n    a = sorted([a,b,c])\n    # finding the median\n    median = a[len(a)//2]\n    # returning the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # first, sort the numbers in ascending order\n    a_sorted = sorted([a, b, c])\n    b_sorted = sorted([b, c, a])\n    c_sorted = sorted([c, a, b])\n    # second, find the median\n    median_1 = (a_sorted[1] + a_sorted[2]) / 2\n    median_2 = (b_sorted[1] + b_sorted[2]) / 2\n    median_3 = (c_sorted[1] + c_sorted[2]) / 2\n    median = (median_1 + median_2 + median_3) / 3\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list to store the sorted numbers\n    nums = [a, b, c]\n    \n    # Sort the list\n    nums.sort()\n    \n    # Calculate the median based on the length of the list\n    if len(nums) % 2 == 0:\n        # If the list has an even number of elements, calculate the average of the middle two elements\n        median = (nums[len(nums)//2-1] + nums[len(nums)//2]) / 2\n    else:\n        # If the list has an odd number of elements, calculate the middle element\n        median = nums[len(nums)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_list = [a]\n    b_list = [b]\n    c_list = [c]\n    a_list.extend(b_list)\n    a_list.extend(c_list)\n    a_list.sort()\n    if len(a_list) % 2 == 0:\n        median = (a_list[len(a_list)//2] + a_list[len(a_list)//2 - 1]) / 2\n    else:\n        median = a_list[len(a_list)//2]\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = sum(map(int, str(num)))\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(d) for d in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(num)) for num in nums)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        sum += digit_sum\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result += digit_sum\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        num_digits = len(str(num))\n        total_sum += num_digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize variables for the number of elements in each tuple\n    num1 = len(test_tup1)\n    num2 = len(test_tup2)\n    # initialize the result tuple with zeros\n    result = (0,) * max(num1, num2)\n    # loop through each element in the tuple and perform the bitwise xor\n    for i in range(max(num1, num2)):\n        if i < num1:\n            result[i] |= test_tup1[i]\n        if i < num2:\n            result[i] ^= test_tup2[i]\n    # return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(xor_result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Initialize the result tuple with all zeros\n    result_tup = (0, 0, 0, 0)\n\n    # Perform the bitwise xor operation on each element of the two input tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Inputs:\n    test_tup1: tuple of integers\n    test_tup2: tuple of integers\n\n    Output:\n    An integer representing the bitwise xor of the two input tuples.\n    '''\n\n    result = 0\n\n    for i in range(len(test_tup1)):\n        result |= (test_tup1[i] ^ test_tup2[i])\n\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum ^= test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = tuple(x^y for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for elem in test_list:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the number of unique tuples in the list.\n    \"\"\"\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return len(unique_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and get the unique tuples\n    unique_tuples = set(test_list)\n\n    # Return the length of the set to get the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if (item[0], item[1]) in freq:\n            freq[(item[0], item[1])] += 1\n        else:\n            freq[(item[0], item[1])] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    from collections import Counter\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n    \n    # Iterate through the list\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it and set its frequency to 1\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its frequency\n        else:\n            freq_dict[tup] += 1\n    \n    # Return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # create a set to store unique tuples\n    unique_tuples = set()\n\n    # iterate through the list and add unique tuples to the set\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            unique_tuples.add((test_list[i], test_list[j]))\n\n    # return the size of the set, which will be the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if tuple(item) in freq:\n            freq[tuple(item)] += 1\n        else:\n            freq[tuple(item)] = 1\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length.\")\n        return None\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through each element of both tuples\n    for i in range(len(test_tup1)):\n        # Check if the element in test_tup1 is of tuple type\n        if isinstance(test_tup1[i], tuple):\n            # Check if the element in test_tup2 is of tuple type\n            if isinstance(test_tup2[i], tuple):\n                # If both elements are tuples, recursively call the function to add the elements\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            # If the element in test_tup2 is not of tuple type, perform addition on the element in test_tup1\n            else:\n                result.append(test_tup1[i] + test_tup2[i])\n        # If the element in test_tup1 is not of tuple type, perform addition on the element in test_tup1\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initializing an empty list to store the final result\n    final_result = []\n    # iterating over the first tuple\n    for i in range(len(test_tup1)):\n        # initializing an empty list to store the elements of the current tuple\n        temp_result = []\n        # iterating over the second tuple\n        for j in range(len(test_tup2[i])):\n            # adding the elements of the current tuple\n            temp_result.append(test_tup1[i][j] + test_tup2[i][j])\n        # appending the current tuple and its elements to the final result\n        final_result.append(temp_result)\n    # returning the final result\n    return final_result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the resultant tuple with zero values\n    result = (0, 0, 0)\n    # loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # add the i-th element of both tuples and store the result in the i-th position of the resultant tuple\n        result[i] = test_tup1[i] + test_tup2[i]\n    # return the resultant tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        # check if the length of the two tuples is same or not\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            # raise an error if the length is not same\n            raise ValueError(\"Length of two tuples are not same.\")\n        # add the elements of the two tuples index by index\n        result.append([test_tup1[i][j] + test_tup2[i][j] for j in range(len(test_tup1[i]))])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tup = ()\n        for j in range(len(test_tup1[i])):\n            new_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty result list to store the sum of the two tuples\n    result = []\n    # Loop through each element of the first tuple and add it to the result list\n    for i in range(len(test_tup1[0])):\n        # Loop through each element of the second tuple and add it to the result list\n        for j in range(len(test_tup2[0])):\n            # Add the corresponding elements of the two tuples and append the result to the result list\n            result.append(test_tup1[i] + test_tup2[j])\n    # Return the resulting tuple of sums\n    return tuple(result)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their minimum.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes in two tuples, a tuple that we want to search within, and another tuple that contains the elements we want to check for.\n    It checks whether each element of the first tuple exists within the second tuple and returns True if an element is found, False otherwise.\n    '''\n\n    for element in tuplex: \n        if element in tuple1: \n            return True\n    \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input and returns True if an element exists within the first tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two tuples as arguments and checks whether an element exists within the first tuple.\n    If the element exists, it returns True, otherwise it returns False.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes in a tuple and a tuple element to check whether it exists within the tuple.\n    Returns True if the element exists within the tuple, False otherwise.\n    \"\"\"\n    return tuplex[0] in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    if tuple1 in tuplex:\n        print(\"The element is present in the tuple\")\n    else:\n        print(\"The element is not present in the tuple\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x%2==0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: #if x is even\n        return \"The parity of {} is even.\".format(x)\n    else: #if x is odd\n        return \"The parity of {} is odd.\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of the number\", x, \"is even.\")\n    else:\n        print(\"The parity of the number\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    This function takes in a number as input and returns True if the parity of the number is odd and False otherwise.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(1, x+1):\n        if x % i == 0:\n            parity += 1\n    if parity % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    if x % 2 == 0: \n        return \"The number is even\"\n    else: \n        return \"The number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    if max_digit < 10:\n        return n + 1\n    else:\n        new_digits = []\n        for digit in digits:\n            if digit == max_digit:\n                new_digits.append(max_digit + 1)\n            elif digit < max_digit:\n                new_digits.append(digit)\n            else:\n                new_digits.append(digit - 1)\n        return int(''.join(str(d) for d in new_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    max_digit_index = digits.index(max_digit)\n    digits[max_digit_index] = 9\n    result = 0\n    for i, d in enumerate(digits):\n        if d == 0:\n            continue\n        if d > max_digit:\n            result += 10**(len(digits) - 1 - i)\n        else:\n            result += d\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    n_str = str(n)\n    # Initialize the result number\n    result = 0\n    # Iterate through the string and add the digits of the original number\n    for digit in n_str:\n        result += int(digit)\n    # Return the result number\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize a list to store the digits of n\n    digits = list(str(n))\n    # Sort the digits in reverse order\n    digits.sort(reverse=True)\n    # Initialize a new number with the same digits as n but in reverse order\n    next_bigger = int(''.join(digits))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Remove the last digit of the number\n    n = int(str(n)[:-1])\n\n    # Reverse the number\n    n = int(str(n)[::-1])\n\n    # Add one to the reversed number\n    n = n + 1\n\n    # Reverse the reversed number and concatenate the digits\n    n = int(str(n)[::-1])\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number into a list of digits\n    number = [int(digit) for digit in str(n)]\n\n    # Sort the list of digits in reverse order\n    number.sort(reverse=True)\n\n    # Convert the sorted list of digits back into a string\n    result = ''.join(map(str, number))\n\n    # Convert the result string into an integer and return it\n    return int(result)\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a string and reverse it\n    num_str = str(n)[::-1]\n\n    # Initialize a list of characters to represent the digits of the number\n    digits = list(num_str)\n\n    # Initialize the current character index and the maximum character index\n    cur_index = 0\n    max_index = len(digits) - 1\n\n    # Rearrange the digits until they are in reverse order\n    while cur_index < max_index:\n        # Swap the current and next character in the digits list\n        digits[cur_index], digits[max_index] = digits[max_index], digits[cur_index]\n\n        # Increment the current and maximum character indices\n        cur_index += 1\n        max_index -= 1\n\n    # Convert the list of characters back to a string and return it\n    return int(digits)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    \n    # initialize the next number to 0\n    next_num = 0\n    \n    # loop through each digit of the number\n    for digit in num_str:\n        # find the index of the current digit\n        index = num_str.index(digit)\n        \n        # add the current digit to the next number\n        next_num += int(digit)\n        \n        # shift the number to the left by one index\n        for i in range(index, len(num_str)-1, -1):\n            num_str = num_str[:i] + num_str[i+1]\n        \n        # break out of the loop once we have found the last digit of the number\n        if index == 0:\n            break\n    \n    # convert the next number to an integer and return it\n    return int(next_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    s = str(n)\n    \n    # initialize the digits of the biggest number\n    d1 = int(s[-1])\n    d2 = int(s[-2])\n    d3 = int(s[-3])\n    \n    # initialize the digits of the next bigger number\n    if d1 < d2:\n        n = d3 + 100*d2 + 1000*d1\n    elif d2 < d1:\n        n = d1 + 100*d2 + 1000*d3\n    else:\n        n = d1 + 100*d3 + 1000*d2\n    \n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    digits = str(n)\n    max_digit = max(digits)\n    result = ''\n    for digit in digits:\n        if int(digit) > max_digit:\n            result += str(int(digit) + 1)\n        else:\n            result += digit\n    return int(result)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap of size k\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Remove the smallest element from the min heap if it violates the constraint of adding num2\n        while len(min_heap) > 0 and min_heap[0][1] < num1:\n            heapq.heappop(min_heap)\n\n        # If the size of the min heap is equal to k, add the current element and the smallest element to the min heap\n        if len(min_heap) == k:\n            heapq.heappush(min_heap, (min_heap[0][0], num1))\n        else:\n            heapq.heappush(min_heap, (num1, None))\n\n        # If the size of the min heap is less than k, add the current element to the min heap\n        if len(min_heap) == k:\n            heapq.heappush(min_heap, (min_heap[0][0], num1))\n\n        # Iterate through the second array\n        for num2 in nums2:\n            # If the size of the min heap is equal to k, check if the current element and the smallest element are valid\n            if len(min_heap) == k:\n                if (num2, min_heap[0][1]) not in min_heap:\n                    heapq.heappush(min_heap, (num2, min_heap[0][1]))\n            else:\n                # If the size of the min heap is less than k, check if the current element is valid\n                if (num2, None) not in min_heap:\n                    heapq.heappush(min_heap, (num2, None))\n\n            # If the size of the min heap is equal to k, check if the current element and the smallest element are valid\n            if len(min_heap) == k:\n                if (min_heap[0][1], num2) not in min_heap:\n                    heapq.heappush(min_heap, (min_heap[0][1], num2))\n            else:\n                # If the size of the min heap is less than k, check if the current element is valid\n                if (None, num2) not in min_heap:\n                    heapq.heappush(min_heap, (None, num2))\n\n    # Extract the k smallest pairs from the min heap\n    result = []\n    while len(min_heap) > 0:\n        pair = heapq.heappop(min_heap)\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap of size k\n    min_heap = []\n    \n    # Loop through the first array\n    for num1 in nums1:\n        \n        # Create a min heap of size k - 1\n        max_heap = []\n        \n        # Loop through the second array\n        for num2 in nums2:\n            \n            # Add the current element to the max heap\n            heapq.heappush(max_heap, num2)\n            \n            # If the size of the min heap is equal to k, add the pair to the result and remove the first element of the max heap\n            if len(min_heap) == k:\n                pair = (num1, heapq.heappop(min_heap))\n                heapq.heappush(min_heap, (pair[1], pair[0]))\n                \n        # Remove the first element of the max heap\n        heapq.heappop(max_heap)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap1 = []\n    heap2 = []\n    for num in nums1:\n        heapq.heappush(heap1, num)\n    for num in nums2:\n        heapq.heappush(heap2, num)\n\n    smallest_pairs = []\n    while k > 0:\n        if not heap1:\n            break\n        if not heap2:\n            break\n\n        if not smallest_pairs or smallest_pairs[-1][0] > min(heap1[0], heap2[0]):\n            smallest_pairs.append((min(heap1[0], heap2[0]), heap1[0]))\n            heapq.heappop(heap1)\n        if not smallest_pairs or smallest_pairs[-1][1] > min(heap1[0], heap2[0]):\n            smallest_pairs.append((min(heap1[0], heap2[0]), heap2[0]))\n            heapq.heappop(heap2)\n\n        k -= 1\n\n    return smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs of smallest elements\n    min_heap = []\n    # Initialize the number of pairs found to 0\n    count = 0\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # If the sum is equal to k, add the pair to the heap and increment the count\n            if num1 + num2 == k:\n                heapq.heappush(min_heap, (-num1, -num2))\n                count += 1\n                # If the count is equal to k, break out of both loops\n                if count == k:\n                    break\n\n        # If the count is equal to k, break out of the first loop\n        if count == k:\n            break\n\n    # Return the minimum k pairs found in the heap\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the two arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize an empty heap to store the pairs\n    pairs = []\n\n    # Initialize the two pointers\n    i = j = 0\n\n    # Iterate until we have found k pairs\n    while k > 0:\n        # If there are no more elements in the first array\n        if i == len(nums1):\n            # Add the remaining elements from the second array to the heap\n            heapq.heappush(pairs, (nums2[j], nums2[j]))\n            j += 1\n            k -= 1\n        # If there are no more elements in the second array\n        elif j == len(nums2):\n            # Add the remaining elements from the first array to the heap\n            heapq.heappush(pairs, (nums1[i], nums1[i]))\n            i += 1\n            k -= 1\n        # If there are still elements left in both arrays\n        else:\n            # Calculate the sum of the smallest elements\n            sum_val = nums1[i] + nums2[j]\n\n            # If the sum is greater than or equal to the current smallest pair\n            if sum_val >= pairs[0][0]:\n                # Pop the smallest pair from the heap and add the new pair to the heap\n                pair = heapq.heappop(pairs)\n                heapq.heappush(pairs, (sum_val, pair[0]))\n                k -= 1\n            else:\n                # Add the smallest pair to the heap and move the pointers to the next pair\n                heapq.heappush(pairs, (nums1[i], nums2[j]))\n                i += 1\n                j += 1\n\n    # Return the k smallest pairs\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n\n    # Iterate through each element in the first array\n    for num1 in nums1:\n        # Iterate through each element in the second array\n        for num2 in nums2:\n            # Calculate the sum\n            pair_sum = num1 + num2\n\n            # Create a pair with the sum and the corresponding elements\n            pair = (pair_sum, (num1, num2))\n\n            # If the heap is full and the new pair is smaller than the smallest element, pop the smallest element and add its pair to the result\n            if len(heap) == k:\n                if pair[0] > heap[0]:\n                    heapq.heappop(heap)\n                    result.append(heapq.heappop(heap))\n\n            # Add the new pair to the heap\n            heapq.heappush(heap, pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    min_heap = []\n\n    for num in nums1:\n        heapq.heappush(heap1, num)\n\n    for num in nums2:\n        heapq.heappush(heap2, num)\n\n    while k > 0 and len(min_heap) < k:\n        if len(heap1) == 0 or len(heap2) == 0:\n            break\n        smallest = min(heap1[0], heap2[0])\n        if smallest in min_heap:\n            break\n        heapq.heappush(min_heap, smallest)\n        heapq.heappop(heap1)\n        heapq.heappop(heap2)\n        k -= 1\n\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1+num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function takes three parameters:\n    - nums1: A list of integers representing the first array.\n    - nums2: A list of integers representing the second array.\n    - k: An integer representing the number of pairs to find.\n\n    This function returns a list of pairs of integers, representing the k smallest pairs of elements from the first and second arrays.\n    '''\n\n    # Create a min-heap of size k\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n\n        # Iterate through the second array\n        for num2 in nums2:\n\n            # Add a tuple to the min-heap with the product of the current elements\n            heapq.heappush(min_heap, (num1 * num2, (num1, num2)))\n\n            # If the min-heap has more than k elements, remove the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Extract the pairs from the min-heap and return them as a list\n    pairs = []\n    while min_heap:\n        _, pair = heapq.heappop(min_heap)\n        pairs.append(pair)\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Create a min-heap of size k\n    min_heap = []\n    for _ in range(k):\n        heapq.heappush(min_heap, float('inf'))\n\n    # Iterate over the first array and for each element, update the min-heap\n    for num in nums1:\n        if num < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n        elif num == min_heap[0]:\n            heapq.heappush(min_heap, num)\n\n    # Iterate over the second array and for each element, update the min-heap\n    for num in nums2:\n        if num < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n        elif num == min_heap[0]:\n            heapq.heappush(min_heap, num)\n\n    # Return the k smallest pairs\n    return list(heapq.nsmallest(k, min_heap))"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples in ascending order of the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n    # Initialize variables for the minimum product and the minimum value of the first element\n    min_product = float('inf')\n    min_value = list1[0][0]\n    # Iterate through the sorted list of tuples and calculate the product of the pair of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the pair of tuples\n            product = list1[i][1] * list1[j][1]\n            # Update the minimum product if the new product is less than the current minimum product\n            if product < min_product:\n                min_product = product\n                min_value = list1[i][0]\n    # Return the minimum product and the minimum value of the first element\n    return min_product, min_value"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Sort the list of tuples based on their first element\n    list1.sort(key=lambda x: x[0])\n    \n    # Initialize the minimum product and the minimum product index\n    min_prod = float('inf')\n    min_prod_index = 0\n    \n    # Iterate through the sorted list of tuples and calculate the product of the pairs\n    for i in range(len(list1)-1):\n        prod = list1[i][1] * list1[i+1][1]\n        if prod < min_prod:\n            min_prod = prod\n            min_prod_index = i\n    \n    # Return the minimum product and its index in the sorted list of tuples\n    return min_prod, min_prod_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of two tuples \n    from the list. If there are multiple pairs of tuples with the same minimum product, it returns \n    the minimum product of those pairs.\n    '''\n    min_product = float('inf')\n    pairs = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                pairs = [(list1[i], list1[j])]\n            elif product == min_product:\n                pairs.append((list1[i], list1[j]))\n    return min_product, pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return 0\n    # Sort the list of tuples\n    sorted_list = sorted(list1)\n    # Initialize the minimum product as the first element of the first tuple in the list\n    min_product = sorted_list[0][0]\n    # Loop through the rest of the list of tuples\n    for i in range(1, len(sorted_list)):\n        # Calculate the current product of the current tuple and the previous tuple in the list\n        current_product = sorted_list[i][0] * sorted_list[i-1][0]\n        # Update the minimum product if the current product is less than the minimum product\n        if current_product < min_product:\n            min_product = current_product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    min_tuple = None\n    \n    # Iterate over the tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product and the corresponding tuple\n            if product < min_product:\n                min_product = product\n                min_tuple = (list1[i], list1[j])\n    \n    # Return the minimum product and tuple\n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            # Check if the indices are not the same\n            if i == j:\n                continue\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Check if the product is less than the current minimum\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_product += list1[i][0] * list1[j][0]\n            count += 1\n    return min_product / count"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    min_pair = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n    return min_pair"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    if isinstance(listval[0], (int, float)):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval, key=lambda x: x.lower())\n    else:\n        return None"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list of values as input and returns the minimum value in the list.\n    '''\n    min_num = lst[0]\n    for num in lst:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0] #initialize the minimum value with the first value in the list\n    \n    #loop through the rest of the values in the list\n    for i in range(1, len(listval)):\n        #if the current value is smaller than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val #return the minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # Loop through each value in the list\n    for val in listval:\n        # If the current value is smaller than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    This function takes in a list as an argument and returns the minimum value\n    in the list. The function can handle any type of data in the list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    # loop through the list and compare each value to the current minimum\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)')\n    return pattern.sub(lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    # Convert snake case to camel case\n    camel_word = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    # Capitalize the first letter\n    return camel_word[0].upper() + camel_word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case by capitalizing the first letter of each word and adding a space after it.\n    return re.sub('_(.)', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case += word.lower()\n        else:\n            camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # remove leading and trailing underscores\n    camel_case = re.sub('^_|_$', '', camel_case)\n    # capitalize the first letter\n    return camel_case.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert all the words to lowercase\n    word = word.lower()\n    # split the string into words\n    words = word.split('_')\n    # join the words with capital letters\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n\n    Args:\n        word: The snake case string.\n\n    Returns:\n        The camel case string.\n    \"\"\"\n    first_letter = word[0]\n    remaining_letters = re.sub('^([a-z])', lambda x: x.group(1).upper(), word[1:])\n    return first_letter.lower() + remaining_letters"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0] # using list comprehension to remove odd numbers\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list with odd numbers removed.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty\n    if not list1:\n        return None\n    # Initialize a variable to store the nth element\n    nth_element = None\n    # Loop through the list of tuples and find the nth element\n    for i, tup in enumerate(list1):\n        if i == n-1:\n            nth_element = tup\n            break\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if the length of the list is greater than n\n    if len(list1) > n:\n        # Extract the nth element from the list\n        return list1[n]\n    else:\n        # Raise an error if the length of the list is less than n\n        raise ValueError(\"The length of the list must be greater than n\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"List length should be greater than or equal to n\")\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as input and returns the nth element of the list.\n    \"\"\"\n    if not isinstance(lst, list) or not isinstance(n, int):\n        return \"Invalid input type\"\n    if n < 1:\n        return \"Invalid n value\"\n    if not lst:\n        return \"List is empty\"\n    try:\n        return lst[n-1]\n    except IndexError:\n        return \"Invalid index\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1][0]\n    except IndexError:\n        return 'The index is out of range.'"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize the variable to store the nth element\n    nth_element = None\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # If the current index is equal to the nth element, set the variable to the tuple value\n        if i == n - 1:\n            nth_element = list1[i][1]\n            break\n    # Return the nth element\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n-1:\n            return list1[i][1]\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1]\n        return nth_element\n    except IndexError:\n        return 'Index out of range'"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two list as input and checks whether any element of the first list exists in the second list or not.\n    If an element of the first list exists in the second list, then the function will return True else False.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in another sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    # convert lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check whether any value exists in both sets\n    return len(set1 & set2) > 0"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i, \"exists in list2.\")\n        else:\n            print(i, \"does not exist in list2.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            print(num)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in the first list exists in the second list or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes in two lists and returns True if there is any value in list1 that exists in list2 and vice versa. Otherwise, it returns False.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        temp_product = max(arr[i], arr[i] * min_product)\n        min_product = min(arr[i], arr[i] * max_product)\n        max_product = temp_product\n\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables to store the maximum product and its indices\n    max_product = float('-inf')\n    max_product_index = 0\n    second_max_product = float('-inf')\n    second_max_product_index = 0\n\n    # Iterate through the array and find the maximum and second maximum products\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            second_max_product = max_product\n            max_product = arr[i]\n            max_product_index = i\n        elif arr[i] > second_max_product and arr[i]!= max_product:\n            second_max_product = arr[i]\n            second_max_product_index = i\n\n    # Return the indices of the maximum and second maximum products\n    return (max_product_index, second_max_product_index)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize variables to keep track of the maximum product and the indices of the two numbers that make up the maximum product\n    max_product = float('-inf')\n    max_product_indices = (0, 0)\n\n    # Iterate through the array and for each number, check if its product is greater than the current maximum product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_product_indices = (i, j)\n\n    # Return the indices of the two numbers that make up the maximum product\n    return max_product_indices"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    max_1 = arr[0]\n    min_1 = arr[0]\n    max_2 = arr[0]\n    min_2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n            \n        if arr[i] < min_1:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif arr[i] < min_2:\n            min_2 = arr[i]\n            \n    return max(max_1*max_2, min_1*min_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    max3 = arr[0] * arr[1]\n    max4 = max3\n    \n    for i in range(1, len(arr)):\n        if arr[i] * max2 > max3:\n            max4 = max3\n            max3 = arr[i] * max2\n        elif arr[i] * max1 > max2:\n            max4 = max2\n            max3 = max1\n            max2 = arr[i]\n        elif arr[i] * max1 > max3:\n            max4 = max3\n            max3 = arr[i] * max1\n        elif arr[i] * max2 > max4:\n            max4 = arr[i] * max2\n    \n    return max4"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes an array of integers as input and returns a tuple of two integers, where the \n    first integer represents the product of two numbers that together result in the largest value \n    and the second integer represents the product of two numbers that together result in the second \n    largest value.\n    \"\"\"\n    max_product = float('-inf')\n    second_max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                second_max_product = max_product\n                max_product = product\n            elif product > second_max_product:\n                second_max_product = product\n    return (max_product, second_max_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max1 * max2, min1 * min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = []\n\n    # Loop through the list of tuples\n    for i in range(len(Input)):\n        # Get the first element of each tuple\n        first_element = Input[i][0]\n\n        # Check if the first element is already in the common_first_element list\n        if first_element not in common_first_element:\n            # If not, add it to the list\n            common_first_element.append(first_element)\n\n    # Return the list of common first elements\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Creating empty dictionary to store common elements\n    common_dict = {}\n\n    # Iterating through the list of tuples\n    for item in Input: \n\n        # Checking if the first element of the tuple is already in the dictionary\n        if item[0] in common_dict: \n\n            # If it is already present, increment the count of that element\n            common_dict[item[0]] += 1\n\n        # If the first element is not present in the dictionary, add it with count 1\n        else: \n            common_dict[item[0]] = 1\n\n    # Creating empty list to store the result\n    result = []\n\n    # Iterating through the dictionary to find the common elements\n    for key, value in common_dict.items(): \n\n        # If the count of the element is greater than 1, add it to the result list\n        if value > 1: \n            result.append(key)\n\n    # Returning the result list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    # Create a dictionary to store count of each element in the input list\n    counts = {}\n    for item in Input:\n        if item[0] in counts:\n            counts[item[0]] += 1\n        else:\n            counts[item[0]] = 1\n\n    # Find the first element in the dictionary that has a count of 2 or more\n    result = None\n    for key in counts:\n        if counts[key] >= 2:\n            result = key\n            break\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Find common first element in given list of tuple.\n\n    Args:\n        Input: a list of tuples\n\n    Returns:\n        A list of tuples where each tuple contains a list of tuples, one for each unique element in the input list.\n    \"\"\"\n\n    # Use a dictionary to keep track of which elements have been seen so far\n    seen = {}\n\n    # Initialize an empty list to hold the result\n    result = []\n\n    # Iterate over the input list\n    for tuple_ in Input:\n        # Get the first element of the tuple\n        first = tuple_[0]\n        # Check if the first element has been seen before\n        if first not in seen:\n            # If not, create a new list to hold the tuples with that first element\n            seen[first] = [tuple_]\n        else:\n            # If it has, append the tuple to the list for that first element\n            seen[first].append(tuple_)\n\n    # Iterate over the keys in the seen dictionary (i.e., the first elements of the tuples)\n    for key in seen:\n        # Create a list of tuples for this first element\n        tuples_for_key = seen[key]\n        # Sort the list of tuples by their second element (i.e., their second element of the tuples)\n        tuples_for_key.sort(key=lambda x: x[1])\n        # Add the sorted list of tuples to the result list\n        result.append(tuples_for_key)\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if len(common_elements) == 0:\n            common_elements.append(i[0])\n        elif i[0] in common_elements:\n            pass\n        else:\n            common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    # First, we need to create a dictionary to store the count of elements in each tuple\n    count_dict = {}\n    for item in Input:\n        if item[0] in count_dict:\n            count_dict[item[0]] += 1\n        else:\n            count_dict[item[0]] = 1\n\n    # Next, we need to find the common first element in the dictionary\n    common_element = None\n    max_count = 0\n    for item in count_dict:\n        if count_dict[item] > max_count:\n            max_count = count_dict[item]\n            common_element = item\n\n    # Finally, we return the common first element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples\n    where each tuple contains a unique common first element from the input list.\n    \"\"\"\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Loop through the input list of tuples\n    for i in range(len(Input)):\n\n        # Extract the first element of the i-th tuple\n        first_element = Input[i][0]\n\n        # Check if the first element is not already in the common_elements list\n        if first_element not in common_elements:\n\n            # If it's not, add it to the list\n            common_elements.append(first_element)\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through the input list of tuples again and extract the first element of each tuple\n    for i in range(len(Input)):\n\n        # Extract the first element of the i-th tuple\n        first_element = Input[i][0]\n\n        # Check if the first element is in the common_elements list\n        if first_element in common_elements:\n\n            # If it's, create a new tuple with the first element and the second element of the i-th tuple\n            result.append((first_element, Input[i][1]))\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common = []\n    for i in Input:\n        if i[0] not in Common:\n            Common.append(i[0])\n    return Common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store common elements and their count\n    common = {}\n    \n    # loop through the given list of tuples\n    for tup in Input:\n        # get the first element of the tuple\n        first = tup[0]\n        \n        # if the first element is already in the dictionary, increment its count by 1\n        if first in common:\n            common[first] += 1\n        else:\n            common[first] = 1\n            \n    # return the dictionary of common elements and their count\n    return common"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and finds the element of the list with maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_val = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_val = i\n    return max_val"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize variables to store maximum and current lengths\n    max_length = 0\n    current_length = 0\n    \n    # Loop through the list and update maximum and current lengths as needed\n    for i in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    \n    # Return the element with the maximum length\n    return lst[lst.index(max(lst, key=len))]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and finds the element of the list with maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    \n    # finding maximum length\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    \n    # returning maximum element\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max(len(word) for word in lst)\n    max_word = next((word for word in lst if len(word) == max_length), None)\n    return max_word"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    length = len(list1)\n\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n\n    print(\"Total sum multiplied by the length of the list:\", total_sum * length)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Rounding all the numbers in the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Calculating the total sum\n    total_sum = sum(list1)\n\n    # Printing the result\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        num = round(num)\n        total += num\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    count = 0\n    sum_cubes = 0\n    \n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # if i is even, add it to the sum of cubes\n        if i % 2 == 0:\n            sum_cubes += i**3\n            count += 1\n            \n    # return the sum of cubes\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i*i*i\n    return total"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i*i*i\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize variables\n    cube_sum = 0\n    sum_of_cubes = 0\n    \n    # loop for n even natural numbers\n    for i in range(2, n+1, 2): \n        # calculate the cube of the even natural number i\n        cube = i ** 3\n        \n        # add the cube to the sum of cubes\n        sum_of_cubes += cube\n        \n        # add the cube to the cube sum\n        cube_sum += cube\n    \n    # return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing variables\n    cube_sum = 0\n    num = 2\n    \n    # loop through the first n even natural numbers\n    while num <= n:\n        cube_sum += num ** 3\n        num += 2\n        \n    # returning the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(2, n+1, 2): \n        sum += i**3 \n    return sum "
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \", \".join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    This function takes a tuple as input and returns a string with concatenated elements separated by the specified delimiter.\n    '''\n    concatenated_str = \"\"\n    for i in test_tup:\n        concatenated_str += str(i) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-1] # Remove the extra delimiter at the end."
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = []\n    for item in test_tup:\n        result.append(str(item))\n    return delimiter.join(result)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return \", \".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = []\n    for item in test_tup:\n        result.append(str(item))\n    return delimiter.join(result)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Concatenate each element of the tuple by the delimiter.\n\n    Args:\n    - test_tup (tuple): A tuple of strings or integers to concatenate.\n    - delimiter (str): The delimiter to use to concatenate the strings.\n\n    Returns:\n    - str: The concatenated string.\n    \"\"\"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    count = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n        count += 1\n    average_of_cubes = cube_sum/count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #Initialize variables\n    sum_of_cubes = 0\n    count = 0\n\n    #Calculate the average of cubes\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        count += 1\n\n    average_of_cubes = sum_of_cubes/count\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    # Calculate the sum of squares of cubes of first n natural numbers\n    sum_of_squares = (n**3)**2\n\n    # Calculate the average of sum of squares of cubes\n    average = sum_of_squares/n\n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [num ** 3 for num in range(1, n+1)]\n    average = sum(cubes) / len(cubes)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    average_of_cubes = sum_of_cubes / n\n\n    return average_of_cubes\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [s[-1] for s in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # initialize an empty list to store the rear index elements\n    rear_elements = []\n    # loop through each string in the tuple\n    for string in test_tuple:\n        # if the string is not empty, append its rear index element to the list\n        if string:\n            rear_elements.append(string[-1])\n    # return the list of rear index elements\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for string in test_tuple:\n        rear_element = string[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [string[1] for string in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    \n    for sublist in list1:\n        if x in sublist:\n            count += 1\n            \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers in the original list.\n    '''\n    # creating a new empty list to store odd numbers\n    new_list = []\n    # iterating over the list of numbers\n    for num in nums:\n        # if the number is odd, adding it to the new list\n        if num % 2!= 0:\n            new_list.append(num)\n    # returning the new list with odd numbers\n    return new_list"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        yyyy, mm, dd = match.groups()\n        return f\"{dd}-{mm}-{yyyy}\"\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format in yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Use the regular expression search() method to check if the input date string matches the pattern\n    if re.search(pattern, dt):\n        # If the input date string matches the pattern, extract the year, month, and day from the string\n        year, month, day = re.findall(r'\\d{4}', dt)[0], re.findall(r'\\d{2}', dt)[0], re.findall(r'\\d{2}', dt)[0]\n\n        # Convert the year, month, and day to the required format by concatenating them with hyphens\n        new_date = day + '-' + month + '-' + year\n\n        # Return the new date string in dd-mm-yyyy format\n        return new_date\n    else:\n        # If the input date string does not match the pattern, return the input date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date_match = re.search(pattern, dt)\n    if date_match:\n        year, month, day = int(date_match.group(1)), int(date_match.group(2)), int(date_match.group(3))\n        new_dt = f\"{day}-{month}-{year}\"\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    m = re.search(pattern, dt)\n    if m:\n        day, month, year = m.groups()\n        new_date = '{}-{}-{}'.format(year, month, day)\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the regular expression pattern to match the date format in the string\n    match = re.match(pattern, dt)\n\n    # If the match is successful, extract the year, month, and day from the match object\n    if match:\n        year, month, day = match.groups()\n\n        # Convert the year to a string with leading zeros\n        year = str(year).zfill(4)\n\n        # Combine the day, month, and year strings in the desired format\n        new_date = f'{day}-{month}-{year}'\n    else:\n        # If the match is not successful, set the new date to None\n        new_date = None\n\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match a valid date in yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Check if the input string matches the pattern\n    if re.match(pattern, dt):\n        # Split the date string into its components\n        year, month, day = map(int, dt.split('-'))\n\n        # Convert the components to dd-mm-yyyy format\n        formatted_date = '{:02d}-{:02d}-{:04d}'.format(day, month, year)\n\n        return formatted_date\n    else:\n        # If the input string does not match the pattern, return the input string as it is\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the date format in the input string\n    match = re.match(pattern, dt)\n    # extract the year, month, and day from the match object\n    year, month, day = match.groups()\n    # convert the year, month, and day to dd-mm-yyyy format\n    new_dt = f'{day}-{month}-{year}'\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove any non-digit characters from the date string\n    dt = re.sub(r'\\D', '', dt)\n    # split the date string into year, month, and day components\n    year, month, day = map(int, dt.split('-'))\n    # format the date components as DD-MM-YYYY\n    return f'{day}-{month:02}-{year:04}'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.sub() function to replace the date format in dt with the required format\n    dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_parts = re.split('-', dt)\n    dt_parts[2], dt_parts[1], dt_parts[0] = dt_parts[1], dt_parts[2], dt_parts[0]\n    return '-'.join(dt_parts)\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                # Swap elements if they are not in correct order\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using Shell Sort.\n    '''\n\n    n = len(my_list)\n\n    # Calculate the largest gap (in steps of 10)\n    gap = n // 2\n\n    while gap > 0:\n        # Perform a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # The i-th element and the gap-i elements are out of order.\n            # Swap them if necessary.\n            j = i\n            temp = my_list[i]\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Reduce the gap size.\n        gap //= 1\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3 * h + 1\n\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    \n    # calculate the gap using formula\n    gap = n//2\n    while gap > 0:\n        \n        # iterate through array with gap\n        for i in range(gap, n):\n            \n            # swap adjacent elements if they are not in order\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        \n        # shrink the gap by half\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the length of the list\n    n = len(my_list)\n\n    # Initialize the gap\n    gap = n // 2\n\n    # While gap is greater than 0, do the following\n    while gap > 0:\n\n        # Move the gap to the next position\n        gap = gap // 2\n\n        # Sort the array using the gap size\n        for i in range(gap, n):\n            # Move the current element to its correct position\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    n = len(my_list)\n    largest_gap = n // 2\n\n    while largest_gap > 0:\n        # Insertion sort for this gap size\n        for i in range(largest_gap, n):\n            key = my_list[i]\n            j = i\n            while j >= largest_gap and key < my_list[j-largest_gap]:\n                my_list[j] = my_list[j-largest_gap]\n                j -= largest_gap\n            my_list[j] = key\n\n        # Decrease the gap size\n        largest_gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap = gap//2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and tuple.\n    '''\n    return tuple(elem1 and elem2 for elem1, elem2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] & test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns the elementwise and tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples should have the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if both tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples must have the same length'\n    \n    # initialize result tuple\n    result_tup = ()\n    \n    # iterate over each element in the two tuples and extract the elementwise and\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if the two tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length\")\n\n    # Extract the elementwise and tuples using a list comprehension\n    and_tup = [x & y for x, y in zip(test_tup1, test_tup2)]\n\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    det = b**2 - 4*a*c\n    if det < 0:\n        return \"The parabola has no directrix.\"\n    elif det == 0:\n        return \"The parabola has a single directrix.\"\n    else:\n        root = (-b + math.sqrt(det)) / (2*a)\n        return \"The directrix of the parabola is at y = \" + str(root)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b ** 2 - 4 * a * c\n    return D"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes three parameters (a, b, and c) representing the coefficients of a parabola. \n    It returns the value of the directrix of the parabola. The directrix of a parabola is a point where the slope of the parabola is equal to 0.\n    \"\"\"\n    \n    # Defining the equation of the parabola as a*x^2 + b*x + c = 0\n    equation = a*x**2 + b*x + c\n    \n    # Substituting values for x = 0 in the equation to get the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Finding the two roots of the equation\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Checking which root is closer to the origin and returning the value of the directrix\n    if root1**2 + root1**2 == discriminant:\n        return root1\n    elif root2**2 + root2**2 == discriminant:\n        return root2\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    return x"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a, b, c -- three real numbers representing the coefficients of the parabola, a^2 + b^2 = c^2\n\n    Returns:\n    The directrix of the parabola.\n\n    Example usage:\n    parabola_directrix(1, 2, 5) # should return 0.5\n    '''\n    \n    return (-b + (b**2 - 4*a*c)**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    if a**2 == 0:\n        return None\n    else:\n        x = -b/(2*a)\n        y = (a*x**2 + b*x + c)/(2*a)\n        return y"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc < 0:\n        return \"The equation has no real roots\"\n    elif disc == 0:\n        return \"The directrix is at y = -b/2a\"\n    else:\n        root1 = (-b + math.sqrt(disc))/(2*a)\n        root2 = (-b - math.sqrt(disc))/(2*a)\n        return \"The directrix is at y1 = {:.3f}, y2 = {:.3f}\".format(root1, root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    root_1 = (-b + (b*b - 4*a*c)**0.5) / (2*a)\n    root_2 = (-b - (b*b - 4*a*c)**0.5) / (2*a)\n    return root_1, root_2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the coefficients of the quadratic equation\n    discriminant = (b ** 2) - (4 * a * c)\n    \n    # Check if the quadratic equation has a real root\n    if discriminant > 0:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        return root1, root2\n    elif discriminant == 0:\n        return -b / (2 * a)\n    else:\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common_elements = set(list1) & set(list2)\n    return len(common_elements) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n\n    for item in list1:\n        if item in list2 and item!= list1[0]:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from both lists to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    common = set1.intersection(set2)\n\n    # If the length of the intersection is greater than 0, then there is a common element\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set from list1 to remove duplicates\n    set1 = set(list1)\n\n    # Loop through list2 and check if each element is in set1\n    for element in list2:\n        if element in set1:\n            return True\n\n    # If no common element is found, return false\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2) + height\n\n    # calculate the area of the two trapeziums\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # calculate the median area\n    median_area = (area1 + area2 + area) / 3\n\n    # calculate the median perimeter\n    median_perimeter = (perimeter + area1 + area2) / 3\n\n    # return the median perimeter\n    return median_perimeter"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the trapezium using the formula:\n    # sqrt(1/2 * base1^2 + 1/2 * base2^2)\n    length = (0.5 * base1 ** 2 + 0.5 * base2 ** 2) ** 0.5\n\n    # Calculate the area of the triangle in the first half\n    half_area = 0.5 * area * height\n\n    # Calculate the area of the triangle in the second half\n    second_half_area = 0.5 * area - half_area\n\n    # Calculate the height of the triangle in the first half\n    half_height = 0.5 * second_half_area / area\n\n    # Calculate the length of the triangle in the first half\n    half_length = 0.5 * length\n\n    # Return the median of the lengths of the two triangles\n    return (half_length + half_height + length) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the smaller base\n    smaller_base = base1 if base1 < base2 else base2\n\n    # Calculate the length of the longer base\n    longer_base = base1 if base1 > base2 else base2\n\n    # Calculate the length of the smaller base and the height\n    smaller_base_and_height = smaller_base + height\n\n    # Calculate the length of the longer base and the height\n    longer_base_and_height = longer_base + height\n\n    # Calculate the area of the trapezium formed by the two shorter bases and the height\n    trapezium_area = 0.5 * (smaller_base_and_height + longer_base_and_height)\n\n    # Calculate the area of the trapezium formed by the two longer bases and the height\n    longer_trapezium_area = 0.5 * (longer_base_and_height + height)\n\n    # Calculate the ratio of the two areas\n    ratio = trapezium_area / longer_trapezium_area\n\n    # Calculate the length of the trapezium perimeter\n    trapezium_perimeter = 2 * (smaller_base + longer_base)\n\n    # Calculate the length of the shorter base\n    shorter_base_length = trapezium_perimeter / 2\n\n    # Calculate the median length of the trapezium\n    median_length = shorter_base_length * ratio\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the length of the base of the trapezium\n    base = 0.5 * perimeter\n\n    # Calculate the difference between the area and perimeter\n    diff = area - perimeter\n\n    # Calculate the lengths of the bases of the two triangles\n    triangle1 = 0.5 * base1 * height\n    triangle2 = 0.5 * base2 * height\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = abs(triangle1 - diff)\n    side2 = abs(triangle2 - diff)\n\n    # Calculate the lengths of the bases of the two equal sides of the trapezium\n    equal_side1 = 0.5 * side1\n    equal_side2 = 0.5 * side2\n\n    # Calculate the median of the equal sides of the trapezium\n    median1 = equal_side1 if equal_side1 > equal_side2 else equal_side2\n    median2 = equal_side2 if equal_side1 > equal_side2 else equal_side1\n\n    # Return the median of the two bases of the two equal sides of the trapezium\n    return median1, median2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the base of the trapezium\n    base = max(base1, base2)\n    # Calculate the length of the other base of the trapezium\n    other_base = min(base1, base2)\n    # Calculate the number of equal bases\n    equal_bases = 1\n    # Calculate the number of unequal bases\n    unequal_bases = 0\n    # Loop through the bases and count the equal and unequal bases\n    for i in range(base, other_base, -1):\n        if base1 == i:\n            equal_bases += 1\n        elif base2 == i:\n            equal_bases += 1\n        else:\n            unequal_bases += 1\n            break\n    # Calculate the median length of the trapezium\n    if equal_bases == 0:\n        median = 0.5 * height\n    elif equal_bases == 1:\n        median = 0.5 * (0.5 * base1 + 0.5 * base2)\n    else:\n        median = 0.5 * (0.5 * base1 + 0.5 * base2 + 0.5 * area / equal_bases)\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height\n    area += 0.5 * base2 * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2)\n    \n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * (perimeter - area)\n    \n    # Calculate the length of the first half of the trapezium\n    length1 = 0.5 * height * semi_perimeter\n    \n    # Calculate the length of the second half of the trapezium\n    length2 = 0.5 * height * semi_perimeter\n    \n    # Calculate the median length of the trapezium\n    if area >= perimeter:\n        median = length1\n    else:\n        median = length2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the length of the trapezium\n    trapezium_length = (base1 + base2) / 2\n    \n    # calculate the area of the trapezium\n    area = 0.5 * (base1 * height + base2 * height)\n    \n    # calculate the height of the trapezium\n    trapezium_height = (base1 * height + base2 * height) / area\n    \n    # calculate the median length of the trapezium\n    median_length = (trapezium_length + trapezium_height) / 2\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        base1,base2 = base2,base1\n    area = 0.5*(base1+base2)*height\n    median = area/base2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the lengths of the base of the trapeziums\n    base1_length = base1 * 0.5\n    base2_length = base2 * 0.5\n    \n    # Calculate the lengths of the top of the trapeziums\n    top1_length = base1 + base2 - 2 * height\n    \n    # Calculate the lengths of the bottom of the trapeziums\n    bottom1_length = 2 * height\n    bottom2_length = 2 * height\n    \n    # Calculate the lengths of the trapeziums\n    trapezium1_length = top1_length + bottom1_length\n    trapezium2_length = top2_length + bottom2_length\n    \n    # Calculate the lengths of the two halves of the trapezium\n    half_trapezium1_length = base1_length + base2_length\n    half_trapezium2_length = trapezium1_length + trapezium2_length\n    \n    # Calculate the length of the shorter trapezium\n    shorter_trapezium_length = min(half_trapezium1_length, half_trapezium2_length)\n    \n    # Calculate the length of the longer trapezium\n    longer_trapezium_length = max(half_trapezium1_length, half_trapezium2_length)\n    \n    # Calculate the median length of the trapezium\n    median_length = (shorter_trapezium_length + longer_trapezium_length) / 2\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of the two half-bases and the height of the trapezium\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n    trapezium_height = height\n\n    # Calculate the lengths of the three halves of the trapezium\n    half_trapezium1 = half_base1 + half_base2\n    half_trapezium2 = trapezium_height + half_base1 + half_base2\n    half_trapezium3 = trapezium_height + half_base1\n    half_trapezium4 = half_base2\n\n    # Calculate the areas of the trapezium\n    area1 = half_trapezium1 * trapezium_height\n    area2 = half_trapezium2 * trapezium_height\n    area3 = half_trapezium3 * trapezium_height\n    area4 = half_trapezium4 * trapezium_height\n\n    # Sort the areas in ascending order\n    areas = [area1, area2, area3, area4]\n    areas.sort()\n\n    # Calculate the median area\n    median_area = areas[2]\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * median_area / (2 * trapezium_height)\n\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}.\")\n            break"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'(?<!b)(a)\\1*')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a\\w*b')\n    match = pattern.search(text)\n    if match:\n        print(f'Match found: {match.group()}')\n    else:\n        print('No match found')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a\\w*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a{1}b{1,}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its last digit as an integer.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a Python function to find the last digit of a given number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n    # Convert the last character of the string to an integer\n    last_digit = int(num_str[-1])\n    # Return the last digit of the number\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    # convert the number to a string to remove any non-numeric characters\n    num_str = str(n)\n    \n    # find the length of the string\n    length = len(num_str)\n    \n    # find the last digit of the number\n    last_digit = int(num_str[length-1])\n    \n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # get the last digit of the string\n    last_digit = num_str[-1]\n    # convert the last digit to an integer and return it\n    return int(last_digit)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as an input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # loop through the list\n    for num in list1:\n        # check if the number is negative\n        if num < 0:\n            # if it is, add it to a new list\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as an argument and returns a new list with only the negative numbers in the original list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a list of negative numbers from the input list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of numbers and returns the negative numbers in the list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n\n    :param string: A string to be processed.\n    :return: A new string with odd characters removed.\n    \"\"\"\n    return ''.join([char for char in string if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 1:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            new_str += str1[str1.index(char):]\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return \"\".join([char for char in str1 if int(char) % 2!= 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters from it.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if ord(char) % 2 == 0)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    This function takes a list of tuples and counts the number of bidirectional pairs in the list.\n    A bidirectional pair is a tuple that appears in both the list and its reversed order.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list or (test_list[j][0], test_list[i][0]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] in test_list[j], test_list[j] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                bidirectional_count += 1\n                if test_list[i][1] == test_list[j][1]:\n                    bidirectional_count -= 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # create a set to store unique pairs\n    unique_pairs = set()\n\n    # iterate through the list\n    for pair in test_list:\n        # sort the pair\n        sorted_pair = tuple(sorted(pair))\n\n        # add the pair to the set if it is unique\n        if sorted_pair not in unique_pairs:\n            unique_pairs.add(sorted_pair)\n\n    # return the length of the set\n    return len(unique_pairs)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    for num in L:\n        multiple *= num\n    return multiple"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the single integer variable to 0\n    result = 0\n    \n    # Loop through each integer in the list\n    for num in L:\n        # Convert the integer to a string and split it into a list of digits\n        digits = list(str(num))\n        \n        # Loop through each digit in the list\n        for digit in digits:\n            # Convert the digit to an integer and add it to the result\n            result += int(digit)\n            \n    # Return the single integer result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result * 10 + L[i]\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 1\n    for num in L:\n        single_number *= num\n    return single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in L:\n        total = total * num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(a|an|the|not|only|but|or)\\b'\n    \n    # Use the re.findall() method to find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    \n    # Loop through each adverb and append its position to the adverb_positions list\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append(text.find(adverb))\n    \n    # Return the adverb_positions list\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(really|rarely|often|always|never|sometimes|usually|nevertheless|frequently|occasionally|seldom|rarely|seldomly|not|rarely|somewhat|slightly|slightly often|slightly frequently|slightly occasionally|slightly seldom|slightly rarely|slightly seldomly)\\b'\n\n    # Find all the occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Iterate through the matches and print the adverb and its position in the sentence\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        print(f'{adverb} found at position {position}')\n\n    # If no adverbs are found, print a message\n    if not matches:\n        print(\"No adverbs found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # print the adverbs and their positions\n    print(\"Adverbs and their positions:\")\n    for i, adv in enumerate(adverbs):\n        print(f\"{i+1}. {adv}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b(?:a|an|the|this|that|these|those|in|on|at|by|by|from|to|with|about|for|as|about|up|down|under|above|below|beside|across|behind|beside|toward|through|over|through|below|in|out|out|above|below|against|along|alongside|among|between|behind|beyond|before|below|beneath|beside|between|beyond|between|beyond|beside|above|against|behind|below|beside|along|among|between|beyond|beyond|between|beyond|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|along|among|between|beyond|beyond|between|above|against|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define regular expression pattern to find adverbs\n    pattern = r'\\b(?:\\w+)(?:ly|y)\\b'\n    \n    # find all matches using the pattern and return a list of tuples of matched adverb and its position\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    result = []\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        result.append((adverb, position))\n        \n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function takes a given text as input and returns a list of tuples containing\n    the first adverb found in the text and its position in the text.\n\n    Args:\n        text: A string containing the sentence for which we want to find the first adverb.\n\n    Returns:\n        A list of tuples containing the first adverb and its position in the text.\n\n    \"\"\"\n    # Using regular expressions to find the first adverb in the text\n    adverb = re.search(r'\\b(adverb)\\b', text)\n\n    # If there is an adverb found, return a list of tuples containing the adverb and its position in the text\n    if adverb:\n        return [(adverb.group(), text.find(adverb.group()))]\n\n    # If there is no adverb found, return an empty list\n    else:\n        return []"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[aeiou]\\w*adverb\\b', text.lower())\n\n    # If there are no adverbs, return None\n    if not adverbs:\n        return None\n\n    # Find the positions of all adverbs in the sentence\n    positions = []\n    for i, word in enumerate(text.split()):\n        if word.lower() in ['i', 'we', 'you', 'he','she', 'it', 'they']:\n            positions.append(i)\n\n    # Find the first adverb and its position\n    adverb = adverbs[0]\n    position = min(positions)\n\n    return adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to match adverbs\n    pattern = r'\\b(?:adv|advmod)\\b'\n    # Search for the pattern in the text\n    matches = re.findall(pattern, text)\n    # If there are matches, return the adverb and their positions\n    if matches:\n        return matches[0], re.search(r'\\b'+matches[0]+r'\\b', text).start()\n    # If no matches are found, return None\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w+(ed|ing|edly|ingly|edness|ly|ness|lyly|inglyly|inglyness|lyness|nessly|edly|edlyly|edlyness|ingly|inglyly|inglyness|inglyly|inglyness|edlyly|edlylyly|edlylyness|inglylyly|inglylyness|edlyness|inglyly|inglylyness)\\b'\n\n    # Find all the adverbs in the text using the regular expression pattern\n    adverbs = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    positions = []\n\n    # Iterate over the list of adverbs\n    for i, adverb in enumerate(adverbs):\n        # Find the position of the adverb in the sentence\n        position = text.lower().find(adverb.lower())\n\n        # Add the position to the list of positions\n        positions.append((adverb, position))\n\n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[a-z]*[A-Z]\\b', text, re.IGNORECASE)\n    \n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    \n    # Loop through all the adverbs and their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Check if the next word is a preposition or a conjunction\n        next_word = text[text.index(adverb)+len(adverb):].split()[0]\n        if re.search(r'\\b(?:in|with|by|against|than|but|or|and|nor)\\b', next_word):\n            # If the next word is a preposition or a conjunction, add its position to the list of adverb positions\n            adverb_positions.append(i+1)\n    \n    # Return the adverb positions list\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # Calculate the surface area of the cube\n    surface_area = 6 * l * l\n    \n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l # multiplying the length of the cube by the base of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * l**2\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n            \n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    print(\"The ration of positive numbers in the array is: {:.2f}%\".format(pos_ratio * 100))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    \n    pos_ratio = 0\n    if pos_count!= 0:\n        pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to a list to manipulate it\n    nums = list(nums)\n    \n    # count the number of positive numbers\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    \n    # calculate the ration of positive numbers\n    ration = positive / len(nums)\n    \n    # return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')\n    neg_nums = array('i')\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n        else:\n            neg_nums.append(num)\n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to a numpy array\n    arr = array('i', nums)\n    # Count the number of positive numbers in the array\n    pos_count = sum(arr > 0)\n    # Calculate the ration of positive numbers\n    ratio = pos_count / len(nums)\n    # Return the ration of positive numbers\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    ratio = float(pos_count) / (pos_count + neg_count)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    pos_ratio = pos_count / len(nums)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the array to an integer array\n    nums_arr = array('i', nums)\n\n    # Count the positive numbers\n    pos_count = sum(1 for num in nums_arr if num > 0)\n\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums_arr)\n\n    return pos_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    # Initialize a variable to store the largest negative number\n    largest_num = float('-inf')\n\n    # Iterate through the list to find the largest negative number\n    for num in list1:\n        if num < 0:\n            if num > largest_num:\n                largest_num = num\n\n    # Return the largest negative number\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    largest = list1[0]\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes in a list of numbers and returns the largest negative number from the list.\n    \"\"\"\n    largest = list1[0] # set largest to the first element of the list\n    \n    for num in list1:\n        if num < 0 and num > largest: # if the number is negative and greater than the current largest\n            largest = num # update the largest\n    \n    return largest # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Write a Python function to find the largest negative number from the given list.\n    \"\"\"\n    neg_num = float('-inf')\n    for num in lst:\n        if num < 0:\n            if num > neg_num:\n                neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number in a list of numbers.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return max(neg_list) if neg_list else None"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -1000000000\n    for i in list1:\n        if i < 0 and i > largest_neg:\n            largest_neg = i\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    if len(neg_list) == 0:\n        return None\n    else:\n        return max(neg_list)"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(K):\n            if i+j+1 < len(test_list[i]):\n                test_list[i] = test_list[i][:i+j+1]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Define a function to trim a tuple by k\n    def trim_tuple_by_k(t, k):\n        return t[0:k], t[k:]\n    \n    # Define a function to check if a tuple contains k or not\n    def contains_k(t, k):\n        return k in t\n    \n    # Loop through each tuple in the list\n    for i, t in enumerate(test_list):\n        # Check if the tuple contains k\n        if contains_k(t, K):\n            # Trim the tuple by k\n            test_list[i] = trim_tuple_by_k(t, K)\n    \n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # If the length of the tuple is greater than K, trim it by K\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tup in enumerate(test_list):\n        if len(tup) > K:\n            test_list[i] = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:K]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    # iterate through the list of tuples and trim each tuple by K elements\n    trimmed_list = []\n    for tuple_ in test_list:\n        trimmed_tuple = tuple_[K:]\n        trimmed_list.append(trimmed_tuple)\n    \n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[:K]))\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Checking if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples should have same length.\")\n\n    # Initializing the result tuple with length of first tuple\n    result = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length\")\n        return\n    \n    # Perform index wise multiplication\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    \n    # Return the result as a tuple\n    return tuple(result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Creating a new list to store the multiplication result\n    result_list = []\n\n    # Looping through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # Multiplying the element at the current index of the first tuple with the element at the current index of the second tuple\n        result = test_tup1[i] * test_tup2[i]\n        # Adding the multiplication result to the result_list\n        result_list.append(result)\n\n    # Returning the result_list as the multiplication result\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize an empty list to store the result\n    result_list = []\n    # iterate over the indices of the first tuple\n    for i in range(len(test_tup1)):\n        # multiply the corresponding elements of the tuple and append the result to the list\n        result_list.append(test_tup1[i] * test_tup2[i])\n    # return the final result list\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same number of elements\")\n        return None\n    \n    # Initialize the result tuple with zeros\n    result_tup = [0] * len(test_tup1)\n    \n    # Perform the index-wise multiplication\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    \n    # Return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of equal length!\")\n        return\n\n    # initialize the result tuple\n    result_tup = ()\n\n    # iterate over each index and multiply the corresponding elements of the two tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the index-wise multiplications\n    result = []\n    # Loop through the tuples and multiply the elements at each index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    # Return the resulting tuple\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a set so that we can count the frequency of elements\n    count_set = set(tup)\n    # Convert the list to a set so that we can count the frequency of elements\n    count_list = set(lst)\n    # Find the intersection of the two sets to get the elements in both tuples\n    intersection = count_set.intersection(count_list)\n    # Count the frequency of each element in the intersection and store it in a dictionary\n    count_dict = Counter(intersection)\n    # Return the dictionary as a list of tuples\n    return list(count_dict.items())"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    count = Counter(tup)\n    for element in lst: \n        count[element] += 1\n        \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) \n    result = [] \n    for i in count_dict: \n        count = count_dict[i] \n        if i in tup: \n            result.append((i, count)) \n    return result "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple into a set to get unique elements\n    unique_tup = set(tup)\n\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n\n    # Iterate through the list and count the occurrence of each element in the tuple\n    for item in lst:\n        if item in unique_tup:\n            count_dict[item] = count_dict.get(item, 0) + 1\n\n    return count_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input, and returns a dictionary of the count of occurrence of all elements in the list in the tuple.\n    '''\n\n    count_dict = Counter(tup)\n    count_lst = []\n    for key, value in count_dict.items():\n        count_lst.append((key, value))\n    count_dict_final = dict(count_lst)\n    return count_dict_final"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for i in lst:\n        if i in counter:\n            counter[i] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for t in tup:\n        count_t = count[t]\n        result.append(count_t)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    tup_set = set(tup) \n    # Use the Counter function from the Counter module to count the occurrences of all elements of lst in tup_set\n    count_dict = Counter(lst) \n    # Use a dictionary comprehension to update the count_dict with the counts of the elements of tup_set\n    for item in tup_set: \n        count_dict[item] += tup.count(item) \n    # Return the updated count_dict\n    return count_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count:\n            if item in result:\n                result[item] += count[item]\n            else:\n                result[item] = count[item]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    # Loop through each element in the list\n    for num in nums:\n        # Multiply the element by itself and store the result in a new list\n        cubes = [num**3]\n        # Combine the old list with the new list\n        nums = nums + cubes\n    # Return the modified list containing the cubes of the original list\n    return nums"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    total_sum = 0\n    for num in perrin_nums:\n        total_sum += num\n        if total_sum > n:\n            break\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i ** 2\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 106, 121, 137, 154, 172, 191, 211, 232, 254, 277, 301, 326, 352, 379, 407, 436, 466, 497, 529, 562, 596, 631, 667, 704, 742, 781, 821, 862, 904, 947, 991, 1036, 1082, 1129, 1177, 1226, 1276, 1327, 1379, 1432, 1486, 1541, 1597, 1654, 1712, 1771, 1831, 1892, 1954, 2017, 2081, 2146, 2212, 2279, 2347, 2416, 2486, 2557, 2629, 2702, 2776, 2851, 2927, 3004, 3082, 3161, 3241, 3322, 3404, 3487, 3571, 3656, 3742, 3829, 3917, 4006, 4096, 4187, 4279, 4372, 4466, 4561, 4657, 4754, 4852, 4951, 5051, 5152, 5254, 5357, 5461, 5566, 5672, 5779, 5887, 5996, 6106, 6217, 6329, 6442, 6556, 6671, 6787, 6904, 7022, 7141, 7261, 7382, 7504, 7627, 7751, 7876, 8002, 8129, 8257, 8386, 8516, 8647, 8779, 8912, 9046, 9181, 9317, 9454, 9592, 9731, 9871, 10012, 10154, 10297, 10441, 10586, 10732, 10879, 11027, 11176, 11326, 11477, 11629, 11782, 11936, 12091, 12247, 12404, 12562, 12721, 12881, 13042, 13204, 13367, 13531, 13696, 13862, 14029, 14"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum_of_perrin = 0\n    for i in range(1, n+1):\n        sum_of_perrin += i\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    return sum(perrin_numbers[:n])\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    Parameters:\n    n (int): The upper limit of the sum.\n\n    Returns:\n    int: The sum of perrin numbers up to n.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_ = 0\n    for i in range(1, n+1):\n        if sum_(i) > 1000000:\n            break\n        sum_ += i\n    return sum_"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n\n    # initialize the sum variable\n    sum = 0\n\n    # iterate through each number between 1 and n\n    for i in range(1, n+1):\n\n        # calculate the perrin number for this number\n        p = sum_perrin(i)\n\n        # add the perrin number to the sum\n        sum += p\n\n    # return the sum\n    return sum\n\ndef sum_perrin(n): \n    \"\"\"\n    Calculate the sum of the perrin numbers up to n.\n    \"\"\"\n\n    # initialize the sum variable\n    sum = 0\n\n    # iterate through each perrin number up to n\n    for i in range(1, n+1):\n\n        # add the perrin number to the sum\n        sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s += i\n    return s"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Args:\n    str_list: A list of strings.\n    size: An integer representing the size of strings to extract.\n\n    Returns:\n    A list of extracted strings.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extracts strings from the given list of string values.\n    \n    Args:\n    - str_list: list of strings\n    - l: integer specifying the size of the strings to extract\n    \n    Returns:\n    - list of strings of size l\n    '''\n    return [str_list[i:i+l] for i in range(0, len(str_list), l)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and extracts the specified size of strings from the list.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts the specified size of strings from a given list of string values.\n\n    Args:\n    str_list: A list of strings.\n    size: The size of strings to be extracted.\n\n    Returns:\n    A list of strings with the specified size extracted from the input list of strings.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string[:size])\n        else:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes in a list of strings and a specific size for each string.\n    It returns a list of the extracted strings.\n    '''\n    extracted_strings = []\n    for string in l:\n        extracted_strings.append(string[:l[str]])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a specified size of strings from a given list of string values.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][0:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, length):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:length])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the desired size of each string as input and returns a new list containing only the specified size of strings from the input list.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expression\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Convert string to lower case\n    text1 = text1.lower()\n    # Remove all whitespaces using regex\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove any trailing or leading whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the string using regular expression\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace all whitespaces with a single space\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+', '', text)\n    \n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 0.02 # 2% loss\n    \n    if sale_amount < actual_cost * (1-loss_percent):\n        loss = sale_amount - actual_cost * (1-loss_percent)\n    else:\n        loss = 0\n    \n    return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    if actual_cost > sale_amount: # if the actual cost is greater than the sale amount\n        return sale_amount - actual_cost\n    else: # if the actual cost is less than or equal to the sale amount\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Initialize variables\n    sum = 0\n    \n    # Check for even numbers\n    if n % 2 == 0:\n        sum += n\n    \n    # Check for odd numbers up to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n            sum += n//i\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum_even_factors += i\n    return sum_even_factors "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            evenSum += i\n    return evenSum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize a variable to store the sum\n    evenSum = 0\n    # loop through all integers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # if n is divisible by i, add it to the evenSum\n        if n % i == 0:\n            evenSum += i\n    # return the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    # calculate the number of factors of the number\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n\n    # check if the number of even factors is odd\n    if count % 2 == 1:\n        # find the sum of even factors\n        even_sum = 0\n        for i in range(2, n+1, 2):\n            if n % i == 0:\n                even_sum += i\n        return even_sum\n    else:\n        # return 0 if the number of even factors is odd\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of even factors of\", n, \"is:\", sumofFactors(n))"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum_of_factors += i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize the sum variable\n    sum = 0\n\n    # loop through the factors of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # check if n is divisible by i\n        if n % i == 0:\n            # check if i is even\n            if i % 2 == 0:\n                # add i to the sum\n                sum += i\n\n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s*[zZ]\\b\\s*[a-zA-Z]*'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)(?=[a-z])\\w+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(z)\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define the regular expression pattern\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # compile the pattern\n    regex = re.compile(pattern)\n    # search for matches in the text\n    matches = regex.findall(text)\n    # return the matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 % 2 == 0:\n            if monthnum2 == 2:\n                return True\n            else:\n                return False\n        elif monthnum2 % 2 == 1:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n\n    # Check if the month number is valid\n    if len(str(monthnum2))!= 2:\n        return False\n\n    # Check if the month number contains 31 days\n    if int(monthnum2) == 2:\n        return True\n    elif int(monthnum2) in [4, 6, 9, 11]:\n        return True\n    elif int(monthnum2) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    month_dict = {'Jan':31, 'Feb':28, 'Mar':31, 'Apr':30, 'May':31, 'Jun':30, 'Jul':31, 'Aug':31, 'Sep':30, 'Oct':31, 'Nov':30, 'Dec':31}\n\n    if monthnum2 in month_dict:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum % 100 == 0 and monthnum % 400 == 0:\n        return True\n    elif monthnum % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in range(1, 13):\n        if monthnum2 % 2 == 0:\n            if monthnum2 in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n        else:\n            if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid Month Number\"\n    else:\n        if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            return \"31 Days\"\n        else:\n            if monthnum2 % 2 == 0:\n                return \"30 Days\"\n            else:\n                return \"31 Days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum in days_in_month:\n        if days_in_month[monthnum] == 31 and (monthnum % 4 == 0 and (monthnum % 100!= 0 or monthnum % 400 == 0)):\n            return True\n        elif days_in_month[monthnum] == 30:\n            return True\n        elif days_in_month[monthnum] == 28 and (monthnum % 4 == 0 and (monthnum % 100!= 0 or monthnum % 400 == 0)):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Dictionary to store month number and its corresponding number of days\n    month_dict = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    # Check if the given month number is in the dictionary\n    if monthnum2 in month_dict.keys():\n        # Check if the number of days for the given month number is 31 or 30\n        if month_dict[monthnum2] == 31:\n            # Check if the last day is a valid day\n            if monthnum2!= 2 or (monthnum2 == 2 and day_is_leap_year(monthnum2)):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string using slicing and join\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # finding the length of the list\n    n = len(lst)\n\n    # finding the minimum length of the sublist\n    min_len = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n\n    # creating a sublist having minimum length\n    for i in range(n):\n        if len(lst[i:]) == min_len:\n            min_sublist = lst[i:]\n            break\n\n    # returning the sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_sublist = lst[0]\n    min_length = len(lst[0])\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_sublist = lst[i]\n            min_length = len(lst[i])\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_list = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_list = lst[i]\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Finding the length of the list\n    n = len(lst)\n    # Finding the minimum length\n    min_len = n+1\n    # Looping through the list\n    for i in range(n):\n        # Finding the length of the sublist\n        for j in range(i+1, n):\n            # Checking if the length is smaller than the current minimum length\n            if j-i+1 < min_len:\n                # Updating the minimum length\n                min_len = j-i+1\n                # Creating a list to store the sublist\n                sub_lst = lst[i:j+1]\n    # Returning the sublist having minimum length\n    return sub_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')  # initialize minimum length to infinity\n    min_sublist = []  # initialize empty list to store minimum sublist\n    for sublist in lst:  # iterate through each sublist in lst\n        if len(sublist) < min_len:  # if current sublist has minimum length\n            min_len = len(sublist)  # update minimum length\n            min_sublist = sublist  # update minimum sublist\n    return min_sublist  # return minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize the minimum length and the index of minimum length sublist\n    min_len = lst[0]\n    min_index = 0\n    \n    # Loop through each sublist\n    for i in range(1, len(lst)):\n        # Check if the length of current sublist is less than minimum length\n        if len(lst[i]) < min_len:\n            # Update the minimum length and its index\n            min_len = len(lst[i])\n            min_index = i\n    \n    # Return the minimum length sublist\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Sort the list in ascending order\n    lst = sorted(lst)\n\n    # Initialize the minimum sublist length and the minimum sublist itself\n    min_len = len(lst)\n    min_sublist = lst\n\n    # Loop through the list and find the minimum sublist\n    for i in range(len(lst)-1):\n        if len(lst[i:]) < min_len:\n            min_len = len(lst[i:])\n            min_sublist = lst[i:]\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # initialize min_len as the length of the entire list\n    min_len = len(lst)\n\n    # loop through the list of sublists\n    for sublist in lst:\n        # calculate the length of the sublist\n        length = len(sublist)\n        # check if the sublist is shorter than the minimum length\n        if length < min_len:\n            # update the minimum length\n            min_len = length\n\n    # create an empty list to store the sublist with minimum length\n    result = []\n\n    # loop through the list of sublists again\n    for sublist in lst:\n        # calculate the length of the sublist\n        length = len(sublist)\n        # check if the sublist is equal to the minimum length\n        if length == min_len:\n            # add the sublist to the result list\n            result.append(sublist)\n\n    # return the result list containing the sublist with minimum length\n    return result"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = None\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_uppercase(str1):\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # Split the string into words\n    words = str1.split()\n\n    # Iterate over the words and remove any that match the pattern\n    for i, word in enumerate(words):\n        if pattern.search(word):\n            words[i] = ''\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z]\\w*\\b', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns a new string where all uppercase substrings are removed.\n    '''\n    # define a regular expression pattern to match uppercase characters\n    pattern = re.compile('[A-Z]+')\n    # split the string into words\n    words = str1.split()\n    # create a new list to store the non-uppercase words\n    new_words = []\n    # loop over the words in the original string\n    for word in words:\n        # check if the word matches the pattern\n        if not pattern.match(word):\n            # if the word does not match the pattern, add it to the new list\n            new_words.append(word)\n    # join the new list of words back into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    \n    # Iterate through the words\n    for i in range(len(words)):\n        # Check if the word contains uppercase characters\n        if re.search('[A-Z]', words[i]):\n            # Remove the word from the list if it contains uppercase characters\n            words.pop(i)\n            i -= 1\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regex pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # use re.findall() to find all uppercase substrings in the string\n    upper = re.findall(pattern, str1)\n    # loop through the list of uppercase substrings and remove them from the string\n    for item in upper:\n        str1 = str1.replace(item, '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]{1,}')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list where each sublist is replaced with its first element.\n    '''\n    new_lst = []\n    for i in range(len(lst)): \n        new_lst.append(lst[i][0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        if isinstance(i, list):\n            res.append(i[0])\n        else:\n            res.append(i)\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list containing the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list and extracts the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    return [x[0] for x in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        try:\n            result.append(item[0])\n        except:\n            pass\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize a variable to store the count of upper case characters\n    count = 0\n    \n    # iterate over each character in the string\n    for char in str:\n        # if the character is an uppercase letter, increment the count\n        if char.isupper():\n            count += 1\n    \n    # return the count of upper case characters\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a Python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            result.append(list1[i:j+1])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            print(\" \".join(list1[j:j+i]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Function to find all possible combinations of elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Define a helper function to generate all combinations\n    def generate_combinations(start, remaining, current):\n        # Base case: if there are no more elements to choose from, add the current combination to the list of combinations\n        if remaining == 0:\n            combinations.append(current)\n            return\n\n        # Recursive case: add the current element to the current combination, generate the remaining combinations, and remove the current element from the current combination\n        for i in range(start, len(list1)):\n            current.append(list1[i])\n            generate_combinations(i+1, remaining-1, current)\n            current.pop()\n\n    # Call the helper function to generate all combinations\n    generate_combinations(0, len(list1), [])\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    if len(lst) == 0:\n        return []\n    else:\n        result = []\n        for i in range(len(lst)+1):\n            comb = []\n            for j in range(i):\n                comb.append(lst[j])\n            result.append(comb)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    max_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        if max_ending_here > 0:\n            max_ending_here *= arr[i]\n        else:\n            max_ending_here = arr[i]\n        \n        if max_product < max_ending_here:\n            max_product = max_ending_here\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    for num in arr:\n        if max_ending_here > 0:\n            max_ending_here *= num\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n        else:\n            max_ending_here = num\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Initialize a variable to store the first value\n    first_value = None\n    \n    # Loop through the dictionary to check if all values are same\n    for value in dict.values():\n        if first_value is None:\n            # If the first value is None, set it to the current value\n            first_value = value\n        elif value!= first_value:\n            # If the current value is not equal to the first value, return False\n            return False\n    \n    # If all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        else:\n            if value!= first_value:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = list(dict.values())\n    return all_values.count(all_values[0]) == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    return all(dict[k] == v for k, v in dict.items())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for i in dict.values():\n        if i!= dict[n]:\n            all_same = False\n            break\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        return n in dict.values()\n    else:\n        first_key = list(dict.keys())[0]\n        return check_value({k: dict[k] for k in dict if k!= first_key}, n)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if not all(isinstance(x, dict) for x in dict.values()) and not all(isinstance(x, list) for x in dict.values()):\n            return False\n    return all(x == dict[n] for x in dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if len(dict.values()) > 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict.values():\n        return False\n    else:\n        return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create an empty list to store the keys of the dictionary\n    empty_keys = []\n\n    # Loop through each key-value pair in the dictionary\n    for key, value in dict1.items():\n        # If the value is an empty string or None, add the key to the empty_keys list\n        if not value:\n            empty_keys.append(key)\n\n    # Loop through the empty_keys list and remove them from the dictionary\n    for key in empty_keys:\n        del dict1[key]\n\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create a new dictionary\n    new_dict = {}\n\n    # iterate over the items in the original dictionary\n    for key, value in dict1.items():\n        # check if the value is not empty\n        if value!= '':\n            # add the key-value pair to the new dictionary\n            new_dict[key] = value\n\n    # return the new dictionary\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n    min_product = 1\n\n    for num in arr:\n        if num < min_product:\n            min_product = num\n\n        current_product = max(num, min_product) * num\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize variables\n    max_product = arr[0]\n    min_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, n):\n        # Update current product\n        current_product = max(arr[i], current_product * arr[i])\n        \n        # Update max_product\n        if current_product > max_product:\n            max_product = current_product\n        \n        # Update min_product\n        if current_product < min_product:\n            min_product = current_product\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0]*arr[1], arr[0]*arr[1])\n    else:\n        max1 = max_product(arr[1:])\n        max2 = max_product(arr[1:])\n        min1 = min_product(arr[1:])\n        return max(arr[0]*max1, arr[0]*min1, arr[0]*max2, arr[0]*min1*min2, arr[1]*max1, arr[1]*min1, arr[1]*max2, arr[1]*min1*min2)\n\n\ndef min_product(arr):\n    '''\n    Write a function to find the minimum product formed by multiplying numbers of an decreasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return min(arr[0]*arr[1], arr[0]*arr[1])\n    else:\n        max1 = max_product(arr[1:])\n        max2 = max_product(arr[1:])\n        min1 = min_product(arr[1:])\n        return min(arr[0]*max1, arr[0]*min1, arr[0]*max2, arr[0]*min1*min2, arr[1]*max1, arr[1]*min1, arr[1]*max2, arr[1]*min1*min2)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    dp = [0] * n\n    max_product = float('-inf')\n    max_ending_here = float('-inf')\n    \n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        dp[i] = max_ending_here\n    \n    for i in range(n-2, -1, -1):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        dp[i] = max_ending_here\n    \n    for i in range(1, n):\n        max_product = max(max_product, dp[i] * dp[i])\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here, min_ending_here)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    # Initialize variables to keep track of the current maximum product and the minimum product\n    curr_max = curr_min = arr[0]\n\n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Calculate the maximum product formed by adding arr[i] to the current maximum product\n        next_max = curr_max + arr[i]\n\n        # Calculate the minimum product formed by subtracting arr[i] from the current minimum product\n        next_min = curr_min - arr[i]\n\n        # Update the current maximum and minimum products\n        curr_max = max(next_max, next_min)\n        curr_min = min(next_max, next_min)\n\n    return curr_max"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    max_product_so_far = max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n    \n    for num in arr:\n        max_product_ending_here = max(max_product_ending_here * num, num)\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    def max_product_helper(arr, start, end):\n        \"\"\"\n        Helper function to find the maximum product of all increasing subsequences of the given array.\n        \"\"\"\n\n        # Base case: if the subarray has only one element, its product is the element itself\n        if start == end:\n            return arr[start]\n\n        # Recursive case: calculate the product of the maximum product of the left subarray and the maximum product of the right subarray\n        left_max = max(arr[start], arr[end])\n        right_max = max(max_product_helper(arr, start + 1, end), max_product_helper(arr, start, end - 1))\n\n        # If the left subarray has the maximum product and the right subarray has the maximum product, then the maximum product of the subarray is the product of the left and right subarrays\n        if left_max * right_max == arr[start] * arr[end]:\n            return left_max * right_max\n\n        # If either subarray has the maximum product, then the maximum product of the subarray is the maximum product of that subarray\n        elif left_max == arr[start] or right_max == arr[end]:\n            return left_max\n\n        # If neither subarray has the maximum product, then the maximum product of the subarray is the product of the maximum of the left and right subarrays and the minimum of the left and right subarrays\n        else:\n            return max(left_max * arr[end], right_max * arr[start])\n\n    # Call the helper function to find the maximum product of all increasing subsequences\n    return max_product_helper(arr, 0, len(arr) - 1)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Find the length of the tuple\n    length = len(test_tup)\n    \n    # Initialize an empty list to store the pairwise additions\n    pairwise_additions = []\n    \n    # Loop through each pair of neighboring elements\n    for i in range(length-1):\n        for j in range(i+1, length):\n            # Add the pairwise addition to the list\n            pairwise_additions.append(test_tup[i] + test_tup[j])\n    \n    # Return the list of pairwise additions\n    return pairwise_additions"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Tuple should contain at least two elements.\"\n    \n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n        \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighboring_elements = []\n    for i in range(len(test_tup)-1):\n        neighboring_elements.append(test_tup[i] + test_tup[i+1])\n    return neighboring_elements"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n % 2 == 0:\n        return sum(test_tup[i:i+2] for i in range(0, n, 2))\n    else:\n        return sum(test_tup[i:i+2] for i in range(1, n-1, 2))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define the length of the tuple\n    length = len(test_tup)\n\n    # Initialize the sum variable to 0\n    total = 0\n\n    # Loop through the tuple and add the neighboring elements together to get the total sum\n    for i in range(length):\n        if i == length - 1:\n            total += test_tup[i]\n        else:\n            total += test_tup[i] + test_tup[i+1]\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Check if the given tuple is at least two elements long\n    if len(test_tup) < 2:\n        return \"The given tuple must have at least two elements.\"\n\n    # Initialize the sum variable to zero\n    sum_of_pairs = 0\n\n    # Iterate over the first and second elements of the tuple\n    for i in range(1, len(test_tup)):\n        sum_of_pairs += test_tup[i]\n\n    # Return the sum of the pairwise addition\n    return sum_of_pairs"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through the tuple and add the neighboring elements\n    for i in range(len(test_tup) - 1):\n        sum += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for num in arr:\n        total = (total * num) % n\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    # Multiply all elements of the array using the formula arr[i] * arr[j] % n\n    product = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = (product * (arr[i] * arr[j]) % n) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes in two arguments: arr and n.\n    arr is the list of numbers to be multiplied together,\n    and n is the number that the product of the multiplication will be modulo.\n    The function returns the remainder of the product of the multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the result to 1\n    result = 1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Multiply the result by the current element\n        result = (result * arr[i]) % n\n\n    # Return the result modulo n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for x in arr:\n        product = (product*x) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list and returns True if it contains consecutive numbers, False otherwise.\n    '''\n    \n    # Check if the length of the list is less than 2\n    if len(l) < 2:\n        return False\n    \n    # Check if the first element is not 0\n    if l[0]!= 0:\n        return False\n    \n    # Check if the second element is the next element in the list\n    if l[1]!= l[0] + 1:\n        return False\n    \n    # Check if the second element is followed by another consecutive number\n    for i in range(2, len(l)):\n        if l[i]!= l[i-1] + 1:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    # Create an empty list to store the consecutive numbers\n    consecutive_numbers = []\n    \n    # Iterate over the list\n    for i in range(len(l)): \n        # If the current element is not the first element of the list\n        if i > 0: \n            # If the current element is the next element of the list\n            if l[i] == l[i-1] + 1: \n                # Append the consecutive number to the list\n                consecutive_numbers.append(l[i-1])\n            \n            # If the current element is not the next element of the list\n            else: \n                # Check if the last number in the consecutive_numbers list is equal to the current element\n                if consecutive_numbers and consecutive_numbers[-1] == l[i-1]: \n                    # If it is, then the list contains consecutive numbers\n                    return True\n                \n                # If it is not, then the list does not contain consecutive numbers\n                return False\n    # If no consecutive numbers are found, then the list does not contain consecutive numbers\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    # Initialize variables to keep track of the previous number and current number\n    prev_num = -1\n    curr_num = -1\n    # Iterate through the list and check if the current number is consecutive to the previous number\n    for num in l:\n        if num == prev_num + 1:\n            curr_num = num\n        else:\n            if curr_num!= -1 and curr_num!= prev_num + 1:\n                print(\"List contains consecutive numbers.\")\n                return True\n            else:\n                prev_num = curr_num\n                curr_num = num\n    # If the loop completes without finding any consecutive numbers, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            print(f\"The list {l} contains consecutive numbers.\")\n            return True\n    print(f\"The list {l} does not contain consecutive numbers.\")\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    l = list(set(l))\n\n    # If the length of the set is 1, then all numbers are consecutive\n    if len(l) == 1:\n        return True\n    # If the length of the set is 2, then there are no consecutive numbers\n    elif len(l) == 2:\n        return False\n    # If the length of the set is greater than 2, then there are consecutive numbers\n    else:\n        for i in range(len(l)-1):\n            if l[i] + 1 == l[i+1]:\n                return True\n            else:\n                return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # To check if a number is consecutive or not, we will iterate through the list and check if the next number is greater than the current number.\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, False otherwise. \n    '''\n\n    # The first element of the list is always considered to be the start of a consecutive sequence\n    start_of_sequence = True\n\n    # Iterate over each element in the list\n    for i in range(1, len(l)):\n        # If the current element is not equal to the previous element, it means that the current element is part of a consecutive sequence\n        if l[i]!= l[i-1]:\n            # Reset the start_of_sequence variable if we find a new consecutive sequence\n            start_of_sequence = True\n        # If we find a new consecutive sequence, reset the start_of_sequence variable to True\n        if i == len(l)-1 or (start_of_sequence and l[i] == l[i-1]+1):\n            start_of_sequence = False\n        # If we find a consecutive sequence that ends with a single element, return True\n        if i == len(l)-2 and not start_of_sequence:\n            return True\n\n    # If we reach this point, it means that there was no consecutive sequence in the list\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_elements = []\n    for item1 in test_list1:\n        for item2 in test_list2:\n            if item1 == item2:\n                common_elements.append(item1)\n    return tuple(common_elements)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of elements from both the lists\n    set_1 = set(test_list1)\n    set_2 = set(test_list2)\n\n    # Create a new list to store the intersection of the two sets\n    intersection_list = []\n\n    # Iterate through the elements of the set_1 and check if they are present in the set_2\n    for item in set_1:\n        if item in set_2:\n            # If the element is present in both sets, add it to the intersection list\n            intersection_list.append(item)\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a dictionary to store unique elements from both lists\n    dict1 = {}\n    dict2 = {}\n    for i in test_list1:\n        if i not in dict1:\n            dict1[i] = 1\n    for i in test_list2:\n        if i not in dict2:\n            dict2[i] = 1\n    # find the intersection of the dictionaries\n    intersection = dict1.keys() & dict2.keys()\n    # convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection back to a list\n    result_list = list(intersection)\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # create a set of all the elements in the first list\n    set1 = set(test_list1)\n\n    # iterate over all the elements in the second list and check if it is in the first list\n    result = []\n    for item in test_list2:\n        if item in set1:\n            result.append(item)\n\n    # return the result as a tuple\n    return tuple(result)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Creating a set from the first list to get unique values\n    set1 = set(test_list1)\n\n    # Creating a set from the second list to get unique values\n    set2 = set(test_list2)\n\n    # Finding the intersection of two sets\n    inter = set1.intersection(set2)\n\n    # Converting the intersection set to a list\n    inter = list(inter)\n\n    # Returning the intersection list\n    return inter"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for item in test_list1:\n        if item in test_list2 and item not in result_list:\n            result_list.append(item)\n    return tuple(result_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    i, j = 0, 0\n    result = []\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            if not result or result[-1]!= test_list1[i]:\n                result.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    \n    i = j = 0\n    result = []\n    \n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            result.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create an empty set to store the unique elements from both lists\n    unique_set = set()\n    # loop through each list and add the unique elements to the set\n    for lst in [test_list1, test_list2]:\n        for elem in lst:\n            if elem not in unique_set:\n                unique_set.add(elem)\n    # loop through the first list and check if each element is in the set\n    for elem in test_list1:\n        if elem in unique_set:\n            result.append(elem)\n    # return the result list\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string\n    result = \"\"\n    # iterate through each character in the string\n    for char in str1:\n        # if the character matches the specified character, replace it with the new character\n        if char == ch:\n            result += newch\n        # otherwise, append the character to the result\n        else:\n            result += char\n    # return the modified result\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a given character with another character.\n\n    Args:\n    str1 (str): The input string.\n    ch (str): The character to replace.\n    newch (str): The character to replace all occurrences of ch with.\n\n    Returns:\n    str: The modified string with all occurrences of ch replaced with newch.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for char in str1:\n        if char == ch:\n            newstr += newch\n        else:\n            newstr += char\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char == ch:\n            str2 += newch\n        else:\n            str2 += char\n    return str2"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # convert the sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common()\n    sorted_counter.sort(key=lambda x: x[1], reverse=True)\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = {k: v for k, v in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return Counter(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Create a Counter object to count the frequency of each value in the dictionary\n    count = Counter(dict1.values())\n\n    # Sort the Counter object by value in descending order\n    sorted_count = count.most_common()\n\n    # Create a new dictionary that sorts the values of the original dictionary by value\n    sorted_dict = {key: sorted_count[i][0] for i, (key, value) in enumerate(dict1.items())}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function sorts a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_counter"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    # calculate the sum of the largest and smallest values\n    total_sum = max_num + min_num\n    return total_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        elif nums[i] < min_val:\n            min_val = nums[i]\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns a tuple containing the sum of the largest and smallest values in the array.\n    '''\n    max_value = float('-inf')\n    min_value = float('inf')\n    for num in nums:\n        if num > max_value:\n            max_value = num\n        if num < min_value:\n            min_value = num\n    return max_value + min_value"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Return the sum of the first and last elements\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize the largest and smallest values to the first two values in the array\n    largest = nums[0]\n    smallest = nums[1]\n    \n    # loop over the remaining values in the array\n    for num in nums[2:]:\n        # update largest and smallest values if the current value is larger or smaller\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables\n    max_num = float('-inf')\n    min_num = float('inf')\n    # Loop through the array\n    for num in nums:\n        # Update the maximum and minimum values\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    # Return the sum of the maximum and minimum values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are in lower case, False otherwise.\n    \"\"\"\n    lower_case_string = string.lower()\n    for char in string:\n        if char.isupper():\n            return False\n    return True"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # Use the search() method of the regular expression object to find all matches\n    matches = pattern.findall(str1)\n    # Use a loop to iterate through the matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[a-z]\\w+\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    regex = r'\\b[a-z]+\\b'\n    result = re.sub(regex, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define the pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Find all occurrences of lowercase substrings\n    matches = re.findall(pattern, string)\n    # Remove the lowercase substrings from the string\n    result = re.sub(pattern, '', string)\n    return result, matches"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define regex pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use re.findall() to find all substrings that match the pattern\n    substrings = re.findall(pattern, str1)\n    # Iterate over the list of substrings and remove them from the original string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    # Use regex to find all lowercase substrings\n    regex = re.compile(r'\\b\\w*\\b')\n    matches = regex.findall(str1)\n    \n    # Remove lowercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'[a-z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    pattern = r'\\b[a-z][a-z\\s]*\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]'\n\n    # Find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, str1)\n\n    # Loop through each match and remove it from the string\n    for match in matches:\n        str1 = re.sub(pattern, '', str1)\n\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings\n    substrings = re.findall(r'[a-z]+', str1)\n    # Loop through the substrings and remove them from the string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 ** (len(str(n)) - 1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is an integer or not\n    if type(n)!= int:\n        print(\"Error: Input should be an integer.\")\n        return\n    \n    # Extract the first digit of the input number\n    digit = n % 10\n    \n    # Print the first digit of the input number\n    print(\"The first digit of\", n, \"is\", digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # converting the number to string\n    num_str = str(n)\n    \n    # getting the first character of the string\n    first_char = num_str[0]\n    \n    # returning the first character as an integer\n    return ord(first_char) - ord('0')"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    # convert the number to a string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to a number\n    first_num = int(first_char)\n    # return the first digit as an integer\n    return first_num"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    str_n = str(n)\n    # get the first character of the string\n    digit = str_n[0]\n    # convert the first character to an integer and return it\n    return int(digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string and split it into individual characters\n    str_n = str(n)\n    char_list = list(str_n)\n\n    # Find the first character in the list\n    first_char = char_list[0]\n\n    # Convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # initialize the first digit as 0\n    first_digit = 0\n    \n    # loop through each digit of the number\n    while n > 0:\n        # extract the last digit of the number\n        digit = n % 10\n        \n        # check if the digit is the first digit of the number\n        if first_digit == 0:\n            first_digit = digit\n        \n        # remove the last digit of the number\n        n = n // 10\n    \n    # return the first digit of the number\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    odd_list = [num for num in list if num % 2!= 0]\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Initialize variables\n    sum_cubes = 0\n    sum_natural = 0\n\n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # Calculate sum of first n natural numbers\n    for j in range(1, n+1):\n        sum_natural += j\n\n    # Find difference between sums\n    difference = sum_cubes - sum_natural\n\n    # Print difference\n    print(\"Difference between sums: \", difference)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    # Function to calculate the sum of cubes of first n natural numbers\n    def sum_cubes(n):\n        return sum(x**3 for x in range(1, n+1))\n\n    # Function to calculate the sum of first n natural numbers\n    def sum_natural(n):\n        return sum(range(1, n+1))\n\n    # Calculate the sum of cubes of first n natural numbers and sum of first n natural numbers\n    sum_of_cubes = sum_cubes(n)\n    sum_of_natural = sum_natural(n)\n\n    # Calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_natural\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = sum([i**3 for i in range(1,n+1)])\n    natural_sum = sum(range(1,n+1))\n    return cubes - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return n * (n + 1) ** 2\n\n    # Function to calculate the sum of the first n natural numbers\n    def sum_natural(n):\n        return n * (n + 1)\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum_cubes(n)\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural = sum_natural(n)\n\n    # Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    difference = sum_of_cubes - sum_of_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(n+1)])\n    # calculate sum of first n natural numbers\n    sum_natural = sum(range(1,n+1))\n    # find the difference between the two sums\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = sum([x**3 for x in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    total = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    return abs(cubes - total)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes = [i**3 for i in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    first_n = [i for i in range(1, n+1)]\n    sum_first_n = sum(first_n)\n    return sum_cubes - sum_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_cubes(n):\n    '''\n    Returns the sum of cubes of the first n natural numbers.\n    '''\n    return sum([i ** 3 for i in range(1, n + 1)])\n\ndef sum_natural_numbers(n):\n    '''\n    Returns the sum of the first n natural numbers.\n    '''\n    return sum(range(1, n + 1))\n\ndef difference(n):\n    '''\n    Returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return abs(sum_cubes(n) - sum_natural_numbers(n))\n\nprint(difference(5))  # Output: 345"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    print(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is\", difference)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes two lists A and N as input and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor = 0\n    # Iterate through the first list A\n    for i in range(len(A)):\n        # Add the i-th element of A to xor\n        xor += A[i]\n        # Increment the count if xor is odd\n        if xor % 2!= 0:\n            count += 1\n        # If xor becomes even, set xor to 0\n        else:\n            xor = 0\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count variable\n    count = 0\n    # Iterate through the array A\n    for i in range(N):\n        # Check if the odd xor of A[i] and A[(i+1)%N] is odd\n        if (A[i] ^ A[(i+1)%N]) % 2!= 0:\n            count += 1\n    # Return the count of odd xor values\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor = A[i] ^ A[(i + 1) % N]\n        if xor % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i] ^ A[j] & 1: # Check if the xor value is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor = A[i]\n        for j in range(i+1, N):\n            xor = xor^A[j]\n            if xor%2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Create a hash table to store the number of pairs whose xor value is odd\n    odd_count = {}\n\n    # Iterate through the input array and calculate the xor value for each element\n    for i in range(N):\n        xor = 0\n        for j in range(i+1, N):\n            xor ^= A[j]\n        if xor % 2 == 1:\n            if xor in odd_count:\n                odd_count[xor] += 1\n            else:\n                odd_count[xor] = 1\n    \n    # Return the number of pairs whose xor value is odd\n    return sum(odd_count.values())\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n\n    Args:\n    A (list): List of integers to count the odd pairs from.\n    N (int): Total number of integers in the list.\n\n    Returns:\n    int: Number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Define a new string to store the toggled characters\n    toggled_string = \"\"\n    \n    # Iterate through each character in the original string\n    for char in string:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Convert the character to uppercase if it is lowercase\n            if char.islower():\n                toggled_string += char.upper()\n            # Convert the character to lowercase if it is uppercase\n            else:\n                toggled_string += char.lower()\n        # If the character is not a letter, append it to the toggled_string as is\n        else:\n            toggled_string += char\n    \n    # Return the toggled_string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_char = char.upper() if char.islower() else char.lower()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # create an empty string to store the toggled characters\n    toggled_string = ''\n    # loop through each character in the string\n    for char in string:\n        # check if the character is uppercase\n        if char.isupper():\n            # convert the character to lowercase and append it to the toggled_string\n            toggled_string += char.lower()\n        else:\n            # convert the character to uppercase and append it to the toggled_string\n            toggled_string += char.upper()\n    # return the toggled_string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char) ^ 32) if char.islower() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # create an empty list to store the new string\n    new_string = []\n    # iterate over each character in the original string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            new_char = char.lower()\n        # if the character is lowercase, convert it to uppercase\n        else:\n            new_char = char.upper()\n        # add the new character to the new string\n        new_string.append(new_char)\n    # convert the new string back to a string and return it\n    return ''.join(new_string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    digit_diff = 0\n    while diff > 0:\n        digit_diff += diff % 10\n        diff //= 10\n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_difference = 0\n    \n    # loop through each digit in n1 and n2\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        # convert the digit to an integer\n        digit_n1 = int(str(n1)[i])\n        digit_n2 = int(str(n2)[i])\n        \n        # calculate the per-digit difference\n        diff = digit_n1 - digit_n2\n        \n        # add the difference to the total sum\n        sum_difference += diff\n    \n    # return the total sum\n    return sum_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = abs(n1)\n    n2 = abs(n2)\n    \n    # find the difference in each digit\n    diff1 = [abs(n1 - int(str(n1)[i])) for i in range(len(str(n1)))]\n    diff2 = [abs(n2 - int(str(n2)[i])) for i in range(len(str(n2)))]\n    \n    # calculate the sum of differences\n    sum_diff = [x + y for x, y in zip(diff1, diff2)]\n    \n    # return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the two numbers to lists of digits\n    n1_digits = list(str(n1))\n    n2_digits = list(str(n2))\n\n    # Calculate the per-digit difference between the two numbers\n    digit_diff = [abs(int(n1_digits[i]) - int(n2_digits[i])) for i in range(len(n1_digits))]\n\n    # Calculate the sum of the per-digit differences\n    sum_digit_diff = sum(digit_diff)\n\n    return sum_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # calculate the per-digit difference\n    diff = []\n    for i in range(max(len(n1_str), len(n2_str))):\n        diff.append(abs(int(n1_str[i]) - int(n2_str[i])))\n    \n    # calculate the sum of the differences\n    total_diff = sum(diff)\n    \n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the sum of per-digit differences to zero\n    digit_diff_sum = 0\n    \n    # convert the two integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # loop through each digit in the two lists\n    for i in range(max(len(digits1), len(digits2))):\n        # compare the current digits and add the difference to the sum of per-digit differences\n        if i < len(digits1) and i < len(digits2):\n            digit_diff_sum += abs(digits1[i] - digits2[i])\n        elif i < len(digits1):\n            digit_diff_sum += abs(digits1[i])\n        elif i < len(digits2):\n            digit_diff_sum += abs(digits2[i])\n    \n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    # Get the digits of the two numbers\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Calculate the per-digit difference between the two numbers\n    diff = []\n    for i in range(max(len(digits1), len(digits2))):\n        diff.append(digits1[i] - digits2[i])\n    \n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(diff)\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum += diff\n        n1 //= 10\n        n2 //= 10\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = abs(n1 - n2)\n    sum_diff = 0\n    while diff > 0:\n        sum_diff += diff % 10\n        diff //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to a list of digits\n    num1_digits = [int(d) for d in str(n1)]\n    num2_digits = [int(d) for d in str(n2)]\n\n    # Calculate the distance between the two numbers by summing up the differences of their digits\n    distance = sum([abs(d1 - d2) for d1, d2 in zip(num1_digits, num2_digits)])\n\n    return distance"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function finds the sum of the largest contiguous sublist in the given list.\n\n    Args:\n        a (list): The list of integers to find the maximum subarray sum from.\n        size (int): The size of the window to consider for finding the maximum subarray sum.\n\n    Returns:\n        int: The sum of the largest contiguous sublist in the given list.\n    \"\"\"\n\n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the list and update the current sum and the maximum sum\n    for i in range(len(a) - size + 1):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Remove the first element of the list if its sum exceeds the current sum\n        while current_sum > current_sum - a[i]:\n            current_sum -= a[i]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(len(a)):\n        current_sum += a[i]\n        if i >= size:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= a[i-size]\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i >= size - 1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    current_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    This function finds the maximum sum of a contiguous subarray of size `size` in the given list `arr`.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list of integers and an integer size as input and returns the sum of the largest contiguous sublist of size size.\n    If there are less than size elements in the list, the function returns None.\n    '''\n\n    if len(a) < size:\n        return None\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(a) - size + 1):\n        current_sum = sum(a[i:i+size])\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        while current_sum > max_sum:\n            current_sum -= a[start]\n            start += 1\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum, start"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Use set() to remove duplicates and then convert back to a list\n    union_list = sorted(list(set(test_tup1) | set(test_tup2)))\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            union.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            union.append(element)\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single tuple\n    combined_tuple = test_tup1 + test_tup2\n    \n    # Use set() to convert the combined tuple into a set, then back to a list\n    sorted_list = sorted(list(set(combined_tuple)))\n    \n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert both tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the sets\n    union_set = set1.union(set2)\n    # convert the union set back to a list and sort it\n    sorted_union = sorted(list(union_set))\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the set of elements from the two input tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list as the result\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty set to store the unique elements\n    unique_set = set()\n    \n    # Add elements from both tuples to the set\n    for element in test_tup1:\n        unique_set.add(element)\n    for element in test_tup2:\n        unique_set.add(element)\n    \n    # Convert the set back to a tuple and sort it\n    sorted_unique_tuple = tuple(sorted(unique_set))\n    \n    # Print the sorted tuple\n    print(sorted_unique_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert the input tuples into sets to remove duplicates and sort them\n    set1 = sorted(set(test_tup1))\n    set2 = sorted(set(test_tup2))\n    \n    # concatenate the two sets and sort them again\n    union_set = sorted(set1 + set2)\n    \n    # convert the union set back into a tuple and return it\n    return tuple(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    \n    # Remove duplicates from the combined list\n    unique_list = list(set(combined_list))\n    \n    # Sort the unique list in ascending order\n    unique_list.sort()\n    \n    # Convert the unique list back to a tuple\n    sorted_tup = tuple(unique_list)\n    \n    # Return the sorted tuple\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # concatenate the two tuples\n    combined_tuple = test_tup1 + test_tup2\n\n    # convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tuple)\n\n    # convert the set back to a tuple\n    unique_tuple = tuple(unique_set)\n\n    # sort the tuple in ascending order\n    sorted_tuple = sorted(unique_tuple)\n\n    # output the sorted tuple\n    print(sorted_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_len = 0\n    current_len = 0\n\n    # Loop through the list and calculate the length of each sublist\n    for item in lst:\n        if isinstance(item, list):\n            current_len = Find_Max_Length(item)\n        else:\n            current_len += 1\n\n        # Update max_len if the current length is greater\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    longest = 1\n    current = 1\n    for i in range(1, n):\n        if lst[i] == lst[i-1]:\n            current += 1\n        else:\n            current = 1\n        if current > longest:\n            longest = current\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        sub_list = lst[i:]\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    sublist = []\n    \n    for i in lst:\n        if len(sublist) == 0:\n            sublist.append(i)\n            max_length = max(max_length, len(sublist))\n        else:\n            sublist.append(i)\n            max_length = max(max_length, len(sublist))\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == len(lst)-1:\n            current_length += 1\n        else:\n            if lst[i+1] == lst[i]:\n                current_length += 1\n            else:\n                if current_length > longest_length:\n                    longest_length = current_length\n                current_length = 1\n    if current_length > longest_length:\n        longest_length = current_length\n    return longest_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[j]) - len(lst[i]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    curr_len = 0\n    for i in lst:\n        curr_len = 0\n        for j in range(i):\n            if lst[j] == lst[i]:\n                curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    \n    max_length = 1  # initialize the max_length to 1 (the length of the first sublist)\n    \n    for i in range(1, len(lst)):\n        # find the length of the current sublist\n        length = 1\n        while i+length < len(lst) and lst[i+length] == lst[i]:\n            length += 1\n        \n        # update the max_length if the current sublist is longer\n        if length > max_length:\n            max_length = length\n    \n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"' # matches quotation marks and captures the value inside\n    matches = re.findall(pattern, text) # finds all occurrences of the pattern in the text\n    values = [] # list to store extracted values\n    \n    for match in matches:\n        values.append(match.strip('\"')) # strips the quotation marks from the value and appends it to the list\n    \n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<=[^\\w\\s])(\"[^\"]*\")') # pattern to extract values between quotation marks\n    values = re.findall(pattern, text) # extract all values from the text using the pattern\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\".*?\")'\n    matches = re.findall(pattern, text)\n    values = [match[1:-1] for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(\\w+)\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of all the values between quotation marks.\n    '''\n    pattern = r'(?<!\\\\)\"(?:[^\"\\\\]|\\\\.)*\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\\w\"|\\b)([\\w\\s\\S]+?)[\"\\w\\s]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    pattern = re.compile(r'(?<=\")[^\"]*?(?=\")')\n    matches = pattern.findall(text)\n\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"\\\"(.*?)\\\"\\s*\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n):\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i],0)+1\n\n    # Count the number of pairs where both elements are unequal\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if freq[arr[i]]>1 and freq[arr[j]]>1:\n                count+=1\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs\n    where both elements are unequal.\n\n    Args:\n    arr (list): A list of integers.\n    n (int): The number of elements in the list.\n\n    Returns:\n    int: The number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Initialize a count variable to keep track of the number of pairs\n    count = 0\n\n    # Loop through all possible pairs of elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if both elements are different and unequal\n            if arr[i]!= arr[j] and arr[i]!= arr[i] and arr[j]!= arr[j]:\n                # If they are different, increment the count\n                count += 1\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # calculate the total frequency of the list\n    total_freq = sum(freq.values())\n    \n    # count the number of pairs with two distinct elements\n    count = 0\n    for num in freq:\n        for other_num in freq:\n            if num!= other_num and freq[num]!= freq[other_num]:\n                count += 1\n                \n    # return the count\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    s = str(n)\n    # Initialize the sum of digits to 0\n    sum_of_digits = 0\n    # Loop through each character in the string\n    for char in s:\n        # Add the integer value of the character to the sum of digits\n        sum_of_digits += int(char)\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    s = str(n)\n    # Initialize a variable to store the sum\n    total = 0\n    # Loop through the string and add each digit to the total\n    for digit in s:\n        total += int(digit)\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string and split into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # sum the digits in the list and return the result\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Use the reduce function to add up all the digits in the list\n    return reduce(lambda x, y: x + y, digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum of the digits\n    sum = 0\n\n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n\n        # add it to the sum of the digits\n        sum += digit\n\n        # remove the last digit of the number\n        n //= 10\n\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize a variable to hold the sum of digits\n    sum_of_digits = 0\n    # loop through each digit of the integer and add it to the sum\n    while n > 0:\n        digit = n % 10\n        sum_of_digits += digit\n        # remove the last digit from the integer\n        n = n // 10\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            return False\n        else:\n            return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    This function takes in a list and checks whether it is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Define a nested loop to iterate over each sublist of strings in the list\n    for sublist in list1:\n        # Sort the sublist in ascending order using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list of lists\n    for sublist in list1:\n        # sort the sublist in-place using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty set to store unique numbers\n    unique_set = set()\n    # Loop through each list in the given number of lists\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # Check if the number is already in the set, if not add it\n            if num not in unique_set:\n                unique_set.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # creating an empty set to store unique numbers\n    unique_nums = set()\n    # iterating through each list and adding unique numbers to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    # converting the set back to a list\n    unique_list = list(unique_nums)\n    # returning the unique list\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store the unique numbers\n    unique_nums = set()\n    for num in nums:\n        # add each number to the set only if it's not already there\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    unique_product = 1\n    \n    for num in unique_numbers:\n        unique_product *= num\n    \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    # create a set from the list_data to remove duplicates\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of integers and returns the product of the unique numbers in the list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    \n    for num in unique_nums:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set of unique numbers from the list\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    # Create a set from the input list\n    unique_nums = set(list_data)\n    # Find the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    # Create a set of unique numbers from the list\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n        \n    return unique_product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    Args:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n\n    Returns:\n    float: the surface area of the cylinder.\n    \"\"\"\n\n    # Formula for surface area of a cylinder\n    surface_area = 2 * 3.14159 * r * h\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * h\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h  # using the formula for area of a cylinder\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # radius and height of the cylinder\n    radius = r\n    height = h\n\n    # calculate the surface area using the formula 2 * pi * r * h\n    surface_area = 2 * 3.14159 * radius * height\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder using the formula:\n    # A = pi * r^2 * h\n    A = 3.141592653589793 * r**2 * h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * (3.14159 * r**2) + 2 * (3.14159 * r * h)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r**2 + 2 * math.pi * h + 2 * math.pi * r * math.sin(math.pi/2) + 2 * math.pi * r * math.cos(math.pi/2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B): \n        for i in range(len(B)): \n            if A[i] == B[i]: \n                continue \n            else: \n                return False\n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): #if B is longer than A, it cannot be a sublist of A\n        return False\n    for i in range(len(B)):\n        if B[i] not in A: #if a element of B is not present in A, it cannot be a sublist of A\n            return False\n    return True #if all the elements of B are present in A, then A is a sublist of B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        return False\n    \n    i = 0\n    j = 0\n    \n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n            \n    if i == len(A): \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)]==B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B:  # base case\n        return True\n    elif B[0] in A:  # check if first element of B is present in A\n        return is_Sub_Array(A,B[1:])\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n\n    # If the length of A is less than or equal to length of B, then it is not a sublist of B\n    if len(A) <= len(B): \n        return False \n\n    # Initialize two pointers, i and j, both pointing to the beginning of the list A\n    i = 0 \n    j = 0 \n\n    # Initialize two variables, count and flag, to 0\n    count = 0\n    flag = 0\n\n    # Traverse the list A and check if the element at index j matches with the element at index i of B.\n    while j < len(B) and i < len(A): \n        if A[i] == B[j]: \n            count += 1\n            j += 1\n            i += 1\n            flag = 1\n        else:\n            i += 1\n\n    # If the count is equal to the length of B, then the list A is a sublist of B.\n    if count == len(B): \n        return True \n\n    # If the count is less than the length of B, then the list A is not a sublist of B.\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): \n        return False \n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return True \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n    i = 0 \n    j = 0 \n    while j < len(B): \n        if B[j] == A[i]: \n            i += 1 \n            j += 1 \n        else: \n            if i == 0: \n                return False \n            i = max(0, i-1) \n            j += 1 \n    return i == len(A) "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    This function takes two lists A and B as input and returns True if B is a sublist of A, False otherwise.\n    '''\n    # Check if length of B is greater than or equal to length of A\n    if len(B) >= len(A):\n        return False\n    # Check if all elements in B are present in A\n    for i in B:\n        if i not in A:\n            return False\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n\n    # Convert the input number to a string\n    n_str = str(n)\n\n    # Loop through each digit of the input number\n    for digit in n_str:\n        # Multiply the last digit of the factorial with the current digit\n        last_digit = last_digit * int(digit)\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # extract the last digit of the string\n    last_digit = int(num_str[-1])\n    # calculate the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Check if the number is less than 1\n    if n < 1:\n        return 'Invalid input'\n    \n    # Factorial of 1 is 1\n    if n == 1:\n        return 1\n    \n    # Calculate factorial of n\n    factorial = 1\n    for i in range(2, n+1):\n        factorial *= i\n        \n    # Find the last digit in the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    while n > 0:\n        factorial = factorial * n\n        n = n - 1\n\n    return int(str(factorial)[-1])"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize a variable to store the last digit in the factorial\n    last_digit = 0\n\n    # Loop through each digit in the factorial\n    for i in str(n):\n        # Check if the current digit is greater than the last digit\n        if int(i) > last_digit:\n            # Set the last digit to the current digit\n            last_digit = int(i)\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Check if the given number is negative\n    if n < 0:\n        # If it is negative, return None as it is not possible to find the last digit in the factorial of negative numbers\n        return None\n\n    # Initialize the result variable to store the factorial of the given number\n    factorial = 1\n\n    # Compute the factorial of the given number\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit in the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    sum_val = 0\n    # Iterate through each character in the string\n    for char in num_str:\n        # Convert the character to an integer\n        digit = int(char)\n        # Multiply the current digit with the sum variable\n        sum_val *= digit\n    # Divide the sum variable by 10 to get the last digit\n    last_digit = sum_val // 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize the last digit of factorial to 0\n    last_digit = 0\n\n    # loop through each digit of the number\n    while n >= 1:\n        # get the last digit of the number\n        last_digit = n % 10\n\n        # find the factorial of the last digit and add to the last digit\n        last_digit = last_digit * (n // 10)\n\n        # subtract the last digit from the number\n        n = n - last_digit\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # find the factorial of n \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # extract the last digit of the factorial \n    last_digit = factorial % 10\n\n    return last_digit "
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Use list comprehension to combine the 3 lists into a single list\n    return [item1 for item1 in list1 for item2 in list2 for item3 in list3]"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if the lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # initialize an empty list to store the interleaved values\n    interleaved_list = []\n\n    # iterate over each value in the lists and add it to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through each element in each list\n    for i in range(len(list1)):\n        # Add the first element in list1 to the interleaved list\n        interleaved_list.append(list1[i])\n        # Add the second element in list2 to the interleaved list\n        interleaved_list.append(list2[i])\n        # Add the third element in list3 to the interleaved list\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to hold the interleaved list\n    interleaved_list = []\n    \n    # Use a for loop to iterate over each element in the first list\n    for i in range(len(list1)):\n        # Add the i-th element from each of the lists to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through the input lists and add the elements to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    # Return the flattened list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    result += list1[len(list2):]\n    result += list2[len(list3):]\n    result += list3[len(list1):]\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Combine the lists into a single flat list\n    flat_list = list1 + list2 + list3\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through the tuples\n    for i in range(len(test_tup1)):\n        # If the elements are not equal, add them to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common = set(test_tup1) & set(test_tup2)\n    return list(test_tup1 - common) + list(test_tup2 - common)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # creating a set from each tuple to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # finding the elements in set2 that are not in set1\n    dissimilar_elements = list(set2.difference(set1))\n    # returning the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize a set to store the common elements\n    common = set()\n\n    # Iterate over the elements of the first tuple\n    for i in test_tup1:\n        # Check if the element is present in the second tuple\n        if i in test_tup2:\n            # If it's present, add it to the common set\n            common.add(i)\n        else:\n            # If it's not present, add it to the dissimilar set\n            dissimilar.add(i)\n\n    # Return the dissimilar set\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Given two tuples, returns a list of the elements in the first tuple that are not in the second tuple.\n    \"\"\"\n    dissimilar = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar.append(element)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # check if the current element is different from the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # if it's different, add it to the list of dissimilar elements\n            dissimilar_list.append(test_tup1[i])\n    \n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through the elements of the two tuples\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        # Check if the elements are equal\n        if elem1!= elem2:\n            # If they are not equal, add them to the dissimilar list\n            dissimilar_list.append(elem1)\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of all elements in both tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # find the elements in the first tuple that are not in the intersection set\n    dissimilar1 = [elem for elem in test_tup1 if elem not in intersection]\n\n    # find the elements in the second tuple that are not in the intersection set\n    dissimilar2 = [elem for elem in test_tup2 if elem not in intersection]\n\n    return dissimilar1, dissimilar2"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize a list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through the first tuple and check if each element is different from the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # If the element is different, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif isinstance(i, list):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif isinstance(i, int):\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Define a nested function to check if a value is even or odd\n    def is_even(x):\n        return x % 2 == 0\n\n    # Loop through each element in the mixed tuple\n    for elem in test_tuple:\n        # Check if the element is even using the nested function\n        if even_fnc(elem):\n            # If it is even, add it to the result list\n            result.append(elem)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = [] \n    for item in test_tuple: \n        if isinstance(item, tuple): \n            result.extend(even_ele(item, even_fnc)) \n        else: \n            if even_fnc(item): \n                result.append(item) \n    return result "
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        if even_fnc(sub_tuple):\n            new_tuple.append(sub_tuple)\n    return new_tuple\n\n\ndef even_tuple(sub_tuple):\n    '''\n    Write a function to check if the elements of a nested tuple are even.\n    '''\n    for num in sub_tuple:\n        if num % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            result.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            uneven_list.append(item)\n    return uneven_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def check_even(x): \n        if x % 2 == 0: \n            return True \n        else: \n            return False \n    def remove_uneven(lst): \n        return [x for x in lst if even_fnc(x)] \n    def nested_even(nested_lst): \n        return [x for sublist in nested_lst for x in remove_uneven(sublist)] \n    return nested_even(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(x) for x in test_tuple if even_fnc(x)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Check if the input is a list\n    if type(test_tuple)!= list:\n        print(\"Error: The input is not a list.\")\n        return\n\n    # Initialize an empty list to store even elements\n    even_list = []\n\n    # Loop through the list and append even elements to the even_list\n    for item in test_tuple:\n        if type(item) in [int, float]:\n            if even_fnc(item):\n                even_list.append(item)\n        elif isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n\n    # Return the even list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # create a function to check if a value is even or odd\n    def is_even(val):\n        return val % 2 == 0\n    \n    # create a function to remove elements from the tuple\n    def remove_uneven(tup):\n        return tuple(x for x in tup if is_even(even_fnc(x)))\n    \n    # apply the function to the input tuple\n    return remove_uneven(test_tuple)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid.\n    \n    Parameters:\n    base (float): the base edge of the square pyramid\n    height (float): the height of the square pyramid\n    \n    Returns:\n    float: the surface area of the square pyramid\n    \"\"\"\n    \n    # Calculate the length of the base\n    length = base\n    \n    # Calculate the number of equal parts\n    equal_parts = int(height/length)\n    \n    # Calculate the surface area of the pyramid\n    area = 2 * length * height + 2 * base * (equal_parts - 1) + 2 * (equal_parts - 1) * height\n    \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*b*s + 2*b*s + b*(s-s)**2 + 4*b*s*(s-s) + 2*b*b + 2*b*b + 2*b*b + 4*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*b*b + 2*b*"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s*3)+(s*b*2)+(b*b*2)+(s*s*2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * (b * s + b * s) + 6 * b * s * s + 6 * b * s * s \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2) * s \n    return area \n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    return 6 * b * s + 6 * b * b + 6 * b * b + s * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid given its base edge and height.\n    \"\"\"\n    surface_area = (base * height) + (base * base) + (height * height)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the base area and height of the pyramid\n    area = b * b\n    height = s * s\n    \n    # Calculating the surface area of the pyramid using Heron's formula\n    surface_Area = 0.5 * b * s * (height + s)\n    \n    return surface_Area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s\n    print(\"Surface Area of the square pyramid is:\", area)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function takes the base edge and the height of a square pyramid as input and returns the surface area of the pyramid.\n    \"\"\"\n    # Calculate the surface area of the pyramid by multiplying the area of the parallelepiped formed by each of its six sides\n    parallelepiped_area = 2 * b * s\n    # Calculate the surface area of the pyramid by adding the surface area of its six faces\n    face_area = (4 * b * s) / 3\n    surface_area = parallelepiped_area + face_area\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty.\n    \"\"\"\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    # Compute the catalan numbers using the formula:\n    # C(n,r) = binomial(n,r) * C(n-1,r-1)\n    # where binomial(n,r) = n! / (r! * (n-r)!)\n    # where n is the number of objects and r is the number of selected objects\n    # First, calculate the factorials of n and r\n    n_fact = 1\n    for i in range(1, n+1):\n        n_fact *= i\n    r_fact = 1\n    for i in range(1, n-r+1):\n        r_fact *= i\n    # Compute the binomial coefficient\n    binom = n_fact // (r_fact * (n-r_fact))\n    # Finally, return the Catalan number\n    return binom"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Initialize the Catalan numbers\n    C = [[1]]\n    for i in range(1, num+1):\n        C.append([1])\n        for j in range(i):\n            C[i].append(C[i-1][j] + C[i-1][j+1])\n    return C[-1][-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    # base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # recurrence relation\n        return catalan_number(n-1) * (1-2*n+1) / n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the first two rows of the table\n    catalan = [[1], [1,1]]\n    \n    # Calculate the rest of the table\n    for i in range(2, n+1):\n        # Calculate the first element of the row\n        first = i * (2*i-1) // (i+1)\n        # Calculate the second element of the row\n        second = 2 * (i-1) * (i-2) // (i+1)\n        \n        # Add the new row to the catalan table\n        catalan.append([first, second])\n    \n    # Return the nth row of the catalan table\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns the nth Catalan number.\n    '''\n    if n < 0:\n        return None\n    \n    if n == 0:\n        return 1\n    \n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, n + 1):\n        catalan[i] = catalan[i-1] + catalan[i-2]\n    \n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)*n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula:\n\n    C(n) = 2^(n+1) * (n+1)! / (n! * (n-1)! * (n-2)!)\n\n    This formula is valid for all integers n >= 0.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return 2**(n+1) * (n+1) // (n * (n-1) * (n-2)!)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # initialize variables\n    fact = [1]\n    for i in range(1, n+1):\n        fact.append(fact[-1]*(i+1))\n    # compute Catalan number\n    return fact[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # base cases\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 5\n    else:\n        # recursive case\n        return catalan_number(num-1) + catalan_number(num-2)*catalan_number(num-1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    adverbs = re.findall(pattern, text)\n    return adverbs, pattern"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[A-Za-z]+ly\\b' # Regular expression pattern to match adverbs ending with ly\n    match = re.search(pattern, text) # Search for the first match in the text\n    \n    if match:\n        adverb = match.group() # Extract the matched adverb\n        positions = [match.start(), match.end()] # Extract the starting and ending positions of the adverb\n        return adverb, positions\n    else:\n        return None, None # If no match is found, return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all instances of \"ly\" at the end of a word\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    \n    # Find the positions of each match in the text\n    positions = [m.start() for m in re.finditer(pattern, text)]\n    \n    # Extract the first adverb ending with \"ly\" and its position\n    adverbs = [(match, position) for match, position in zip(matches, positions) if match.endswith('ly')]\n    \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'(?<![a-z])\\b(ly)\\b(?![a-z])'\n    \n    # Use the re.search() method to search for the pattern in the text\n    matches = re.search(pattern, text)\n    \n    # If there are matches, return a list of tuples containing the adverb and its position in the text\n    if matches:\n        return [(matches.group(1), matches.start())]\n    # Otherwise, return an empty list\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(\\w*)ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w*[aeiou][aeiou]\\b\\w*ly\\b\\w*', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of tuples containing the adverb and its position in the text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match the adverb\n    pattern = r'\\b(\\w+ly)\\b'\n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Create a list to store the positions of the matches\n    positions = []\n    # Loop through each match and append its position to the list\n    for match in matches:\n        positions.append(text.index(match))\n    # Return a tuple of the list of positions and the list of matches\n    return positions, matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        # Add item to heap (max-heap)\n        heapq.heappush(heap, item)\n        # Remove the smallest item from heap if heap size exceeds n\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n\n    min_heap = []\n\n    # Iterate through the dataset\n    for item in items:\n        # If the size of the min-heap is less than n, add the item to the min-heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # Otherwise, if the item is less than or equal to the minimum element in the min-heap, update it\n        else:\n            if item <= min_heap[0]:\n                continue\n            else:\n                heapq.heapreplace(min_heap, item)\n\n    # Return the n most expensive items in the dataset\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        # append the smallest element to the heap\n        heapq.heappush(min_heap, items.pop(0))\n\n    # add the remaining elements to the heap\n    for item in items:\n        # if the item is cheaper than the smallest element in the heap, pop the smallest element and add the item to the heap\n        if item < min_heap[0]:\n            items.remove(heapq.heappop(min_heap))\n            heapq.heappush(min_heap, item)\n\n    # return the n most expensive items\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of the n smallest items in the dataset\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and returns the n most expensive items.\n    '''\n    # Heapify the items to create a min-heap\n    heapq.heapify(items)\n\n    # Extract the n most expensive items from the heap\n    return [heapq.heappop(items) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initialize a max heap with the first n elements of the dataset\n    max_heap = []\n    for item in items[:n]:\n        heapq.heappush(max_heap, item)\n\n    # Iterate over the remaining elements of the dataset and add to the heap\n    for item in items[n:]:\n        if heapq.heappushpop(max_heap, item) > item:\n            # If the item is higher than the current maximum, replace the maximum with it\n            heapq.heapify(max_heap)\n\n    # Return the n most expensive items from the heap\n    return max_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: n is greater than the length of the list\"\n    else:\n        mid = len(l) // 2\n        left_part = l[:n]\n        right_part = l[n:]\n        new_list = left_part + [l[mid]] + right_part\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        print(\"Invalid index\")\n        return\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Convert the list to a tuple\n    l = tuple(l)\n    # Split the tuple at the nth element\n    new_l = l[:n] + (l[n:],)\n    # Convert the tuple back to a list and return it\n    return list(new_l)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 1:\n        return []\n    if n == 1:\n        return [l[0]]\n    if n == len(l):\n        return [l[0]] + l[1:]\n    else:\n        return [l[0]] + split_Arr(l[1:], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n should be a positive integer.\")\n    elif n >= len(l):\n        return l\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part2 + part1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[:n] + l[n+1:]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = n // 2 # find the middle index\n    first_part = l[:mid] # extract the first part of the list\n    second_part = l[mid:] # extract the second part of the list\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    if n == 0:\n        return l\n    \n    elif n > len(l):\n        raise ValueError(\"The nth element is greater than the length of the list.\")\n    \n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part1 + part2"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    return tuple(lst)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Check if the list is empty\n    if len(nums) == 0:\n        return None\n\n    # Initialize two variables to keep track of the smallest and largest values\n    smallest = nums[0]\n    largest = nums[0]\n\n    # Loop through the list to find the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    min_num = min(nums)\n    max_num = max(nums)\n    \n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    # Get the largest and smallest values in the list\n    smallest = nums[0]\n    largest = nums[-1]\n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        raise ValueError(\"Empty list\")\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        print(\"List should have at least two elements\")\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if not nums:\n        return \"List is empty\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares_list = []\n    for i in range(a, b + 1):\n        is_perfect_square = True\n        j = 2\n        while j*j <= i:\n            if i % j == 0:\n                is_perfect_square = False\n                break\n            j += 1\n        if is_perfect_square:\n            perfect_squares_list.append(i)\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize variables\n    squares = []\n\n    # Loop through the range of a to b\n    for i in range(a, b + 1):\n\n        # Check if i is a perfect square\n        square = i**2\n\n        # If i is a perfect square, append it to the list\n        if square == int(square):\n            squares.append(square)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        for j in range(i, 0, -1):\n            if i == j*j:\n                print(i)\n    return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        return max(a, b) - min(a, b)\n    else:\n        return max(b, a) - min(b, a)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            perfect_squares.append(num)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == i * i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Check if a is less than b\n    if a < b:\n        a, b = b, a\n\n    # Initialize an empty list to store the perfect squares\n    squares = []\n\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to the current number\n        if i == int(i**0.5):\n            squares.append(i**2)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i**2\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list of all perfect squares between a and b\n    squares = []\n    for i in range(int(a ** 0.5) + 1):\n        for j in range(int(b ** 0.5) + 1):\n            if i ** 2 + j ** 2 == a ** 2 and i ** 2 + j ** 2 == b ** 2:\n                squares.append((i ** 2 + j ** 2, (i, j)))\n    \n    # Sort the list by increasing size and descending value\n    squares.sort(key=lambda x: (x[0], x[1][0]))\n    \n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters\n    ----------\n    x : float\n        Polar coordinate in the x-axis.\n    y : float\n        Polar coordinate in the y-axis.\n        \n    Returns\n    -------\n    tuple\n        Tuple containing the rectangular coordinates (x, y)\n    \"\"\"\n    # Calculate the distance from the origin\n    r = cmath.sqrt(x**2 + y**2)\n    \n    # Calculate the angle in radians\n    theta = cmath.phase(x + y*1j)\n    \n    # Convert the angle to degrees\n    theta = theta * (180 / cmath.pi)\n    \n    # Calculate the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    return r*cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert radian to degree\n    theta = cmath.phase(theta) * 180/cmath.pi\n    \n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Args:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians.\n\n    Returns:\n    (float, float): The x and y coordinates of the point in rectangular coordinates.\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius of the point.\n    theta (float): The angle of the point measured in radians from the x-axis.\n    \n    Returns:\n    x (float): The x-coordinate of the point.\n    y (float): The y-coordinate of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x+y*1j)\n    theta = cmath.phase(x)\n\n    # Convert polar coordinates to rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to cartesian coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has at least 2 elements\n    if length < 2:\n        return \"The list must have at least 2 elements.\"\n    \n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Define the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    # Define the first and last indices of the list\n    first_index = 0\n    last_index = len(newList)-1\n    # Swap the elements using slicing\n    newList = newList[:first_index] + [last] + newList[first_index+1:last_index] + [first] + newList[last_index+1:]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # initialize variables to swap \n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # check if the list is empty\n    if len(newList) == 0:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # recursive call to swap the list recursively\n    return swap_List(newList[1:-1]) + [newList[0]]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # checking if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list should have at least two elements\"\n    \n    # swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    newList[0] = last_elem\n    newList[-1] = first_elem\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: # If the list has less than two elements, return the list unchanged\n        return newList\n    else:\n        first = newList[0] # Get the first element of the list\n        last = newList[-1] # Get the last element of the list\n        newList[0] = last # Interchange the first and last elements\n        newList[-1] = first # Interchange the first and last elements\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 0:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0 \n    elif k == 0 or k == n: \n        return 1 \n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function takes in two arguments n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Define the function to find the binomial coefficient\n    def binom(n,k):\n        \"\"\"\n        This function takes in two arguments n and k, and returns the binomial coefficient of n over k.\n        \"\"\"\n        # Initialize the binomial coefficient\n        coeff = 1\n        # Loop through the range of k and calculate the binomial coefficient\n        for i in range(k):\n            coeff *= (n-i) // (i+1)\n        return coeff\n\n    # Initialize the sum of the product of consecutive binomial coefficients\n    coeff_sum = 0\n    # Loop through the range of n and calculate the sum of the product of consecutive binomial coefficients\n    for i in range(n+1):\n        coeff_sum += binom(n,i)\n\n    return coeff_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two integer arguments: n and k, where n is the total number of objects and k is the number of objects that have been selected.\n    It calculates the sum of the product of consecutive binomial co-efficients using the formula:\n\n    sum(C(n,k)*C(n-1,k-1)*...*C(1,k))\n\n    where C(n,k) is the binomial coefficient.\n\n    The function returns the value of sum(C(n,k)*C(n-1,k-1)*...*C(1,k)).\n    '''\n    def fact(n):\n        '''\n        This function takes an integer argument n and returns its factorial value.\n        '''\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * fact(n - 1)\n\n    def comb(n, k):\n        '''\n        This function takes two integer arguments n and k and returns the binomial coefficient of n and k.\n        '''\n        if k > n // 2:\n            return 0\n        else:\n            return fact(n) // (fact(k) * fact(n - k))\n\n    total_coeff = 1\n    for i in range(1, k + 1):\n        total_coeff *= comb(n, i)\n\n    return total_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    count = k\n    sum_coeff = 1\n    for i in range(1,n+1):\n        count += k\n        if count > n:\n            break\n        sum_coeff += i*binomial_Coeff(n-i,k)\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum_coeff = 0\n    for i in range(1, k + 1):\n        coeff = (n - i + 1) // i\n        sum_coeff += coeff\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Function to find the binomial coefficient using the formula C(n,k) = n! / (k! * (n-k)!)\n    def binomial_coefficient(n,k):\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Calculate the product of consecutive binomial coefficients\n    for i in range(1,k+1):\n        sum += binomial_coefficient(n,i)\n\n    # Return the sum of the product of consecutive binomial coefficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\nn = 10\nk = 5\nsum_product = binomial_Coeff(n,k)\nprint(\"Sum of product of consecutive binomial co-efficients:\", sum_product)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k or k < 0:\n        return None\n    elif n == k or n == k-1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+(?!$)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\b0\\b)|(\\B\\b0\\b)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(\\d)(\\.|$)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern to match any leading zeroes in the IP address\n    pattern = r'^0+'\n    # Use the re.sub() method to remove the leading zeroes from the IP address\n    new_ip = re.sub(pattern, '', ip)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regular expression to match leading zeroes\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n    \"\"\"\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s+|\\s+$', '', ip)\n    ip = ip.strip('.')\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Define regex pattern for an ip address\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n\n    # Use regex to match ip address with leading zeroes\n    match = re.match(pattern, ip)\n\n    # If ip address has leading zeroes, remove them\n    if match:\n        return match.group(1) + '.' + match.group(2) + '.' + match.group(3) + '.' + match.group(4)\n    else:\n        return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd numbers in the list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 == 1 and first_odd is None:\n            first_odd = num\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # check if the input is a list\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # initialize the first even and first odd numbers\n    even = None\n    odd = None\n    \n    # iterate over the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            elif even!= num:\n                raise ValueError(\"List contains duplicate even numbers\")\n        else:\n            if odd is None:\n                odd = num\n            elif odd!= num:\n                raise ValueError(\"List contains duplicate odd numbers\")\n    \n    # check that at least one even and one odd number were found\n    if even is None or odd is None:\n        raise ValueError(\"List does not contain any even or odd numbers\")\n    \n    # calculate the difference between the even and odd numbers\n    diff = even - odd\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = abs(even_num - odd_num)\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            if first_even == 0:\n                first_even = num\n        else:\n            if first_odd == 0:\n                first_odd = num\n    \n    diff = abs(first_even - first_odd)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    even_first = None\n    odd_first = None\n\n    for num in list1:\n        if num % 2 == 0 and even_first is None:\n            even_first = num\n        elif num % 2 == 1 and odd_first is None:\n            odd_first = num\n\n    if even_first is None or odd_first is None:\n        return None\n    else:\n        return even_first - odd_first"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return None\n    # Find the first even number\n    even_index = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even_index = i\n            break\n    # Find the first odd number\n    odd_index = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            odd_index = i\n            break\n    # Return the difference between the even and odd indices\n    return lst[even_index] - lst[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd numbers.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The difference of the first even and first odd numbers.\n    \"\"\"\n\n    if not lst:\n        return None\n\n    first_even = first_odd = None\n\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n\n    if first_even is None or first_odd is None:\n        return None\n\n    return abs(first_even - first_odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_sum += num\n        else:\n            odd_count += 1\n            odd_sum += num\n            \n    if even_count == 0:\n        even_sum = 0\n    else:\n        even_sum = even_sum / even_count\n    \n    if odd_count == 0:\n        odd_sum = 0\n    else:\n        odd_sum = odd_sum / odd_count\n        \n    return even_sum - odd_sum"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    # Convert strings to binary numbers\n    bin1 = bin(int(str1,2))[2:]\n    bin2 = bin(int(str2,2))[2:]\n    \n    # Create lists to store swaps for each character in the binary numbers\n    swaps1 = []\n    swaps2 = []\n    \n    # Iterate through each character in the binary numbers\n    for i in range(min(len(bin1),len(bin2))):\n        if bin1[i]!= bin2[i]:\n            # If swaps are required for this character, append them to the appropriate list\n            if bin1[i] > bin2[i]:\n                swaps1.append(i)\n            else:\n                swaps2.append(i)\n    \n    # Return the minimum number of swaps required\n    return min(len(bin1),len(bin2)) - len(swaps1) - len(swaps2)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Initialize variables to store the binary representation of the numbers in reverse order\n    rev_str1 = bin(int1)[2:].zfill(int(str1.count('1')) + 1)\n    rev_str2 = bin(int2)[2:].zfill(int(str2.count('1')) + 1)\n\n    # Initialize a variable to store the result\n    min_swaps = 0\n\n    # Compare the binary representations of the numbers and count the minimum number of swaps required to convert one to the other\n    i = 0\n    while i < len(rev_str1) and i < len(rev_str2):\n        if rev_str1[i]!= rev_str2[i]:\n            min_swaps += 1\n            rev_str1[i], rev_str2[i] = rev_str2[i], rev_str1[i]\n        i += 1\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Get the lengths of the binary strings\n    len1, len2 = len(str1), len(str2)\n\n    # Initialize the minimum number of swaps required to convert the binary strings\n    swaps = 0\n\n    # Compare each digit of the binary strings from right to left\n    for i in range(len1 - 1, -1, -1):\n        # Calculate the number of swaps required to convert the digit to the corresponding digit in num2\n        diff = num2 - (num1 % 2)\n\n        # Update the number of swaps required\n        swaps += diff\n\n        # Update the binary strings\n        num1 = num1 // 2\n        num2 = (num2 // 2) + (num2 % 2)\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    str1_list = list(str1)\n    str2_list = list(str2)\n    n = len(str1_list)\n\n    # Initialize count of swaps to 0\n    count = 0\n\n    # Loop through all pairs of bits in both binary numbers\n    for i in range(n):\n        # If bits are not equal, swap them\n        if str1_list[i]!= str2_list[i]:\n            # Increment count of swaps\n            count += 1\n\n            # If the swapped bits are both 1, change the first bit to 0\n            if str1_list[i] == '1' and str2_list[i] == '1':\n                str1_list[i] = '0'\n\n            # If the swapped bits are both 0, change the second bit to 0\n            elif str1_list[i] == '0' and str2_list[i] == '0':\n                str2_list[i] = '0'\n\n            # If the swapped bits are both 1, change the second bit to 1\n            elif str1_list[i] == '1' and str2_list[i] == '0':\n                str2_list[i] = '1'\n\n            # If the swapped bits are both 0, change the first bit to 1\n            else:\n                str1_list[i] = '1'\n\n    # Return the count of swaps required\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert one binary number to another.\n\n    Args:\n    str1 (str): The first binary number as a string.\n    str2 (str): The second binary number as a string.\n\n    Returns:\n    int: The minimum number of swaps required to convert the two binary numbers.\n\n    \"\"\"\n    # Convert the two binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Iterate through all possible swaps\n    for i in range(len(str1)):\n        # Check if the swapped bits are equal\n        if ((num1 ^ num2) & (1 << i))!= 0:\n            # Swap the bits\n            num1 = num1 ^ (1 << i)\n            num2 = num2 ^ (1 << i)\n\n            # Update the minimum number of swaps\n            min_swaps = min(min_swaps, i + 1)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    # convert the given binary strings to integer\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize swaps count as 0\n    swaps = 0\n\n    # iterate over each bit of both binary numbers\n    for i in range(len(str1)):\n        # get the current bit value of both numbers\n        bit1 = (num1 & (1 << i)) >> i\n        bit2 = (num2 & (1 << i)) >> i\n\n        # if the bits are different, swap them and increment the swaps count\n        if bit1!= bit2:\n            num1 = num1 ^ (1 << i)\n            num2 = num2 ^ (1 << i)\n            swaps += 1\n\n    # if the binary strings are of equal length, check for the remaining non-zero bits in the last bit position\n    if len(str1) == len(str2):\n        for i in range(len(str1), len(str1) + len(str2)):\n            # get the current bit value of both numbers\n            bit1 = (num1 & (1 << i)) >> i\n            bit2 = (num2 & (1 << i)) >> i\n\n            # if the bits are different, swap them and increment the swaps count\n            if bit1!= bit2:\n                num1 = num1 ^ (1 << i)\n                num2 = num2 ^ (1 << i)\n                swaps += 1\n\n    # return the minimum number of swaps required to convert the two binary strings\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize the result variable\n    result = 0\n\n    # loop through each bit of the binary number\n    for i in range(32):\n        # calculate the bit position of the i-th bit of num1 and num2\n        pos1 = num1 & 1\n        pos2 = num2 & 1\n\n        # if the i-th bit is different in num1 and num2, swap them and increment the result\n        if pos1!= pos2:\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n            result += 1\n\n        # shift the binary number to the right by one bit\n        num1 >>= 1\n        num2 >>= 1\n\n    # check if the result is negative\n    if result < 0:\n        result = 0\n\n    return result"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to lists of 0s and 1s\n    lst1 = list(map(int, str1))\n    lst2 = list(map(int, str2))\n\n    # Create an empty dictionary to store the number of swaps required for each digit of each string\n    swap_dict = {}\n\n    # Loop through each digit of both strings\n    for i in range(len(lst1)):\n        # If the digits are the same, no swap is required\n        if lst1[i] == lst2[i]:\n            continue\n\n        # If the digits are different, check if the difference is already in the dictionary\n        if (lst1[i] - lst2[i]) in swap_dict:\n            # If it is, increment the count of swaps for that difference\n            swap_dict[(lst1[i] - lst2[i])] += 1\n        else:\n            # If it's not, add the difference to the dictionary with a count of 1\n            swap_dict[(lst1[i] - lst2[i])] = 1\n\n    # Find the minimum number of swaps required to convert each string to the other\n    min_swaps = min([v for v in swap_dict.values()])\n\n    # Return the minimum number of swaps required to convert the two strings\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    arr1 = [0] * 2\n    arr2 = [0] * 2\n    \n    for i in range(n):\n        if str1[i] == '1':\n            arr1[0] += 1\n        else:\n            arr1[1] += 1\n            \n    for i in range(n):\n        if str2[i] == '1':\n            arr2[0] += 1\n        else:\n            arr2[1] += 1\n            \n    count = 0\n    for i in range(2):\n        for j in range(2):\n            if arr1[i] > arr2[j]:\n                count += min(arr1[i]-arr2[j], arr2[j]-arr1[i])\n            elif arr1[i] < arr2[j]:\n                count += min(arr2[j]-arr1[i], arr1[i]-arr2[j])\n            else:\n                count += (arr1[i] - arr2[j]) * (arr1[i] - arr2[j])\n                \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # compare the numbers and count the number of swaps required\n    count = 0\n    while num1!= num2:\n        # check if the least significant bit is 1\n        if (num1 & 1)!= (num2 & 1):\n            # swap the bits\n            num1 = (num1 ^ num2) ^ ((num1 ^ num2) & -(num1 < num2))\n            num2 = (num2 ^ num1) ^ ((num2 ^ num1) & -(num2 < num1))\n            count += 1\n        # shift the bits to the right\n        num1 = num1 >> 1\n        num2 = num2 >> 1\n\n    # return the count of swaps required\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        if sys.getsizeof(tuple_list[i]) < 0:\n            total_size += sys.getsizeof(tuple_list[i])\n        else:\n            total_size += sys.getsizeof(tuple_list[i].__dict__)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import struct\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for i in tuple_list:\n        tuple_size += sys.getsizeof(i)\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Using sys.getsizeof() function to find the size in bytes of the given tuple\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(tuple_list, tuple):\n        print(\"Error: Input is not a tuple.\")\n        sys.exit(1)\n    \n    # Calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    \n    # Convert the size to megabytes\n    size = size / (1024*1024)\n    \n    # Display the size in megabytes\n    print(\"Size of the tuple in megabytes:\", size)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three parameters:\n    - arr1: sorted array\n    - arr2: sorted array\n    - k: the value of k for which we want to find the kth smallest element\n\n    This function returns the kth smallest element from arr1 and arr2.\n    \"\"\"\n\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    lo = 0\n    hi = len(arr1) - 1\n\n    while lo <= hi:\n        mid = (lo + hi) // 2\n\n        if arr1[mid] <= arr2[mid]:\n            if mid == k - 1:\n                return arr1[mid]\n            elif mid < k - 1:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        else:\n            if mid == k - 1:\n                return arr2[mid]\n            elif mid > k - 1:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 0:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 0:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 0:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    if k == 0:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    # find the median of the two arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    # if the median is from arr1\n    if i == len(arr1):\n        return arr2[j]\n    # if the median is from arr2\n    else:\n        return arr1[i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\ndef find_kth(arr1, arr2, k):\n    merged_arr = merge_sort(arr1 + arr2)\n    return merged_arr[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            elif k < 0:\n                return find_kth(arr1[:i], arr2, j)\n            else:\n                return find_kth(arr1, arr2[:j], k)\n    if i < len(arr1):\n        return find_kth(arr1[i:], arr2, j)\n    else:\n        return find_kth(arr1, arr2[j:], k)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the total number of elements in the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the minimum number of elements required to sort both arrays\n    min_n = min(n1, n2)\n\n    # Initialize two variables to keep track of the current indices in both arrays\n    i = 0\n    j = 0\n\n    # Iterate through the first min_n elements of both arrays\n    while i < min_n and j < min_n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    # If i has reached the end of the first array and j has not, then the kth element\n    # is in the remaining elements of the second array\n    if i == min_n:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the total number of elements in both arrays\n    total_elements = len(arr1) + len(arr2)\n\n    # Find the starting index of the kth element in both arrays\n    starting_index = min(len(arr1), k - 1)\n\n    # Initialize the first array pointer to starting index\n    first_pointer = 0\n\n    # Initialize the second array pointer to starting index\n    second_pointer = starting_index\n\n    # Initialize a variable to store the result\n    result = None\n\n    # Loop through the array until the first_pointer reaches the end\n    while first_pointer < len(arr1) and second_pointer < len(arr2):\n        # If the first element of the first array is smaller than the second element of the second array,\n        # we can safely move the first_pointer to the next index\n        if arr1[first_pointer] < arr2[second_pointer]:\n            first_pointer += 1\n        # Otherwise, the second element of the second array is smaller than the first element of the first array,\n        # we can safely move the second_pointer to the next index\n        else:\n            second_pointer += 1\n\n        # If we have found the kth element, break out of the loop and return the result\n        if first_pointer == len(arr1) and second_pointer == starting_index:\n            result = arr1[first_pointer - 1]\n            break\n\n    # If the result is still None, we have not found the kth element\n    if result is None:\n        return None\n\n    # Find the index of the kth element in the result array\n    for i in range(len(result)):\n        if result[i] == arr1[first_pointer - 1]:\n            return i + 1\n\n    # If the result array does not contain the kth element, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays into one\n    merged_arr = merge(arr1, arr2)\n    \n    # Find the kth element from the merged array\n    return merged_arr[k-1]\n\ndef merge(arr1, arr2):\n    # Initialize two pointers for both arrays\n    i = j = 0\n    \n    # Initialize a new array to store the merged array\n    merged_arr = []\n    \n    # Iterate through both arrays until one of them is exhausted\n    while i < len(arr1) and j < len(arr2):\n        # If the element at index i in the first array is smaller than the element at index j in the second array,\n        # add the element at index i to the merged array and increment i\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        # If the element at index j in the second array is smaller than the element at index i in the first array,\n        # add the element at index j to the merged array and increment j\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n            \n    # Add any remaining elements from either array to the merged array\n    merged_arr.extend(arr1[i:])\n    merged_arr.extend(arr2[j:])\n    \n    # Return the merged array\n    return merged_arr"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong_number(num):\n    # Check if the number is less than 10\n    if num < 10:\n        return False\n    \n    # Convert the number to a string and split it into digits\n    digits = [int(digit) for digit in str(num)]\n    \n    # Calculate the power of each digit\n    powers = [digit**len(digits) for digit in digits]\n    \n    # Calculate the sum of the powers\n    result = sum(powers)\n    \n    # Check if the result is equal to the original number\n    if result == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Check if the given number is a non-negative integer\n    if not isinstance(number, int) or number < 0:\n        return \"Invalid input\"\n\n    # Calculate the sum of the cubes of the digits of the number\n    digits = [int(digit) for digit in str(number)]\n    cube_sum = sum([digit**3 for digit in digits])\n\n    # Check if the sum of the cubes of the digits is equal to the original number\n    if cube_sum == number:\n        return \"Armstrong number\"\n    else:\n        return \"Not an Armstrong number\""
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n    # initialize a variable to store the sum of digits raised to the power of the digit count\n    sum = 0\n    # convert the given number to a string\n    n = str(n)\n    # loop through each digit in the string and add its value to the sum\n    for digit in n:\n        sum += int(digit)**len(n)\n    # check if the sum is equal to the original number\n    return n == str(sum)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n    # Calculate the sum of the cube of each digit\n    sum_of_cubes = sum([digit**3 for digit in digits])\n    # Compare the original number with the sum of cubes\n    if number == sum_of_cubes:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_armstrong_number(number):\n    n = int(number)\n    if n < 10:\n        return False\n    digits = [int(digit) for digit in str(n)]\n    total = 0\n    for digit in digits:\n        total += digit ** len(digits)\n    return total == n\n\ndef armstrong_number(number):\n    return is_armstrong_number(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(n):\n    # convert the number to a string\n    n_str = str(n)\n    # initialize the sum of digits to 0\n    digit_sum = 0\n    # iterate over the digits of the number\n    for digit in n_str:\n        # convert the digit to an integer and add it to the sum\n        digit_sum += int(digit)**len(n_str)\n    # compare the sum with the original number\n    if n == digit_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    # initialize variables\n    num_str = str(number)\n    sum_of_squares = 0\n    temp = number\n    # calculate sum of squares of digits\n    for digit in num_str:\n        digit = int(digit)\n        sum_of_squares += digit**3\n    # check if sum of squares of digits is equal to original number\n    if temp == sum_of_squares:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Calculate the sum of the cubes of the digits of the number\n    num_digits = len(str(number))\n    total = 0\n    for digit in str(number):\n        total += int(digit)**num_digits\n    \n    # Check if the total is equal to the original number\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n    # Initialize a variable to store the sum of its digits raised to the power of the total number of digits\n    armstrong_sum = 0\n    # Loop through each digit in the number string\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the armstrong_sum\n        armstrong_sum += int(digit) ** len(number_str)\n    # Check if the number is equal to the sum of its digits raised to the power of the total number of digits\n    if number == armstrong_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    A function to check whether a number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    power = 0\n    \n    for i in range(num_len):\n        power += int(num_str[i]) ** num_len\n    \n    if num == power:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first {} natural numbers is {}\".format(number, sum))\n    print(\"Average of first {} natural numbers is {}\".format(number, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i + 1\n    avg = sum / n\n    return (sum, avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer input `n` and returns True if `n` is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is Even\")\n    else:\n        print(f\"{n} is Odd\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize variables\n    char = None\n    count = 0\n\n    # loop through the string and count the occurrences of each character\n    for c in str1:\n        if c == char:\n            count += 1\n        else:\n            char = c\n            count = 1\n\n    # return the first repeated character\n    if count > 1:\n        return char\n    else:\n        return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes in a string and returns the first repeated character in the string.\n    If there is no repeated character, it will return None.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    \n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n            \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the dictionary and find the first repeated character\n    for char, count in freq.items():\n        if count > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # loop through the dictionary and find the first repeated character\n    for char, count in freq.items():\n        if count > 1:\n            return char\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j]:\n                return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert the string to a set to remove duplicates\n    set_str = set(str1)\n    # convert the set back to a list and sort it\n    sorted_set = sorted(list(set_str))\n    # iterate through the sorted list and check if the next character is the same as the current character\n    for i in range(len(sorted_set) - 1):\n        if sorted_set[i] == sorted_set[i+1]:\n            return sorted_set[i]\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 1\n    while True:\n        if is_lucid(i):\n            ludic_numbers.append(i)\n        if i > n:\n            break\n        i += 1\n    return ludic_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given number is a lucid number or not.\n    '''\n    return (len(str(n)) == len(set(str(n)))) and (n > 1)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    current_number = 1\n    \n    while current_number <= n:\n        if current_number % 2 == 0:\n            ludic_numbers.append(current_number)\n        current_number += 1\n    \n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if i % 2 == 1 and (i*i - 1) % 10 == 0:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = 0\n    while lucid <= n:\n        yield lucid\n        lucid += 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        ludic_numbers.append(2**(i-1))\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(num):\n    \"\"\"\n    Check if a number is a lucid number or not.\n    \"\"\"\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if sum(int(digit)**i for digit in str(i)) == i:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    if n < 0:\n        return []\n    elif n == 0:\n        return [0]\n    else:\n        return [x for x in range(n+1) if sum(str(x)) == x] + [x for x in range(n+1) if sum(str(x))!= x]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    ludic = [1]\n    while ludic[-1] <= n:\n        ludic.append(ludic[-1] + ludic[-2])\n    return ludic"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the order of the words in the list\n    words.reverse()\n    # join the words back into a string with spaces between them\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back into a string with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words = words[::-1]\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    reversed_words = words[::-1] # reverse the order of the words\n    reversed_string = \" \".join(reversed_words) # join the words back together with spaces\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return \"The given number is a prime number.\"\n    else:\n        return \"The given number is not a prime number.\"\n\nnum = int(input(\"Enter a number: \"))\nprint(prime_num(num))"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi/180)\n    return radians"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # search for pattern in the text and return the match\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through each match and extract the literal\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        \n        # Extract the literal from the text\n        literal = text[start:end]\n        \n        # Return the literal, start index, and end index\n        return literal, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.finditer method to find all matches of the pattern in the text.\n    matches = re.finditer(pattern, text)\n\n    # Loop through the matches and store the substrings, start and end indices, and any groups found in the pattern.\n    result = []\n    for match in matches:\n        substring = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        groups = match.groups()\n\n        # Check if there are any groups in the pattern.\n        if groups:\n            result.append((substring, start_index, end_index, groups))\n        else:\n            result.append((substring, start_index, end_index))\n\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(text)\n    else:\n        return None, -1, -1"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(0), match.end(0)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.findall(pattern, text)\n\n    # Initialize a list to store the literals\n    literals = []\n\n    # Iterate over each match and store the literal and its start and end indices\n    for match in matches:\n        literals.append((match, text.find(match), text.find(match) + len(match) - 1))\n\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Search a string for a regex pattern. The function returns the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match_num, match in enumerate(matches, start=1):\n        literal = match.group(0)\n        start = match.start()\n        end = match.end()\n        print(f\"Match {match_num}: Literal '{literal}' found at indices {start}-{end}.\")\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # use re.findall() to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # if there are no matches, return None\n    if not matches:\n        return None\n    \n    # create an empty list to store the results\n    results = []\n    # iterate over the matches and add each match to the results list as a tuple\n    for match in matches:\n        results.append((match, text.index(match), text.index(match) + len(match)))\n    # return the results list\n    return results"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_binomial(n, k, p):\n    return round(binom.pmf(n, k, p) * (2 * k + 1) / (2 * k + 1 + n))\n\ndef bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    p = 0.5\n    return centered_binomial(n, 1, p)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n % 2 == 0: \n        return bell_Number(n//2) + bell_Number((3*n)//2) \n    else: \n        return bell_Number((n-1)//2) - bell_Number((n-3)//2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [0] * (n+1)\n    bell_list[0] = 1\n    bell_list[1] = 1\n    for i in range(2, n+1):\n        bell_list[i] = bell_list[i-1] + bell_list[i-2]\n    return bell_list[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    # Initialize B(0) and B(1) to 0 and 1 respectively\n    B = [0, 1]\n    # Iterate from n to 1\n    for i in range(2, n+1):\n        # Calculate the previous bell number\n        B.append(i * B[i-1])\n    # Return the nth bell number\n    return B[n]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) < L:\n        return \"Error: list length is less than L\"\n    else:\n        return list1[:L-1] + list1[-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a value of k and returns a new list with the kth element removed.\n    '''\n    return list1[:L-1] + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and the value of k and returns a new list with the kth element removed.\n    '''\n    new_list = list1.copy()\n    k = L-1\n    for i in range(len(new_list)-1, -1, -1):\n        if i == k:\n            del new_list[i]\n        else:\n            new_list[i] = new_list[i+1]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    k = L - 1\n    for i in range(len(list2)):\n        if i!= k:\n            list2.pop(i)\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(lst, k):\n    '''\n    Remove the kth element from the list and return the updated list.\n    '''\n    lst.pop(k-1)\n    return lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input and returns a new list with the same elements except for the kth element.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i < L-1:\n            list2.append(list1[i])\n        elif i == L-1:\n            list2.append(list1[i])\n        else:\n            break\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # get the length of the list\n    n = len(list1)\n    # check if the value of L is less than or equal to zero\n    if L <= 0 or L > n:\n        return list1\n    # create a list to store the remaining elements\n    new_list = []\n    # loop through the list and add the elements to the new list except the k'th element\n    for i in range(n):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Find the length of the list representing the matrix\n    m = len(test_list)\n\n    # Initialize the maximum value and index\n    max_val = test_list[0][N]\n    max_index = 0\n\n    # Loop through the matrix and update the maximum value and index\n    for i in range(m):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n            max_index = i\n\n    return max_val, max_index"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n    if N > m:\n        raise ValueError('N is greater than the number of columns in the matrix.')\n    for i in range(n):\n        if i == 0:\n            max_val = test_list[i][N-1]\n        else:\n            if test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    for i in range(len(test_list)):\n        if i!= N:\n            for j in range(len(test_list[i])):\n                if j == N-1:\n                    test_list[i][j] = max(test_list[i][j], test_list[i][j+1])\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    \n    # loop through each row of the matrix\n    for row in test_list:\n        # check if the current row has N elements\n        if len(row) == N:\n            # if it does, check if the current max value is less than the current value of then'th element in the current row\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n                \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the number of rows and columns in the matrix\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    \n    # check if the N is within the range of columns in the matrix\n    if N >= num_cols:\n        print(\"N is greater than or equal to the number of columns in the matrix.\")\n        return None\n    \n    # create an empty list to store the max values of each row\n    max_values = [0] * num_rows\n    \n    # loop through each row in the matrix\n    for i in range(num_rows):\n        # loop through each column in the matrix and find the max value of the N'th column\n        for j in range(num_cols):\n            if j == N - 1:\n                max_values[i] = max(max_values[i], test_list[i][j])\n                \n    # find the max value among all max values of each row\n    max_value = max(max_values)\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if the list is a 2D list or not\n    if not isinstance(test_list[0], list):\n        print(\"Please provide a 2D list!\")\n        return\n    \n    # find the length of the first row\n    length = len(test_list[0])\n    \n    # check if N is a valid input\n    if N > length:\n        print(\"N is greater than the number of columns!\")\n        return\n    \n    # find the max of then'th column\n    max_value = max(test_list[i][N-1] for i in range(len(test_list)))\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if max_value < row[N-1]:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if not test_list:\n        return None\n    n = len(test_list[0])\n    if N >= n:\n        return None\n    col = [row[N-1] for row in test_list]\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf') # initialize the maximum value to negative infinity\n    for i in range(len(test_list)):\n        max_value = max(max_value, test_list[i][N-1]) # check if the current maximum value is greater than then'th column value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i][N-1], key=lambda x: x))\n    return max_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            merged.append(sublist)\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        sublist1 = lst[i]\n        sublist2 = lst[i+1]\n        merged_lst.append([sublist1[0], sublist2[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # create an empty list to hold the merged lists\n    merged = []\n    # loop through each sublist in the input list\n    for i in range(len(lst)):\n        # add the first element of the sublist to the first element of the merged list\n        merged.append([lst[i][0], lst[i][1]])\n    # return the merged list\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        first_elem, second_elem = sublist\n        merged_lst.append([first_elem, second_elem])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumsum = 0\n    for num in test_list:\n        cumsum += num\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            for j in range(len(test_list[i])):\n                cumulative_sum += test_list[i][j]\n        else:\n            cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        for num in tup:\n            cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        for j in i:\n            cum_sum += j\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            total_sum += sum(test_list[i])\n        else:\n            total_sum += test_list[i]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum list\n    cum_sum_list = []\n    \n    # Iterate through the list of tuples and calculate the cumulative sum for each tuple\n    for i in range(len(test_list)):\n        cum_sum = 0\n        for j in range(i, len(test_list)):\n            cum_sum += test_list[j][i]\n        cum_sum_list.append(cum_sum)\n    \n    # Return the cumulative sum list\n    return cum_sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for tup in test_list:\n        for num in tup:\n            cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in test_list:\n        cumsum += i\n    return cumsum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Use a list comprehension to iterate over each tuple in the input list\n    results = [tuple(num) for num in nums]\n    # Calculate the sum of all values in each tuple and divide by the number of tuples\n    averages = [sum(num)/len(num) for num in results]\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = sum(num)\n        average = total/len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = sum(num)\n        averages.append(total/len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        total = sum(t)\n        average = total / len(t)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_list = []\n    for num in nums:\n        total = 0\n        count = 0\n        for i in num:\n            total += i\n            count += 1\n        avg_list.append(total / count)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # List to store the averages\n    averages = []\n\n    # Iterate over the tuples in the list\n    for t in nums:\n        # Calculate the average of the tuple\n        average = sum(t) / len(t)\n        # Add the average to the list\n        averages.append(average)\n\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total/len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n\n    :param test_tup1: A tuple of numbers.\n    :param test_tup2: A tuple of numbers.\n    :return: A tuple of the same length as the input tuples, where each element is the result of element-wise modulo operation.\n    '''\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n    return modulo_result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    # Perform the element-wise modulo\n    result_tup = tuple([i % j for i,j in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function checks for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    step = 0\n    i = 0\n    while True:\n        if i > steps:\n            return jumps\n        if i == steps:\n            step += 1\n            i = 0\n            jumps += 1\n        if step % d == 0:\n            i += step // d\n            step = 0\n        else:\n            i += 1\n            step += 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    \n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n    \n    def euclid(a, b):\n        if b == 0:\n            return a\n        else:\n            return euclid(b, a % b)\n    \n    steps = int(steps)\n    d = int(d)\n    \n    # If the given length is less than the distance, return 0 as there is no possible way to reach (d, 0)\n    if steps < d:\n        return 0\n    \n    # Initialize variables\n    min_steps = 1\n    max_steps = 1\n    max_jumps = 0\n    last_i = 0\n    \n    # Iterate through the steps and calculate minimum and maximum number of steps required to reach (d, 0)\n    for i in range(1, steps+1):\n        if i * d == d:\n            min_steps = i\n            max_steps = i\n            break\n        elif i * d > d:\n            min_steps = i\n            max_steps = i\n            break\n        else:\n            min_steps = euclid(min_steps, i)\n            max_steps = euclid(max_steps, i)\n    \n    # Calculate the number of jumps required to reach (d, 0)\n    min_jumps = min_steps // (min_steps - 1)\n    max_jumps = max_steps // (max_steps - 1)\n    \n    # Check if the last jump is possible\n    if (steps - last_i) % (min_steps - 1) == 0:\n        last_i = (steps - min_steps + 1) // (min_steps - 1) * (min_steps - 1)\n    else:\n        last_i = steps - min_steps * (steps - last_i) // (min_steps - 1) * (min_steps - 1)\n    \n    # Update the maximum number of jumps based on the last jump\n    if min_jumps == max_jumps:\n        max_jumps += 1\n    \n    # Check if the last jump is possible\n    if (steps - last_i) % (max_steps - 1) == 0:\n        last_i = (steps - max_steps + 1) // (max_steps - 1) * (max_steps - 1)\n    else:\n        last_i = steps - max_steps * (steps - last_i) // (max_steps - 1) * (max_steps - 1)\n    \n    # Update the maximum number of jumps based on the last jump\n    if min_jumps > max_jumps:\n        max_jumps = min_jumps\n    \n    return max_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    dp = [0] * n\n    dp[0] = 0\n\n    for i in range(1, n):\n        dp[i] = float('inf')\n\n        for j in range(i):\n            if steps[j] <= i and abs(steps[j] - i) < abs(d - steps[j]):\n                dp[i] = min(dp[i], dp[j] + 1)\n\n        dp[i] = dp[i] if dp[i] < dp[i-1] else dp[i-1]\n\n    return dp[n-1]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if the length of steps is less than or equal to zero\n    if steps <= 0:\n        return -1\n\n    # Initialize variables to store the minimum number of jumps required and the maximum distance\n    min_jumps = 0\n    max_distance = 0\n\n    # Traverse the array of steps and calculate the minimum jumps required and the maximum distance\n    for i in range(len(steps)):\n        # Calculate the maximum distance required to reach the point (d, 0)\n        max_distance = max(max_distance, abs(steps[i][0]) + abs(steps[i][1]))\n        # Calculate the minimum jumps required to reach the point (d, 0)\n        if max_distance > d:\n            min_jumps += 1\n            max_distance = 0\n\n    # Return the minimum number of jumps required\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Here's the code:"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    current_point = (0, 0)\n    count = 0\n\n    # Iterate through steps\n    for i in range(steps):\n\n        # Calculate the next point\n        next_point = (current_point[0], current_point[1] + d)\n\n        # Check if the next point is on the boundary of the plane\n        if next_point[0] < 0 or next_point[1] < 0:\n            break\n\n        # Check if the next point is the goal point\n        if next_point == (d, 0):\n            count += 1\n\n        # Update the current point\n        current_point = next_point\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    jumps = 0\n    current_position = 0\n    total_steps = 0\n    visited = [0] * (steps + 1)\n\n    # Perform bfs to find the shortest path\n    while True:\n        if current_position > steps:\n            break\n\n        if visited[current_position] == 0:\n            visited[current_position] = 1\n            total_steps += 1\n\n            if current_position == d:\n                jumps += 1\n                break\n\n            for i in range(1, 4):\n                new_position = current_position + i\n                if 0 <= new_position <= steps and visited[new_position] == 0:\n                    visited[new_position] = 2\n                    bfs.put((new_position, total_steps + 1))\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # To check if the number of jumps is possible or not\n    def is_possible(num_jumps, end_point):\n        x, y = end_point\n        if x >= 0 and x < steps and y == 0:\n            return True\n        return False\n\n    # To check if the next point (x, y) is reachable or not\n    def is_reachable(x, y):\n        if x >= 0 and x < steps:\n            return True\n        return False\n\n    # To find the minimum number of jumps required\n    def min_jumps(x, y):\n        if is_reachable(x, y):\n            return 1 + min_jumps(x + d, y)\n        else:\n            return float('inf')\n\n    # Main function to find the minimum number of jumps required\n    def min_jumps_helper(start_point):\n        x, y = start_point\n        if is_reachable(x, y):\n            return 1 + min_jumps_helper((x + d, y))\n        else:\n            return float('inf')\n\n    # Main function to check for the number of jumps required\n    def min_jumps_iter(start_point):\n        x, y = start_point\n        num_jumps = 1\n        end_point = (x + d, 0)\n        while is_possible(num_jumps, end_point):\n            x += d\n            num_jumps += 1\n        return num_jumps - 1\n\n    # Driver function to test the function\n    steps = 10\n    d = 2\n\n    print(\"Minimum number of jumps required:\", min_jumps_iter((0, 0)))"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    current_x, current_y = 0, 0\n    end_x, end_y = d, 0\n    for step in steps:\n        if current_y == end_y:\n            return jumps\n        if step > 0:\n            current_x += 1\n            jumps += 1\n        else:\n            current_y += 1\n            jumps += 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    jumps = 0\n    start = 0\n    end = 0\n    max_length = 0\n\n    while end < steps:\n        if end - start + 1 > max_length:\n            max_length = end - start + 1\n            end = start + max_length - 1\n\n        if end - start + 1 >= d:\n            jumps += 1\n            start = end + 1\n\n        end += 1\n\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists do not have the same length\")\n        return\n    \n    # Divide the two lists element wise\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n        \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have equal length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length.')\n\n    # Divide the elements of the lists elementwise\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through each element in the two lists\n    for i in range(len(nums1)):\n        # compute the quotient and append it to the result list\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have same length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have the same length\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # creating an empty list to store the numbers\n    num_list = []\n    # initializing the counter variable\n    count = 0\n    # iterating over each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, increment the counter\n        else:\n            count += 1\n        # if the counter reaches the length of the string, move the numbers to the end\n        if count == len(test_str):\n            break\n    # joining the num_list into a string and returning it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize two pointers: one for the beginning of the string and one for the end\n    i = 0\n    j = len(test_str) - 1\n    # Loop through the string until the two pointers meet\n    while i < j:\n        # If the character at the beginning of the string is a number, swap it with the character at the end\n        if test_str[i].isdigit():\n            test_str = test_str[:i] + test_str[i] + test_str[j:]\n            i += 1\n        # If the character at the end of the string is a number, swap it with the character at the beginning\n        else:\n            test_str = test_str[:j] + test_str[i] + test_str[j:]\n            j -= 1\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    \n    # Initialize two pointers to the beginning and end of the list\n    start = 0\n    end = len(char_list) - 1\n    \n    # Iterate over the list while the pointers are not at the same position\n    while start < end:\n        # Check if the character at the start pointer is a number\n        if char_list[start].isdigit():\n            # If it is, move it to the end of the list\n            char_list[start], char_list[end] = char_list[end], char_list[start]\n            # Increment the start pointer\n            start += 1\n        else:\n            # If it's not a number, decrement the end pointer\n            end -= 1\n    \n    # Convert the list of characters back into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store numbers\n    nums = []\n    # loop over each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the nums list\n        if char.isdigit():\n            nums.append(char)\n    # reverse the nums list in place to move them to the end of the string\n    nums.reverse()\n    # join the nums list into a string and return it\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    test_str = ''.join(num_list)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize an empty list to store the numbers\n    numbers = []\n    \n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, append it to the numbers list\n        if char.isdigit():\n            numbers.append(char)\n            \n    # Join the list of numbers into a single string\n    new_str = \"\".join(numbers)\n    \n    # Return the modified string\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # initialize a variable to store the number characters\n    num_chars = []\n    \n    # loop through each character in the input string\n    for char in test_str:\n        \n        # if the character is a number, add it to the list of number characters\n        if char.isdigit():\n            num_chars.append(char)\n    \n    # reverse the list of number characters\n    num_chars.reverse()\n    \n    # join the list of number characters into a string\n    num_string = ''.join(num_chars)\n    \n    # return the original string with all the number characters moved to the end\n    return test_str + num_string"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    nums = []\n    non_nums = \"\"\n    \n    # Loop through the characters of the string\n    for char in test_str:\n        # If the character is a number, add it to the list of numbers\n        if char.isdigit():\n            nums.append(char)\n        # Otherwise, add it to the list of non-numbers\n        else:\n            non_nums += char\n    \n    # Join the lists of numbers and non-numbers into a single string\n    result = \"\".join(nums) + non_nums\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store the numbers\n    num_list = []\n    # Initialize a flag to check if a number has been encountered\n    num_found = False\n\n    # Iterate through each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the list\n        if char.isdigit():\n            num_list.append(char)\n            # Set the flag to True so that we don't accidentally move another number later\n            num_found = True\n        # If we encounter a non-number character, reset the flag and move on to the next character\n        else:\n            num_found = False\n\n    # If no numbers were found, return the original string\n    if not num_found:\n        return test_str\n\n    # Move all the numbers to the end of the list\n    for i in range(len(num_list)-1, -1, -1):\n        test_str = test_str[:i] + num_list[i] + test_str[i+1:]\n\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    # Initialize variables\n    subset_size = 0\n    current_subset = set()\n    \n    # Loop through the list\n    for num in a:\n        # Check if the number is divisible by any number in the current subset\n        is_divisible = True\n        for subset_num in current_subset:\n            if num % subset_num!= 0:\n                is_divisible = False\n                break\n        # If the number is divisible, add it to the subset and update the subset size\n        if is_divisible:\n            current_subset.add(num)\n            subset_size = max(subset_size, len(current_subset))\n        # If the number is not divisible, remove the largest number from the subset and update the subset size\n        else:\n            if len(current_subset) > 0:\n                current_subset.remove(max(current_subset))\n            subset_size = max(subset_size, len(current_subset))\n    \n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    i, j = 0, len(a) - 1\n    count = 0\n    max_count = 0\n    \n    while i < j:\n        if a[i] % a[j] == 0:\n            count += 1\n            if count > max_count:\n                max_count = count\n            if count == a[j]:\n                i += 1\n            else:\n                j -= 1\n        elif a[i] < a[j]:\n            i += 1\n        else:\n            j -= 1\n            \n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers\n    a.sort()\n    \n    # Initialize variables for the largest subset and its size\n    largest_set = [a[0]]\n    size = 1\n    \n    # Loop through the list\n    for i in range(1, len(a)):\n        # If the current number is not divisible by the previous number\n        if a[i] % largest_set[-1]!= 0:\n            # Add the current number to the largest subset\n            largest_set.append(a[i])\n            # Increase the size of the largest subset\n            size += 1\n    \n    # Return the size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * n\n    max_size = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_size = max(max_size, dp[i])\n\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a = sorted(set(a)) # Remove duplicates and sort the list\n    n = len(a)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    for i in range(n - 1):\n        if a[i] % a[i + 1]!= 0:\n            return i + 1\n    return n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Remove the duplicates from the list\n    a = list(set(a))\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize two variables to keep track of the maximum subset size and the current subset size\n    max_size = 0\n    curr_size = 0\n    # Loop through the list of numbers\n    for i in range(len(a)):\n        # If the difference between the current number and the next number is even, add it to the current subset\n        if a[i] % a[i+1] == 0:\n            curr_size += 1\n        # If the current subset size is greater than the maximum subset size, update the maximum subset size\n        if curr_size > max_size:\n            max_size = curr_size\n        # If the current number is not even, the current subset size becomes 1\n        else:\n            curr_size = 1\n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers in non-decreasing order\n    a.sort()\n\n    # Initialize the maximum subset size to 1\n    max_size = 1\n\n    # Initialize variables for the current subset size and current number\n    subset_size = 1\n    current_num = a[0]\n\n    # Iterate through the list of numbers\n    for i in range(1, len(a)):\n        # Check if the current number is divisible by the current subset size\n        if a[i] % current_num == 0:\n            subset_size += 1\n        else:\n            # Update the maximum subset size if the current subset size is larger\n            if subset_size > max_size:\n                max_size = subset_size\n\n            # Reset the subset size and current number\n            subset_size = 1\n            current_num = a[i]\n\n    # Update the maximum subset size if the final current subset size is larger\n    if subset_size > max_size:\n        max_size = subset_size\n\n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted arrays\n    merged = arr1 + arr2\n\n    # Find the median\n    mid = len(merged) // 2\n    if len(merged) % 2 == 0:\n        median = (merged[mid - 1] + merged[mid]) / 2\n    else:\n        median = merged[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists and sort it\n    merged_list = sorted(arr1 + arr2)\n\n    # Find the median based on the size of the list\n    if n % 2 == 0:\n        # If the size of the list is even, take the average of middle two elements\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        # If the size of the list is odd, take the middle element\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # concatenate the two arrays\n    combined = arr1 + arr2\n\n    # sort the combined array\n    combined.sort()\n\n    # find the median\n    if n % 2 == 0:\n        median = (combined[n//2-1] + combined[n//2]) / 2\n    else:\n        median = combined[n//2]\n\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one sorted list\n    merged_list = sorted(arr1 + arr2)\n    \n    # Determine the median\n    if n % 2 == 0:\n        # If the median is even, return the average of the middle two elements\n        mid_index = n // 2\n        return (merged_list[mid_index-1] + merged_list[mid_index])/2\n    else:\n        # If the median is odd, return the middle element\n        mid_index = n // 2\n        return merged_list[mid_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    total = arr1 + arr2\n\n    # Sort the total list\n    total.sort()\n\n    # Find the middle index\n    mid = n // 2\n\n    # Check if the length of the total list is odd or even\n    if n % 2 == 0:\n        # Return the average of the two middle elements\n        return (total[mid-1] + total[mid]) / 2\n    else:\n        # Return the middle element\n        return total[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two lists\n    merged = arr1 + arr2\n\n    # Sort the merged list\n    merged.sort()\n\n    # Get the index of the median\n    mid = n // 2\n\n    # Return the median value\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2\n    else:\n        return merged[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    merged_arr = sorted(arr1 + arr2)\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2-1] + merged_arr[n//2]) / 2\n    else:\n        median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Calculate the median\n    median = sorted_list[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two arrays and sort it\n    arr = sorted(arr1 + arr2)\n\n    # Calculate the median\n    median = arr[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists\n    merged = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged)\n    \n    # Get the median index\n    median_index = len(sorted_list) // 2\n    \n    # Return the median value\n    return sorted_list[median_index]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the nth power of each number in a list.\n\n    Parameters:\n    nums: list of numbers\n    n: integer, the power to which each number should be raised\n\n    Returns:\n    result: list of n-th powers of the numbers in the input list\n    \"\"\"\n\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string == string.upper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is in uppercase or not.\n    '''\n    if string == string.upper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        result += char.upper()\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) > 1:\n        # Swap the first and last element in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # Return the modified list\n        return newList\n    else:\n        # Raise an error message if the list is empty\n        raise ValueError(\"The given list is empty.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"Error: List must have at least two elements\")\n        return\n    \n    # swap the first and last elements\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    \n    print(\"After swapping, the list is:\")\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has length 1 or less\n    if length <= 1:\n        return newList\n\n    # Swap the first and last elements\n    newList[0], newList[length - 1] = newList[length - 1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is empty\n    if len(newList) == 0:\n        return newList\n\n    # set the last index and the second last index\n    lastIndex = len(newList) - 1\n    secondLastIndex = lastIndex - 1\n\n    # check if the list has only one element\n    if lastIndex == 0:\n        newList[0], newList[lastIndex] = newList[lastIndex], newList[0]\n        return newList\n\n    # interchange the first and last elements\n    newList[0], newList[lastIndex] = newList[lastIndex], newList[0]\n\n    # interchange the second and last elements\n    newList[1], newList[secondLastIndex] = newList[secondLastIndex], newList[1]\n\n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Interchange the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return \"List should have at least two elements to swap\""
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initialize variables to store the first and last elements\n    first_element = newList[0]\n    last_element = newList[-1]\n    # use list slicing to interchange the first and last elements\n    newList = newList[1:-1] + [first_element, last_element]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"The list must have at least two elements to swap.\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Getting the length of the list\n    length = len(newList)\n\n    # Swapping the first and last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of the smallest circle that can be inscribed in the semicircle\n    area_circle = math.pi * r ** 2\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_triangle = (2 * math.pi * r) / 3\n    \n    # calculate the area of the largest triangle that can be inscribed in the whole circle\n    area_whole_circle = area_circle * (math.sqrt(3) / 4)\n    \n    # find the area of the largest triangle that can be inscribed in the whole circle\n    return max(area_triangle, area_whole_circle)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the radius of the semicircle\n    semicircle_radius = r / 2\n    # calculate the area of the largest possible triangle that can be inscribed in the semicircle\n    area = math.pi * semicircle_radius * semicircle_radius\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = math.pi * r * r\n    b = math.pi * (r ** 2)\n    c = math.pi * r * (r - 1)\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265359\n    area = 0.5 * pi * r ** 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Define the value of pi\n    pi = math.pi\n    \n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * pi * r\n    \n    # Calculate the area of a triangle given its base and height\n    def triangle_area(base, height):\n        return 0.5 * base * height\n    \n    # Calculate the area of the largest triangle that can be inscribed in the circle\n    largest_area = 0\n    for i in range(3, 6):\n        for j in range(i):\n            area = triangle_area(i, j)\n            if area > largest_area:\n                largest_area = area\n    \n    # Calculate the area of the largest triangle inscribed in the circle\n    area_inscribed = 0.5 * pi * r**2\n    \n    # Return the larger area\n    return max(largest_area, area_inscribed)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n    \n    # Use Heron's formula to calculate the area of the largest triangle\n    s = (3 * r**2) / (18)\n    area = (semi_perimeter * (s**2))**0.5\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Compute the semi-perimeter of the largest triangle that can be inscribed in the semicircle\n    semi_perimeter = 2 * math.pi * r\n\n    # Compute the area of the largest triangle that can be inscribed in the semicircle\n    area = math.sqrt(semi_perimeter * (semi_perimeter - math.sqrt(semi_perimeter * (semi_perimeter - 2 * r))) / 6)\n\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Convert radius to radians\n    r = r * (math.pi / 180)\n\n    # Calculate area of largest triangle\n    a = (3 * r ** 2) / 4\n\n    # Calculate the area of the smallest triangle\n    s = (3 * r ** 2) / (4 * math.tan(math.pi / 3))\n\n    # Calculate the area of the largest triangle\n    l = (a + s) / 2\n\n    # Calculate the area of the semicircle\n    area_semicircle = math.pi * r ** 2\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_largest_triangle = math.pi * l ** 2\n\n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    area_smallest_triangle = math.pi * s ** 2\n\n    # Calculate the ratio of the area of the largest triangle to the area of the largest triangle that can be inscribed in the semicircle\n    ratio_largest_to_largest = area_largest_triangle / area_semicircle\n\n    # Calculate the ratio of the area of the smallest triangle to the area of the largest triangle that can be inscribed in the semicircle\n    ratio_smallest_to_largest = area_smallest_triangle / area_semicircle\n\n    # Calculate the ratio of the area of the smallest triangle to the area of the smallest triangle that can be inscribed in the semicircle\n    ratio_smallest_to_smallest = area_smallest_triangle / area_smallest_triangle\n\n    # Compare the ratios to find the largest area triangle\n    if ratio_largest_to_largest > ratio_smallest_to_largest:\n        largest_area = area_largest_triangle\n    else:\n        largest_area = area_smallest_triangle\n\n    # Return the largest area triangle\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # calculate the semi-perimeter\n    sp = 2 * r\n    \n    # calculate the area of the triangle with sides of length 2r\n    area = 0.5 * r * r * sp\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    \"\"\"\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Args:\n        r (float): Radius of the semicircle.\n\n    Returns:\n        float: Area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    pi = 3.14159265358979323846  # Value of pi\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    A = 2 * pi * r\n\n    return A"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the array is empty\n    if not array:\n        return None\n\n    # Check if the array is sorted\n    for i in range(len(array) - 1):\n        if array[i] >= array[i + 1]:\n            return None\n\n    # If the array is sorted, use binary search to find the smallest missing number\n    if end is None:\n        end = max(array)\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid < len(array) and array[mid] == mid:\n            start = mid + 1\n        elif mid == len(array) or array[mid] < mid:\n            return mid\n        else:\n            end = mid - 1\n\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): The sorted list of natural numbers.\n    start (int): The start index of the array (default is 0).\n    end (int): The end index of the array (default is the length of the array - 1).\n\n    Returns:\n    int: The smallest missing number in the array.\n    \"\"\"\n\n    # Check if the array is sorted\n    if array[0] > array[-1]:\n        raise ValueError(\"The array must be sorted in ascending order.\")\n\n    # If the end index is not provided, set it to the length of the array - 1\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the current and next indexes\n    current = start\n    next = start + 1\n\n    # Iterate through the array and find the smallest missing number\n    while current <= end and next <= end:\n        if array[current] == array[next]:\n            # If the current and next numbers are equal, increment the current index and continue\n            current += 1\n            next += 1\n        elif array[current] < array[next]:\n            # If the current number is smaller than the next number, increment the current index and continue\n            current += 1\n        else:\n            # If the current number is larger than the next number, increment the next index and continue\n            next += 1\n\n    # If the loop completes, the smallest missing number is the next index\n    return next"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    The start and end parameters are optional, and if provided, they represent the range of indices within the list to be considered for finding the missing number.\n    \"\"\"\n    if not array:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n    \n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): List of natural numbers sorted in ascending order.\n        start (int, optional): The starting index of the array. Defaults to 0.\n        end (int, optional): The ending index of the array. Defaults to None.\n\n    Returns:\n        int: The smallest missing number from the given array.\n\n    Raises:\n        ValueError: If the array is not sorted in ascending order or if any element of the array is less than 1.\n    \"\"\"\n\n    # Check if the array is sorted in ascending order\n    if not all(array[i] < array[i+1] for i in range(len(array)-1)):\n        raise ValueError(\"The array must be sorted in ascending order.\")\n\n    # Check if all elements of the array are less than 1\n    if not all(x >= 1 for x in array):\n        raise ValueError(\"All elements of the array must be greater than or equal to 1.\")\n\n    # Find the missing number from the given array\n    missing_num = start\n\n    # Loop through the array and find the missing number\n    while missing_num in array:\n        missing_num += 1\n\n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i+1 not in array:\n            return i+1\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            if mid == len(array) - 1:\n                return mid + 1\n            else:\n                start = mid + 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n\n        return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    - array (list): A sorted list of natural numbers.\n    - start (int): The starting index of the search range.\n    - end (int): The ending index of the search range.\n\n    Returns:\n    - int: The smallest missing number in the array.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []  # empty list to store even numbers\n\n    for num in list: \n        if num % 2 == 0:  # check if the number is even\n            even_list.append(num)  # add the number to the even_list\n\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = []\n    if x > 0:\n        adj_list.append((x-1, y))\n    if x < 9:\n        adj_list.append((x+1, y))\n    if y > 0:\n        adj_list.append((x, y-1))\n    if y < 9:\n        adj_list.append((x, y+1))\n    adj_list.extend(sub)\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    This function takes a coordinate tuple as input and returns a list of adjacent coordinate tuples.\n    \n    Args:\n    ele: A coordinate tuple with integer values (x, y)\n    sub: A list of already visited subsets\n    \n    Returns:\n    adj: A list of adjacent coordinate tuples\n    \"\"\"\n    if sub is None:\n        sub = set()\n    x, y = ele\n    \n    adj = []\n    \n    if (x-1, y) not in sub:\n        adj.append((x-1, y))\n        sub.add((x-1, y))\n    \n    if (x+1, y) not in sub:\n        adj.append((x+1, y))\n        sub.add((x+1, y))\n    \n    if (x, y-1) not in sub:\n        adj.append((x, y-1))\n        sub.add((x, y-1))\n    \n    if (x, y+1) not in sub:\n        adj.append((x, y+1))\n        sub.add((x, y+1))\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    dx, dy = (-1, 0), (1, 0), (0, -1), (0, 1)\n    adj = []\n    for d in dx:\n        if 0 <= x+d < len(sub) and 0 <= y+d < len(sub[0]):\n            if sub[x+d][y+d]!= ele:\n                adj.append((x+d, y+d))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple):\n        for sub_ele in sub:\n            if isinstance(sub_ele, tuple):\n                if (ele[0] == sub_ele[0]) or (ele[1] == sub_ele[1]):\n                    sub.append((ele[0]+1, ele[1]))\n                    sub.append((ele[0]-1, ele[1]))\n                    sub.append((ele[0], ele[1]+1))\n                    sub.append((ele[0], ele[1]-1))\n            elif isinstance(sub_ele, int):\n                sub.append((sub_ele+1, ele[1]))\n                sub.append((sub_ele-1, ele[1]))\n                sub.append((ele[0], sub_ele+1))\n                sub.append((ele[0], sub_ele-1))\n    elif isinstance(ele, int):\n        sub.append((ele+1, ele))\n        sub.append((ele-1, ele))\n        sub.append((ele, ele+1))\n        sub.append((ele, ele-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    ele (tuple): A tuple of the coordinate to be processed.\n    sub (list, optional): A list to store the adjacent coordinates. Defaults to [].\n\n    Returns:\n    list: A list of adjacent coordinates.\n    \"\"\"\n    x, y = ele\n    adj_coords = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    for coord in adj_coords:\n        if coord not in sub:\n            sub.append(coord)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define a 8-connected neighboring pattern for a 2D array\n    pattern = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, -1), (-1, 1), (1, -1)]\n\n    # Get the row and column coordinates of the given coordinate tuple\n    r, c = ele\n\n    # Iterate over all 8 neighboring coordinates and append them to the sublist\n    for dr, dc in pattern:\n        r2, c2 = r+dr, c+dc\n        if 0 <= r2 < len(sub) and 0 <= c2 < len(sub[0]):\n            sub.append((r2, c2))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if (dx == 0 and dy == 0) or (dx!= 0 and dy!= 0):\n                new_x = x + dx\n                new_y = y + dy\n                adj_coords.append((new_x, new_y))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    adj = [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]\n    if (x,y) not in sub:\n        sub.append((x,y))\n    return adj, sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    sub.extend(adj_coords)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Convert the input coordinate tuple into a list of tuples\n    coordinates = list(ele)\n    # Create a set of all the coordinates that are adjacent to the current coordinate\n    adj_coords = set()\n    for i in range(len(coordinates)):\n        for j in range(len(coordinates)):\n            if i!= j and coordinates[i][0] == coordinates[j][0] - 1 and coordinates[i][1] == coordinates[j][1] or \\\n               i!= j and coordinates[i][0] == coordinates[j][0] + 1 and coordinates[i][1] == coordinates[j][1] or \\\n               i!= j and coordinates[i][1] == coordinates[j][1] - 1 and coordinates[i][0] == coordinates[j][0] or \\\n               i!= j and coordinates[i][1] == coordinates[j][1] + 1 and coordinates[i][0] == coordinates[j][0]:\n                adj_coords.add((coordinates[i][0], coordinates[i][1]))\n    # Return the set of adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces_list = []\n    for char in text:\n        if char =='':\n            spaces_list.append('_')\n        else:\n            spaces_list.append(char)\n    return ''.join(spaces_list)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces_replaced = text.replace(' ', '_')\n    underscores_replaced = spaces_replaced.replace('_','')\n    return underscores_replaced"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Using regular expressions to replace spaces with underscores\n    text = re.sub(r'\\s+', '_', text)\n    # Using regular expressions to replace underscores with spaces\n    text = re.sub(r'__+', '_', text)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    # Return the modified text\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert spaces to underscore\n    new_text = text.replace(\" \", \"_\")\n    # Convert underscore to spaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            i += 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    \n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index == -1:\n        return num_list\n    \n    for i in range(zero_index + 1, len(num_list)):\n        num_list[i - 1] = num_list[i]\n    \n    num_list[-1] = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list) - 1:\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    non_zero_index = []\n\n    # Find all the indices of zeroes in the list\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            zero_index.append(index)\n\n    # Find all the indices of non-zeroes in the list\n    for index in range(len(num_list)):\n        if num_list[index]!= 0:\n            non_zero_index.append(index)\n\n    # Move all the zeroes to the end of the list\n    for index in zero_index:\n        num_list[index], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[index]\n\n    # Update the non-zero indices to exclude the moved zeroes\n    for index in range(len(non_zero_index)):\n        if non_zero_index[index] > len(num_list)-1:\n            non_zero_index[index] -= 1\n\n    # Move the non-zeroes to the end of the list\n    for index in non_zero_index:\n        num_list[index], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[index]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0  # index for non-zero elements\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            i += 1  # skip zeroes\n        else:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            len(num_list) -= 1  # remove last element\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize a variable to keep track of the index of the first non-zero element\n    start_index = 0\n    # loop through the list and move all non-zero elements to their respective positions in the new list\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[start_index] = num_list[i]\n            start_index += 1\n    # remove all the remaining zeroes from the list by shifting the remaining elements to the left\n    for i in range(start_index, len(num_list)):\n        num_list[i] = 0\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR operation for two numbers \n    def xor(a, b):\n        return a ^ b\n\n    # Initialize sum variable \n    sum_xor = 0\n\n    # Iterate through all pairs of numbers \n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the two numbers and add it to the sum \n            sum_xor = xor(sum_xor, arr[i] ^ arr[j])\n\n    # Return the sum \n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as input.\n    It returns the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Initializing the sum variable to zero\n    sum = 0\n\n    # Looping through all pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Adding the XOR of the elements at indices i and j to the sum variable\n            sum += arr[i] ^ arr[j]\n\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize variables to store the xor of two consecutive numbers and the sum of xor of all pairs\n    xor = 0\n    sum_xor = 0\n    \n    # loop through the list\n    for i in range(n-1):\n        # calculate xor of the current number with the next number\n        xor = arr[i] ^ arr[i+1]\n        \n        # add the xor to the sum of xor of all pairs\n        sum_xor += xor\n    \n    # return the sum of xor of all pairs\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of numbers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    sum_xor = 0\n\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR operator to find the sum of all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a min-heap\n    hq.heapify(iterable)\n    # extract and remove the minimum element from the heap\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n\n    # Remove elements from the heap one by one and append them to the sorted list\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max-heap\n    hq.heapify(iterable)\n\n    # Sort the max-heap\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heappushpop(iterable, hq.heappop(iterable))\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    arr = list(iterable)\n    # Build a max heap from the list\n    hq.heapify(arr)\n    # Extract and return the maximum element from the heap\n    return hq.heappop(arr)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the input iterable to a list\n    lst = list(iterable)\n    \n    # Create a max heap from the list\n    hq.heapify(lst)\n    \n    # Extract items from the heap and add them to a new list in sorted order\n    while lst:\n        lst.pop()\n        hq.heappush(lst, hq.heappop(lst))\n    \n    # Return the sorted list\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min heap\n    heap = [None] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n        hq.heapify(heap, i)\n\n    # Extract and remove the elements from the min heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # convert the list to a heap\n    hq.heapify(iterable)\n\n    # extract the largest element from the heap\n    result = []\n    while hq.heappop(iterable) is not None:\n        result.append(iterable[0])\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    n = len(iterable)\n    # Build max heap\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    # Extract elements from heap\n    for i in range(n - 1, 0, -1):\n        hq.heappop(iterable)\n        # Shift heap to maintain max heap property\n        hq.heapify(iterable, 0, i)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    heapq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Build max heap\n    hq.heapify(iterable)\n\n    # Extract elements from heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return \"No profit or no loss\"\n    else:\n        return \"Profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss.\n\n    :param actual_cost: The actual cost of the items sold.\n    :param sale_amount: The amount of items sold.\n    :return: A boolean indicating whether the given amount has no profit and no loss.\n    \"\"\"\n\n    if sale_amount == actual_cost:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    \n    if profit <= 0 and loss <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        profit_loss = actual_cost - sale_amount\n        if profit_loss >= 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount < actual_cost:\n        return \"No profit and no loss\"\n    elif sale_amount == actual_cost:\n        return \"Profitable and no loss\"\n    else:\n        return \"No profit and loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit is greater than or equal to loss\n    if profit >= loss:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Kelvin\n    temp_kelvin = math.ceil(273.15 + t * 1.8)\n\n    # Calculate the wind chill index\n    wci = math.floor(13.12 + 0.6215 * temp_kelvin - 11.37 * math.log(v) + 0.3965 * temp_kelvin ** 2 - 5.38 * temp_kelvin ** 3 + 0.14 * temp_kelvin ** 4)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert temperature to Kelvin\n    t = t + 273.15\n    \n    # Calculate the heat capacity ratio\n    Cp = 1005 # J/kg/K\n    H = 0.0065 # J/kg\n    a = 17.27 # J/kg/K^2\n    b = 237.3 # J/kg/K^2\n    Cv = a * Cp * math.exp(b/Cp)\n    \n    # Calculate the specific heat ratio\n    R = 0.72 # J/kg/K\n    Pr = 0.622 # J/kg/K\n    Tref = 273.15 # K\n    Ru = math.exp((Tref - t) / (Tref - Pr))\n    Rv = math.exp((Pr - t) / (Tref - Pr))\n    R_pr = (1 + Ru) * (1 + Rv) / 2\n    \n    # Calculate the wind chill index\n    Rv = R / R_pr\n    Rv = Rv * (23.1 * v * math.sqrt(v) + 0.0062 * t * math.sqrt(v) * (1 + 0.00001 * t))\n    Rv = Rv / 100\n    \n    # Round the wind chill index to the next integer\n    wci = round(Rv)\n    \n    # Return the wind chill index\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wind_chill_temp = 13.12 + (0.6215*t) - (11.37*math.exp(-0.14*t)) + (0.3965*math.exp(-0.07*t))\n    # Calculate the air temperature at the same height as the wind chill temperature\n    air_temp = 0.5 * (t + wind_chill_temp)\n    # Calculate the dew point temperature\n    dew_point = 243.04 * (1 - (0.0065 * air_temp))\n    # Calculate the wind chill index\n    wind_chill_index = (wind_chill_temp - dew_point) / 1.8\n    # Round the wind chill index to the nearest integer\n    wind_chill_rounded = round(wind_chill_index)\n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the dew point temperature using the formula: T = T0 + (T1 - T0) * e^(-(z/k)^(1/k))\n    # where T0 is the absolute zero temperature and T1 is the temperature at sea level\n    T0 = 0 # degrees Celsius\n    T1 = 10 # degrees Celsius\n    z = 0.01 # scale factor\n    k = 3 # constant\n    \n    # Calculate the dew point temperature\n    T = T0 + (T1 - T0) * math.exp(-(z/k)**(1/k))\n    \n    # Calculate the wind chill index using the formula: W = 35.74 + 0.6215 * T - 35.75 * T**2 + 0.4275 * T**3\n    W = 35.74 + 0.6215 * T - 35.75 * T**2 + 0.4275 * T**3\n    \n    # Calculate the wind chill index rounded to the nearest integer\n    wc = int(math.ceil(W))\n    \n    # Return the wind chill index\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t >= 0:\n        t = t - 273.15\n        v = v * 1.609344\n    else:\n        t = t - 459.67\n        v = v * 1.15078\n\n    if v < 0.3:\n        return math.floor(0)\n    elif v >= 0.3 and v < 0.9:\n        return math.floor(3.5 + (0.6215 * v) - (35.75 * math.exp((t - 68.1) * 17.27 / t)))\n    elif v >= 0.9 and v < 1.5:\n        return math.floor(3.5 + (0.6215 * v) - (35.75 * math.exp((t - 68.1) * 17.27 / t)))\n    elif v >= 1.5 and v < 2.1:\n        return math.floor(13.12 + (0.4275 * v) - (237.7 * math.exp((t - 68.1) * 17.27 / t)))\n    else:\n        return math.floor(5.83 + (0.1469 * v) - (32.73 * math.exp((t - 68.1) * 17.27 / t)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    if t < -5:\n        return -1\n    \n    elif t < 0:\n        return 1\n    \n    elif t < 16:\n        return int(round((0.0621 * t + 11.34) * (1 + 0.0421 * (v ** 0.16))))\n    \n    elif t < 32:\n        return int(round((0.0621 * t + 8.12) * (1 + 0.0168 * (v ** 0.16))))\n    \n    elif t < 48:\n        return int(round((0.0621 * t + 5.87) * (1 + 0.013) * math.exp(-0.0013 * v)))\n    \n    else:\n        return int(round((0.0621 * t + 3.2) * (1 + 0.0058 * (v ** 0.16))))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * (t + 273.15) - 0.14 * v**0.16\n    return int(c)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (100 - 1.5 * t) / (1.5 - 0.57 * math.exp((t - 40) * 2.5 / 16))\n    k = 25.0 * math.log(c) - 35.75\n    if v <= 10:\n        wci = 15\n    elif v <= 30:\n        wci = k + 5\n    else:\n        wci = k + 10\n    return math.ceil(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return None\n    else:\n        c = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 2) + 0.3965 * math.pow(v, 2) - 0.0168 * math.pow(v, 3)\n        return round(c)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert temperature from celsius to fahrenheit\n    f_t = (t * 9/5) + 32\n    \n    # Calculate the wind chill temperature using the formula:\n    # WC = 4\u00b0C (f_t - 14.39) / (f_t - 37.78) * v^0.16\n    \n    wc = (4 - 14.39) / (f_t - 37.78) * (v**0.16)\n    \n    # Convert the wind chill temperature to a rounded integer\n    wc_int = math.floor(wc)\n    \n    return wc_int"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum to zero\n    total_length = 0\n    # Iterate over each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it\n            continue\n        # Otherwise, add its length to the total length\n        total_length += len(name)\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the total length of names to zero\n    total_length = 0\n    \n    # Iterate over each name in the list\n    for name in sample_names:\n        # Remove the first character (which should be a letter) and check if it's lowercase\n        if name[0].isupper():\n            # If it's not lowercase, add its length to the total length\n            total_length += len(name)\n    \n    # Return the total length of names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_without_lowercase = [name for name in sample_names if name[0].isupper()]\n    total_length = sum([len(name) for name in names_without_lowercase])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # initialize a variable to store the sum of names' lengths\n    total_length = 0\n\n    # loop through each name in the list\n    for name in sample_names:\n\n        # remove the lowercase letters from the name using a regular expression\n        name = re.sub(r'[^a-zA-Z]', '', name)\n\n        # add the length of the name to the total\n        total_length += len(name)\n\n    # return the sum of names' lengths\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r'\\([^)]*\\)')\n    items_list = re.findall(pattern, items)\n    for item in items_list:\n        items = items.replace(item, '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'  # match any parenthesis\n    result = re.sub(pattern, '', items)  # remove the parenthesis using regular expression\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]+\\)') # define the pattern to match the parenthesis\n    result = pattern.sub('', items) # remove the parenthesis and what's inbetween them\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = re.sub(r'\\([^)]*\\)', '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)') # matches any parenthesis\n    result = pattern.sub('', items) # removes the parenthesis\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*)\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\(.*?\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)' # regular expression pattern to match any parenthesis\n    items = re.sub(pattern, '', items) # remove all parenthesis from the string\n    return items # return the modified string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(([^)]*)\\)'\n    return re.sub(pattern, r'\\1', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n * (n + 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    This function will find the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers\n    a = 1\n    b = 1\n\n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Compute the next nonagonal number\n        c = a + b\n        # Update the values of a and b\n        a = b\n        b = c\n    \n    # Return the final nonagonal number\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n and returns True if n is a nonagonal number, False otherwise.\n    A nonagonal number is defined as the sum of the squares of its adjacent sides, where an adjacent side is defined as the number directly above or below it in the triangle.\n    '''\n    sides = 1\n    total_sides = 1\n    while total_sides < n:\n        sides += 1\n        total_sides += sides\n        sides += 1\n    return total_sides == n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n and returns True if the nth nonagonal number exists and False otherwise.\n\n    A nonagonal number is a number that is not a multiple of 2. \n    For example, the first nonagonal number is 3, the second nonagonal number is 5, the third nonagonal number is 15, and so on.\n    \"\"\"\n    if n == 1 or n == 2:\n        return True\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                return False\n        return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return (is_nonagonal(n-1)**2) + (is_nonagonal(n-2)**2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            print(i, end=' ')\n        else:\n            print((2 * i) - 1, end=' ')\n\nn = int(input(\"Enter the value of n: \"))\nif is_nonagonal(n):\n    print(\"The nth nonagonal number is\", n)\nelse:\n    print(\"The nth nonagonal number is not found.\")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 4 * n * (n + 1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize a variable to keep track of the number of rows\n    num_rows = 1\n\n    # Calculate the number of rows needed to reach the nth nonagonal number\n    while num_rows ** 2 < n:\n        num_rows += 1\n\n    # Initialize a variable to keep track of the nonagonal number\n    nonagonal_num = 0\n\n    # Loop through each row of the matrix, starting with the top row\n    for row in range(1, num_rows + 1):\n        # Calculate the number of nonagonal numbers in this row\n        num_nonagons = (num_rows - row) // 2\n\n        # Add up the nonagonal numbers in this row\n        nonagonal_num += num_nonagons\n\n        # Check if the total number of nonagonal numbers reached the nth nonagonal number\n        if nonagonal_num == n:\n            return num_rows * row // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # First, find the number of squares in a triangle of side n\n    squares = n * (n + 1) // 2\n    # Next, find the number of rows in the triangle\n    rows = (2 * squares + 1) // 2\n    # Finally, return the nth nonagonal number\n    return rows * (rows + 1) // 2 - (2 * rows - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 2\n    for i in range(n-1):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz_pattern = r'\\b[zZ]\\w*\\b' # matches 'z' followed by any non-word character\n    matches = re.findall(wordz_pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b[zZ]\\w+\\b')\n    match = pattern.search(text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return text[start:end].lower()\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(?<![a-zA-Z])z(?![a-zA-Z])')\n    result = pattern.search(text)\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z' except at the start and end of a word.\n    '''\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern to match 'z' at the start and end of a word\n    pattern = r'\\b[zZ]\\b'\n    # Use the re.search() function to search for the pattern in the input string\n    match = re.search(pattern, text)\n    # If the pattern is found, return True. Otherwise, return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w+\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define regex pattern to match words with 'z' at the middle\n    pattern = r'\\b\\w*[z]\\w*\\b'\n\n    # Check if the pattern matches any word in the string\n    result = re.search(pattern, text)\n\n    # If pattern matches, return True\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*\\b\\1)[a-zA-Z]*z(?!.*\\b\\1)[a-zA-Z]*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # reverse the entire array\n    input.reverse() \n    # reverse the elements upto the given position\n    for i in range(k-1, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Finding the length of the array\n    length = len(input)\n    \n    # Finding the starting position of the array to be reversed\n    start = 0\n    \n    # Finding the ending position of the array to be reversed\n    end = k\n    \n    # Initializing the temporary variable for swapping elements\n    temp = None\n    \n    # Looping through the array and swapping elements\n    while start < end:\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        \n        start += 1\n        end -= 1\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the input array up to position k-1\n    for i in range(k-1, len(input)-1, -1):\n        # swap the elements at i and i+1\n        input[i], input[i+1] = input[i+1], input[i]\n    # reverse the input array from k to the end\n    for i in range(k, len(input)-1):\n        # swap the elements at i and i+1\n        input[i], input[i+1] = input[i+1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reversing the array from 0 to k-1\n    for i in range(k):\n        input[0], input[i] = input[i], input[0]\n    # Reversing the array from k to n-1\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input) or k < 1:\n        return \"Invalid input: k should be a positive integer less than or equal to the length of the input array.\"\n    else:\n        start = 0\n        end = k - 1\n        while start < end:\n            input[start], input[end] = input[end], input[start]\n            start += 1\n            end -= 1\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from start to k-1\n    input[:k-1] = input[:k-1][::-1]\n    # reverse the array from k to end\n    input[k-1:] = input[k-1:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k and reverses the array upto the given position.\n    \"\"\"\n    for i in range(k):\n        temp = input[i]\n        input[i] = input[len(input)-1-i]\n        input[len(input)-1-i] = temp"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = []\n\n    for i in range(k):\n        reverse.append(input[i])\n\n    for i in range(k, len(input)):\n        reverse.append(input[i])\n\n    reverse.reverse()\n\n    for i in range(len(reverse)):\n        input[i] = reverse[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n):\n        if i <= k:\n            input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Add a dictionary to a tuple.\n    \n    :param test_tup: a tuple to which a dictionary will be added\n    :type test_tup: tuple\n    :param test_dict: a dictionary to be added to the tuple\n    :type test_dict: dictionary\n    :return: a tuple with the added dictionary\n    :rtype: tuple\n    \"\"\"\n    # convert the dictionary to a list of tuples\n    dict_list = [(key, val) for key, val in test_dict.items()]\n    # concatenate the dictionary list with the tuple\n    return test_tup + dict_list"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup.update(test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_dict['new_key'] = 'new_value'\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = tuple(test_tup)  # convert the tuple to list\n        test_tup.append(value)  # append the value to the list\n        test_tup = tuple(test_tup)  # convert the list back to tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    dict_list = list(test_dict.items())\n    # Merge the list with the tuple\n    merged_list = [*test_tup, *dict_list]\n    # Convert the merged list back to a tuple\n    new_tup = tuple(merged_list)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = dict(test_dict)\n    new_tup = tuple(test_tup)\n    new_tup += (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    test_list = test_dict.items()\n    # Add the list of tuples to the tuple\n    new_tup = (test_tup, *test_list)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Function to calculate the average of a path\n    def calculate_average(path):\n        total_cost = 0\n        num_cells = 0\n        for i in range(len(path)-1):\n            total_cost += cost[path[i]][path[i+1]]\n            num_cells += 1\n        return total_cost/num_cells\n\n    # Initialize variables for storing the maximum average and its corresponding path\n    max_avg = 0\n    max_path = []\n\n    # Iterate through all possible paths from top-left to bottom right\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if we can reach bottom right cell from current position\n            if i == len(cost)-1 and j == len(cost[i])-1:\n                # If we can reach bottom right cell, check if the average is greater than the maximum average so far\n                if calculate_average([0,i,j,len(cost)-1,len(cost[i])-1]) > max_avg:\n                    max_avg = calculate_average([0,i,j,len(cost)-1,len(cost[i])-1])\n                    max_path = [0,i,j,len(cost)-1,len(cost[i])-1]\n            # Check if we can move right from current position\n            elif j == len(cost[i])-1:\n                # If we can move right, check if the average is greater than the maximum average so far\n                if calculate_average([0,i,j,i+1,len(cost[i])-1]) > max_avg:\n                    max_avg = calculate_average([0,i,j,i+1,len(cost[i])-1])\n                    max_path = [0,i,j,i+1,len(cost[i])-1]\n            # Check if we can move down from current position\n            elif i == len(cost)-1:\n                # If we can move down, check if the average is greater than the maximum average so far\n                if calculate_average([0,i,j,i,j+1]) > max_avg:\n                    max_avg = calculate_average([0,i,j,i,j+1])\n                    max_path = [0,i,j,i,j+1]\n            # If we can move both right and down, check if the average is greater than the maximum average so far\n            elif calculate_average([0,i,j,i,j+1]) > max_avg:\n                max_avg = calculate_average([0,i,j,i,j+1])\n                max_path = [0,i,j,i,j+1]\n\n    # Return the maximum average of all paths\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    max_avg = 0\n    total_cost = 0\n    visited_cells = 0\n    row = len(cost) - 1\n    col = len(cost[0]) - 1\n    \n    # function to check if the current cell is part of the path\n    def is_path_cell(i, j):\n        return (i == 0 and j == 0) or (i == 0 and j == col) or (i == row and j == col)\n    \n    # function to compute the total cost of the path\n    def compute_total_cost(i, j):\n        return cost[i][j] + (cost[i][j+1] if j < col-1 else 0) + (cost[i+1][j] if i < row-1 else 0) + (cost[i+1][j+1] if i < row-1 and j < col-1 else 0)\n    \n    # function to find the maximum average of the current path\n    def find_max_avg(i, j):\n        if not is_path_cell(i, j):\n            return 0\n        \n        # update the total cost and visited cells\n        total_cost += compute_total_cost(i, j)\n        visited_cells += 1\n        \n        # check if we have reached the bottom-right cell\n        if i == row and j == col:\n            return total_cost / visited_cells\n        \n        # check if we can move down\n        if i < row:\n            max_avg_down = find_max_avg(i+1, j)\n            if max_avg_down > max_avg:\n                max_avg = max_avg_down\n        \n        # check if we can move right\n        if j < col:\n            max_avg_right = find_max_avg(i, j+1)\n            if max_avg_right > max_avg:\n                max_avg = max_avg_right\n        \n        # check if we can move up-right\n        if i < row and j < col:\n            max_avg_up_right = find_max_avg(i+1, j+1)\n            if max_avg_up_right > max_avg:\n                max_avg = max_avg_up_right\n        \n        # check if we can move up\n        if i < row:\n            max_avg_up = find_max_avg(i+1, j)\n            if max_avg_up > max_avg:\n                max_avg = max_avg_up\n        \n        # check if we can move down-right\n        if i < row and j < col:\n            max_avg_down_right = find_max_avg(i+1, j+1)\n            if max_avg_down_right > max_avg:\n                max_avg = max_avg_down_right\n        \n        # check if we can move down\n        if i < row:\n            max_avg_down = find_max_avg(i+1, j)\n            if max_avg_down > max_avg:\n                max_avg = max_avg_down\n        \n        # check if we can move up-left\n        if i < row and j > 0:\n            max_avg_up_left = find_max_avg(i+1, j-1)\n            if max_avg_up_left > max_avg:\n                max_avg = max_avg_up_left\n        \n        # check if we can move left\n        if j > 0:\n            max_avg_left = find_max_avg(i, j-1)\n            if max_avg_left > max_avg:\n                max_avg = max_avg_left\n        \n        # check if we can move up-right\n        if i < row and j > 0:\n            max_avg_up_right = find_max_avg(i+1, j-1)\n            if max_avg_up_right > max_avg:\n                max_avg = max_avg_up_right\n        \n        # check if we can move right\n        if j > 0:\n            max_avg_right = find_max_avg(i, j-1)\n            if max_avg_right > max"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n    Args:\n        cost: A list of lists representing the cost of each cell in the matrix.\n\n    Returns:\n        The maximum average of all existing paths.\n    \"\"\"\n\n    def dfs(start, end, current_cost, current_length):\n        if start == end:\n            return current_cost / current_length\n        cost_left = current_cost + cost[start][end]\n        cost_right = current_cost + cost[end][start]\n        max_cost = max(cost_left, cost_right)\n        return max(max_cost, dfs(start, end - 1, current_cost, current_length + 1), dfs(start + 1, end, current_cost, current_length + 1))\n\n    n = len(cost)\n    max_avg = float('-inf')\n    for start in range(n):\n        for end in range(n):\n            if start == end:\n                max_avg = max(max_avg, dfs(start, end, 0, 0))\n            else:\n                max_avg = max(max_avg, dfs(start, end, 0, 0))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    max_avg = 0\n    max_path = None\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                # The start of the path\n                if cost[i][j] > 0:\n                    max_avg = cost[i][j]\n                    max_path = [(i, j)]\n            elif i == N-1 and j == N-1:\n                # The end of the path\n                if cost[i][j] > 0:\n                    max_avg = max(max_avg, cost[i][j])\n                    max_path.append((i, j))\n            elif cost[i][j] > 0:\n                # The middle of the path\n                path = max_path + [(i, j)]\n                path_avg = sum(cost[x][y] for x, y in path) / len(path)\n                max_avg = max(max_avg, path_avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    \n    # Define variables\n    N = len(cost)\n    max_avg = float('-inf')\n    max_path = None\n    \n    # Iterate over all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if cell is not traversed before\n            if cost[i][j] == float('-inf'):\n                # Set current cell cost as infinity\n                cost[i][j] = float('inf')\n                \n                # Initialize variables for current path\n                path_cost = 0\n                path_cells = 0\n                \n                # Recursively compute the maximum path\n                def recursive_max_path(i, j, path_cost, path_cells):\n                    # If we reach bottom right cell, update max average and return\n                    if i == N-1 and j == N-1:\n                        nonlocal max_avg\n                        nonlocal max_path\n                        if path_cost > max_avg:\n                            max_avg = path_cost\n                            max_path = [i, j]\n                        return path_cost\n                    \n                    # Move right or down\n                    if i < N-1:\n                        next_i = i + 1\n                        next_j = j\n                    elif j < N-1:\n                        next_i = i\n                        next_j = j + 1\n                    else:\n                        return 0\n                    \n                    # Add cost of moving to current cell and recursively compute next path\n                    cost[i][j] = cost[i][j] + recursive_max_path(next_i, next_j, path_cost + cost[next_i][next_j], path_cells + 1)\n                    return cost[i][j]\n                \n                # Compute maximum path and update max average\n                max_avg = max(max_avg, recursive_max_path(i, j, path_cost, path_cells))\n                \n                # Unset current cell cost to zero\n                cost[i][j] = float('-inf')\n                \n    # Return maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = float('-inf')\n    max_path = []\n\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                avg = path_cost / (i+1)\n                max_avg = max(max_avg, avg)\n                max_path = path\n            else:\n                path_cost_right = path_cost+cost[i][j]\n                path_cost_down = path_cost+cost[i][j]\n                max_avg_right = maxAverageOfPath(cost, i+1, j, path+[(i,j)], path_cost_right)\n                max_avg_down = maxAverageOfPath(cost, i, j+1, path+[(i,j)], path_cost_down)\n                max_avg = max(max_avg, max_avg_right, max_avg_down)\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    total_cost = 0\n    total_cells = 0\n    visited = set()\n    max_avg = float('-inf')\n    path = []\n    \n    def dfs(i, j, cost, path):\n        if (i, j) == (N-1, N-1):\n            total_cost += cost\n            total_cells += 1\n            visited.add((i, j))\n            if total_cells == N*N:\n                avg = total_cost/total_cells\n                if avg > max_avg:\n                    max_avg = avg\n                    path = path[:]\n            return\n        \n        dfs(i+1, j, cost+cost[i][j], path+[(i, j)])\n        dfs(i, j+1, cost+cost[i][j], path+[(i, j)])\n        \n    dfs(0, 0, cost[0][0], [(0, 0)])\n    \n    return max_avg, path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == N - 1 and j == N - 1:\n                continue\n            if cost[i][j] == 0:\n                continue\n            \n            # Calculate the cost of the path with current cell\n            path_cost = cost[i][j]\n            \n            # Calculate the cost of the path with previous cell\n            prev_cost = 0\n            if i > 0:\n                prev_cost += cost[i-1][j]\n            if j > 0:\n                prev_cost += cost[i][j-1]\n            \n            # Calculate the total cost of the path\n            total_cost = path_cost + prev_cost\n            \n            # Calculate the average of the path\n            avg_cost = total_cost / (i+1 + j+1)\n            \n            # Update the maximum average\n            max_avg = max(max_avg, avg_cost)\n            \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    # Initialize max_path and max_avg\n    max_path = [[0 for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n\n    # Iterate through all possible starting positions\n    for i in range(N):\n        for j in range(N):\n            # If current position is not a wall\n            if cost[i][j]!= 0:\n                # Initialize current_path and current_avg\n                current_path = [[0 for k in range(N)] for l in range(N)]\n                current_avg = 0\n\n                # Add current position to current_path\n                current_path[i][j] = 1\n                current_avg += cost[i][j]\n\n                # Check if we can move down\n                if i < N-1:\n                    current_avg += cost[i+1][j]\n                    current_path[i+1][j] = 1\n\n                # Check if we can move right\n                if j < N-1:\n                    current_avg += cost[i][j+1]\n                    current_path[i][j+1] = 1\n\n                # Check if current_avg is greater than max_avg\n                if current_avg > max_avg:\n                    max_path = current_path\n                    max_avg = current_avg\n\n    # Calculate the average of max_path\n    avg = 0\n    for i in range(N):\n        for j in range(N):\n            if max_path[i][j] == 1:\n                avg += cost[i][j]\n\n    avg /= (N*N)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = 0\n    max_path = []\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[i][i] = cost[i][i]\n        max_avg = max(max_avg, dp[i][0] + dp[i][i])\n    for i in range(N-2, -1, -1):\n        for j in range(i+1, N):\n            if j == i+1:\n                dp[i][j] = dp[i+1][j-1] + cost[i][j]\n                max_avg = max(max_avg, dp[i][j])\n            elif j == N-1:\n                dp[i][j] = dp[i+1][j] + cost[i][j]\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + cost[i][j]\n                max_avg = max(max_avg, dp[i][j])\n    max_avg = max_avg / (N*N)\n    return max_avg, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Iterate over the dictionary and filter students based on the given height and weight\n    filtered_students = {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n    \n    # Return the filtered students dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], x) for x in nums2):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to store the indices of the same elements\n    same_indices = {}\n    # Loop through the lists\n    for i in range(len(nums1)):\n        # If the elements are the same, add the index to the dictionary\n        if eq(nums1[i], nums2[i]):\n            if nums1[i] in same_indices:\n                same_indices[nums1[i]].append(i)\n            else:\n                same_indices[nums1[i]] = [i]\n    # Count the number of indices with the same elements\n    count = 0\n    for indices in same_indices.values():\n        count += len(indices)\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    # loop over the indices of the two lists\n    count = 0\n    for i in range(len(nums1)):\n        # check if the elements at the current indices of both lists are equal\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate until the power is 0\n    while power > 0:\n        # Get the last digit of the base\n        digit = base % 10\n        # Add the digit to the sum\n        sum += digit\n        # Remove the last digit of the base\n        base //= 10\n        # Decrement the power\n        power -= 1\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # calculate the sum of digits of the base to the specified power\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        total += base % 10\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    # initialize the sum to 0\n    sum_digits = 0\n    \n    # convert the base to a string\n    base_str = str(base)\n    \n    # iterate over the digits of the base string and add them up to the sum\n    for digit in base_str:\n        sum_digits += int(digit)\n        \n    # calculate the sum to the specified power\n    result = sum_digits ** power\n    \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum variable to zero\n    total = 0\n    # loop through each digit of the base\n    for digit in str(base):\n        # calculate the current power of the digit\n        digit_power = power ** int(digit)\n        # add the current digit to the sum\n        total += digit_power\n    # return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        remainder = base % 10\n        result += remainder ** power\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum to 0\n    sum_of_digits = 0\n\n    # Convert the base to a string and iterate through each character\n    for digit in str(base):\n        # Convert the character to an integer and add it to the sum\n        sum_of_digits += int(digit) ** power\n\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize a variable to hold the sum of digits\n    sum_digits = 0\n    # Loop through each digit of the base string and add it to the sum\n    for digit in base_str:\n        sum_digits += int(digit)\n    # Calculate the sum of digits raised to the power and return the result\n    return sum_digits ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can easily access its digits\n    base_str = str(base)\n    # Initialize the sum of digits to 0\n    digit_sum = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the digit_sum\n        digit_sum += int(digit) ** power\n    # Return the sum of digits raised to the specified power\n    return digit_sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define the pattern to match the quotation marks\n    pattern = re.compile(r'(?<!\\\\)\"(.+?)\"|\\'(.+?)\\'')\n    # Find all the matches using the pattern\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the extracted values\n    extracted_values = []\n    # Loop through the matches and extract the values\n    for match in matches:\n        if len(match) == 2:\n            extracted_values.append(match[1])\n        else:\n            extracted_values.append(match[0])\n    # Return the extracted values\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile('\".*?\"')\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regex to find values between quotation marks \" \"\n    pattern = r'(?<=\\s)\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\\s)\"(.*?)\"(?=\\s)' # match strings between double quotes\n    matches = re.findall(pattern, text) # find all occurrences of the pattern in the text\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and returns a list of values between quotation marks \" \" of the string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # Use the re.findall() function to find all occurrences of the pattern in the input string\n    matches = re.findall(pattern, text)\n    \n    # Convert the matches list to a set to remove duplicates\n    unique_matches = set(matches)\n    \n    # Convert the set back to a list and return it\n    return list(unique_matches)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"((?:(?!\\\\)\"|[^\"])*)\"'\n    match = re.findall(pattern, text1)\n    return match\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all the matches of quotation marks \" \" in the string\n    matches = re.findall(r'\".*?\"', text1)\n    # Remove any extra whitespace and quotes from each match\n    extracted_values = [match.strip('\"') for match in matches]\n    return extracted_values"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0],) * N\n    for i in range(N):\n        result_tup = result_tup + (test_tup[i+1] * test_tup[i],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize the result tuple with the first element of the input tuple\n    result_tup = (test_tup[0],)\n    \n    # Loop through the input tuple and multiply each element with the next element in the tuple\n    for i in range(1, len(test_tup)):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result = result + (test_tup[i] * test_tup[i+1],)\n    return result + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Get the length of the tuple\n    N = len(test_tup)\n    \n    # Create an empty list to store the multiplied elements\n    multiplied_list = []\n    \n    # Loop through the tuple\n    for i in range(N):\n        # Multiply the current element with the next element\n        multiplied_list.append(test_tup[i] * test_tup[i+1])\n    \n    # Return the multiplied tuple\n    return tuple(multiplied_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty list to store the results\n    result_list = []\n    # Loop through each element of the tuple\n    for i in range(len(test_tup)):\n        # Multiply the current element with the next element\n        result = test_tup[i] * test_tup[i+1]\n        # Append the result to the result list\n        result_list.append(result)\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize a list to store the multiplication results\n    mul_results = []\n    \n    # Loop through the tuple and multiply each element with the next element\n    for i in range(len(test_tup)-1):\n        mul_results.append(test_tup[i] * test_tup[i+1])\n    \n    # Add the last element of the tuple to the multiplication results list\n    mul_results.append(test_tup[-1])\n    \n    # Return the multiplication results as a tuple\n    return tuple(mul_results)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Extract the length of the input tuple\n    N = len(test_tup)\n    # Create an empty list to store the output tuple\n    result_tup = []\n    # Loop through the input tuple and multiply each element with the next element\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    new_tup = [0]*N\n    for i in range(N):\n        new_tup[i] = test_tup[i] * test_tup[i+1]\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_length = len(test_tup)\n    result_tup = ()\n    for i in range(t_length):\n        if i < t_length-1:\n            result_tup += (test_tup[i] * test_tup[i+1],)\n        else:\n            result_tup += (test_tup[i] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # concatenate the two lists\n    lst3 = lst1 + lst2\n    # return the sum of the two concatenated lists\n    return lst3"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def consecutive_duplicates(nums):\n    for key, group in groupby(sorted(nums)):\n        if key!= group.first():\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the groupby() function from itertools to group the list by their consecutive duplicates\n    grouped = groupby(enumerate(nums), lambda x: x[0] - x[1] == 1)\n    # Convert the grouped iterator into a list\n    result = list(grouped)\n    # Remove any groups that have only one element in them\n    result = [group for group in result if len(group) > 1]\n    # Convert the result into a list of lists\n    result = [list(group) for group in result]\n    # Flatten the list of lists to get the final result\n    result = [item for sublist in result for item in sublist]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a dictionary to store the indices of consecutive duplicates\n    consecutive_dict = {}\n    # Loop through the list and count consecutive duplicates\n    for i in range(len(nums)):\n        if i in consecutive_dict:\n            consecutive_dict[i] += 1\n        else:\n            consecutive_dict[i] = 1\n    # Loop through the list again and remove consecutive duplicates\n    new_nums = []\n    for num in nums:\n        if consecutive_dict[nums.index(num)] > 1:\n            consecutive_dict[nums.index(num)] -= 1\n        else:\n            new_nums.append(num)\n    # Return the new list of unique numbers\n    return new_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    for key, group in groupby(enumerate(nums)):\n        if key == len(nums) - 1 or group[1][1]!= group[2][1]:\n            yield from group[1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for _, group in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # use groupby to group consecutive duplicates together\n    consecutive_groups = groupby(nums)\n    # convert the groups into a list and remove duplicates\n    return list(set(list(consecutive_groups)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(sorted(nums)):\n        if k == len(nums) - 1 or k + 1!= len(nums) and nums[k+1]!= nums[k]:\n            result.extend(list(g))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(sorted(nums)) if len(list(group)) == 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(groupby(nums))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    # Formula to find the lateral surface area of a cone\n    surface_area = math.pi * r * r + 2 * math.pi * r * h + math.pi * r * r * (h / 2)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the lateral surface area using Heron's formula\n    s = math.sqrt(3) * r * h / 2\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the base\n    base_area = math.pi * r**2\n    \n    # Calculate the area of the cone\n    cone_area = 1/3 * math.pi * r**2 * h\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = base_area + cone_area\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone using the formula\n    # S = (1/2) * r^2 * h\n    S = 0.5*r**2*h\n    return S"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * r + math.pi * r * h + math.pi * h * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r\"[,\\.]\", \":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]|[-\\s,\\.]', '', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(\\s|\\.|,)'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any of the special characters\n    pattern = re.compile(r'[,.]')\n    \n    # Replace all occurrences of the special characters with a colon\n    text = pattern.sub(':', text)\n    \n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # define regular expression pattern to match spaces, commas, and dots\n    pattern = r'[\\s,\\.]+'\n    \n    # replace all matches with a colon\n    text = re.sub(pattern, ':', text)\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[^a-zA-Z0-9 ]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = [' ', ',', '.']\n    pattern = '|'.join(re.escape(char) for char in special_chars)\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize an index variable to -1 to indicate that the number is not present in the array\n    index = -1\n\n    # Initialize a flag variable to True\n    flag = True\n\n    # Traverse through the array using a for loop\n    for i in range(len(A)):\n        # If the current element is equal to the search number, set the flag to False and break out of the loop\n        if A[i] == x:\n            flag = False\n            break\n\n    # If the flag is still True, it means that the number is not present in the array\n    if flag:\n        return -1\n    else:\n        # Return the index of the first occurrence of the number in the array\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    -----------\n    A : list of int\n        A sorted array of integers.\n    x : int\n        The number to search for.\n\n    Returns:\n    --------\n    int\n        The index of the first occurrence of x in A or -1 if x is not found in A.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low, high = 0, len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low if A[low-1] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): A sorted array.\n    x (int): A number to be searched in the array.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not found.\n\n    \"\"\"\n\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if A[left] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i < len(A) and A[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the first index where A[i] is greater than x\n    first_greater_index = bisect_left(A, x)\n    \n    # If x is not in A, the index of the first occurrence of x will be first_greater_index\n    if first_greater_index == len(A) or A[first_greater_index]!= x:\n        return -1\n    \n    # Otherwise, find the index of the first occurrence of x in A[first_greater_index:]\n    for i in range(first_greater_index, len(A)):\n        if A[i] == x:\n            return i\n    \n    # If no occurrence of x is found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize a variable to store the index of the first occurrence of x\n    first_occurrence_index = -1\n    \n    # Traverse the array from left to right\n    for i in range(len(A)):\n        # If the current element is equal to x, update the first occurrence index\n        if A[i] == x:\n            first_occurrence_index = i\n            break\n    \n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # loop through the array and check if the current element is equal to the target element\n    for i in range(len(A)):\n        if A[i] == x:\n            # if the current element is equal to the target element, check if it is the first occurrence\n            if first_occurrence_index == -1:\n                first_occurrence_index = i\n            # if the current element is not the first occurrence, update the first occurrence index\n            else:\n                break\n\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    def product_of_sublist(sublist):\n        return 1 if sublist[0] == 0 else sublist[0] * product_of_sublist(sublist[1:])\n    \n    n = len(arr)\n    sublist = [1] * n\n    sublist_sum = product_of_sublist(sublist)\n    \n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                sublist = arr[i:j+1]\n                sublist_sum += product_of_sublist(sublist)\n    \n    return sublist_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # To store the cumulative sum of elements in the array\n    cum_sum = [0] * (n + 1)\n    # To store the sum of products of elements in the array\n    sum_prod = 0\n    # To store the maximum subarray length for each prefix sum\n    max_len = 1\n    \n    # Calculate the cumulative sum of elements in the array\n    for i in range(n):\n        cum_sum[i+1] = cum_sum[i] + arr[i]\n        \n    # Calculate the sum of products of elements in the array\n    for i in range(n):\n        if i < max_len:\n            sum_prod += cum_sum[i+1] * (max_len - i)\n        else:\n            sum_prod += cum_sum[i+1] * (n - i)\n        if i+1 == max_len:\n            max_len = n\n        \n    # Return the sum of products\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n    max_product = float('-inf')\n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            prod = 1\n            for i in range(start, end + 1):\n                prod *= arr[i]\n            if prod > max_product:\n                max_product = prod\n\n    return max_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Creating a list to store the products of each subarray\n    products = [0] * n\n    # Initialize the products of the subarrays with 1\n    for i in range(n):\n        products[i] = 1\n    # Calculate the products of each subarray\n    for i in range(1, n):\n        for j in range(i):\n            products[i] *= arr[i] - arr[j]\n    # Initialize the sum of products of subarrays with 0\n    sum_products = 0\n    # Calculate the sum of products of all subarrays\n    for i in range(n):\n        sum_products += products[i]\n    return sum_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize result array to store the sum of products of all subarrays\n    result = [0] * (n + 1)\n    result[0] = 0  # Base case\n\n    # Iterate through all subarrays and calculate the sum of products\n    for i in range(1, n + 1):\n        result[i] = result[i - 1]\n        for j in range(i):\n            result[i] += arr[j] * arr[i - 1 - j]\n\n    return result[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    # generate all possible sublists of length n\n    sublists = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublists.append(arr[i:j])\n    \n    # initialize sum of products to 0\n    sum_of_products = 0\n    \n    # iterate through all possible sublists and calculate sum of products\n    for sublist in sublists:\n        prod = 1\n        for num in sublist:\n            prod *= num\n        sum_of_products += prod\n    \n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Find the maximum subarray length\n    max_length = 1\n    while max_length <= n:\n        # Initialize the maximum product and the sum of products\n        max_product = float('-inf')\n        sum_of_products = 0\n        # Initialize the start and end pointers of the subarray\n        start = 0\n        end = max_length - 1\n        # Find the sum of products of the subarray\n        while end < n:\n            product = 1\n            for i in range(start, end+1):\n                product *= arr[i]\n            sum_of_products += product\n            # Update the maximum product and the start pointer\n            if product > max_product:\n                max_product = product\n                start = end\n            end += 1\n        # Update the maximum subarray length\n        max_length += 1\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Initialize the variable to store the product of the current sublist\n    current_prod = 1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Update the current product with the element at index i\n        current_prod *= arr[i]\n        \n        # Check if the current product is negative\n        if current_prod < 0:\n            # Reset the current product to 1\n            current_prod = 1\n        \n        # Check if the sum is negative\n        if sum < 0:\n            # Reset the sum to 0\n            sum = 0\n        \n        # Add the current product to the sum\n        sum += current_prod\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    prefix_sum = [0]*(n+1)\n    for i in range(1,n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    product = 1\n    ans = 0\n    for i in range(n):\n        for j in range(i,n):\n            count += 1\n            product *= arr[j] - arr[i-1]\n            ans += prefix_sum[j+1] - prefix_sum[i]\n            if count == n:\n                break\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Initialize the result\n    result = 0\n    \n    # Loop through all possible sublists\n    for i in range(1, len(arr)+1):\n        \n        # Calculate the product of each sublist\n        prod = 1\n        for j in range(len(arr)-i+1):\n            prod *= arr[j]\n        \n        # Add the product to the result\n        result += prod\n        \n    # Return the final result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:] # remove \"0b\" prefix\n    n = n[:len(n)-1] # remove last bit\n    n = n[1:] # remove first bit\n    n = ''.join(str(int(x)^1) for x in n) # toggle every bit\n    n = '0b' + n # add \"0b\" prefix\n    return int(n,2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    # Create an empty list to store the bits\n    bits = []\n    # Toggle the middle bits and add them to the list\n    for bit in binary:\n        if bit == '0':\n            bits.append('1')\n        else:\n            bits.append('0')\n    # Convert the list of bits to an integer\n    result = int(''.join(bits), 2)\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Example:\n    >>> set_middle_bits(0b1010101010101010)\n    0b1101010101010101\n    \"\"\"\n    # Get the first and last bits of n\n    first_bit = n & 0b1\n    last_bit = n & (2 ** len(bin(n)[2:]) - 1)\n\n    # Flip the first and last bits\n    n ^= first_bit ^ last_bit\n\n    # Flip the middle bits\n    middle_bits = (n & (2 ** len(bin(n)[2:]) - 2)) >> 1\n    n ^= middle_bits ^ middle_bits\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        # Even number\n        n ^= ((1 << (n - 1)) | ((1 << (n - 1)) - 1))\n    else:\n        # Odd number\n        n ^= ((1 << (n - 2)) | ((1 << (n - 2)) - 1))\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    n = bin(n)[2:]  # Convert the binary representation of the given number to a string\n    n_len = len(n)  # Find the length of the binary representation\n\n    # Check if the last two bits are 11 (to avoid toggling them)\n    if n[-2:] == '11':\n        return n\n    else:\n        # Find the middle bit\n        middle_bit_index = n_len // 2\n\n        # Toggle the middle bit\n        n = n[:middle_bit_index] + ('0' if n[middle_bit_index] == '1' else '1') + n[middle_bit_index+1:]\n\n    # Find the first and the last bits\n    first_bit = n[0]\n    last_bit = n[-1]\n\n    # Toggle the first and the last bits (except the middle bit)\n    n = first_bit + ('0' if last_bit == '1' else '1') + n[1:-1] + last_bit\n\n    # Convert the binary representation of the updated number to an integer\n    n = int(n, 2)\n\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # define the mask of the first and last bit\n    mask = 1 << (n - 1)\n\n    # toggle the first and last bit\n    n = n ^ mask\n\n    # return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # find the middle bit\n    middle_bit = int(n) & 1 # 0000000000000000000000000000001\n    # toggle the middle bit\n    if middle_bit == 0:\n        n = n | middle_bit # toggle 0 to 1\n    else:\n        n = n & ~middle_bit # toggle 1 to 0\n    # set the first and last bits to 0\n    n = n & ~(1 << 0) & ~(1 << (n.bit_length() - 1))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Mask for first and last bit\n    mask = ~(1 << 1)\n    \n    # Apply mask to first and last bits\n    n = (n & mask) << 1\n    \n    # Return the result\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Define a mask for the first and last bit\n    mask_first = 0b00000001\n    mask_last = 0b11111110\n    \n    # Bitwise XOR of the mask with the input number\n    n = n ^ mask_first ^ mask_last\n    \n    # Return the result\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Remove the first and last bits of the number\n    n &= ~(1 << 0) & ~(1 << (n.bit_length() - 1))\n\n    # Toggle all other bits\n    n ^= (1 << (n.bit_length() - 1))\n\n    # Add the first and last bits back\n    n |= (1 << 0) | (1 << (n.bit_length() - 1))\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes a list of sorted integers a and a target value x.\n    It returns the left insertion point for x in a.\n    \"\"\"\n    # Use bisect.bisect_left() to find the left insertion point.\n    left = bisect.bisect_left(a, x)\n    \n    # If the target value is not present in the list, return the left insertion point.\n    if left == len(a) or a[left]!= x:\n        return left\n    \n    # If the target value is present in the list, search for the leftmost occurrence of x.\n    while left > 0 and a[left - 1] == x:\n        left -= 1\n    \n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    :param a: A sorted list\n    :param x: The value to be inserted\n    :return: The index where the left insertion point should be placed.\n    \"\"\"\n    # Use binary search to find the left insertion point.\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the bisect module to locate the insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is already present in the sorted list, return the index of the previous value\n    if index > 0 and a[index-1] == x:\n        return index-1\n    # Otherwise, return the index of the current value\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    # Define a function to compare the value with the elements in the list\n    def compare(y):\n        \"\"\"\n        Compare the value with the elements in the list.\n        \"\"\"\n        return a[y] - x\n\n    # Use the bisect module to find the left insertion point\n    index = bisect.bisect_left(a, x, lo=0, hi=len(a)-1, key=compare)\n\n    # Return the left insertion point\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x - 1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    # Using the bisect module to find the insertion point for the given value x in the list a\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        # If the value x is greater than the last element in the list a, then the insertion point is the length of the list\n        return i\n    elif x < a[i-1]:\n        # If the value x is less than or equal to the previous element at the insertion point, then the insertion point is the previous insertion point plus 1\n        return i-1\n    else:\n        # If the value x is greater than the previous element at the insertion point, then the insertion point is the insertion point itself\n        return i"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None\n\nprint(check_str(\"hello\")) # True\nprint(check_str(\"hEllo\")) # True\nprint(check_str(\"Hello\")) # False\nprint(check_str(\"1hello\")) # False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"The given string is starting with a vowel.\")\n    else:\n        print(\"The given string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"Starting with a vowel\")\n    else:\n        print(\"Not starting with a vowel\")"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (1 - 1 / n) * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1 + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * geometric_sum(n - 1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    for i in range(1, n+1):\n        triangular_numbers.append(int(\"\".join(sorted(str(i*j)))[-n:]))\n    return triangular_numbers"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the index to 1 since 0 is not a triangular number\n    index = 1\n    \n    # Initialize the counter variable to 0\n    counter = 1\n    \n    # Calculate the sum of first n natural numbers\n    sum_n = (n + 1) * n // 2\n    \n    # Initialize the variable to store the smallest triangular number with n digits\n    smallest_triangular_number = math.factorial(n) // math.factorial(counter)\n    \n    # Iterate through the numbers from 1 to n and calculate the sum of n digits of each number\n    for i in range(1, n+1):\n        # Increment the counter variable\n        counter += 1\n        \n        # Calculate the sum of n digits of the current number\n        current_sum = sum_n // math.factorial(counter)\n        \n        # If the sum of n digits is less than the current smallest triangular number, update the smallest triangular number and its index\n        if current_sum < smallest_triangular_number:\n            smallest_triangular_number = current_sum\n            index = counter\n    \n    # Return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    index = 1\n    triangular_num = 1\n    while triangular_num**2 <= (10**n):\n        index += 1\n        triangular_num = triangular_num * 10 + 1\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular = 0\n    for i in range(1, 10**n):\n        triangular += i\n        if triangular == triangular**2:\n            index = i\n            break\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def next_digit(n):\n        '''\n        Helper function to find the next digit to be added to the current digit to form the next triangular number.\n        '''\n        return 2*int(n) - 1\n\n    triangular_nums = [1]\n    for i in range(1, n+1):\n        next_num = triangular_nums[-1] + next_digit(triangular_nums[-1])\n        triangular_nums.append(next_num)\n\n    index = triangular_nums.index(min(triangular_nums))\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Index(n): \n    smallest = 1\n    index = 0\n    \n    for i in range(n):\n        smallest += i\n        if smallest % 10 == 0:\n            index = i\n    \n    if smallest < n:\n        smallest = 10**(n-1)\n        index = n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n): \n    # Initialize variables\n    num = 10**(n-1) \n    count = 1\n    \n    # Find index of smallest triangular number with n digits\n    while num > 1:\n        num -= 1\n        count += 1\n        if num == 0:\n            break\n    \n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n\n    # Find the largest power of 10 that is less than or equal to n\n    # This is the base of the triangular number system\n    base = 10**n\n\n    # Calculate the first number in the triangular number system\n    first = base\n\n    # Initialize the index to 1\n    index = 1\n\n    # Loop until the first triangular number is greater than or equal to the base\n    while first >= base:\n\n        # Calculate the next triangular number\n        next_num = first + index\n\n        # Check if the next triangular number is less than or equal to the base\n        if next_num <= base:\n\n            # If it is, update the first and index\n            first = next_num\n            index += 1\n\n        # If the next triangular number is greater than the base, increment the index\n        else:\n            index += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the number of digits in the given number\n    num_digits = len(str(n))\n    # Find the largest number that can be formed with n digits\n    max_triangular = (math.factorial(5 * num_digits - 4) // math.factorial(5 * num_digits - 2)) * (5 * num_digits - 3)\n    # Check if the given number can be formed with n digits\n    if n <= max_triangular:\n        # Find the index of the smallest triangular number that can be formed with n digits\n        triangular_index = 1\n        while triangular_index * (5 * num_digits - 3) <= n:\n            triangular_index += 1\n        return triangular_index - 1\n    else:\n        return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    smallest = 10**(n-1)\n    for i in range(1,10**n):\n        if i < smallest:\n            smallest = i\n    return math.log10(smallest) + 1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = 0\n    dictionary = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            dictionary[key] = test_tup[i]\n            key += 1\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Create an empty dictionary\n    dict_obj = {}\n    # Loop through the tuple\n    for i in range(len(test_tup) - 1):\n        # Add the key and value to the dictionary\n        key = test_tup[i]\n        value = test_tup[i + 1]\n        dict_obj[key] = value\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    i = 0\n    while i < len(test_tup) - 1:\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n        i += 2\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup)-1, 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_temp = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            dict_temp[test_tup[i]] = test_tup[i+1]\n        else:\n            dict_temp[test_tup[i]] = test_tup[i-1]\n    return dict_temp"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # convert the tuple to a list to access adjacent elements\n    test_list = list(test_tup)\n    # initialize an empty dictionary\n    my_dict = {}\n    # iterate through the list and add adjacent elements to the dictionary as key-value pairs\n    for i in range(0, len(test_list), 2):\n        my_dict[test_list[i]] = test_list[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function will check whether all the characters in a given string are same or not.\n    \"\"\"\n    # Check if the length of the string is 1\n    if len(s) == 1:\n        return True\n    # Convert the string to a list of characters\n    s_list = list(s)\n    # Check if all the characters are same\n    for i in range(1, len(s_list)):\n        if s_list[i]!= s_list[0]:\n            return False\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if length of string is zero\n    if len(s) == 0:\n        return True\n    # check if length of string is one\n    elif len(s) == 1:\n        return s == s[0]\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return False\n    if s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a set to remove duplicate characters\n    s = set(s)\n    \n    # Check if the length of the set is 1\n    if len(s) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 1 :\n        return True\n    elif s[0] == s[-1] :\n        return all_Characters_Same(s[1:-1])\n    else :\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string into a list\n    s = list(s)\n\n    # Check whether all the characters are same\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n\n    # If all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Convert the string to list of characters\n    lst = list(s)\n\n    # Check if all the characters are same or not\n    if lst[0] == lst[1] == lst[2] == lst[3] == lst[4]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (3*side**2)/(2*math.tan(math.pi/6))\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s*(s-side)*(s-2*side)*(s-3*side))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    a = 0.5 * side\n\n    # Calculate the areas of the three triangles formed by the tetrahedron\n    s = (a ** 2 + side ** 2 + math.sqrt(3) * a ** 2) / 2\n    t = (a ** 2 + side ** 2 - math.sqrt(3) * a ** 2) / 2\n    u = (a ** 2 - side ** 2 + math.sqrt(3) * a ** 2) / 2\n\n    # Calculate the area of the tetrahedron\n    area = 0.125 * s * t * u\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    area = 1/6 * side ** 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = math.sqrt(s * (s - 1) * (s - 2) * (s - 3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = 0.5 * side\n    area = math.sqrt(3) / 2 * half_perimeter ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    sp = (side + math.sqrt(3)*side) / 2\n\n    # Calculate the area using Heron's formula\n    area = 0.5 * sp * (sp - side) * (sp - math.sqrt(3)*side)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)**0.5 # calculating the semi-perimeter\n    return (1/6)*s**2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.append(list.pop(0))\n    return list[m:] + list[:m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst = lst[n-m:] + lst[:n-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.reverse()\n    list = list[-m:] + list[:-m]\n    list.reverse()\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Check if list is empty or contains only one item\n    if len(list) <= 1:\n        return list\n\n    # Find the length of the original list\n    n = len(list)\n\n    # Find the starting index of the rotated list\n    start = (n - m) % n\n\n    # Find the end index of the rotated list\n    end = n - 1\n\n    # Create a new rotated list\n    rotated_list = []\n\n    # Add the first m items of the original list\n    for i in range(start, end + 1):\n        rotated_list.append(list[i])\n\n    # Add the last m items of the original list\n    for i in range(end - start + 1, end + 1):\n        rotated_list.append(list[i])\n\n    return rotated_list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst.extend(lst[:m])\n    lst[:m] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and a number m as input and returns the rotated list to the right by m items.\n    \"\"\"\n    n = len(list)\n    m = m % n  # To rotate the list by positive m % n items.\n    \n    if m == 0:\n        return list\n    \n    # Reverse the list from index 0 to index n-m-1.\n    for i in range(n-m):\n        temp = list[i]\n        list[i] = list[i+m]\n        list[i+m] = temp\n    \n    # Reverse the list from index n-m to index n-1.\n    for i in range(n-m, n):\n        temp = list[i]\n        list[i] = list[i-m]\n        list[i-m] = temp\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates a list by n items to the right direction.\n    \"\"\"\n    # Check if the list has at least n items\n    if len(lst) < n:\n        return None\n    \n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return None\n    \n    # Create a new list with the first n items\n    new_lst = lst[:n]\n    \n    # Append the last n-m items to the beginning of the list\n    new_lst.extend(lst[n:])\n    \n    return new_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m>=n:\n        return list\n    temp = list[m:]\n    list[:m] = list[-n:]\n    list[-n:] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    :param startnum: Starting number of the range.\n    :type startnum: int\n    :param endnum: Ending number of the range.\n    :type endnum: int\n    :return: List of numbers that are divisible by every digit they contain.\n    :rtype: list\n    \"\"\"\n    # Helper function to check if a number is divisible by a given digit\n    def is_divisible(num, digit):\n        return num % digit == 0\n\n    # Helper function to get the digits of a number\n    def get_digits(num):\n        return [int(d) for d in str(num)]\n\n    # Helper function to check if a list of digits is divisible by a given list of digits\n    def is_divisible_list(digits_list, digit_list):\n        for digit in digit_list:\n            if not is_divisible(digits_list.count(digit), digit):\n                return False\n        return True\n\n    # Initialize an empty list to store the divisible numbers\n    divisible_nums = []\n\n    # Iterate through the range of numbers and check if they are divisible by every digit they contain\n    for num in range(startnum, endnum + 1):\n        digits = get_digits(num)\n        for digit in digits:\n            if not is_divisible(digits.count(digit), digit):\n                # If a number is not divisible by a given digit, skip to the next number\n                break\n        else:\n            # If a number is divisible by every digit it contains, add it to the divisible_nums list\n            divisible_nums.append(num)\n\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # Get all the digits of the numbers in the range\n    startnum_digits = list(map(int, str(startnum)))\n    endnum_digits = list(map(int, str(endnum)))\n    \n    # Create a list comprehension to filter out numbers that are not divisible by every digit in the range\n    divisible_numbers = [num for num in range(startnum, endnum+1) if all(d in str(num) for d in num)]\n    \n    # Print the filtered numbers\n    for num in divisible_numbers:\n        print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digit_map = {0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}\n    \n    # Find all the digits in the range and store them in the dictionary\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            digit_map[int(digit)].append(num)\n    \n    # Create a lambda function that checks if a number is divisible by every digit in the dictionary\n    divisible_by_digit = lambda x: all(map(lambda y: x % y == 0, digit_map[int(x)]))\n    \n    # Find all the numbers within the given range that are divisible by every digit in the dictionary\n    result = list(filter(divisible_by_digit, range(startnum, endnum+1)))\n    \n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(d in str(x) for d in str(startnum)) and all(d in str(x) for d in str(endnum))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = list(str(startnum)) + list(str(endnum))\n    digits = sorted(set(digits))\n    digit_set = set(map(int, digits))\n    result = []\n    for num in range(startnum, endnum+1):\n        digits_in_num = set(map(int, str(num)))\n        if digits_in_num.issubset(digit_set):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Loop through the range of numbers\n    for num in range(startnum, endnum+1):\n        # Convert the number to a string\n        num_str = str(num)\n        # Loop through each digit in the number\n        for digit in num_str:\n            # Check if the digit is divisible by the number\n            if num % int(digit)!= 0:\n                # If not, return False\n                return False\n    # If all digits were divisible by the number, return True\n    return True"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    a = math.radians(a)\n    \n    # Calculate area\n    area = math.pi * r * r * (1 - math.cos(a))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n\n    # Check if the angle is less than 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate the area using the formula\n    area = math.pi * r ** 2 * a / 360\n    \n    # Return the area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        A = math.pi * r**2 * math.sin(math.radians(a))\n        return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    #convert angle to radians\n    angle_rad = math.radians(a)\n    \n    #calculate area of sector\n    area = r * r * angle_rad\n    \n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if the angle is within 360 degrees\n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees.\")\n        return None\n\n    # Convert angle from degrees to radians\n    angle = a * math.pi / 180\n    \n    # Calculate area of sector using formula\n    area = math.pi * r**2 * angle\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * (1 - math.cos(math.radians(a)))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is within the range of 0 to 360 degrees\n    if a > 360 or a < 0:\n        return None\n    \n    # Calculate the area of the sector\n    area = (math.pi * r**2 * a / 360)\n    \n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    # Initialize the length of the three strings as variables \n    lenX = len(X) \n    lenY = len(Y) \n    lenZ = len(Z) \n  \n    # Create a 2D table to store the length of common subsequences \n    L = [[0 for j in range(lenZ+1)] for i in range(lenX+1)] \n  \n    # Fill the table using dynamic programming approach \n    for i in range(1, lenX+1): \n        for j in range(1, lenZ+1): \n            if X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # Return the length of longest common subsequence \n    return L[lenX][lenZ] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            elif X[i-1] < Y[j-1]:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    lcs = \"\"\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif X[i-1] < Y[j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of subproblems\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill in the LCS lengths in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                    if L[i][j] > L[i][k]:\n                        L[i][k] = L[i][j]\n                elif X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j]\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Print the LCS lengths\n    lcs_length = L[m][n]\n    print(\"LCS of the given three string sequence is:\", lcs_length)\n\n    # Print the LCS itself\n    lcs = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    lcs.reverse()\n    print(\"The LCS is:\", \"\".join(lcs))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize a 2D array to store the length of longest common subsequence of all possible substrings\n    # Also initialize a list to store the lengths of all substrings\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n    lengths = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill the 2D array with the lengths of all possible substrings\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1] and X[i - 1] == Z[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                lengths[i][j] = max(lengths[i - 1][j], lengths[i][j - 1], lengths[i - 1][j - 1])\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j]\n                lengths[i][j] = lengths[i - 1][j]\n            elif X[i - 1] == Z[j - 1]:\n                dp[i][j] = dp[i][j - 1]\n                lengths[i][j] = lengths[i][j - 1]\n            else:\n                dp[i][j] = 0\n                lengths[i][j] = 0\n\n    # Create a list to store the common subsequence\n    subsequence = []\n    i = m\n    j = p\n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[j - 1]:\n            subsequence.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return subsequence[::-1], lengths[m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence (LCS) of three given string sequences.\n    \"\"\"\n    # Initialize the length of each string as 1\n    len_X = 1\n    len_Y = 1\n    len_Z = 1\n    # Initialize the LCS matrix as a dictionary of lists\n    LCS = {'X': [0]*len_X, 'Y': [0]*len_Y, 'Z': [0]*len_Z}\n\n    # Fill the LCS matrix by comparing each pair of characters of X, Y and Z\n    for i in range(1, len_X):\n        for j in range(1, len_Y):\n            for k in range(1, len_Z):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS['X'][i] = LCS['X'][i-1] + 1\n                    LCS['Y'][j] = LCS['Y'][j-1] + 1\n                    LCS['Z'][k] = LCS['Z'][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    LCS['X'][i] = LCS['X'][i-1] + 1\n                    LCS['Y'][j] = LCS['Y'][j-1]\n                elif X[i-1] == Z[k-1]:\n                    LCS['X'][i] = LCS['X'][i-1]\n                    LCS['Z'][k] = LCS['Z'][k-1] + 1\n                elif Y[j-1] == Z[k-1]:\n                    LCS['Y'][j] = LCS['Y'][j-1] + 1\n                    LCS['Z'][k] = LCS['Z'][k-1]\n                else:\n                    LCS['X'][i] = LCS['X'][i-1]\n                    LCS['Y'][j] = LCS['Y'][j-1]\n                    LCS['Z'][k] = LCS['Z'][k-1]\n\n    # Find the length of the longest common subsequence\n    lcs_length = max(LCS['X'][-1], LCS['Y'][-1], LCS['Z'][-1])\n\n    # Initialize the result list\n    result = []\n\n    # Initialize the pointer variables\n    i = len_X\n    j = len_Y\n    k = len_Z\n\n    # Add characters to the result list while the pointers are not at the end of the LCS matrix\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            result.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        elif X[i-1] == Z[k-1]:\n            i -= 1\n            k -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n            k -= 1\n\n    # Reverse the result list\n    result.reverse()\n\n    # Return the result list\n    return result"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    def longest_common_subsequence(X, Y, Z): \n        m = len(X) \n        n = len(Y) \n        p = [[0] * (n + 1) for _ in range(m + 1)] \n  \n        for i in range(1, m + 1): \n            for j in range(1, n + 1): \n                if X[i - 1] == Y[j - 1]: \n                    p[i][j] = p[i - 1][j - 1] + 1 \n                else: \n                    p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n  \n        return p[m][n] \n  \n    def lcs(X, Y, Z, i, j, k): \n        if i == 0 or j == 0 or k == 0: \n            return 0 \n  \n        if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]: \n            return 1 + lcs(X, Y, Z, i - 1, j - 1, k - 1) \n        else: \n            return max(lcs(X, Y, Z, i - 1, j, k), lcs(X, Y, Z, i, j - 1, k), lcs(X, Y, Z, i, j, k - 1)) \n  \n    m = len(X) \n    n = len(Y) \n    p = [[0] * (n + 1) for _ in range(m + 1)] \n  \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            for k in range(1, m + 1): \n                if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]: \n                    p[i][j][k] = p[i - 1][j - 1][k - 1] + 1 \n                else: \n                    p[i][j][k] = max(p[i - 1][j][k], p[i][j - 1][k], p[i][j][k - 1]) \n  \n    return lcs(X, Y, Z, m, n, m)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a 3D table to store the length of LCS of X, Y, and Z\n    table = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n    # fill the table in bottom-up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    # return the length of LCS\n    return table[-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = [[0] * (n + 1) for i in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    result = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            result.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(result))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Creating a matrix to store lengths of longest common suffixes \n    L = [[0] * (len(X) + 1) for _ in range(len(Y) + 1)] \n\n    # Following steps build L[m+1][n+1] in bottom up fashion. Note that L[i][j] contains length of \n    # LCS of first m-1 characters in X[] and first n-1 characters in Y[], where m and n are lengths of \n    # X and Y respectively. Initially, L[0][0] is always 0 \n    for i in range(1, len(Y) + 1): \n        for j in range(1, len(X) + 1): \n            if X[j - 1] == Y[i - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1 \n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n    # Following step uses L[m+1][n+1] to construct the LCS matrix \n    m = len(Y) \n    n = len(X) \n    lcs = [['' for _ in range(n + 1)] for _ in range(m + 1)] \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[j - 1] == Y[i - 1]: \n            lcs[i][j] = X[j - 1]\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]: \n            i -= 1\n        else: \n            j -= 1\n\n    # Following code prints the constructed LCS \n    for i in range(m + 1): \n        for j in range(n + 1): \n            print(lcs[i][j], end=' ') \n"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # define a regular expression pattern to match all words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # find all words in the input string that match the pattern\n    matches = re.findall(pattern, str1)\n\n    # loop over the matches and insert spaces between the first character of each word and the rest of the word\n    for i in range(len(matches)):\n        matches[i] ='' + matches[i][1:]\n\n    # join the matches back into a string and return it\n    return ''.join(matches)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to match all words that start with capital letter\n    pattern = r'\\b\\w{1}\\w*\\b'\n    words = re.findall(pattern, str1)\n    # Iterate over the list of words and replace the first letter with a space\n    new_words = [word.capitalize() for word in words]\n    # Join the list of words with spaces\n    result =''.join(new_words)\n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Capitalizing the first letter of each word and joining them with spaces\n    words = [word.capitalize() for word in words]\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    str1 = re.sub(r'\\s+','', str1)\n    words = str1.split()\n    capitalized = []\n    for word in words:\n        if word[0].isupper():\n            capitalized.append(word +'')\n        else:\n            capitalized.append(word)\n    return ''.join(capitalized).strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    # Split the string into words\n    words = str1.split()\n    \n    # Loop through each word in the list\n    for i in range(len(words)):\n        \n        # Check if the first letter of the word is capitalized\n        if words[i][0].isupper():\n            \n            # If it is, add a space before the word\n            words[i] ='' + words[i]\n            \n    # Join the words back into a string\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    This function takes a string as input and returns the same string with spaces between words starting with capital letters.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n    # Loop through each word and check if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If it does, add a space between it and the next word\n            if i < len(words) - 1:\n                words[i] +=''\n    # Join the words back together with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    # Use the re.sub() function to replace all occurrences of the pattern with a single space\n    return re.sub(pattern, lambda x: x.group(0).replace(x.group(0),''), str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove any non-word characters from the string\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # split the string into words using whitespace as a delimiter\n    words = str1.split()\n    # loop through the words and capitalize the first letter of each word if it is capitalized and not already capitalized\n    for i in range(len(words)):\n        if words[i][0].isupper() and not words[i][0].islower():\n            words[i] = words[i][0].upper() + words[i][1:]\n    # join the words back into a string with spaces in between\n    str2 =''.join(words)\n    return str2"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = sorted(nums_str, key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers as input and returns a sorted list of strings of numbers.\n    '''\n    num_list = []\n    for num_str in nums_str:\n        num_list.append(float(num_str))\n    num_list.sort()\n    return [str(num) for num in num_list]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert all strings to float values\n    nums = [float(num_str) for num_str in nums_str]\n    # Sort the numbers in ascending order\n    nums.sort()\n    # Convert back to string values and return the sorted list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to numeric values\n    nums = [int(num) for num in nums_str]\n\n    # Use the built-in sort function to sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Remove all non-numeric characters from the list\n    nums_str = ''.join(filter(str.isdigit, nums_str))\n    # Convert the string of numbers into a list of integers\n    nums = [int(num) for num in nums_str]\n    # Sort the list of integers numerically\n    nums.sort()\n    # Convert the sorted list of integers back into a string of numbers\n    nums_str = ''.join(map(str, nums))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert the list of strings to a list of numeric values\n    nums = [int(n) for n in nums_str]\n    \n    # sort the list in ascending order\n    nums.sort()\n    \n    # convert the sorted list back to a list of strings\n    sorted_nums_str = [str(n) for n in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return [num for num in test_list + test_tup]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # adding the given tuple to the given list\n    test_list.extend(test_tup)\n    # printing the updated list\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for element in test_list:\n        test_list.append(element)\n    for element in test_tup:\n        test_list.append(element)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if item == test_tup:\n            test_list.append(test_tup)\n            return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_min_heap(arr):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    \"\"\"\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[2*i+1]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n    if i * 2 + 1 <= len(arr) - 1:\n        if arr[i] > arr[i * 2 + 1]:\n            return False\n    if i * 2 + 2 <= len(arr) - 1:\n        if arr[i] > arr[i * 2 + 2]:\n            return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the index is less than the length of the array and the value at the index is greater than the value at the index+1, it's a min heap\n    if i < len(arr) - 1 and arr[i] > arr[i+1]:\n        return False\n    # If the index is less than the length of the array and the value at the index is equal to the value at the index+1, it's not a min heap\n    elif i < len(arr) - 1 and arr[i] == arr[i+1]:\n        return True\n    # If the index is equal to the length of the array, it's a min heap\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(len(arr)//2-1, -1, -1):\n        # If the value at the index i is not a min heap, return False\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif i == len(arr):\n        return True\n    else:\n        if arr[i] < arr[(i-1)//2] and arr[(i-1)//2] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    \n    if arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]:\n        return False\n    \n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    if len(arr) % 2!= 0:\n        arr.append(float('inf'))\n    \n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n    \n    # If the current index is greater than its parent, return False\n    if arr[i] < arr[i//2]:\n        return False\n    \n    # Recursively check for the parent index\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n    \"\"\"\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_min_heap(arr):\n    \"\"\"\n    Check if given array represents a min heap or not.\n\n    Args:\n    arr (list): List of integers representing a binary heap.\n\n    Returns:\n    bool: True if array represents a min heap, False otherwise.\n    \"\"\"\n\n    n = len(arr)\n\n    for i in range(1, n // 2 + 1):\n        if arr[i] > arr[2 * i - 1]:\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i < len(arr) and arr[i] > arr[(i-1)//2]:\n        return False\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    elif right < len(arr) and arr[right] < arr[i]:\n        return False\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    # initializing the variables\n    j0 = 0\n    j1 = 1\n    j2 = 1\n    j3 = 3\n    \n    # calculating the nth jacobsthal number\n    for i in range(n):\n        j3 = j1 + j2\n        j0 = j2\n        j1 = j3\n        \n    return j3"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) * (n - 1) * (n - 1) // (n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize jacobsthal number and count\n    j = 2\n    count = 1\n    \n    # find nth jacobsthal number\n    while count < n:\n        j += 1\n        if is_prime(j):\n            count += 1\n    \n    return j\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_list = [1]\n        for i in range(n-1):\n            jacobsthal_num_list.append(jacobsthal_num_list[i] + jacobsthal_num_list[i+1])\n        return jacobsthal_num_list[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    j_num = 0\n    for i in range(1, n+1):\n        j_num += i**2 * (i + 1)\n    return j_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # Initialize variables\n    a = 0\n    b = 1\n    c = 1\n    jacobsthal = 0\n    \n    # Calculate the nth jacobsthal number\n    for i in range(n):\n        jacobsthal += b\n        temp = a\n        a = b\n        b = temp + b\n        c = a + c\n    \n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob = [0, 1]\n    while jacob[-1] < n:\n        jacob.append(jacob[-1] + jacob[-2])\n    return jacob[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacob_list = [0, 1]\n    for i in range(2, n):\n        jacob_list.append(jacob_list[i-1] + jacob_list[i-2])\n    return jacob_list[n-1]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sorting the given list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initializing a variable to store the minimum K records\n    min_k_records = []\n\n    # Looping over the first K elements of the sorted list\n    for i in range(K):\n        # Checking if the current element has already been added to the minimum K records\n        if not min_k_records or test_list[i][1]!= min_k_records[-1][1]:\n            # If not, adding the current element to the list of minimum K records\n            min_k_records.append(test_list[i])\n\n    # Returning the minimum K records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize minimum and count variables\n    min_val = None\n    count = 0\n\n    # Traverse the sorted list\n    for i in range(len(test_list)):\n        if count < K:\n            if min_val is None or test_list[i][1] < min_val[1]:\n                min_val = test_list[i]\n                count += 1\n        else:\n            if min_val[1] < test_list[i][1]:\n                min_val = test_list[i]\n\n    # Return the minimum k records\n    return min_val[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n    test_list (list): List of tuples containing name, age, and salary\n    K (int): Number of records to find\n\n    Returns:\n    list: List of tuples containing the name, age, and salary of the k records with minimum age\n    \"\"\"\n    # Sort the list of tuples by age in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize an empty list to store the k records with minimum age\n    min_k_list = []\n\n    # Iterate through the sorted list and add the first k records with minimum age\n    for i in range(K):\n        min_k_list.append(sorted_list[i])\n\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    for i in range(len(sorted_list) - K + 1):\n        min_val = sorted_list[i][1]\n        if min_val not in [x[1] for x in sorted_list[i+1:i+K+1]]:\n            return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples in descending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n    # Initialize an empty dictionary to store the count of each value in the sorted list\n    count_dict = {}\n    # Initialize a variable to store the minimum count of the first element of the sorted list\n    min_count = float('inf')\n    # Loop through the first K elements of the sorted list\n    for i in range(K):\n        # If the count of the second element of the current tuple is not already in the count_dict, add it with a count of 1\n        if test_list[i][1] not in count_dict:\n            count_dict[test_list[i][1]] = 1\n        # Otherwise, increment the count of the second element of the current tuple by 1\n        else:\n            count_dict[test_list[i][1]] += 1\n        # Update the minimum count if the count of the first element of the current tuple is less than the current minimum count\n        if count_dict[test_list[i][0]] < min_count:\n            min_count = count_dict[test_list[i][0]]\n    # Return the minimum count\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    # Sort the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize minimum k records to the first K records of the sorted list\n    min_records = test_list[:K]\n    \n    # Initialize minimum k count to the length of the sorted list\n    min_count = len(test_list)\n    \n    # Traverse the sorted list from the second element to the last element\n    for i in range(K, len(test_list)):\n        # If the current element has a lower second element than the minimum k record,\n        # update the minimum k record and count\n        if test_list[i][1] < min_records[-1][1]:\n            min_records.append(test_list[i])\n            min_count = len(min_records)\n    \n    # Return the minimum k count and the minimum k records\n    return min_count, min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Find the minimum K records from a tuple list.\n\n    Args:\n        test_list (list of tuples): The list of tuples to find the minimum K records from.\n        K (int): The number of records to find.\n\n    Returns:\n        A list of tuples containing the K smallest records from the test_list.\n    '''\n\n    # Sort the list of tuples by the first element in each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the list of smallest K records\n    min_records = []\n\n    # Loop through the sorted list and add the smallest K records to the min_records list\n    for i in range(K):\n        min_records.append(sorted_list[i])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[0], reverse=True)\n    min_records = []\n    for i in range(K):\n        min_records.append(test_list[i])\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Parameters:\n    test_list (list): list of tuples\n    K (int): number of records to find\n    \n    Returns:\n    list: list of minimum K records from the given list\n    '''\n    \n    # Initialize minimum_k with the first record of the list\n    minimum_k = test_list[0]\n    \n    # Sort the list in descending order based on the second element of each tuple (i.e., the value in the second element)\n    test_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # Iterate over the first K records\n    for i in range(K):\n        # If the current record is smaller than the minimum_k, replace the minimum_k with the current record\n        if test_list[i][0] < minimum_k[0]:\n            minimum_k = test_list[i]\n    \n    return minimum_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()\n    return test_list[0:K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    # loop through each index of the lists\n    for i in range(len(l1)):\n        # check if the element at that index is present in all three lists\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            # if it is, add it to the common list\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n            index_list.append(i)\n    return common_elements, index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Initialize an empty list to store common elements\n    common_elements = []\n\n    # Iterate through each index of each list\n    for i in range(len(l1)):\n        # Check if the element at the current index is in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            # If the element is common, add it to the common_elements list\n            common_elements.append(l1[i])\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Create a set to store the common elements\n    common_set = set()\n\n    # Loop through each element of l1\n    for i in range(len(l1)):\n        # Check if the element is present in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # Add the element to the set\n            common_set.add(l1[i])\n\n    # Return the list of common elements\n    return list(common_set)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # Check if the element at that index is in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each element in l1\n    for i in range(len(l1)):\n        # Check if the element is common for all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # If it is, add it to the list of common elements\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n    # Return the second smallest number in the sorted list\n    return sorted_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    :param numbers: A list of numbers.\n    :return: The second smallest number in the list or None if the list has less than 2 elements.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[-2]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return re.findall(pattern, text)\n\ntext = \"This is a sample text with an 'a' followed by one or more 'b's.\"\nmatches = text_match_zero_one(text)\nprint(matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b*)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a+b*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(len(test_list[j])):\n                if (test_list[i][j] == test_list[j][k]) and (test_list[i][j]!= test_list[i][j][::-1]):\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Create a dictionary to store the count of reverse pairs for each string in the list\n    count_dict = {}\n\n    # Loop through each string in the list and count the reverse pairs\n    for string in test_list:\n        # Convert the string to a list of characters and reverse it\n        reverse_string = string[::-1]\n        # Check if the reverse string exists in the dictionary, if not, add it and set the count to 1\n        if reverse_string not in count_dict:\n            count_dict[reverse_string] = 1\n        # If the reverse string already exists in the dictionary, increment its count by 1\n        else:\n            count_dict[reverse_string] += 1\n\n    # Initialize the count of reverse pairs to 0\n    count = 0\n\n    # Loop through each string in the list and check if it has a count of 1 in the dictionary\n    for string in test_list:\n        if count_dict[string] == 1:\n            # If it has a count of 1, check if the string is a reverse of itself\n            if string == string[::-1]:\n                # If it is, increment the count of reverse pairs\n                count += 1\n\n    # Return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # initialize count variable\n    count = 0\n    # loop through each string in the list\n    for i in range(len(test_list)):\n        # initialize two pointers i and j for the two strings\n        i, j = 0, len(test_list[i]) - 1\n        # loop through each character in the string\n        while i < j:\n            # if the characters at the two pointers are the same\n            if test_list[i] == test_list[j]:\n                # increment the count by 1\n                count += 1\n                # move the pointers towards the middle of the string\n                i += 1\n                j -= 1\n            # if the characters at the two pointers are not the same\n            elif test_list[i] < test_list[j]:\n                # move the i pointer to the right\n                i += 1\n            # if the characters at the two pointers are not the same\n            else:\n                # move the j pointer to the left\n                j -= 1\n    # return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Initialize variables to count the pairs of reverse strings\n    count = 0\n\n    # Loop through the given list of strings\n    for i in range(len(test_list)):\n        # Loop through the remaining part of the list and check if the current string is a reverse of the previous one\n        for j in range(i+1, len(test_list)):\n            # Check if the current string and the previous string are reversed\n            if test_list[j] == test_list[i][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    # Loop through each string in the list\n    for string in test_list:\n        # Check if the string is a palindrome\n        if string == string[::-1]:\n            continue\n        # Loop through each possible reverse of the string\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                # Check if the reversed string is a palindrome\n                if string[i:j+1] == string[j:i+1][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of unique sublists\n    sublist_count = {}\n    \n    # loop through the original list and count the unique sublists\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it is already in the dictionary\n        if tuple(sorted(sublist)) in sublist_count:\n            sublist_count[tuple(sorted(sublist))] += 1\n        else:\n            # if the sublist is not in the dictionary, add it with a count of 1\n            sublist_count[tuple(sorted(sublist))] = 1\n    \n    # return the dictionary\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create an empty dictionary to store the sublist count\n    sublist_count = {}\n    \n    # Loop through each element in the input list\n    for element in list1:\n        # Convert the element to a tuple and check if it's already in the dictionary\n        if (element,) in sublist_count:\n            # Increment the count for the tuple\n            sublist_count[(element,)] += 1\n        else:\n            # Otherwise, add the tuple to the dictionary with a count of 1\n            sublist_count[(element,)] = 1\n    \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in lst:\n        if type(i) == tuple:\n            for j in i:\n                if j in count:\n                    count[j] += 1\n                else:\n                    count[j] = 1\n        else:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists_dict = {}\n\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if tuple(sublist) not in unique_sublists_dict:\n            unique_sublists_dict[tuple(sublist)] = 1\n        else:\n            unique_sublists_dict[tuple(sublist)] += 1\n\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert all lists in the input list to tuples\n    list1 = [tuple(sublist) for sublist in list1]\n    \n    # Count the number of occurrences of each tuple in the input list\n    count = {}\n    for sublist in list1:\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    \n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for num in list1:\n        if isinstance(num, list):\n            num = tuple(num)\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each tuple of the form (sublist, count)\n    counts = {}\n    \n    # Loop through each element in the original list\n    for i in range(len(list1)):\n        # Extract the sublist starting from i to the end of the list\n        sublist = list1[i:]\n        \n        # Check if the sublist has been seen before\n        if sublist in counts:\n            # Increment the count of the sublist in the dictionary\n            counts[sublist] += 1\n        else:\n            # Add the sublist to the dictionary with a count of 1\n            counts[sublist] = 1\n    \n    # Return the dictionary of counts of unique sublists\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    '''\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count:\n                count[sublist_tuple] += 1\n            else:\n                count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Creating a dictionary to store the count of each sublist\n    sublist_count = {}\n    # Looping through all the sublists in the list\n    for i in range(len(lst)):\n        # Appending the current sublist to a list\n        sublist = lst[i]\n        # Looping through all the sublists again to check if the sublist already exists in the dictionary\n        for j in range(i+1, len(lst)):\n            # If the current sublist is the same as the next sublist, increment the count of the previous sublist by 1\n            if sublist == lst[j]:\n                sublist_count[(lst[i-1], lst[j])] = sublist_count.get((lst[i-1], lst[j]), 0) + 1\n    # Returning the dictionary\n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the input is empty\n    if not num:\n        return False\n    \n    # Check if the first character is a minus sign\n    if num[0] == '-':\n        # Check if there are more than one characters after the minus sign\n        if len(num) > 1:\n            return False\n        \n        # Check if the first character after the minus sign is a digit\n        if not num[1].isdigit():\n            return False\n    \n    # Check if the first character is a digit\n    if not num[0].isdigit():\n        return False\n    \n    # Check if there are more than one characters after the first digit\n    if len(num) > 1:\n        # Check if the last character is a decimal point\n        if num[-1]!= '.':\n            return False\n        \n        # Check if there are more than two characters after the decimal point\n        if len(num) > 3:\n            return False\n        \n        # Check if the character after the decimal point is a digit\n        if not num[-2].isdigit():\n            return False\n    \n    # If all checks pass, the input is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-digit characters from the number\n    num = ''.join(filter(str.isdigit, num))\n    # Check if the number has a decimal point or is just a single digit\n    if '.' in num or len(num) == 1:\n        return False\n    # Check if the number has exactly 2 decimal places\n    if '.' in num:\n        if len(num.split('.')[1])!= 2:\n            return False\n    # Convert the number to a float and check if it is an integer\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        if num[-1] == '.':\n            num = num[:-1]\n        if '.' in num:\n            int(num.split('.')[0])\n            frac_part = num.split('.')[1]\n            if len(frac_part) > 2 or int(frac_part) > 99:\n                return False\n            return True\n        else:\n            int(num)\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num % 1!= 0:\n            return False\n        num = str(num)\n        i = 0\n        while i < len(num) and num[i] == '0':\n            i += 1\n        if i == len(num) or num[i] == '.':\n            return False\n        j = i\n        while j < len(num) and num[j]!= '.':\n            j += 1\n        if j == len(num):\n            return True\n        if len(num) - j > 2:\n            return False\n        while j < len(num):\n            if num[j] == '0' or num[j] == '1' or num[j] == '2' or num[j] == '3' or num[j] == '4' or num[j] == '5' or num[j] == '6' or num[j] == '7' or num[j] == '8' or num[j] == '9':\n                j += 1\n            else:\n                return False\n        if j < len(num) and num[j] == '.':\n            return False\n        k = j + 1\n        while k < len(num) and num[k] == '0':\n            k += 1\n        if k == len(num):\n            return True\n        if len(num) - k > 2:\n            return False\n        while k < len(num):\n            if num[k] == '0' or num[k] == '1' or num[k] == '2' or num[k] == '3' or num[k] == '4' or num[k] == '5' or num[k] == '6' or num[k] == '7' or num[k] == '8' or num[k] == '9':\n                k += 1\n            else:\n                return False\n        if k < len(num) and num[k] == '.':\n            return False\n        l = k + 1\n        while l < len(num) and num[l] == '0':\n            l += 1\n        if l == len(num):\n            return True\n        if len(num) - l > 2:\n            return False\n        while l < len(num):\n            if num[l] == '0' or num[l] == '1' or num[l] == '2' or num[l] == '3' or num[l] == '4' or num[l] == '5' or num[l] == '6' or num[l] == '7' or num[l] == '8' or num[l] == '9':\n                l += 1\n            else:\n                return False\n        if l < len(num) and num[l] == '.':\n            return False\n        m = l + 1\n        while m < len(num) and num[m] == '0':\n            m += 1\n        if m == len(num):\n            return True\n        if len(num) - m > 2:\n            return False\n        while m < len(num):\n            if num[m] == '0' or num[m] == '1' or num[m] == '2' or num[m] == '3' or num[m] == '4' or num[m] == '5' or num[m] == '6' or num[m] == '7' or num[m] == '8' or num[m] == '9':\n                m += 1\n            else:\n                return False\n        if m < len(num) and num[m] == '.':\n            return False\n        n = m + 1\n        while n < len(num) and num[n] == '0':\n            n += 1\n        if n == len(num):\n            return True\n        if len(num) - n > 2:\n            return False\n        while n < len(num):\n            if num[n] == '0' or num[n] == '1' or num[n] == '2' or num[n] == '3' or num[n] == '4' or num[n] == '5' or num[n] == '6' or num[n] == '7' or num[n] == '8' or num[n] == '9':\n                n += 1\n            else:\n                return False\n        if n <"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # remove any non-numeric characters and check if the resulting string is empty\n    clean_num = ''.join(c for c in num if c.isdigit())\n    if not clean_num:\n        return False\n    \n    # split the string into a list of integers and check if the sum of its elements is 0\n    nums = [int(n) for n in clean_num.split()]\n    return sum(nums) == 0"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    \n    for char in num:\n        if not char.isdigit():\n            return False\n    \n    if len(num) > 1 and num[0] == '0':\n        return False\n    \n    decimal_digits = []\n    int_digits = []\n    decimal_found = False\n    \n    for char in num:\n        if char.isdigit():\n            if decimal_found:\n                decimal_digits.append(char)\n            else:\n                int_digits.append(char)\n        elif char == '.':\n            if decimal_found:\n                return False\n            decimal_found = True\n    \n    if len(int_digits) == 0:\n        return False\n    \n    int_num = int(''.join(int_digits))\n    decimal_num = 0\n    \n    for digit in decimal_digits:\n        decimal_num = decimal_num * 10 + int(digit)\n    \n    decimal_precision = 10 ** -2\n    \n    if abs(decimal_num) < decimal_precision:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for char in num:\n        if char not in '0123456789.':\n            return False\n    if '.' not in num and num[0] == '-':\n        return False\n    if '.' in num and '.' in num[1:]:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    # check if num is a string\n    if not isinstance(num, str):\n        return False\n    \n    # remove any non-numeric characters from num\n    num = ''.join(c for c in num if c.isdigit())\n    \n    # check if num is a decimal number with a precision of 2\n    decimal_point = num.find('.')\n    if decimal_point == -1:\n        return False\n    \n    if len(num) - decimal_point - 1!= 2:\n        return False\n    \n    # check if num is a valid decimal number\n    try:\n        float(num)\n    except ValueError:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == len(arr):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if all the numbers in the list are distinct, False otherwise.\n    '''\n    # Check if the list contains any duplicates\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                distinct = False\n                break\n        if not distinct:\n            break\n    return distinct"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return \"The list is empty.\"\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return \"The list contains duplicate elements.\"\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1,13):\n        if monthnum3 % 2 == 0:\n            if monthnum3 % 100 == 0:\n                if monthnum3 % 400 == 0:\n                    if monthnum3 == 2:\n                        return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if monthnum3 in range(1, 13):\n        if monthnum3 % 2 == 0:\n            if monthnum3 % 4 == 0:\n                if monthnum3 % 100 == 0:\n                    if monthnum3 % 400 == 0:\n                        days_in_month[1] = 29\n                else:\n                    days_in_month[1] = 29\n        elif monthnum3 % 2 == 1:\n            days_in_month[1] = 28\n    else:\n        print(\"Invalid month number\")\n\n    return days_in_month[monthnum3-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 % 2 == 0:\n        if monthnum3 % 4 == 0:\n            if monthnum3 % 100 == 0:\n                if monthnum3 % 400 == 0:\n                    days = 30\n                else:\n                    days = 29\n            else:\n                days = 29\n        else:\n            days = 29\n    else:\n        if monthnum3 % 3 == 0:\n            if monthnum3 % 4 == 0:\n                if monthnum3 % 100 == 0:\n                    if monthnum3 % 400 == 0:\n                        days = 30\n                    else:\n                        days = 29\n                else:\n                    days = 29\n            else:\n                days = 29\n        else:\n            days = 30\n\n    if days == 30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the given month number is in range\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n\n    # Calculate the number of days in the given month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # Check if the given month number contains 30 days\n    if days_in_month[monthnum3-1] == 30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError('Invalid month number.')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 2 == 0:\n        if monthnum in [4, 6, 9, 11]:\n            return False\n        elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"This month contains 30 days.\"\n    else:\n        return \"This month does not contain 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    else:\n        return \"This month has \" + str(days_in_month[monthnum3-1]) + \" days\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference to be positive infinity\n    min_diff = float('inf')\n\n    # Traverse through the array\n    for i in range(n-1):\n        # Find the minimum difference between any two elements in the subarray from index i+1 to n-1\n        min_diff = min(min_diff, abs(arr[i+1]-arr[i]))\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers and returns the minimum difference between any two elements.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n    # initialize the minimum difference and two pointers\n    min_diff = arr[1] - arr[0]\n    left = 1\n    right = n - 1\n    # loop through the array and find the minimum difference\n    while left < right:\n        diff = arr[right] - arr[left]\n        if diff < min_diff:\n            min_diff = diff\n        if diff == min_diff:\n            left += 1\n        right -= 1\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum value in the array\n    min_val = arr[0]\n\n    # Loop through the array and find the minimum difference between any two elements\n    for i in range(1, n):\n        diff = arr[i] - min_val\n        if diff < min_diff or min_diff is None:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input, and returns the minimum difference between any two elements in the array.\n    '''\n    # Sorting the array in ascending order\n    arr.sort()\n    # Initializing minimum difference as infinity\n    min_diff = float('inf')\n    # Traversing through the array and finding minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    # Returning the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n < 2:\n        return -1\n    if n == 2:\n        return abs(arr[1] - arr[0])\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize two variables to keep track of minimum difference and minimum index\n    min_diff = arr[1] - arr[0]\n    min_idx = 0\n\n    # Iterate over the array from second element\n    for i in range(1, n-1):\n        # Calculate the difference between current element and next element\n        diff = arr[i+1] - arr[i]\n        # If the difference is smaller than the current minimum difference, update the minimum difference and minimum index\n        if diff < min_diff:\n            min_diff = diff\n            min_idx = i\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference and the current difference\n    min_diff = arr[1] - arr[0]\n    curr_diff = arr[1] - arr[0]\n\n    # Iterate over the array and update the minimum difference and the current difference\n    for i in range(1, n):\n        curr_diff = arr[i] - arr[i-1]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array `arr` and its size `n` as input and returns the minimum difference between any two elements in the array.\n    The function iterates through the array and calculates the difference between each element and the next element.\n    It stores the minimum difference and its index in a variable `min_diff` and `min_diff_index` respectively.\n    \"\"\"\n    min_diff = float('inf')\n    min_diff_index = -1\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    :param arr: the array of integers to search in\n    :param n: the length of the array\n    :return: the minimum difference between any two elements in the array\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize variables for the minimum difference and the two elements with the minimum difference\n    min_diff = arr[1] - arr[0]\n    first_min_idx = 0\n    second_min_idx = 0\n    \n    # Iterate over the array from index 1 to n-1\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n        \n        # If the current difference is smaller than the minimum difference found so far, update the minimum difference and the indices of the two elements with the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n            first_min_idx = i\n            second_min_idx = i + 1\n            \n        # If the current difference is the same as the minimum difference found so far, check if the next element is smaller\n        elif diff == min_diff and arr[i+1] < arr[i+2]:\n            first_min_idx = i\n            second_min_idx = i + 1\n            \n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        i = 1\n        polite_num = 2\n        while i <= n:\n            if (polite_num % 10) == 1:\n                polite_num += 1\n            else:\n                polite_num += 2\n            i += 1\n        return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_nth_prime(n):\n        i = 2\n        while True:\n            if is_prime(i):\n                n -= 1\n                if n == 0:\n                    return i\n            i += 1\n\n    def find_nth_polite_number(n):\n        polite_num = find_nth_prime(n)\n        for i in range(n):\n            polite_num += 1\n            if is_polite(polite_num):\n                return polite_num\n            else:\n                polite_num += 1\n        return None\n\n    return find_nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    polite_count = 0\n    i = 1\n    while polite_count < n:\n        if is_prime(i) and is_palindrome(i) and (i+1) % 2 == 0:\n            polite_count += 1\n        i += 1\n    return i-1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        return is_polite(n-1) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 1:\n        return \"Invalid input\"\n\n    a, b = 1, 2\n    while b < n:\n        a, b = b, a + b\n\n    return b"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    if n <= 0:\n        return False\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i) and i!= 1:\n            count += 1\n        if count == n:\n            return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    \n    # Initialize variables\n    polite_number = 1\n    count = 1\n    limit = int(math.log10(n)) + 1\n    \n    # Iterate through the digits of the given number\n    while count <= limit:\n        digit = n // 10**count\n        n = n % 10**count\n        \n        # If the digit is odd, multiply it by 2\n        if digit % 2 == 1:\n            polite_number *= 2\n        \n        # Increment count by 1\n        count += 1\n    \n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    polite_numbers = [4, 7, 12, 15, 20, 25, 30]\n    i = 0\n    while len(polite_numbers) < n:\n        if i % 2 == 0:\n            polite_numbers.append(polite_numbers[i] + 2)\n        else:\n            polite_numbers.append(polite_numbers[i] + 4)\n        i += 1\n    return polite_numbers[n - 1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    j = 1\n    while i <= n:\n        if i % 2 == 0:\n            j += 1\n        i += 1\n    return j"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [tuple(x) for i, x in enumerate(l1) if i < len(l1)-1]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    res = []\n    for i in range(n-1):\n        res.append((l1[i], l1[i+1]))\n    return res"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the count of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a new list to store the difference between the two lists\n    diff_list = []\n    # iterate through the two lists\n    for i in range(len(li1)):\n        # if the element at the current index of li1 is not in li2, add it to the diff_list\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    # return the diff_list as the result\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a list containing the elements that are present in the first list but not in the second list.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    # Initialize sum variable\n    sum = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate fourth power of i\n        fourth_power = i**4\n        \n        # Add fourth power to sum\n        sum += fourth_power\n        \n    # Return sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    num = 1\n    for i in range(1, n+1, 2) : \n        sum += num ** 4\n        num += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n\n    Example:\n    >>> odd_num_sum(5)\n    1275\n\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i**4\n    \n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the fourth power of the current number\n        fourth_power = i ** 4\n\n        # add the fourth power to the sum\n        sum += fourth_power\n\n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    This function calculates the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char == \"(\":\n            stack.append(\"(\")\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if i == ')' and top!= '(':\n                return False\n            elif i == ']' and top!= '[':\n                return False\n            elif i == '}' and top!= '{':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i.isdigit():\n            pass\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                else:\n                    stack.pop()\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    open_par = ['(', '[', '{']\n    close_par = [')', ']', '}']\n\n    for char in exp:\n        if char in open_par:\n            stack.append(char)\n        elif char in close_par:\n            if not stack:\n                return False\n            if close_par.index(char)!= open_par.index(stack.pop()):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n\n    for i in exp:\n        if i.isdigit():\n            continue\n\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    # Create a stack\n    stack = []\n\n    # Loop through each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, pop off the top character from the stack and check if it is the matching opening parenthesis\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1]!= '(':\n                return False\n            stack.pop()\n\n    # If the loop completes, the expression is balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_parentheses = {'(', '{', '['}\n    close_parentheses = {')', '}', ']'}\n\n    for char in exp:\n        if char in open_parentheses:\n            stack.append(char)\n        elif char in close_parentheses:\n            if not stack:\n                return False\n            if close_parentheses[char]!= stack[-1]:\n                return False\n            stack.pop()\n\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Loop through the words\n    for i in range(len(words)):\n        # Check if the length of the current word is less than K\n        if len(words[i]) < K:\n            # Remove the word from the list\n            words.pop(i)\n            i -= 1 # Reduce the loop index to account for the removal\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_str = ''\n    for word in words:\n        if len(word)!= K:\n            new_str += word +''\n    return new_str.strip()"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words with length K or less\n    result = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) >= K:\n            # If the length of the word is greater than or equal to K, append it to the result list\n            result.append(word)\n\n    # Join the result list into a single string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Loop through each word in the list and remove words with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n            \n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words that don't meet the length requirement\n    filtered_words = []\n    # Iterate over the words and check if the length of each word is not equal to K\n    for word in words:\n        if len(word)!= K:\n            # If the length is not equal to K, add the word to the filtered_words list\n            filtered_words.append(word)\n    # Join the filtered_words list into a single string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print('Substring found at position', match.start())\n        print('Number of times substring occurs:', match.group(0).count(match.group()))\n        return match.group(0).count(match.group())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # check if the pattern is valid\n    if not isinstance(pattern,str):\n        raise TypeError(\"Pattern should be a string.\")\n\n    # check if the text is valid\n    if not isinstance(text,str):\n        raise TypeError(\"Text should be a string.\")\n\n    # use regular expression to search for pattern in the text\n    match = re.search(pattern,text)\n\n    # if no match found, return None\n    if match is None:\n        return None\n\n    # extract the match and position of the pattern from the match object\n    pattern_match = match.group()\n    pattern_position = match.start()\n\n    # return a tuple with the pattern match and position\n    return (pattern_match,pattern_position)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # compile the pattern to find all occurrences\n    pattern = re.compile(pattern)\n    # find all matches in the string\n    matches = pattern.finditer(text)\n    # iterate over matches and return the result\n    for match in matches:\n        return (match.start(), match.end(), match.group())\n    # if no match found, return None\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"The substring '{match}' occurs {matches.count(match)} times at index {text.index(match)}\")\n        return True\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1: # check if i is odd\n            count = 0\n            for j in range(len(nums)):\n                if j % 2 == 1: # check if j is odd\n                    if nums[i] % 2 == 0: # check if nums[i] is even\n                        count += 1\n            if count == 0: # if count is 0, there is no odd number in the odd position\n                return False # return False if there is no odd number in the odd position\n    return True # return True if there is an odd number in every odd position"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    # initialize a boolean variable to keep track of the result\n    result = True\n\n    # loop through the list of numbers\n    for i in range(len(nums)):\n        # check if the current number is odd\n        if nums[i] % 2!= 0:\n            # if it's odd, check if the current index is odd\n            if i % 2!= 0:\n                # if the current index is odd, the result is false\n                result = False\n                break\n\n    # return the result\n    return result"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            odd_count += 1\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i::2] if num % 2!= 0])!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0 or nums[i+1] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0: # odd index check\n            for j in range(i+1, len(nums), 2):\n                if nums[j] % 2!= 0: # odd number check\n                    return False # odd number not found in the odd index\n            return True # odd index contains odd numbers\n    return True # all indices contain odd numbers\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            if test_str[i] in vowels:\n                count += 1\n        else:\n            if (test_str[i-1] in vowels) and (test_str[i+1] in vowels):\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the elements and their frequencies\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = sum([num for num, freq in freq.items() if freq == 1])\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the elements and their indices\n    elem_dict = {}\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    # Loop through the list\n    for i in range(len(arr)):\n        # If the element is not already in the dictionary, add it and its index to the dictionary\n        if arr[i] not in elem_dict:\n            elem_dict[arr[i]] = i\n        # If the element is already in the dictionary, calculate the sum of the non-repeated elements\n        else:\n            non_repeated_sum += i - elem_dict[arr[i]]\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # convert the set to a list and calculate the sum\n    sum_list = list(unique_set)\n    return sum(sum_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the elements and their indices\n    index_dict = {}\n    for i, num in enumerate(arr):\n        if num in index_dict:\n            # if the element is already in the dictionary, remove its index and add the new index\n            index_dict[num] = -1\n            index_dict[num] = i\n        else:\n            index_dict[num] = i\n\n    # initialize variables to store the sum and the count of non-repeated elements\n    sum_of_non_repeated = 0\n    count = 0\n\n    # iterate through the dictionary to find the sum of non-repeated elements\n    for num, index in index_dict.items():\n        if index!= -1:\n            sum_of_non_repeated += num\n            count += 1\n\n    # return the sum of non-repeated elements and the count\n    return sum_of_non_repeated, count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements.\n    \"\"\"\n    # create a set of unique elements from the list\n    unique_elements = set(arr)\n    # convert the set back to a list and calculate the sum\n    sum_of_unique_elements = sum(list(unique_elements))\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n\n    # Initialize a variable to store the sum of the unique elements\n    sum_unique = 0\n\n    # Iterate through the unique elements and add their values to the sum_unique variable\n    for element in unique_set:\n        sum_unique += element\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n        arr (list): The list of numbers to find the sum of.\n\n    Returns:\n        int: The sum of all non-repeated elements in the list.\n    \"\"\"\n    # Create a set from the list to remove duplicates\n    set_arr = set(arr)\n\n    # Convert the set back to a list and sum it up\n    return sum(set_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # initialize a dictionary to store unique elements and their counts\n    count = {}\n    # loop through the list and update the count dictionary\n    for elem in arr:\n        if elem not in count:\n            count[elem] = 1\n        else:\n            count[elem] += 1\n    # initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # loop through the count dictionary and add up all the elements with count 1\n    for elem, count in count.items():\n        if count == 1:\n            sum_non_repeated += elem\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize an empty dictionary to store the count of each element in the array\n    count_dict = {}\n    \n    # Iterate through the array and count the number of occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n    # Initialize an empty list to store the non-repeated elements\n    non_repeated_elements = []\n    \n    # Iterate through the count_dict and add the elements with a count of 1 to the non_repeated_elements list\n    for key, value in count_dict.items():\n        if value == 1:\n            non_repeated_elements.append(key)\n            \n    # Calculate the sum of the non-repeated elements and return it\n    return sum(non_repeated_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a set to store the elements in the list\n    set_of_elements = set(arr)\n\n    # Initialize the sum of non-repeated elements as 0\n    sum_of_non_repeated_elements = 0\n\n    # Iterate over the set to find the sum of non-repeated elements\n    for element in set_of_elements:\n        sum_of_non_repeated_elements += element\n\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated_elements"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create a dictionary where the keys are elements in the list and the values are lists containing all the elements with that key\n    group_dict = {}\n    for item in list1:\n        if item in group_dict:\n            group_dict[item].append(item)\n        else:\n            group_dict[item] = [item]\n\n    # Create a list of tuples where the first element is the element and the second element is the list of all the elements with that element\n    group_list = list(group_dict.items())\n\n    # Sort the list of tuples by the element\n    group_list.sort(key=lambda x: x[0])\n\n    # Create a list of sublists where each sublist contains all the elements with the same key\n    packed_list = []\n    for key, group in groupby(group_list, key=lambda x: x[0]):\n        packed_list.append([elem[0] for elem in group])\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    grouped_list = sorted(list(groupby(list1)))\n    \n    packed_list = []\n    \n    for group in grouped_list:\n        if len(list(group)) == 1:\n            packed_list.append(list(group)[0])\n        else:\n            packed_list.append([list(group)[0]])\n            for i in range(1, len(list(group))):\n                packed_list[-1].append(list(group)[i])\n    \n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby to iterate over consecutive elements of the list\n    grouped = groupby(list1)\n    # Use list comprehension to pack consecutive duplicates into sublists\n    packed = [list(group) for key, group in grouped if len(list(group)) > 1]\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack = []\n    for key, group in groupby(list1):\n        if not key:\n            pack.append([])\n        pack[-1].extend(list(group))\n    return pack"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(sorted(list1)):\n        if key == list1[0]:\n            yield [list1[0]]\n        else:\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    lst = sorted(lst)\n    groups = groupby(lst)\n    result = []\n    for key, group in groups:\n        if key in lst:\n            result.append(list(group))\n            result.append(key)\n        else:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create a generator to iterate over the list\n    generator = (list(group) for key, group in groupby(list1) if not key)\n    # Convert the generator to a list\n    return list(generator)"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create a dictionary to store the count of each unique sublist\n    unique_sublists_dict = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is a list, convert it to a tuple and add it to the dictionary with a count of 1\n        if isinstance(element, list):\n            unique_sublists_dict[(tuple(element))] = 1\n        \n        # If the element is not a list, add it to the dictionary with a count of 1\n        else:\n            unique_sublists_dict[(element)] = 1\n    \n    # Return the dictionary\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts\n    count = {}\n\n    # Iterate over each list in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist = tuple(sublist)\n\n        # Check if the tuple is already in the dictionary\n        if sublist in count:\n            # Increment the count of the tuple\n            count[sublist] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count[sublist] = 1\n\n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the count of each unique sublist\n    sublist_count = {}\n\n    # Iterate through the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sorted(sublist)) in sublist_count:\n            # Increment the count of the tuple if it's already in the dictionary\n            sublist_count[tuple(sorted(sublist))] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            sublist_count[tuple(sorted(sublist))] = 1\n\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    count = {}\n    # Iterate through the list of lists\n    for lst in list1:\n        # Convert the list to a tuple and count its occurrences in the dictionary\n        key = tuple(lst)\n        if key in count:\n            count[key] += 1\n        else:\n            count[key] = 1\n    # Return the dictionary of unique sublists and their counts\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert list to tuple\n    list1 = tuple(list1)\n    # Create an empty dictionary\n    dict = {}\n    # Loop through the list\n    for item in list1:\n        # Check if the item is already a tuple\n        if isinstance(item, tuple):\n            # Check if the tuple is already in the dictionary\n            if item in dict:\n                # Increment the count of the item in the dictionary\n                dict[item] += 1\n            else:\n                # Add the item to the dictionary with a count of 1\n                dict[item] = 1\n        # Check if the item is already a list\n        elif isinstance(item, list):\n            # Convert the list to tuple\n            item = tuple(item)\n            # Check if the tuple is already in the dictionary\n            if item in dict:\n                # Increment the count of the item in the dictionary\n                dict[item] += 1\n            else:\n                # Add the item to the dictionary with a count of 1\n                dict[item] = 1\n    # Return the dictionary\n    return dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique lists within a list.\n    \"\"\"\n    count = {}\n    for lst in lst:\n        lst_tuple = tuple(lst)\n        if lst_tuple not in count:\n            count[lst_tuple] = 1\n        else:\n            count[lst_tuple] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        # check if the item is a list\n        if isinstance(item, list):\n            # if it is, turn it to a tuple and add to dictionary\n            count[tuple(item)] = count.get(tuple(item), 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for i in range(len(lst)):\n        if type(lst[i]) == list:\n            sublist_tuple = tuple(lst[i])\n            if sublist_tuple in sublists:\n                sublists[sublist_tuple] += 1\n            else:\n                sublists[sublist_tuple] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the count of occurrences of each sublist\n    sublist_counts = {}\n    \n    # Loop through each element of the list\n    for sublist in list1:\n        # If the sublist is already in the dictionary, increment its count by 1\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        # If the sublist is not in the dictionary, add it with a count of 1\n        else:\n            sublist_counts[sublist] = 1\n            \n    # Return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the count of each unique sublist\n    sublist_counts = {}\n    \n    # loop through each sublist in the list\n    for sublist in list1:\n        # turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_counts:\n            # if it is, increment the count by 1\n            sublist_counts[sublist_tuple] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            sublist_counts[sublist_tuple] = 1\n    \n    # return the dictionary of counts\n    return sublist_counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Create a set of tuples for the given list\n    set_list = set(test_list)\n\n    # Loop through all pairs of tuples in the set\n    for pair in combinations(set_list, 2):\n        # Check if the sum of the two tuples is present in the set\n        if sum(pair) in set_list:\n            # Print the combination of sums\n            print(pair)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    total = sum(test_list)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            for k in range(j, n+1):\n                if sum(test_list[i:j+1]) == total:\n                    yield tuple(sorted(test_list[i:j+1]))\n                if sum(test_list[j:k+1]) == total:\n                    yield tuple(sorted(test_list[j:k+1]))\n                if sum(test_list[k:i+1]) == total:\n                    yield tuple(sorted(test_list[k:i+1]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for combo in combinations(test_list[i], j-i+1):\n                if sum(combo) == test_list[j][0]:\n                    print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the sum of the tuples\n    total_sum = sum(test_list)\n    \n    # Create a list of all possible combinations\n    all_combinations = list(combinations(range(1, total_sum+1), len(test_list)))\n    \n    # Filter out the combinations that do not have the desired sum\n    desired_combinations = [combination for combination in all_combinations if sum(combination) == total_sum]\n    \n    return desired_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    \n    # Initialize a list to store the combinations\n    combinations_list = []\n    \n    # Iterate through all possible combinations of tuples\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            # Calculate the sum of each combination\n            combo_sum = sum(combo)\n            \n            # Check if the sum is in the given list\n            if combo_sum in test_list:\n                # Add the combination to the list if it is a valid combination\n                combinations_list.append(combo)\n    \n    # Return the list of valid combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    if (test_list[i][0] + test_list[j][0] + test_list[k][0] + test_list[l][0]) == test_list[i][1]:\n                        print(test_list[i], test_list[j], test_list[k], test_list[l])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    def combination_sum(combination, target_sum):\n        if target_sum == 0:\n            return [tuple(combination)]\n        elif target_sum < 0:\n            return []\n        else:\n            return combination_sum(combination, target_sum - combination[0]) + combination_sum(combination[1:], target_sum)\n\n    def find_combinations_helper(current_combination, current_sum, test_list, target_sum):\n        if current_sum == target_sum:\n            return [current_combination]\n        elif current_sum < target_sum:\n            return []\n        else:\n            return find_combinations_helper(current_combination + [test_list[0]], current_sum + test_list[0], test_list[1:], target_sum)\n\n    return find_combinations_helper([], 0, test_list, sum(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop through all possible pairs of tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            \n            # Find the sum of the current pair of tuples\n            current_sum = sum(test_list[i][k] + test_list[j][k] for k in range(len(test_list[i])))\n            \n            # Check if the current sum is in the test_list\n            if current_sum in test_list:\n                \n                # Combine the two tuples and add it to the result list\n                combination = tuple(sorted(test_list[i] + test_list[j]))\n                result.append(combination)\n                \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a list of tuples containing all possible combinations of two elements\n    all_combinations = list(combinations(test_list, 2))\n\n    # initialize an empty dictionary to store the combinations of sums\n    comb_dict = {}\n\n    # iterate over all combinations of sums\n    for comb in all_combinations:\n\n        # calculate the sum of the elements in the combination\n        sum_of_elements = sum(comb)\n\n        # check if the sum is already in the dictionary\n        if sum_of_elements in comb_dict:\n\n            # if it is, append the combination to its list of values\n            comb_dict[sum_of_elements].append(comb)\n\n        # if the sum is not in the dictionary, add the combination to the dictionary with a list of values containing only the combination itself\n        else:\n            comb_dict[sum_of_elements] = [comb]\n\n    # return the dictionary with the combinations of sums and their corresponding lists of values\n    return comb_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    result = []\n    for i in range(1, total_sum + 1):\n        for combo in combinations(test_list, r=i):\n            if sum(combo) == total_sum:\n                result.append(combo)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns whether the count of divisors is even or not.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    \n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 1\n            \n    return divisors_count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return False\n    elif count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function checks whether the count of divisors is even or odd for a given number n.\n    \"\"\"\n    # Calculate the number of divisors\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    # Check if the number of divisors is even or odd\n    if divisors % 2 == 0:\n        print(f\"{n} has an even count of divisors\")\n    else:\n        print(f\"{n} has an odd count of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # initialize count of divisors to 0\n    count = 0\n\n    # calculate the square root of n\n    sqrt_n = math.sqrt(n)\n\n    # loop through all integers from 1 to sqrt(n)\n    for i in range(1, int(sqrt_n) + 1):\n        # check if i divides n\n        if n % i == 0:\n            # if i divides n, increment count by 1\n            count += 1\n            # check if i is also a factor of sqrt(n)\n            if i * i == n:\n                # if i is also a factor of sqrt(n), increment count by 1\n                count += 1\n\n    # if count of divisors is even, return True\n    if count % 2 == 0:\n        return True\n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    # create a list of all the numbers from 1 to n\n    numbers = list(range(1, n+1))\n    # initialize a variable to store the count of divisors\n    count = 0\n    # loop through the list and check if the number is divisible by any number in the list\n    for i in numbers:\n        if n % i == 0:\n            count += 1\n    # check if the count of divisors is even\n    if count % 2 == 0:\n        print(f\"{n} has an even count of divisors.\")\n    else:\n        print(f\"{n} has an odd count of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors_count += 1\n    if n > 1:\n        divisors_count += 1\n    if divisors_count % 2 == 0:\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    count_div = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count_div += 1\n\n    if count_div % 2 == 0:\n        print(\"Count of divisors is even\")\n    else:\n        print(\"Count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                total += sum(arr[i:j+1])\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            if i < j:\n                result += arr[j] - arr[i]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of odd length subarrays\n    sum = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Check if the length of the current subarray is odd\n        if i % 2 == 1 and i + 1 < len(arr):\n            # Add the sum of the current subarray to the sum variable\n            sum += arr[i:i+2].sum()\n            \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize sum and length variables\n    sum_of_subarrays = 0\n    current_length = 0\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is odd, add it to the sum and increase the length\n        if arr[i] % 2 == 1:\n            sum_of_subarrays += arr[i]\n            current_length += 1\n        # If the current element is even, decrease the length\n        else:\n            current_length -= 1\n            \n        # If the length becomes 0, add the sum to the output and reset the variables\n        if current_length == 0:\n            sum_of_subarrays += arr[i-current_length]\n            current_length = 0\n            \n    # Return the sum of all odd length subarrays\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if j - i + 1 % 2 == 1:\n                sum += arr[j] - arr[i]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum = 0\n\n    for i in range(n):\n        if i == 0 or arr[i] % 2!= 0:\n            count = 1\n            sum += arr[i]\n        elif arr[i] % 2 == 0:\n            count += 1\n            sum += arr[i]\n\n        if count % 2 == 1:\n            return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length_subarrays = 0\n    n = len(arr)\n    for i in range(1, n-1):\n        left = i\n        right = i\n        while left >= 0 and right < n and (right - left + 1) % 2 == 1:\n            sum_odd_length_subarrays += arr[right]\n            right += 1\n        left = i\n        right = i\n        while left >= 0 and right < n and (right - left + 1) % 2 == 1:\n            sum_odd_length_subarrays -= arr[left]\n            left -= 1\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n\n    n = len(arr)\n    sum = 0\n\n    for i in range(1, n):\n        if i == n - 1 or i == n - 2:\n            sum += arr[i]\n        else:\n            sum += arr[i] - arr[i-1]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum += arr[j]\n        if sum % 2!= 0:\n            return sum\n    return 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    max_count = 0\n    sum = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i] % 2 == 0:\n            count = 0\n            sum = 0\n            if i == 0:\n                count = 1\n            else:\n                sum += arr[i-1]\n            if arr[i] % 2 == 0:\n                count += 1\n        else:\n            if arr[i] % 2 == 1:\n                count += 1\n                sum += arr[i]\n        if count % 2 == 1:\n            if count > max_count:\n                max_count = count\n                max_sum = sum\n    return max_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    if max_value == min_value:\n        h = s = 0\n    else:\n        d = max_value - min_value\n        s = d / max_value\n\n        if max_value == r:\n            h = (g - b) / d\n        elif max_value == g:\n            h = 2 + (b - r) / d\n        else:\n            h = 4 + (r - g) / d\n\n        if h < 0:\n            h += 6\n\n        h = h / 6\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # calculate minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # calculate delta value\n    delta = max_val - min_val\n\n    # calculate saturation and value\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / max_val\n\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h / 6\n\n    # handle negative hues\n    if h < 0:\n        h = h + 1\n\n    # convert to hsv\n    hsv = (h, s, max_val)\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model\n    \"\"\"\n    # Convert RGB to HSV\n    r, g, b = r/255, g/255, b/255\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n    if max_rgb == min_rgb:\n        h = 0\n    elif max_rgb == r:\n        h = (g - b) / delta_rgb\n    elif max_rgb == g:\n        h = 2 + (b - r) / delta_rgb\n    else:\n        h = 4 + (r - g) / delta_rgb\n    h *= 60\n    if h < 0:\n        h += 360\n    # Convert HSV to HSL\n    if delta_rgb == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta_rgb / max_rgb\n    v = max_rgb\n    # Convert HSL to HSV\n    if s == 0:\n        hsv = [h, 0, v]\n    elif max_rgb == r:\n        hsv = [h + 120, s, v]\n    elif max_rgb == g:\n        hsv = [h, s, v]\n    else:\n        hsv = [h - 120, s, v]\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HSL\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * ((g - b) / delta)\n    elif cmax == g:\n        h = 60 * ((b - r) / delta) + 120\n    elif cmax == b:\n        h = 60 * ((r - g) / delta) + 240\n    h = int(h)\n    h = h % 360\n\n    # Convert HSL to HSV\n    h = h / 360\n    s = delta / (1 - abs(2 * cmax - 1))\n    if s == 0:\n        v = 0\n    else:\n        if cmax == r:\n            v = (g - b) / delta\n        elif cmax == g:\n            v = (b - r) / delta\n        elif cmax == b:\n            v = (r - g) / delta\n        v = round(v, 2)\n\n    # Convert HSV to HSL\n    if delta == 0:\n        h = 0\n        s = 0\n        l = 0\n    else:\n        if l < 0.5:\n            s = delta / (cmax + cmin)\n        else:\n            s = delta / (2 - cmax - cmin)\n        l = cmax\n\n    # Return HSV values\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # converting the rgb values to float\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n\n    # calculating the maximum and minimum values of the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # calculating the chroma value\n    chroma = max_val - min_val\n\n    # calculating the hue value\n    if chroma == 0:\n        hue = 0\n    elif max_val == r:\n        hue = (g - b) / chroma\n    elif max_val == g:\n        hue = 2 + (b - r) / chroma\n    else:\n        hue = 4 + (r - g) / chroma\n\n    hue = hue / 6\n\n    # calculating the saturation value\n    if chroma == 0:\n        saturation = 0\n    else:\n        if max_val == r:\n            saturation = chroma / (max_val + min_val)\n        elif max_val == g:\n            saturation = chroma / (max_val + min_val)\n        else:\n            saturation = chroma / (max_val + min_val)\n\n    # calculating the value value\n    value = max_val\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB to HSV\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n    h = 0\n    s = 0\n    v = max_rgb\n    \n    if delta_rgb == 0:\n        h = 0\n        s = 0\n    else:\n        if max_rgb == r:\n            h = (g - b) / delta_rgb\n        elif max_rgb == g:\n            h = 2 + (b - r) / delta_rgb\n        else:\n            h = 4 + (r - g) / delta_rgb\n        \n        if h < 0:\n            h += 6\n        \n        s = delta_rgb / max_rgb\n    \n    # Convert HSV to RGB\n    h *= 60\n    h = int(h)\n    if h < 0:\n        h += 360\n    \n    s *= 100\n    s = int(s)\n    if s < 0:\n        s += 100\n    \n    v *= 100\n    v = int(v)\n    if v < 0:\n        v += 100\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Calculate the maximum and minimum values of the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the delta between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the value of the hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Calculate the value of the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Calculate the value of the value\n    value = max_val\n\n    # Calculate the value of the hue in degrees\n    hue = hue * 60 if hue < 0 else hue * 60\n    if hue >= 360:\n        hue = 0\n\n    return (hue, saturation, value)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif r == max_val:\n        h = (g - b) / delta\n    elif g == max_val:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    if h < 0:\n        h += 6\n    \n    hsv_color = (h / 6, delta / max_val, max_val)\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255 # Normalize the color values\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    del_max = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    if del_max == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * (((g-b)/del_max) % 6)\n    elif cmax == g:\n        h = 60 * (((b-r)/del_max) + 2)\n    elif cmax == b:\n        h = 60 * (((r-g)/del_max) + 4)\n    s = del_max/cmax\n    if s == 0:\n        v = 0\n    else:\n        v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n\n    h = 0\n    s = 0\n\n    if max_c!= min_c:\n        s = (max_c - min_c) / max_c\n\n    if max_c == r:\n        h = (g - b) / (max_c - min_c)\n    elif max_c == g:\n        h = 2 + (b - r) / (max_c - min_c)\n    else:\n        h = 4 + (r - g) / (max_c - min_c)\n\n    h = h / 6.0\n\n    if h < 0:\n        h += 1.0\n\n    return h, s, max_c"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            break\n            \n        if even_count > 0 and odd_count == 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count == 0:\n        return 0\n    else:\n        return odd_count * list1[0]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = odd_sum = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    product = even_sum * odd_sum\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count == 1:\n            product = num\n    \n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n                even_count += 1\n            elif first_even % 2 == 0:\n                first_even *= num\n            else:\n                first_even *= first_even\n        else:\n            if first_odd is None:\n                first_odd = num\n                odd_count += 1\n            elif first_odd % 2 == 1:\n                first_odd *= num\n            else:\n                first_odd *= first_odd\n    if even_count > 0 and odd_count > 0:\n        return first_even * first_odd\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            return lst[i] * lst[lst.index(lst[i]) + 1]\n        elif lst[i] % 2!= 0:\n            return lst[i] * lst[lst.index(lst[i]) - 1]\n    return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number.\n    If there are no even or odd numbers in the list, it returns None.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count == 0 or odd_count == 0:\n        return None\n    \n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n            \n        product *= even\n        \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of the first even and first odd numbers.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    # Iterate through the list and count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Check if there are enough even and odd numbers\n    if even_count < 1 or odd_count < 1:\n        return \"Not enough even and odd numbers to calculate the product.\"\n    else:\n        # Calculate the product\n        product = even_count * odd_count\n\n        # Return the product\n        return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings\n    test_str_list = test_str.split(\",\")\n\n    # Convert the strings to integers\n    int_tuple = tuple(map(int, test_str_list))\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Check if input is valid\n    if not isinstance(test_str, tuple):\n        return \"Invalid input type\"\n    \n    # Convert tuple string to integer tuple\n    converted_tuple = tuple(int(x) for x in test_str)\n    \n    return converted_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for i in test_str:\n        if i.isdigit():\n            result.append(int(i))\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of characters\n    str_list = list(test_str)\n    \n    # Initialize an empty integer list\n    int_list = []\n    \n    # Iterate through the list and check if each character is a digit or not\n    for char in str_list:\n        if char.isdigit():\n            # Convert the character to an integer and append it to the integer list\n            int_list.append(int(char))\n            \n    # Convert the integer list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    result = []\n    for item in test_str:\n        try:\n            result.append(int(item))\n        except ValueError:\n            result.append(None)\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    result = []\n    for i in test_str:\n        try:\n            int_i = int(i)\n            result.append(int_i)\n        except ValueError:\n            pass\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into list of tuples\n    tuples_list = test_str.split(\",\")\n    # Initialize an empty tuple\n    int_tuple = ()\n    # Loop through each tuple in the list\n    for tup in tuples_list:\n        # Convert each tuple element to integer\n        int_element = int(tup)\n        # Append the integer element to the empty tuple\n        int_tuple += (int_element,)\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Args:\n        test_str (tuple): A tuple string with integers separated by commas.\n\n    Returns:\n        tuple: An integer tuple.\n\n    \"\"\"\n    integer_tuple = []\n    for num in test_str:\n        integer_tuple.append(int(num))\n    return tuple(integer_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    string_list = test_str.split(',')\n    # Convert each string to an integer and append it to a list\n    int_list = [int(i) for i in string_list]\n    # Convert the list to a tuple\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): a sorted list of integers\n    x (int): an integer value to be inserted\n\n    Returns:\n    int: the index where the value should be inserted in the sorted list a, assuming that the value x is to the right of all elements in a.\n\n    Example:\n    >>> a = [1, 3, 5, 7, 9]\n    >>> x = 4\n    >>> right_insertion(a, x)\n    3\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i-1] < x:\n        return i\n    else:\n        return i+1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list of integers `a` and a value `x` as input and returns the index where `x` should be inserted in order to maintain the sorted order.\n    \n    :param a: a list of integers sorted in non-decreasing order\n    :param x: a value to be inserted in `a`\n    :return: the index where `x` should be inserted in `a` to maintain the sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        a.append(x)\n    elif a[i] > x:\n        a.insert(i, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Define the function to perform the insertion\n    def insert(arr, x):\n        i = bisect.bisect_left(arr, x)\n        arr.insert(i, x)\n\n    # Perform the right insertion\n    insert(a, x)\n\n    return a"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif x < a[index-1]:\n        return index-1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to locate the position where the value should be inserted\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If the value is not found, return the appropriate position for insertion\n    return left"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba\\s*b{3}\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a(b){3}\")\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return \"The string has an a followed by three 'b':\\n{}\".format(matches)\n    else:\n        return \"The string does not have an a followed by three 'b'.\"\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nresult = text_match_three(text)\nprint(result)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba{3}b\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Combine the list and string into a tuple\n    new_tuple = (test_str, new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + ','+ str(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    tuple_list = tuple(test_list)\n    # Combine the two tuples\n    new_tuple = (test_str, tuple_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    new_list = list(test_list)  # create a copy of the list\n    new_list.extend(test_str.split(','))  # add the items from the string as separate elements\n    return tuple(new_list)  # convert the list back to a tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple_list = []\n    for i in range(len(test_list)):\n        new_tuple_list.append(test_list[i] + test_str)\n    return tuple(new_tuple_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns True if every even index\n    contains an even number. Otherwise, it returns False.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Loop through every element in the list\n    for i in range(len(nums)):\n        # Check if the element at the current index is even\n        if nums[i] % 2 == 0:\n            # Check if the even position contains an odd number\n            if i % 2 == 1:\n                return False\n\n    # If we reach this point, all even positions contain even numbers\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            if i == 0 or nums[i-1] % 2 == 0:\n                continue\n            else:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n        else:\n            if nums[i] % 2!= 0:\n                even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # iterate through the list using a for loop\n    for i in range(0, len(nums), 2):\n        # check if the number at the current index is even\n        if nums[i] % 2!= 0:\n            # if the number is odd, return False\n            return False\n    # if all even indexes contain even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            new_tup.append(i)\n        else:\n            new_tup.extend(remove_nested(i))\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                flattened_list.append(subitem)\n        else:\n            flattened_list.append(item)\n    return tuple(flattened_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for tup in test_tup:\n        for item in tup:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            for j in i:\n                result.append(j)\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for tup in test_tup for i in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(el for tup in test_tup for el in tup if isinstance(el, (int, float, str)))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Initialize an empty list to store the non-nested tuples\n    result = []\n    \n    # Loop over the given tuple\n    for item in test_tup:\n        # If the item is not a tuple, add it to the result list\n        if not isinstance(item, tuple):\n            result.append(item)\n        # If the item is a tuple, recursively call the function on it\n        else:\n            result.extend(remove_nested(item))\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count \n\ninput_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9], 10]\nprint(count_list(input_list)) # Output: 4"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for item in input_list: \n        if type(item) == list: \n            count += 1 \n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Finding the last index of the element 'x'\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == x:\n            return i\n\n    # If element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1 # element not found"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of x in the sorted array\n    i = 0\n    n = len(arr)\n    while i < n and arr[i] < x:\n        i += 1\n    \n    # If x is not present in the array, return -1\n    if i == n or arr[i]!= x:\n        return -1\n    \n    # Find the last occurrence of x in the sorted array\n    j = n-1\n    while j >= 0 and arr[j] > x:\n        j -= 1\n    \n    # Return the index of the last occurrence of x\n    return j"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array `arr` and an element `x` as input and returns\n    the last index `i` of `arr` where `arr[i]` is equal to `x`. If no such element is\n    found, the function returns -1.\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): sorted array\n        x (any): element to search for\n\n    Returns:\n        int: index of the last occurrence of x in arr\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            left = mid + 1  # check to the left for the next occurrence\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input and returns the last position of x in the array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize two variables to keep track of the left and right indices of the current search range\n    left = 0\n    right = len(arr) - 1\n\n    # While the left index is less than the right index\n    while left < right:\n        # Calculate the middle index of the search range\n        mid = (left + right) // 2\n\n        # If the middle element is less than the target, update the left index to mid + 1\n        if arr[mid] < x:\n            left = mid + 1\n\n        # If the middle element is greater than the target, update the right index to mid\n        elif arr[mid] > x:\n            right = mid\n\n        # If the middle element is equal to the target, return mid\n        else:\n            return mid"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?i)a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(?!.*b).*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)([^b]*)b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.b\"\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize a variable to store the sum of odd numbers\n    sum_odd = 0\n\n    # loop through all the numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # if the number is odd, add it to the sum_odd variable\n        if i % 2 == 1:\n            sum_odd += i\n\n    # return the sum of odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0 \n    for i in range(n): \n        if i % 2!= 0: \n            s += i \n    return s \n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    return (r * (r + 1)) // 2 - sum([x for x in range(l, r+1) if x % 2!= 0])"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # take input from user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through the range\n    for i in range(l, r+1):\n        # if the number is odd, add it to the sum\n        if i % 2!= 0:\n            sum += i\n    \n    # print the sum\n    print(\"The sum of all odd natural numbers within the range\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input for l and r\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    \n    # initialize the sum variable to 0\n    sum = 0\n    \n    # iterate from l to r\n    for i in range(l, r+1):\n        # if the number is odd, add it to the sum variable\n        if i % 2!= 0:\n            sum += i\n    \n    # print the final result\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum to 0\n    sum_val = 0\n    \n    # loop through odd numbers from l to r (inclusive)\n    for i in range(1, n+1, 2): \n        # add the current odd number to the sum\n        sum_val += i\n        \n    # return the sum\n    return sum_val"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as input and returns the sum of all elements in the array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_val = 0\n    for i in arr:\n        sum_val += i\n    return sum_val"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # initialize a variable to store the sum\n    total = 0\n    \n    # loop through the array and add each element to the total\n    for element in arr:\n        total += element\n        \n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # initialize the sum variable to 0\n    total = 0\n    # loop through each element in the array\n    for num in arr:\n        # add the element to the sum\n        total += num\n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # Convert the number to a binary string\n    binary_str = bin(n)[2:]\n\n    # If d is negative, rotate right instead\n    if d < 0:\n        d = -d\n        binary_str = binary_str[::-1]\n\n    # Rotate left d bits\n    rotated_binary = binary_str[d:] + binary_str[:d]\n\n    # Convert the rotated binary string back to an integer\n    rotated_int = int(rotated_binary, 2)\n\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Shift the bits to the left by d bits\n    rotated_bits = n << d\n\n    # Left shift the least significant bit by d bits\n    left_shifted_bit = n & ((1 << d) - 1)\n\n    # Return the result\n    return rotated_bits | left_shifted_bit"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to be shifted\n    bits_to_shift = d % 32\n    \n    # If the number of bits to shift is less than 32, calculate the number of bits to rotate\n    if bits_to_shift < 32:\n        num_bits_to_rotate = 32 - bits_to_shift\n    else:\n        num_bits_to_rotate = bits_to_shift\n        \n    # Create a mask to only keep the bits to be rotated\n    mask = (1 << num_bits_to_rotate) - 1\n    \n    # Rotate the bits of the number\n    rotated_num = (n << bits_to_shift) | (n >> (32 - bits_to_shift))\n    \n    # Return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    if d >= 32:\n        return n\n    d = d % 32\n    n = n & mask\n    n = (n << d) | (n >> (32 - d))\n    return n & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # calculate the number of bits to rotate\n    num_bits = 32\n\n    # if d is negative, rotate to the left\n    if d < 0:\n        d = num_bits + d\n\n    # rotate left by d bits\n    n = (n << d) | (n >> (num_bits - d))\n\n    # if n is negative, add 2^32\n    if n < 0:\n        n += 1 << 32\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask # Mask out any bits that don't fit in 32 bits\n    \n    # Perform the rotation\n    n = (n << d) | (n >> (32 - d))\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert binary representation of n to a list of digits\n    n_digits = len(bin(n)[2:])\n\n    # Calculate the maximum number of bits that can be rotated left by d\n    max_bits = n_digits * 32 - d\n\n    # If the number of bits to be rotated by is greater than the maximum number of bits that can be rotated,\n    # then rotate left by the number of bits that can be rotated\n    if max_bits > 0:\n        shift_amount = d % max_bits\n        return (n >> shift_amount) | (n << (max_bits - shift_amount))\n    # If the number of bits to be rotated by is less than the maximum number of bits that can be rotated,\n    # then rotate left by d bits\n    else:\n        shift_amount = d % n_digits\n        return (n << shift_amount) | (n >> (n_digits - shift_amount))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary format\n    binary_n = bin(n)[2:]\n\n    # Get the number of bits in binary representation of n\n    num_bits = len(binary_n)\n\n    # Rotate left d bits\n    new_bits = binary_n[-d:] + binary_n[:-d]\n\n    # Check if we need to fill up the new bits with 0s\n    while len(new_bits) < num_bits:\n        new_bits = '0' + new_bits\n\n    # Convert new bits to integer\n    new_n = int(new_bits, 2)\n\n    # Return the new number\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to a binary string and get the length of the binary string\n    binary_string = bin(n)[2:]\n    length = len(binary_string)\n\n    # If the number is already rotated, return the original number\n    if d >= length:\n        return n\n\n    # Get the last d bits of the binary string\n    last_d_bits = binary_string[-d:]\n\n    # Get the first d bits of the binary string\n    first_d_bits = binary_string[:d]\n\n    # Combine the first and last d bits and convert it to an integer\n    rotated_number = int(last_d_bits + first_d_bits, 2)\n\n    return rotated_number"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all spaces from the text\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    text = re.sub('\\s+','', text)\n    return text.strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with empty string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Using regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Convert the text to lowercase\n    text = text.lower()\n    \n    # Remove all whitespaces using regular expressions\n    text = re.sub('\\s+','', text)\n    \n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string using the regular expression \"\\s+\"\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z) + 1):\n        if x == i:\n            count += 1\n        if y == i:\n            count += 1\n        if z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # initializing the count variable to 0\n    count = 0\n    # iterating over the three integers\n    for i in range(3):\n        # checking if the i-th integer is equal to the (i-1)-th integer\n        if i == 0:\n            if x == y == z:\n                count += 1\n        elif i == 1:\n            if y == z:\n                count += 1\n        elif i == 2:\n            if z == x:\n                count += 1\n    # returning the count variable\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if the array is already sorted\n    if n == 0 or arr[n-1] <= arr[0]:\n        return 0\n\n    # Initialize variables\n    count = 0\n    left = 0\n    right = n-1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # If the middle element is greater than the pivot element\n        if arr[mid] < arr[0]:\n            count += right - mid\n            right = mid\n        else:\n            left = mid + 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "Here's the Python implementation of the above approach:"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n and arr[j] < arr[i]:\n            j += 1\n        if j == n:\n            count += 1\n        else:\n            count += (n - j)\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-1-i]:\n            return i+1\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    count = 0\n\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += n - i #counting the number of swaps required to generate sorted array\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    left = 0\n    right = n - 1\n\n    while left < right:\n        # Swap elements at left and right pointers\n        arr[left], arr[right] = arr[right], arr[left]\n        count += 1\n\n        # Move the right pointer to the right\n        left += 1\n        right -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    min_val = min(arr)\n    max_val = max(arr)\n    count = 0\n\n    # find the number of rotations required to sort the array\n    for i in range(min_val, max_val + 1):\n        if arr.count(i) < n:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        # check if the i-th element is smaller than the (i+1)-th element\n        if arr[i] > arr[i + 1]:\n            # if it is, increment the count of rotations\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    # Traverse the array and check if it is sorted or not\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return count\n        if i == n-2:\n            return count\n        count += 1\n    # If the array is already sorted, count is equal to 0\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if the number is a perfect square\n    root = n ** 0.5\n    if root == int(root):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    # Check if n is a perfect square\n    d = n\n    while d*d > n:\n        d += 1\n    if d*d == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    def sqrt(x):\n        \"\"\"\n        Returns the square root of a number using the Newton-Raphson method.\n        \"\"\"\n        x0 = x\n        while x0 * x0 > x:\n            x0 = (x0 + x // x0) // 2\n        return x0\n\n    sqrt_n = sqrt(n)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n\n    # Find the square root of the given number\n    root = n ** 0.5\n\n    # Check whether the square root is an integer or not\n    if root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # Base case: 1 is a perfect square\n    if n == 1:\n        return True\n\n    # Base case: n is already a perfect square\n    if n % 4 == 1 and n % 9 == 8:\n        return True\n\n    # Initialize the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check whether the square root of n is equal to n\n    if sqrt_n ** 2 == n:\n        return True\n\n    # Check whether the square root of n is equal to its square\n    if sqrt_n ** 2 == sqrt_n:\n        return True\n\n    # Check whether the square root of n is odd\n    if sqrt_n % 2 == 1:\n        return False\n\n    # Check whether the square root of n is divisible by 3\n    if sqrt_n % 3 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 5\n    if sqrt_n % 5 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 7\n    if sqrt_n % 7 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 11\n    if sqrt_n % 11 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 13\n    if sqrt_n % 13 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 17\n    if sqrt_n % 17 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 19\n    if sqrt_n % 19 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 23\n    if sqrt_n % 23 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 29\n    if sqrt_n % 29 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 31\n    if sqrt_n % 31 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 37\n    if sqrt_n % 37 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 41\n    if sqrt_n % 41 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 43\n    if sqrt_n % 43 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 47\n    if sqrt_n % 47 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 53\n    if sqrt_n % 53 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 59\n    if sqrt_n % 59 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 61\n    if sqrt_n % 61 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 67\n    if sqrt_n % 67 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 71\n    if sqrt_n % 71 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 73\n    if sqrt_n % 73 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 79\n    if sqrt_n % 79 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 83\n    if sqrt_n % 83 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 89\n    if sqrt_n % 89 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 97\n    if sqrt_n % 97 == 0:\n        return False\n\n    # Check whether the square root of n is divisible by 101\n    if sqrt_n % 101 == 0"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n    \"\"\"\n    x = n\n    y = 1\n    while x >= y:\n        y = (y + x//y) // 2\n    return x == y"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    square_root = math.sqrt(n)\n    return square_root == int(square_root)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n < 0:\n        return False\n    left = 0\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is less than 0\n    if n < 0:\n        return False\n    # Check if the number is 0 or 1\n    elif n == 0 or n == 1:\n        return True\n    # Check if the number is not a perfect square\n    else:\n        # Initialize two variables, s and t, to 0\n        s = 0\n        t = n\n        # Loop until the square of s is greater than the number\n        while t**2 > n:\n            # Increment s\n            s += 1\n            # Update the value of t\n            t = (t + n // t) // 2\n        # If the square of s is equal to the number, then the number is a perfect square\n        if s*s == n:\n            return True\n        # Otherwise, the number is not a perfect square\n        else:\n            return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers is even.\")\n    else:\n        print(\"The product of the numbers is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return (product % 2) == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Check if the list is empty or contains only one element\n    if len(arr) == 0 or len(arr) == 1:\n        return True\n    \n    # Calculate the product of all elements in the list\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # Check if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Calculate the product of all the elements in the list\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                current_sum = lists[i][j]\n            else:\n                current_sum = lists[i][j] + lists[i][j-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j], lists[i][j-1]]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes in a list of lists and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in lists:\n        if i not in max_list:\n            max_list.append(i)\n\n    max_sum = max(max_list, key=sum)\n    return max_list[max_list.index(max_sum)]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Find the maximum sum\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and the list of lists to check\n    max_sum = float('-inf')\n    result = []\n    # Loop through each list in the list of lists\n    for sublist in lists:\n        # Calculate the sum of the elements in the list\n        current_sum = sum(sublist)\n        # If the sum is greater than the maximum sum so far, update the maximum sum and the result list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n    # Return the result list\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    def helper(lst, total, current_sum):\n        if not lst:\n            return current_sum\n        return helper(lst[1:], total + lst[0], current_sum + lst[0])\n\n    max_sum = 0\n    result = None\n\n    for lst in lists:\n        current_sum = helper(lst, 0, 0)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lst\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the maximum sum in each sublist\n    max_sublist_sum = [max(sublist) for sublist in lists]\n    # Find the maximum sum overall\n    max_overall_sum = max(max_sublist_sum)\n    # Create a new list to store the final result\n    result = []\n    # Loop through each sublist and append the elements that sum to the maximum sum overall\n    for sublist in lists:\n        if sum(sublist) == max_overall_sum:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_lists = [sublist]\n        elif sublist_sum == max_sum:\n            max_lists.append(sublist)\n    return max_lists"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1:\n                max_run += 1\n            elif test_str[i+1].isupper():\n                max_run += 1\n                start = i+1\n            else:\n                start = i\n        else:\n            if i > start:\n                max_run = max(max_run, i-start)\n            start = i\n    if i > start:\n        max_run = max(max_run, len(test_str)-start)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = \"\"\n    \n    # Iterate through the string\n    for char in test_str:\n        if char.isupper():\n            # If the current character is uppercase, add 1 to the current run and move on\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                current_char = char\n        else:\n            # If the current character is not uppercase, reset the current run and move on\n            current_run = 0\n            \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    prev_char = None\n    # Iterate over each character in the string\n    for char in test_str:\n        # If the character is uppercase and the previous character was not,\n        # then we have found a new run of uppercase characters\n        if char.isupper() and prev_char is None:\n            # Reset variables\n            max_run = 1\n            prev_char = char\n        # If the character is uppercase and the previous character was uppercase,\n        # then we have found a longer run of uppercase characters\n        elif char.isupper() and prev_char is not None:\n            max_run += 1\n            prev_char = char\n        # If the character is not uppercase and the previous character was uppercase,\n        # then we have found a run of lowercase characters\n        elif not char.isupper() and prev_char is not None:\n            break\n        # If we reach the end of the string and the previous character was uppercase,\n        # then we have found a run of lowercase characters\n        elif prev_char is not None:\n            max_run += 1\n            break\n    # Return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    prev_char =''\n\n    for char in test_str:\n        if char.isupper():\n            if char!= prev_char:\n                curr_run += 1\n                max_run = max(max_run, curr_run)\n            else:\n                curr_run = 1\n\n        prev_char = char\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    start_index = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                start_index = i - max_run\n        else:\n            current_run = 0\n    return max_run, test_str[start_index:start_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of current run and maximum run\n    current_run = 0\n    max_run = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the current character is uppercase\n        if char.isupper():\n            # If it is, increment the current run counter\n            current_run += 1\n        else:\n            # If it isn't, reset the current run counter\n            current_run = 0\n        \n        # Check if the current run counter is greater than the maximum run\n        if current_run > max_run:\n            # If it is, update the maximum run\n            max_run = current_run\n    \n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize variables to keep track of the current run of uppercase characters and the maximum run so far\n    run_start = 0\n    max_run = 0\n    \n    # iterate through the string\n    for i in range(len(test_str)):\n        # if the current character is uppercase, check if it is the start of a new run of uppercase characters\n        if test_str[i].isupper():\n            # if it is, update the current run start and increment the run count\n            run_start = i\n            run_len = 1\n        else:\n            # if it is not, check if it is the end of a run of uppercase characters\n            if run_start == 0:\n                # if it is not, it is not the start of a run, so we reset the run count\n                run_len = 0\n            else:\n                # if it is, we update the run length and move the run start pointer to the next position\n                run_len += 1\n        # check if the current run is longer than the maximum run so far\n        if run_len > max_run:\n            # if it is, update the maximum run\n            max_run = run_len\n    \n    # return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Convert all characters to lowercase\n    test_str = test_str.lower()\n    # Initialize variables to keep track of the current run and the maximum run\n    curr_run = 0\n    max_run = 0\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, increment the current run\n        if test_str[i] in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            curr_run += 1\n        # If the character is not uppercase, reset the current run to 0 and check if it is longer than the maximum run\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n    # Check if the current run is longer than the maximum run\n    if curr_run > max_run:\n        max_run = curr_run\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    # Iterate through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment current run counter\n        if char.isupper():\n            current_run += 1\n            # If current run is greater than the maximum run, update maximum run\n            if current_run > max_run:\n                max_run = current_run\n        # If the character is not uppercase, reset current run counter and move on to the next character\n        else:\n            current_run = 0\n    # Return maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    # Create an empty list to store the run of uppercase characters\n    run_list = []\n\n    # Iterate through the string from left to right\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, check if it's the start of a new run\n            if not run_list or run_list[-1][1]!= i - 1:\n                # If it's a new run, append it to the list\n                run_list.append((i, i))\n            # If it's a part of an existing run, update its end index\n            else:\n                run_list[-1] = (run_list[-1][0], i)\n\n    # Return the maximum run of uppercase characters\n    return max(run_list, key=lambda x: x[1] - x[0])"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If the list contains no odd numbers, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    If no odd numbers are found, the function will return None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        for i in range(len(test_tup)-K+1):\n            if test_tup[i:i+K] == test_tup[K]:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    return count >= K"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K or test_tup[1] in K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup2[i]} is smaller than {test_tup1[i]}\")\n            return False\n    \n    print(\"All elements in the second tuple are smaller than or equal to the corresponding elements in the first tuple\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup1[i] <= test_tup2[i] for i in range(len(test_tup1)))"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Check if all elements of the second tuple are smaller than their corresponding elements in the first tuple\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    \n    # If all elements of the second tuple are smaller than their corresponding elements in the first tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples have different lengths\"\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n            elif test_tup1[i] < test_tup2[i]:\n                return True\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"False\"\n    return \"True\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    }
]