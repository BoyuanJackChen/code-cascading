[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return sorted(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Create sets of elements from both input tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # Return the shared elements as a list\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Create sets of the two lists and find their intersection\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n    shared_elements = set_1.intersection(set_2)\n    # Convert the intersection back to a list and return it\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n    # Loop through the first list and check if each element is present in the second list\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_set.add(element)\n    # Convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2 and i not in shared_elements:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # converting the tuples into lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # creating a set to store unique elements of list1\n    unique_list1 = set(list1)\n    \n    # checking if the unique elements of list1 are present in list2\n    for element in unique_list1:\n        if element in list2:\n            return element\n    \n    # if no shared elements are found, then return None\n    return None"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2 (not prime)\n    if n < 2:\n        return True\n    \n    # Check if the number is divisible by any number from 2 to its square root (not prime)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If none of the above conditions are met, the number is prime (not divisible by any number)\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2.\n    if n < 2:\n        return True\n    \n    # Check if the number is divisible by any number between 2 and n-1.\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If the number is not divisible by any number between 2 and n-1, it is a prime number.\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Returns True if the given number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False\n\nif __name__ == \"__main__\":\n    # Example usage\n    print(is_not_prime(7))  # Output: True\n    print(is_not_prime(8))  # Output: False\n    print(is_not_prime(10))  # Output: False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of the first n elements of the list\n    hq.heapify(nums[:n])\n\n    # remove the minimum element from the heap and add it to the result list\n    for i in range(n,len(nums)):\n        nums[i-n] = hq.heappop(nums[:n])\n        hq.heappush(nums,nums[i-n])\n\n    return nums[n-1::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the list of numbers\n    heap = list(nums)\n    heapq.heapify(heap)\n\n    # Pop the largest n elements from the heap and return them in descending order\n    return sorted(heapq.nlargest(n, heap), reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a max-heap and add all elements to it\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n\n    # Pop and return the n largest elements from the heap\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)  # make the numbers a heap\n    largest = []  # create an empty list to store the n largest numbers\n    for _ in range(n):\n        largest.append(hq.heappop(nums))  # pop the largest number from the heap\n    return largest[::-1]  # reverse the list to get the n largest numbers in descending order"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min-heap to keep track of the n largest numbers found so far\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            # Add the new number to the heap\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            # Replace the smallest number in the heap with the new number\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    # Return the n largest numbers found\n    return heap[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    \n    for num in nums:\n        heapq.heappush(max_heap, -num)\n    \n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(max_heap))\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert the list to a heap\n    heap = nums\n    hq.heapify(heap)\n\n    # remove the smallest n elements from the heap\n    for _ in range(n):\n        hq.heappop(heap)\n\n    # return the largest n elements from the heap\n    return heap[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the given list of numbers to a heap\n    heap = [nums[0]]\n    for num in nums[1:]:\n        if num > heap[0]:\n            heapq.heappushpop(heap, num)\n        elif num < heap[0]:\n            heapq.heappush(heap, num)\n    # extract the n largest integers from the heap and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        while x!= 1:\n            if x % 2 == 0:\n                x //= 2\n            else:\n                return False\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    \n    while x!= 1:\n        if x & 1 == 1:\n            return False\n        x >>= 1\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    # Check if x is a power of 2\n    if x == 0 or (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    \n    if x == 1:\n        return True\n    \n    if x % 2 == 0:\n        return False\n    \n    while x!= 1:\n        if x % 2 == 0:\n            x /= 2\n        else:\n            x = 3*x + 1\n            \n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1:\n        return True\n    else:\n        while x > 1:\n            x = x >> 1\n        return x == 1"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to split the text into words and filter out the words that are less than 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Regular expression to match any word which is at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() method to find all words which match the pattern in the input text\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the string\n    words = re.findall('\\w+', text)\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    text = re.sub(r'\\W+','', text)\n    # Split the string into words\n    words = text.split()\n    # Filter the words based on the length of each word\n    filtered_words = [word for word in words if len(word) >= 4]\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define the regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # print the words\n    print(words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    # Initialize an empty list to store the squares of each element\n    squares = []\n    \n    # Loop through each element in the input list\n    for num in nums:\n        # Add the square of the current element to the squares list\n        squares.append(num**2)\n        \n    # Return the list of squares\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Initialize variables\n    n = len(str)\n    count = 0\n    min_rotations = n\n    \n    # Check all possible rotations\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        # Check if the current substring matches the given string\n                        if str[i:j+1] == str[k:l+1] == str[m:n+1]:\n                            # If it does, increment the count\n                            count += 1\n                            # Update the minimum number of rotations\n                            if count < min_rotations:\n                                min_rotations = count\n                                # Update the minimum substring found\n                                min_substring = str[i:j+1]\n\n    # Return the minimum number of rotations and the minimum substring found\n    return min_rotations, min_substring"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n #initialize minimum rotations as the length of the string\n    for i in range(n):\n        if str[i]!= str[(i+n)%n]: #if the characters are not the same, we need to rotate the string\n            if min_rotations > i+1: #if the current rotation is smaller than the previous one, update minimum rotations\n                min_rotations = i+1\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n):\n        if str[i] == str[n-i-1]:\n            return i+1\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # calculate the frequency of each character in the string\n    freq = [0] * 26\n    for char in str:\n        freq[ord(char) - ord('a')] += 1\n    # find the maximum frequency in the string\n    max_freq = max(freq)\n    # initialize the count and the rotation count to 0\n    count = 0\n    rotations = 0\n    # iterate through the string and count the number of rotations required\n    for i in range(n):\n        # calculate the frequency of the character after the current rotation\n        freq[ord(str[i]) - ord('a')] -= 1\n        # if the frequency of the character after rotation is less than 0, rotate the string\n        while freq[ord(str[i]) - ord('a')] < 0:\n            # calculate the new frequency of the character after the rotation\n            freq[ord(str[i]) - ord('a')] += 26\n            # shift the first character of the string to the end\n            str = str[1:] + str[0]\n            # increment the rotation count\n            rotations += 1\n            # update the frequency of the first character of the string\n            freq[ord(str[0]) - ord('a')] -= 1\n            # update the count of the second character of the string\n            if i < n - 1:\n                freq[ord(str[i+1]) - ord('a')] -= 1\n            # if the current character is the last character of the string, break out of the loop\n            if i == n - 1:\n                break\n        # update the count of the current character\n        count += 1\n    # return the minimum number of rotations required to get the same string\n    return rotations if count == max_freq else -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Find the minimum number of rotations required to get the same string using dynamic programming\n    # This is the bottom-up approach\n    dp = [[None]*(n+1) for _ in range(n+1)]\n\n    # Initialize the base cases\n    dp[0][0] = 0\n    dp[0][1] = 1\n    dp[1][0] = 1\n\n    for i in range(2, n+1):\n        for j in range(i):\n            # If the characters at the two ends of the substring are equal, ignore the middle character\n            if str[i-1] == str[j]:\n                # Check if the middle character is equal to the last character of the substring\n                if str[i-1] == str[j+1]:\n                    # If the middle character is equal to the last character, the substring is already equal\n                    dp[i][j] = dp[i-1][j+1]\n                else:\n                    # If the middle character is not equal to the last character, the substring is not equal after a rotation\n                    dp[i][j] = dp[i-1][j]\n            # If the characters at the two ends of the substring are not equal, the substring is equal after a rotation\n            else:\n                dp[i][j] = dp[i-1][j] + 1\n\n    # Find the minimum number of rotations required\n    min_rotations = n\n    for i in range(n, 0, -1):\n        min_rotations = min(min_rotations, dp[i][0])\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i]!= str[(i+n)%n]:\n            return i+1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # iterate over the characters in the string\n    for i in range(n-1):\n        # if the characters are not equal, increment the count of their frequency\n        if str[i]!= str[i+1]:\n            char_count[str[i]] -= 1\n            char_count[str[i+1]] += 1\n            # if the count of a character becomes zero, remove it from the dictionary\n            if char_count[str[i]] == 0:\n                del char_count[str[i]]\n            if char_count[str[i+1]] == 0:\n                del char_count[str[i+1]]\n    # find the minimum number of rotations required\n    min_rotations = n\n    for i in char_count:\n        if char_count[i] > 0:\n            min_rotations = min(min_rotations, char_count[i])\n    # return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # initialize the count of rotations to 0\n    count = 0\n    \n    # loop through each character in the string\n    for i in range(len(str)):\n        \n        # find the index of the character in the string\n        char_index = str.find(str[i])\n        \n        # if the character is at the beginning of the string, continue to the next iteration\n        if char_index == 0:\n            continue\n        \n        # if the character is at the end of the string, rotate the string\n        elif char_index == len(str)-1:\n            \n            # reverse the string from the character's index to the end\n            str = str[char_index::-1]\n            \n            # increment the count of rotations by 1\n            count += 1\n            \n        # if the character is in the middle of the string, rotate the string in both directions\n        else:\n            \n            # reverse the string from the character's index to the beginning\n            str = str[:char_index][::-1] + str[char_index:][::-1]\n            \n            # increment the count of rotations by 1\n            count += 1\n            \n    # return the count of rotations\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    # Initialize the variables\n    count = 0\n    n = len(str)\n    \n    # Iterate over all possible rotations\n    for i in range(n):\n        for j in range(i, n):\n            # Check if the substrings are equal\n            if str[i:j+1] == str[j:i+1][::-1]:\n                count += 1\n                # Check if the substrings are equal in reverse order\n                if str[i:j+1][::-1] == str[j:i+1]:\n                    count += 1\n                    break\n    \n    # Return the minimum number of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    \n    # Check if the string is already in its rotated form\n    if str == str[::-1]:\n        return 0\n    \n    # Iterate through the possible rotations of the string\n    for i in range(n // 2):\n        # Check if the current rotation is valid\n        if str[i:i+n] == str[n-i-1:n]:\n            # If it is, check if it is shorter than the current minimum rotation\n            if n-i-1 < min_rotations:\n                min_rotations = n-i-1\n    \n    # If the string is already in its rotated form, there is no rotation required\n    if min_rotations == n:\n        return 0\n    \n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if string is empty\n    if s == '':\n        return ''\n    # check if character is in string\n    elif ch not in s:\n        return s\n    else:\n        # remove first occurrence of character\n        s = s.replace(ch,'',1)\n        # remove last occurrence of character\n        s = s.replace(ch,'',-1)\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        # remove first occurrence\n        if s.find(ch) == 0:\n            s = s[1:]\n        # remove last occurrence\n        else:\n            s = s[:s.rfind(ch)]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    s = s.replace(ch,'',1)\n    return s.replace(ch,'')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s[1:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if ch is not present in s, return empty string\n    if ch not in s:\n        return ''\n    \n    # use string slicing to find the first occurrence of ch\n    i = s.find(ch)\n    \n    # if ch is not found, return empty string\n    if i == -1:\n        return ''\n    \n    # use string slicing to find the last occurrence of ch\n    j = s.rfind(ch)\n    \n    # if ch is not found, return empty string\n    if j == -1:\n        return ''\n    \n    # use string slicing to remove the first occurrence of ch\n    s = s[:i] + s[j+1:]\n    \n    # use string slicing to remove the last occurrence of ch\n    s = s[:i] + s[j+1:]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n\n    if s.startswith(ch):\n        return remove_Occ(s[1:], ch)\n    elif s.endswith(ch):\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = \"\"\n    for char in s:\n        if char!= ch:\n            new_s += char\n    return new_s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize variables for first and last occurrence indices\n    first_occ_index = -1\n    last_occ_index = -1\n    # iterate through the string, searching for the character and its first and last occurrence indices\n    for i in range(len(s)):\n        if s[i] == ch:\n            # if the character is the first occurrence, update the first occurrence index\n            if first_occ_index == -1:\n                first_occ_index = i\n            # if the character is the last occurrence, update the last occurrence index\n            if i == len(s)-1:\n                last_occ_index = i\n    # if there is no occurrence of the character in the string, return the same string as is\n    if first_occ_index == -1:\n        return s\n    # if there is only one occurrence of the character, remove it and return the new string\n    elif first_occ_index == last_occ_index:\n        return s[:first_occ_index] + s[first_occ_index+1:]\n    # if there are multiple occurrences of the character, remove only the first and last occurrences and return the new string\n    else:\n        return s[:first_occ_index] + s[first_occ_index+1:last_occ_index] + s[last_occ_index+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find the index of first occurrence of ch in s\n    idx = s.find(ch)\n    if idx!= -1:\n        # Remove the first occurrence of ch from s\n        s = s[:idx] + s[idx+1:]\n    # Find the index of last occurrence of ch in s\n    idx = s.rfind(ch)\n    if idx!= -1:\n        # Remove the last occurrence of ch from s\n        s = s[:idx] + s[idx+1:]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            for k in range(len(M)):\n                if i == k or j == k:\n                    M[i][j] += M[k][j]\n\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            for k in range(len(M)):\n                if i == k or j == k:\n                    M[i][j] -= M[k][j]\n\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            for k in range(len(M)):\n                if i == k or j == k:\n                    M[i][j] -= M[k][j]\n\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            for k in range(len(M)):\n                if i == k or j == k:\n                    M[i][j] += M[k][j]\n\n    return M\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Find the row with the smallest sum\n        min_sum = float('inf')\n        min_row = None\n        for j in range(n):\n            if j!= i:\n                sum_row = sum(M[j])\n                if sum_row < min_sum:\n                    min_sum = sum_row\n                    min_row = j\n        # Swap the rows\n        M[i], M[min_row] = M[min_row], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    # create a new matrix to store the sorted elements\n    sorted_matrix = [[0 for j in range(n)] for i in range(n)]\n\n    # loop through each row of the matrix and calculate the sum of the row\n    for i in range(n):\n        row_sum = 0\n        for j in range(n):\n            row_sum += M[i][j]\n        sorted_matrix[i][0] = row_sum\n\n    # loop through the sorted matrix and copy the elements to the original matrix in ascending order\n    for i in range(n):\n        for j in range(1, n):\n            if sorted_matrix[i][j] < sorted_matrix[i][j-1]:\n                sorted_matrix[i][j], sorted_matrix[i][j-1] = sorted_matrix[i][j-1], sorted_matrix[i][j]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize a list to store the indices of each row that needs to be sorted\n    indices = []\n    \n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Initialize a variable to store the sum of the current row\n        current_sum = 0\n        \n        # Loop through each element of the current row\n        for j in range(len(M[i])):\n            # Add the value of the current element to the sum\n            current_sum += M[i][j]\n        \n        # Append the index of the current row to the list of indices to be sorted\n        indices.append(i)\n        \n        # Sort the matrix in ascending order based on the sum of the current row\n        M[i].sort()\n        \n        # Reverse the sorted list to put the elements in descending order\n        M[i] = M[i][::-1]\n    \n    # Sort the matrix in ascending order based on the sum of its rows\n    M.sort(key=lambda x: sum(x))\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums in ascending order\n    sorted_row_sums = sorted(row_sums)\n    # Create a new list of rows, sorted according to the sorted row sums\n    sorted_rows = [row for row in M if sum(row) in sorted_row_sums]\n    # Return the sorted rows as a new matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Create a new matrix to store the sorted matrix\n    sorted_matrix = [[0 for j in range(n)] for i in range(n)]\n    \n    # Iterate through each row of the matrix\n    for i in range(n):\n        # Calculate the sum of the current row\n        row_sum = sum(M[i])\n        # Initialize a variable to store the index of the current smallest element\n        smallest_index = i\n        \n        # Iterate through the remaining rows of the matrix\n        for j in range(i+1, n):\n            # Calculate the sum of the current row\n            current_sum = sum(M[j])\n            # If the current sum is smaller, update the smallest index\n            if current_sum < row_sum:\n                row_sum = current_sum\n                smallest_index = j\n        \n        # Copy the current row to the sorted row at the smallest index\n        for k in range(n):\n            sorted_matrix[smallest_index][k] = M[i][k]\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols - 1):\n            if M[i][j] + M[i][j + 1] > M[i][cols - 1]:\n                M[i][j], M[i][j + 1] = M[i][j + 1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Flatten the matrix\n    flattened_matrix = [num for row in M for num in row]\n    \n    # Sort the flattened matrix\n    flattened_matrix.sort()\n    \n    # Create a new matrix with the sorted flattened matrix\n    sorted_matrix = []\n    row = 0\n    for num in flattened_matrix:\n        if row == 0:\n            sorted_matrix.append([num])\n        else:\n            sorted_matrix[row-1].append(num)\n        if num == flattened_matrix[-1]:\n            row += 1\n            \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize two empty lists to store the indices of the maximum and minimum elements of each row\n    max_indices = []\n    min_indices = []\n    \n    # Iterate through each row of the matrix\n    for i in range(len(M)):\n        # Initialize variables to store the maximum and minimum elements in the current row\n        max_val = M[i][0]\n        min_val = M[i][0]\n        # Iterate through each element in the current row\n        for j in range(1, len(M[i])):\n            # Update the maximum and minimum values if a larger or smaller value is found\n            if M[i][j] > max_val:\n                max_val = M[i][j]\n                max_indices = [i, j]\n            elif M[i][j] < min_val:\n                min_val = M[i][j]\n                min_indices = [i, j]\n                \n        # Swap the minimum and maximum elements in the current row\n        M[i][min_indices[0]], M[i][min_indices[1]] = M[i][max_indices[0]], M[i][max_indices[1]]\n    \n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters:\n    - l (int): length of the base of the triangular prism\n    - b (int): height of the triangular prism\n    - h (int): length of the height of the triangular prism\n\n    It returns the volume of the triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes the length, breadth and height of a triangular prism as input\n    and returns the volume of the prism.\n    '''\n    Volume = l*b*h\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes three input parameters:\n    l: length of the base of the triangle\n    b: height of the triangle\n    h: length of the height of the triangle\n\n    It returns the volume of the triangular prism.\n    '''\n\n    # Calculate the volume of the triangle\n    area = 0.5 * l * b\n    volume = area * h\n\n    # Return the volume of the triangle\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the lengths of the base and height of the prism and returns the volume of the prism.\n    '''\n    area = 0.5 * l * h\n    volume = l * b * h + b * h * l + h * l * b - area\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h  # formula for volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the prism\n    area = 0.5 * l * b\n    # Calculate the volume of the prism\n    volume = area * h\n    # Return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n    \"\"\"\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula to find the volume of a triangular prism\n    # Volume = 1/2 * base * height\n    volume = (1/2)*(l*b*h)\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    volume = l*b*h # Calculate the volume of the prism\n    return volume # Return the volume of the prism"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z](?=[A-Z])|([A-Z](?=[A-Z][a-z])|[A-Z])')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n\n    # Convert the text to lowercase\n    text = text.lower()\n\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_'\n\n    # Use re.search() method to check if the input string matches the pattern\n    result = re.search(pattern, text)\n\n    # If the pattern matches, return true\n    if result:\n        return True\n    # Otherwise, return false\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[a-z]+(?=[A-Z])'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[a-z](?=[a-z]|$)'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<![_a-zA-Z])[a-z]+(?![_a-zA-Z])_')\n    result = pattern.search(text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'(?<![a-z])[a-z](?![a-z])')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<!_)([a-z])(?!_)\"\n    result = re.findall(pattern, text)\n    return bool(result)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Compile regular expression pattern to match lowercase letters followed by an underscore\n    pattern = r'[a-z_]+'\n\n    # Use re.findall() function to find all matches in the input text\n    matches = re.findall(pattern, text)\n\n    # If any matches are found, return True, otherwise return False\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a + a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Remove all characters from the first string which are present in the second string\n    for char in string:\n        if char in \"aeiouAEIOU\":\n            string = string.replace(char, \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a set of characters in the second string\n    set_chars = set(string)\n\n    # create a list of characters to remove from the first string\n    chars_to_remove = [c for c in range(NO_OF_CHARS) if c not in set_chars]\n\n    # remove the characters from the first string\n    result = [c for c in string if c not in chars_to_remove]\n\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    set_str = set(string)\n    result = []\n    for char in string:\n        if char not in set_str:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char in string:\n            string = string.replace(char, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_set = set(string)\n\n    for i in range(NO_OF_CHARS):\n        if chr(i) in char_set:\n            string = string.replace(chr(i), '')\n\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes in a string and returns a list containing only the characters in string \n    that are not present in the second string.\n    \"\"\"\n    string_list = list(string)\n    char_set = set(string[NO_OF_CHARS:])\n    \n    return [char for char in string_list if char not in char_set]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes a string as input and removes the characters present in another string.\n    \"\"\"\n    for char in string:\n        if char not in string_to_remove:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    # Convert the string into a list of characters\n    char_list = list(string)\n    # Remove the characters from the first string\n    char_list = [char for char in char_list if char not in string]\n    # Convert the list back into a string\n    new_string = ''.join(char_list)\n    return new_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    \n    # Loop through the array and update the frequency of each element in the dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Loop through the dictionary and check if there are any duplicate elements\n    for key, value in freq_dict.items():\n        if value > 1:\n            return True\n    \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Use a dictionary to store the indices of the elements\n    indices = {}\n\n    for i, num in enumerate(arraynums):\n        if num in indices:\n            return True\n        else:\n            indices[num] = i\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the count of each element\n    counts = {}\n    for num in arraynums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    # iterate over the counts dictionary to check for duplicates\n    for count in counts.values():\n        if count > 1:\n            return True\n    # if no duplicates found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    # iterate through the array and update the frequency dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # iterate through the dictionary to check if any element has a frequency greater than 1\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            return True\n    # if no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the indices of the elements\n    indices = {}\n    for i in range(len(arraynums)):\n        # if the element is already in the dictionary, return True\n        if arraynums[i] in indices:\n            return True\n        # if the element is not in the dictionary, add it with its index as its value\n        else:\n            indices[arraynums[i]] = i\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements and their frequency\n    element_freq = {}\n    # Loop through the array and update the frequency of each element in the dictionary\n    for num in arraynums:\n        if num in element_freq:\n            element_freq[num] += 1\n        else:\n            element_freq[num] = 1\n    # Loop through the dictionary and check for any duplicate elements\n    for num in element_freq:\n        if element_freq[num] > 1:\n            return True\n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the array\n    frequency = {}\n    \n    # iterate through the array and update the frequency of each element\n    for num in arraynums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # iterate through the frequency dictionary and check if any element has a frequency greater than 1\n    for num, freq in frequency.items():\n        if freq > 1:\n            return True\n    \n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x//2)\n    else:\n        return is_woodall((3*x)+1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 100 and x < 10000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    if x >= 1000 and x <= 10000:\n        return True\n    elif x >= 10001 and x <= 100000:\n        return True\n    elif x >= 100001 and x <= 1000000:\n        return True\n    elif x >= 1000001 and x <= 10000000:\n        return True\n    elif x >= 10000001 and x <= 100000000:\n        return True\n    elif x >= 100000001 and x <= 1000000000:\n        return True\n    elif x >= 1000000001 and x <= 10000000000:\n        return True\n    elif x >= 10000000001 and x <= 100000000000:\n        return True\n    elif x >= 100000000001 and x <= 1000000000000:\n        return True\n    elif x >= 1000000000001 and x <= 10000000000000:\n        return True\n    elif x >= 10000000000001 and x <= 100000000000000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x >= 1 and x <= 9:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x//2)\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return \"Woodall number is 0\"\n    elif x < 0:\n        return \"Woodall number is not defined\"\n    elif x > 0:\n        if x%10 == 0:\n            return \"Woodall number is 10\"\n        elif x%10 == 1:\n            return \"Woodall number is 11\"\n        elif x%10 == 2:\n            return \"Woodall number is 12\"\n        elif x%10 == 3:\n            return \"Woodall number is 13\"\n        elif x%10 == 4:\n            return \"Woodall number is 14\"\n        elif x%10 == 5:\n            return \"Woodall number is 15\"\n        elif x%10 == 6:\n            return \"Woodall number is 16\"\n        elif x%10 == 7:\n            return \"Woodall number is 17\"\n        elif x%10 == 8:\n            return \"Woodall number is 18\"\n        else:\n            return \"Woodall number is 19\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # list of numbers that are known to be woodball\n    woodball_numbers = [2, 4, 7, 12, 21]\n    \n    # check if x is in the list of woodball numbers\n    if x in woodball_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x < 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 7 or x == 11:\n        return True\n    elif x > 10 and x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        if x % 5 == 0:\n            return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp = temp // 10\n    return (num - reverse) == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Reverse the input number\n    rev_num = int(str(num)[::-1])\n    # Check if the reversed number is one less than twice the original number\n    return (rev_num - 2 * num == 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the original number is one less than twice its reverse\n    if num - rev_num == 1:\n        print(\"The given number is one less than twice its reverse.\")\n    else:\n        print(\"The given number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string and reverse it\n    num_str = str(num)\n    num_rev = num_str[::-1]\n\n    # Check if the number is one less than twice its reverse\n    if int(num_rev) - 1 < int(num_str) * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == 2 * rev_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Reverse the number\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n\n    # Check if the reversed number is one less than twice the original number\n    if reverse_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse == 2 * reverse - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # calculate the reverse of the given number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n\n    # check if the reverse of the number is one less than twice the original number\n    if rev_num == 2*num:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    reversed_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # check if the original number is one less than twice its reverse\n    if num - 1 == reversed_num * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if num == reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize variables\n    max_num = 0\n    current_num = 0\n    carry = 0\n    \n    # Iterate through each digit in the input list\n    for digit in arr:\n        # If the digit is 0, continue to the next digit\n        if digit == 0:\n            continue\n        \n        # Calculate the next number that can be formed with this digit\n        next_num = digit + carry\n        \n        # Check if the next number is greater than the current maximum number\n        if next_num > max_num:\n            max_num = next_num\n            \n        # Add the next digit to the current number and carry the next digit to the next number\n        current_num = next_num + digit\n        carry = current_num // 10\n        \n        # If the sum of the current number and the carry is greater than 9, subtract 10 from the next digit\n        if current_num >= 10:\n            current_num -= 10\n            carry = 1\n            \n    # Add the last carry to the maximum number\n    max_num += carry\n    \n    # If the maximum number is 0, it means that all the digits in the input list were 0, so we return 0\n    if max_num == 0:\n        max_num = 1\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i]*(10**(len(arr)-i-1)))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num) * (int(num) + 1) // 2)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    arr.sort(reverse=True) # sort the array in descending order\n    \n    max_num = 0\n    prev_num = 0\n\n    for num in arr:\n        if num > prev_num + 1:\n            max_num = prev_num + 1\n            break\n        else:\n            max_num = num\n            prev_num = num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    def is_valid_number(num, digits):\n        for digit in str(num):\n            if digit not in digits:\n                return False\n        return True\n\n    def is_valid_number_recursive(num, digits, i, memo):\n        if i == len(digits):\n            return is_valid_number(num, digits)\n        if num >= 10**len(digits) or num == 0:\n            return False\n        if memo[num]:\n            return memo[num]\n        if (num//10**i) < 10**i:\n            return False\n        memo[num] = is_valid_number_recursive(num, digits, i+1, memo) or is_valid_number_recursive((num//10**i), digits, i+1, memo)\n        return memo[num]\n\n    digits = set([int(digit) for digit in str(max(arr))])\n    memo = {}\n\n    result = is_valid_number_recursive(0, digits, 0, memo)\n\n    if result:\n        return result\n\n    return -1"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    num = 0\n    for i in range(len(arr)):\n        num = num * 10 + arr[i]\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as an input and returns the largest number that can be formed with those digits.\n    '''\n    arr.sort()\n    max_num = 0\n    current_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            current_num = int(''.join(map(str, arr[i:j])))\n            if current_num > max_num:\n                max_num = current_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(str(arr[k]) for k in range(i, j)))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if both the integers have opposite sign, else it returns False.\n    '''\n    #Checking the sign of x and y\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    # If both x and y are positive, then the product of x and y will be negative, hence the signs are opposite.\n    if x > 0 and y > 0:\n        return True\n    # If both x and y are negative, then the product of x and y will be positive, hence the signs are opposite.\n    elif x < 0 and y < 0:\n        return True\n    # If at least one of the numbers is zero, then their signs cannot be opposite.\n    elif x == 0 or y == 0:\n        return False\n    # If none of the above conditions are true, then the signs are same.\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    elif x > 0 and y > 0:\n        return \"Both numbers have positive signs.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    # Check if x and y have opposite signs\n    if x*y >= 0:\n        return \"The two numbers have the same sign\"\n    else:\n        return \"The two numbers have different signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function takes two integers as input and returns True if their signs are opposite or False otherwise.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if both integers are positive or negative\n    if x > 0 and y > 0 or x < 0 and y < 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    if (x*y) < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    octagonal = 0\n    count = 1\n    \n    while octagonal <= n:\n        if count % 2 == 0:\n            octagonal = count * (3 * count - 1)\n        else:\n            octagonal = count * (3 * count - 2)\n        count += 1\n    \n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the formula for nth octagonal number\n    a = 1\n    b = 2\n    while b < n:\n        a = a + b\n        b = a + b\n    return a - b"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        b = 2*(a**2) - 1\n        print(b)\n        a += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = n * (n + 1)\n    if num % 8 == 0:\n        return True\n    else:\n        return False\n\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n + 1):\n        if is_octagonal(i):\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def is_square(n):\n        \"\"\"\n        Helper function to check if a number is a square number.\n        \"\"\"\n        return n*n == n\n\n    def find_nth_square(n):\n        \"\"\"\n        Helper function to find the nth square number.\n        \"\"\"\n        if n <= 1:\n            return 1\n        else:\n            return 4 * find_nth_square(n-1)\n\n    def find_nth_octagonal(n):\n        \"\"\"\n        Main function to find the nth octagonal number.\n        \"\"\"\n        if not is_square(n):\n            return None\n        else:\n            return n * (3 * n - 1) // 2\n\n    if n == 0:\n        return None\n    else:\n        return find_nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 8 * n * n - 16 * n + 1\n\nn = int(input(\"Enter a positive integer: \"))\n\nif n < 0:\n    print(\"Invalid input. Please enter a positive integer.\")\nelse:\n    print(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_helper(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return 3 * octagonal_helper(n//2)\n        else:\n            return 2 * octagonal_helper(n//2) + 1\n\n    return octagonal_helper(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0 or n == 1: \n        return True \n    elif n % 2 == 0: \n        return is_octagonal(n // 2)\n    else: \n        return is_octagonal(n - 1) + 1 \n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) ** 2\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    else:\n        return is_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) / 2"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each digit\n    digit_count = defaultdict(int)\n    \n    # Iterate through the string and count the frequency of each digit\n    for char in s:\n        digit_count[int(char)] += 1\n    \n    # Initialize the count of substrings\n    count = 0\n    \n    # Iterate through all possible substrings of length n\n    for i in range(1, len(s) + 1):\n        # Iterate through all possible substrings of length n with i occurrences of the digit\n        for j in range(digit_count[i] + 1):\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with each sum of digits\n    substring_count = defaultdict(int)\n\n    # iterate through all possible substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits is equal to the length of the substring\n            if sum(int(d) for d in s[i:j]) == j-i:\n                # increment the count of substrings with the same sum of digits\n                substring_count[j-i] += 1\n\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # initialize a dictionary to store the count of substrings\n    count = defaultdict(int)\n    \n    # loop through each character in the string\n    for i in range(len(s)):\n        \n        # loop through all possible substrings of the current character\n        for j in range(i+1, len(s)+1):\n            \n            # check if the sum of digits in the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[j-i] += 1\n    \n    # return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the frequency of each digit in the string\n    digit_freq = defaultdict(int)\n    for char in s:\n        if char.isdigit():\n            digit_freq[int(char)] += 1\n    \n    # Initialize a variable to store the total number of substrings\n    count = 0\n    \n    # Loop through the length of the string\n    for length in range(1, len(s) + 1):\n        # Initialize a variable to store the current substring\n        current_substring = ''\n        \n        # Loop through the string and add digits to the current substring\n        for i in range(len(s) - length + 1):\n            # If the current substring has the sum of digits equal to the length of the substring, increment the count\n            if sum(map(int, current_substring)) == length:\n                count += 1\n            \n            # Add the next digit to the current substring\n            current_substring += s[i+length]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a defaultdict to store the count of substrings with the given sum\n    count_dict = defaultdict(int)\n\n    # iterate through the string\n    for i in range(len(s)):\n        # get the current substring\n        sub_str = s[i:i+2]\n\n        # convert the substring to list of digits\n        sub_list = [int(digit) for digit in sub_str]\n\n        # calculate the sum of the digits\n        sum_digits = sum(sub_list)\n\n        # check if the sum of digits is equal to the length of the substring\n        if sum_digits == len(sub_str):\n            count_dict[sum_digits] += 1\n\n    # return the count of substrings with the given sum\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with sum of digits equal to length\n    digit_count = defaultdict(int)\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Get the substring with length i\n        substring = s[i:i+i]\n        # Get the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in substring)\n        # Update the count of substrings with sum of digits equal to length\n        digit_count[substring_sum] += 1\n    # Return the total count of substrings with sum of digits equal to length\n    return sum(count for count in digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a dictionary to store the count of each substring\n    counts = defaultdict(int)\n    # loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits of the substring equals its length\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # increment the count for the substring\n                counts[s[i:j]] += 1\n    # return the count of all substrings\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with the sum of digits as their length\n    count_dict = defaultdict(int)\n\n    # loop through all the characters in the string\n    for i in range(len(s)):\n        # check if the current substring has a sum of digits as its length\n        substring = s[i:i+len(s[i])+1]\n        if sum(int(digit) for digit in substring) == len(substring):\n            count_dict[len(substring)] += 1\n\n    # return the count of substrings with the sum of digits as their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(c) for c in substring) == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in s:\n        digit_count[int(i)] += 1\n\n    count = 0\n    for i in range(10):\n        count += digit_count[i] * (digit_count[i] - 1) // 2\n\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = xs[0]\n        for x in xs[1:]:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(xs)):\n        # Check if the current element is smaller than the current smallest number\n        if xs[i] < smallest:\n            # Update the smallest number if the current element is smaller\n            smallest = xs[i]\n\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    # Sort the list in ascending order\n    test_list = sorted(test_list)\n    \n    # Initialize variables for minimum and maximum differences\n    min_diff = test_list[1] - test_list[0]\n    max_diff = test_list[1] - test_list[0]\n    \n    # Iterate through the list to find the maximum difference\n    for i in range(1, len(test_list)-1):\n        diff = test_list[i+1] - test_list[i]\n        \n        # Update minimum and maximum differences\n        if diff < min_diff:\n            min_diff = diff\n        elif diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initialize variables for the minimum and maximum difference\n    min_diff = test_list[1][1] - test_list[0][1]\n    max_diff = min_diff\n    \n    # Loop through the remaining pairs in the list and update the minimum and maximum differences\n    for i in range(1, len(test_list)-1):\n        diff = test_list[i+1][1] - test_list[i][1]\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return \"The list must have at least 2 elements to find the maximum difference.\"\n    \n    max_diff = 0\n    \n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize the minimum and maximum values to the first and last values in the list\n    min_val = test_list[0]\n    max_val = test_list[-1]\n\n    # Iterate over the rest of the list, updating the minimum and maximum values as needed\n    for i in range(1, len(test_list) - 1):\n        if test_list[i] < min_val:\n            min_val = test_list[i]\n        elif test_list[i] > max_val:\n            max_val = test_list[i]\n\n    # Return the maximum difference between the minimum and maximum values\n    return max_val - min_val"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize the maximum difference to be the minimum integer value\n    max_diff = float('-inf')\n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the two numbers in the tuple and check if it's greater than the current maximum difference\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples with the second value as the key\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Create a new list to store the sorted tuples\n    sorted_marks = []\n\n    # Sort the list in ascending order based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function sorts a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    # Print the sorted list of tuples\n    print(sorted_marks)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # convert the list of tuples to a list of lists\n    marks_list = [[mark[0], mark[1]] for mark in subjectmarks]\n    \n    # sort the list of lists using the second value of each tuple (i.e., the second element of each sublist)\n    marks_list.sort(key=lambda x: x[1])\n    \n    # convert the sorted list of lists back to a list of tuples\n    sorted_marks = [(sublist[0], sublist[1]) for sublist in marks_list]\n    \n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(sum(data_list))\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        flat_list = []\n        for element in lst:\n            if type(element) == list:\n                flat_list.extend(flatten(element))\n            else:\n                flat_list.append(element)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list: # base case\n        return 0\n    else:\n        first_element = data_list[0]\n        rest_of_list = data_list[1:]\n        flattened_list = recursive_list_sum(rest_of_list)\n        return first_element + flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(data_list) == 0:\n        return 0\n    \n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers present in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count variable\n    count = 0\n    # Iterate through all possible values of n\n    for i in range(1, n + 1):\n        # Calculate the number of ways to partition the i-th Bell number into 2 parts\n        ways = (i * (i - 1)) // 2\n        # Add the number of ways to the count variable\n        count += ways\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Initialize the value of x to 0\n    x = 0\n    # Loop through all values of x from 1 to n\n    for i in range(1, n+1):\n        # Calculate the value of y as x^2\n        y = i ** 2\n        # Calculate the value of z as x^3\n        z = i ** 3\n        # Check if y is divisible by z\n        if y % z == 0:\n            # If it is, increment the count by 1\n            count += 1\n    # Return the count value\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    # Calculate the number of partitions of n\n    def partition(n, k):\n        if k == 0 or k == n:\n            return 1\n        elif k > n:\n            return 0\n        else:\n            return partition(n-1, k-1) + partition(n-1, k)\n\n    # Calculate the number of partitions of n-1\n    def partition_of_n1(n):\n        return partition(n-1, n)\n\n    # Calculate the number of partitions of n-2\n    def partition_of_n2(n):\n        return partition(n-2, n-2)\n\n    # Calculate the number of partitions of n-3\n    def partition_of_n3(n):\n        return partition(n-3, n-3)\n\n    # Calculate the number of ways to partition n\n    ways = partition_of_n3(n) * partition_of_n2(n) * partition_of_n1(n)\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 2 * bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # create a list of bell numbers\n    bell_numbers = [bell_number(i) for i in range(n+1)]\n    bell_numbers.append(0)\n    \n    # initialize variables to keep track of the number of ways and the partitions\n    num_ways = 0\n    partitions = []\n    \n    # loop through each partition size\n    for i in range(1, n+1):\n        # initialize variables to keep track of the number of ways and the partitions\n        num_ways = 0\n        partitions = []\n        \n        # loop through the bell numbers for that partition size\n        for j in range(1, n+1):\n            # check if the number of ways to partition this bell number is greater than 0\n            if bell_numbers[j] > 0:\n                # if it is, check if we have already encountered this partition before\n                found = False\n                for k in range(len(partitions)):\n                    if partitions[k] == j:\n                        found = True\n                        break\n                # if we have not encountered this partition before, add it to the list of partitions\n                if not found:\n                    partitions.append(j)\n                    num_ways += bell_numbers[j]\n        \n        # add the number of ways to each partition to the total number of ways\n        num_ways += len(partitions) * (bell_numbers[i]-1)\n    \n    # return the total number of ways\n    return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(1, n + 1):\n            count += bell_number(i - 1)\n        return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize a list to store the number of ways to partition each Bell number\n    ways = [0] * (n + 1)\n\n    # Set the first two Bell numbers to 0 and 1\n    ways[0] = 0\n    ways[1] = 1\n\n    # Iterate through the Bell numbers from 2 to n\n    for i in range(2, n + 1):\n        # Calculate the number of ways to partition the Bell number i\n        ways[i] = ways[i - 1]\n\n        # Add the number of ways to partition the Bell number i - 1 to the current number of ways to partition i\n        for j in range(ways[i - 1], ways[i]):\n            ways[i] += ways[j]\n\n    # Return the final number of ways to partition the Bell numbers\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def count_ways(a, b, k):\n        if k == 0:\n            return 1\n        elif k < 0:\n            return 0\n        else:\n            return count_ways(a, b, k - 1) + count_ways(a + b, b, k - a - b)\n    \n    # Calculate Bell numbers up to n\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n    \n    for i in range(2, n + 1):\n        bell_numbers[i] = count_ways(1, i, i)\n    \n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return bell_number(n // 2) + bell_number(n // 2)\n    else:\n        return bell_number((n - 1) // 2) + bell_number((n - 1) // 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    # Initialize the count of ways to partition the set to 0\n    ways = 0\n    \n    # Check if the number is 1 or 0\n    if n == 0 or n == 1:\n        return ways\n    \n    # Check if the number is a multiple of 2 or 4\n    if n % 2 == 0 or n % 4 == 0:\n        return 0\n    \n    # Check for the remaining cases\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            ways += bell_number(i)\n    \n    return ways"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Returns True if the given array is monotonic (increasing or decreasing)\n    and False otherwise.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] == A[-1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1] or A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    elif A[0] == A[-1]:\n        for i in range(1, n-1):\n            if A[i] <= A[i-1]:\n                return False\n            elif A[i] >= A[i+1]:\n                return False\n        return True\n    elif A[0] < A[1]:\n        for i in range(1, n):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, n):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] == A[-1]:\n        return True\n    \n    if A[0] < A[1] and A[-1] > A[-2]:\n        return True\n    \n    if A[0] > A[1] and A[-1] < A[-2]:\n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    if n == 0 or n == 1: \n        return True # if array is empty or has only one element, it is always monotonic\n\n    for i in range(1, n): \n        if A[i] < A[i-1]: \n            return False # if next element is smaller, return False\n        elif A[i] > A[i-1]: \n            return True # if next element is larger, return True\n\n    return True # if all elements are the same, return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_monotonic(A):\n    if len(A) < 2:\n        return True\n    if A[1] > A[0]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    elif A[1] < A[0]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n    else:\n        return is_monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # check if the array has only negative elements\n    if A[0] < 0 and A[-1] > 0:\n        return False\n\n    # check if the array has only positive elements\n    if A[0] > 0 and A[-1] < 0:\n        return False\n\n    # check if the array has only zero elements\n    if A[0] == 0 and A[-1] == 0:\n        return True\n\n    # iterate through the array\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n        if A[i] > A[i-1] and A[i]!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n\n    if A[-1] >= A[-2]:\n        for i in range(len(A)-2, 0, -1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or not\n    if len(A) == 0:\n        return True\n    # check if the array has only one element\n    elif len(A) == 1:\n        return True\n    # check if the array has only two elements\n    elif len(A) == 2:\n        if A[0] >= A[1]:\n            return True\n        else:\n            return False\n    else:\n        # initialize two variables for current and next element\n        curr = A[0]\n        next = A[1]\n        # loop through the rest of the elements\n        for i in range(2, len(A)):\n            # if the next element is less than the current element, return false\n            if next < curr:\n                return False\n            # otherwise, update the current and next element\n            curr = next\n            next = A[i]\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the sublist is present in the list\n    for i in range(len(l)):\n        if l[i:] == s:\n            return True\n\n    # If the sublist is not present in the list, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    \n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Convert the list of tuples to a list of lists\n    list_of_lists = [list(t) for t in Input]\n    # Check if all the lists in the list of lists have the same length\n    return all(len(t) == len(list_of_lists[0]) for t in list_of_lists)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(set([len(j) for j in i])) > 1:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is an empty list\n    if not Input:\n        return True\n    \n    # Get the first tuple\n    first_tuple = Input[0]\n    \n    # Check if the length of the first tuple is equal to all the remaining tuples in the list\n    for i in range(1, len(Input)):\n        if len(Input[i])!= len(first_tuple):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \n    Parameters:\n    nums (list): a list of integers to be sorted\n    \n    Returns:\n    The sorted list.\n    '''\n    \n    # Initialize variables\n    swapped = True\n    gap = len(nums) // 2\n    \n    while swapped:\n        swapped = False\n        \n        # Iterate through the list\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        \n        # Decrease the gap\n        gap = int(gap / 1.3)\n        \n        # Check if the gap is too small\n        if gap < 1:\n            gap = 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Define the swap function\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n\n    # Define the check function\n    def check(nums):\n        # Check if the list is sorted\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                return False\n        return True\n\n    # Initialize the variables\n    swapped = True\n    gap = len(nums)\n    count = 0\n\n    # Loop until the list is sorted\n    while swapped:\n        swapped = False\n\n        # Loop through the list\n        for i in range(gap, len(nums)):\n            if nums[i - gap] > nums[i]:\n                swap(nums, i - gap, i)\n                swapped = True\n\n        # Reduce the gap size\n        if swapped:\n            gap = int(gap / 1.3)\n            count += 1\n\n        # If the gap size becomes too small, sort the list\n        if gap < 1:\n            gap = 1\n            count += 1\n\n    print(\"Sorted list in\", count, \"swaps.\")\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        gap = int(gap/1.3)\n\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = n // 10\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(n - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    Parameters:\n    nums (list): A list of elements to sort.\n\n    Returns:\n    sorted_nums (list): The sorted list.\n    '''\n\n    # initialize parameters\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(gap, n):\n            if nums[i] > nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    max_swaps = 0\n\n    # Repeat until no swaps are made\n    while max_swaps < n:\n        max_swaps = 0\n\n        # Sort pairs of adjacent elements\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                max_swaps += 1\n\n        # Sort triples of adjacent elements\n        for i in range(n-2):\n            if nums[i] > nums[i+2]:\n                nums[i], nums[i+2] = nums[i+2], nums[i]\n                max_swaps += 1\n\n        # Sort quadruples of adjacent elements\n        for i in range(n-3):\n            if nums[i] > nums[i+3]:\n                nums[i], nums[i+3] = nums[i+3], nums[i]\n                max_swaps += 1\n\n        # Sort quintuples of adjacent elements\n        for i in range(n-4):\n            if nums[i] > nums[i+4]:\n                nums[i], nums[i+4] = nums[i+4], nums[i]\n                max_swaps += 1\n\n        # Sort sextuples of adjacent elements\n        for i in range(n-5):\n            if nums[i] > nums[i+5]:\n                nums[i], nums[i+5] = nums[i+5], nums[i]\n                max_swaps += 1\n\n        # Sort septuples of adjacent elements\n        for i in range(n-6):\n            if nums[i] > nums[i+6]:\n                nums[i], nums[i+6] = nums[i+6], nums[i]\n                max_swaps += 1\n\n        # Sort octuples of adjacent elements\n        for i in range(n-7):\n            if nums[i] > nums[i+7]:\n                nums[i], nums[i+7] = nums[i+7], nums[i]\n                max_swaps += 1\n\n        # Sort nonetuples of adjacent elements\n        for i in range(n-8):\n            if nums[i] > nums[i+8]:\n                nums[i], nums[i+8] = nums[i+8], nums[i]\n                max_swaps += 1\n\n        # Sort decuples of adjacent elements\n        for i in range(n-9):\n            if nums[i] > nums[i+9]:\n                nums[i], nums[i+9] = nums[i+9], nums[i]\n                max_swaps += 1\n\n        # Sort undecuples of adjacent elements\n        for i in range(n-10):\n            if nums[i] > nums[i+10]:\n                nums[i], nums[i+10] = nums[i+10], nums[i]\n                max_swaps += 1\n\n        # Sort duodecuples of adjacent elements\n        for i in range(n-11):\n            if nums[i] > nums[i+11]:\n                nums[i], nums[i+11] = nums[i+11], nums[i]\n                max_swaps += 1\n\n        # Sort tredecuples of adjacent elements\n        for i in range(n-12):\n            if nums[i] > nums[i+12]:\n                nums[i], nums[i+12] = nums[i+12], nums[i]\n                max_swaps += 1\n\n        # Sort quattuordecuples of adjacent elements\n        for i in range(n-13):\n            if nums[i] > nums[i+13]:\n                nums[i], nums[i+13] = nums[i+13], nums[i]\n                max_swaps += 1\n\n        # Sort quinquadecuples of adjacent elements\n        for i in range(n-14):\n            if nums[i] > nums[i+14]:\n                nums[i], nums[i+14] = nums[i+14], nums[i]\n                max_swaps += 1\n\n        # Sort sexdecuples of adjacent elements\n        for i in range(n-15):\n            if nums[i] > nums[i+15]:\n                nums[i], nums[i+15"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function takes a number as input and checks whether it can be represented as the difference of two squares or not.\n    \"\"\"\n    # Finding the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    \n    # Checking if the difference of squares is present in the list of possible values\n    if 4 * sqrt_n ** 2 == n:\n        return \"The number can be represented as the difference of two squares.\"\n    else:\n        return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return \"Number is negative.\"\n    elif n == 0:\n        return \"Number is 0.\"\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0 and (i*i == n or n % (i*i) == 0):\n                return \"The number can be represented as the difference of two squares.\"\n            elif i*i > n:\n                break\n        else:\n            return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # calculate the square of the number\n    num_sq = n ** 2\n\n    # check if the square is a perfect square\n    if num_sq % 4 == 1:\n        return True\n\n    # check if the square is a square root of a perfect square\n    elif num_sq % 4 == 3:\n        root = int(num_sq ** 0.5)\n        return num_sq == root ** 2\n\n    # if the number is not a square, it cannot be represented as the difference of two squares\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    while n % 4 == 0: #while n is divisible by 4, n is not a square\n        n = n // 4 #reduce n by 4\n    if n % 2 == 0: #if n is even, its square is an odd number\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # check if the input is a positive integer\n    if n < 0:\n        return \"The given number must be a positive integer.\"\n    \n    # check if the input is a power of 2\n    if n & (n-1)!= 0:\n        return \"The given number must be a power of 2.\"\n    \n    # calculate the square root of n\n    root = int(n**0.5)\n    \n    # check if the square root can be represented as the difference of two squares\n    for i in range(2, root+1):\n        if n % i == 0 and n // i == i:\n            return \"The given number can be represented as the difference of two squares.\"\n    \n    # if the loop ends without returning, the number cannot be represented as the difference of two squares\n    return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(x):\n        '''\n        A helper function to check whether a number is a perfect square or not.\n        '''\n        return x*x == x\n    \n    # Check if the given number is a perfect square\n    if is_square(n):\n        print(\"The given number is a perfect square.\")\n        return\n    \n    # Check if the given number can be represented as the sum of two squares\n    for i in range(1, n):\n        for j in range(1, n):\n            if i*i+j*j == n:\n                print(\"The given number can be represented as the difference of two squares.\")\n                return\n    \n    # If none of the above cases are met, the given number cannot be represented as the difference of two squares\n    print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    def is_square(num):\n        return num == int(num**0.5)**2\n\n    def is_diff_square(num):\n        \"\"\"\n        This function checks whether the given number can be represented as the difference of two squares or not.\n        \"\"\"\n        square1 = int(num**0.5)**2\n        square2 = int((num - square1)**0.5)**2\n        if square1 + square2 == num:\n            return True\n        else:\n            return False\n\n    if is_square(n) or is_square(n - 1):\n        return True\n    else:\n        return is_diff_square(n)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    # Function to find the square of a number\n    def square(num):\n        return num ** 2\n\n    # Function to check whether a number is a square or not\n    def is_square(num):\n        return square(num) == num\n\n    # Function to check whether a number is a difference of two squares or not\n    def is_difference(num):\n        if num < 0:\n            return False\n\n        square1 = square(num)\n        square2 = square(num // 2)\n\n        return square2 == square1\n\n    # Function to check whether a number is a square or not\n    if is_difference(n):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square of the number\n    square = n ** 0.5\n    \n    # check if the square is an integer\n    if square.is_integer():\n        # find the difference of the number and its square\n        diff = n - square**2\n        \n        # check if the difference is also a square\n        if diff ** 0.5 == diff:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt = int(n**0.5)\n    if sqrt**2 == n:\n        return True\n    elif (sqrt + 1)**2 == n:\n        return True\n    elif (sqrt - 1)**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    pattern_index = 0\n    current_pattern = patterns[0]\n    last_color = colors[0]\n\n    # Loop through the colors and patterns\n    for i in range(1, len(colors)):\n        current_color = colors[i]\n        if current_color!= last_color:\n            # Check if the pattern matches the current color\n            if current_pattern[pattern_index] == current_color:\n                pattern_index += 1\n                if pattern_index == len(current_pattern):\n                    return True\n            else:\n                return False\n        last_color = current_color\n\n    # If we reach the end of the colors array and the loop hasn't returned yet,\n    # then we have reached the end of the patterns array and the pattern matches\n    if pattern_index == len(current_pattern):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Initialize variables\n    previous_color = None\n    pattern_index = 0\n    \n    # Loop through the colors list\n    for color in colors:\n        # Check if the current color matches the pattern color at the current index in the patterns list\n        if color == patterns[pattern_index]:\n            # Move to the next index in the patterns list\n            pattern_index += 1\n        else:\n            # If the current color does not match the pattern color, check if the previous color matches the pattern color at the current index in the patterns list\n            if previous_color is not None and previous_color == patterns[pattern_index]:\n                # Move to the next index in the patterns list\n                pattern_index += 1\n            else:\n                # If the current color does not match the pattern color and the previous color does not match the pattern color at the current index in the patterns list, return False\n                return False\n        \n        # Update the previous color\n        previous_color = color\n    \n    # If the loop completes without finding any patterns that do not match, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    count = {}\n    for color in colors:\n        count[color] = count.get(color, 0) + 1\n    \n    for pattern in patterns:\n        for color in pattern:\n            count[color] -= 1\n            if count[color] < 0:\n                return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = []\n    n = len(colors)\n    \n    for i in range(n):\n        if colors[i] not in sequence:\n            sequence.append(colors[i])\n            if len(sequence) == patterns[i]:\n                return True\n        else:\n            return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the number of patterns is equal to the length of the colors array\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check if the first color is in the patterns array\n    if colors[0] not in patterns:\n        return False\n    \n    # Check if the remaining colors follow the sequence in the patterns array\n    for i in range(1, len(colors)):\n        if colors[i] not in patterns[patterns.index(colors[i-1])+1:]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if there are any patterns in the patterns array\n    if not patterns:\n        return False\n\n    # Initialize variables for counting the number of matches and mismatches\n    count_matches = 0\n    count_mismatches = 0\n\n    # Iterate through each color in the colors array\n    for color in colors:\n        # Check if the color matches the first pattern in the patterns array\n        if color == patterns[0]:\n            count_matches += 1\n            patterns = patterns[1:]\n        # Check if the color does not match the first pattern in the patterns array\n        else:\n            count_mismatches += 1\n\n    # Check if all patterns were used up in the colors array\n    if patterns:\n        return False\n\n    # Check if the number of matches is equal to the number of mismatches\n    if count_matches!= count_mismatches:\n        return False\n\n    # If all conditions are true, the sequence is valid\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(x % K == 0 for x in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tuple in test_list:\n        # check if all elements are divisible by K\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input and returns a list of all tuples that have all elements divisible by K from the given list of tuples.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): An integer representing the value to divide all elements of each tuple by.\n\n    Returns:\n    list: A list of all tuples that have all elements divisible by K from the given list of tuples.\n    \"\"\"\n\n    # Create an empty list to store the result\n    result = []\n\n    # Loop through each tuple in the test list\n    for i in range(len(test_list)):\n        # Check if all elements of the tuple are divisible by K\n        if all(x % K == 0 for x in test_list[i]):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(test_list[i])\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            divisible_tuples.append(tuple)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    return [t for t in test_list if all(x % K == 0 for x in t)]"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]) and all(x % K == 0 for x in test_list[k]):\n                    result.append((test_list[i], test_list[j], test_list[k]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Filter the list of tuples to only include tuples with all elements divisible by K\n    result = [tuple(filter(lambda x: x % K == 0, t)) for t in test_list]\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Check if the length of the word is odd or even\n    if len(s) % 2 == 0:\n        print(s + \" is even length\")\n    else:\n        print(s + \" is odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 0:\n            print(word, 'is even length.')\n        else:\n            print(word, 'is odd length.')\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string s as input and returns True if its length is odd, otherwise, it returns False.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"The length of the word '{word}' is even.\")\n        else:\n            print(f\"The length of the word '{word}' is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(\"The length of the word is odd.\")\n            break\n    else:\n        print(\"The length of the word is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is an odd length.\")\n        else:\n            print(word, \"is an even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the base case for the function\n    if n == 0:\n        return 1\n    \n    # Define the recursive case for the function\n    else:\n        return 4 * tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    else:\n        return (3 * tetrahedral_number(n-1) + 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def triangular_number(n): \n        \"\"\"\n        Write a function to find the nth triangular number.\n        \"\"\"\n        return (1 + n*(n+1)) // 2 \n    \n    return triangular_number(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first tetrahedral number as 1\n    first_tetrahedral_number = 1\n    # Initialize the second tetrahedral number as 1\n    second_tetrahedral_number = 1\n    # Initialize the third tetrahedral number as 1\n    third_tetrahedral_number = 1\n    # Initialize the fourth tetrahedral number as 1\n    fourth_tetrahedral_number = 1\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Calculate the value of the i-th tetrahedral number\n        tetrahedral_number = 4 * first_tetrahedral_number * (2 * i - 1)\n\n        # Check if the value of the i-th tetrahedral number is a prime number\n        if is_prime(tetrahedral_number):\n            # If it is a prime number, return the value\n            return tetrahedral_number\n\n        # Update the values of the first, second, third, and fourth tetrahedral numbers\n        first_tetrahedral_number += 2 * first_tetrahedral_number\n        second_tetrahedral_number += 2 * second_tetrahedral_number\n        third_tetrahedral_number += 2 * third_tetrahedral_number\n        fourth_tetrahedral_number += 2 * fourth_tetrahedral_number\n\n    # If the loop completes without finding a prime number, return None\n    return None"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 6\n    else:\n        return 6 * tetrahedral_number(n-1) + 6 * tetrahedral_number(n-2) - 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the tetrahedral numbers\n    tetrahedral_numbers = [1, 5, 12, 22, 35, 51, 70, 92, 117, 145, 176, 210, 247, 287, 330, 376, 425, 477, 532, 590, 651, 715, 782, 852, 925, 1001, 1080, 1162, 1247, 1335, 1426, 1520, 1617, 1717, 1820, 1926, 2035, 2147, 2262, 2380, 2501, 2625, 2752, 2882, 3015, 3151, 3290, 3432, 3577, 3725, 3876, 4030, 4187, 4347, 4510, 4676, 4845, 5017, 5192, 5370, 5551, 5735, 5922, 6112, 6305, 6501, 6700, 6902, 7107, 7315, 7526, 7740, 7957, 8177, 8400, 8626, 8855, 9087, 9322, 9560, 9801, 10045, 10292, 10542, 10795, 11051, 11310, 11572, 11837, 12105, 12376, 12650, 12927, 13207, 13490, 13776, 14065, 14357, 14652, 14950, 15251, 15555, 15862, 16172, 16485, 16801, 17120, 17442, 17767, 18095, 18426, 18760, 19097, 19437, 19780, 20126, 20475, 20827, 21182, 21540, 21901, 22265, 22632, 22953]\n\n    # Check if the input is valid\n    if n <= 0 or n > len(tetrahedral_numbers):\n        return \"Invalid input\"\n\n    # Return the nth tetrahedral number\n    return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4 * (n - 1) ** 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize a list of tetrahedral numbers\n    tetas = [0, 1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431, 1540, 1653, 1770, 1891, 2016, 2145, 2278, 2415, 2556, 2701, 2850, 3003, 3160, 3321, 3486, 3655, 3828, 4005, 4186, 4371, 4560, 4753, 4950, 5151, 5356, 5565, 5778, 5995, 6216, 6441, 6670, 6903, 7140, 7381, 7626, 7875, 8128, 8385, 8646, 8911, 9180, 9453, 9730, 10011, 10326, 10645, 10968, 11295, 11626, 11961, 12300, 12643, 12990, 13341, 13696, 14055, 14418, 14785, 15156, 15531, 15910, 16293, 16680, 17071, 17466, 17865, 18268, 18675, 19086, 19501, 19920, 20343, 20770, 21201, 21636, 22075, 22518, 22965, 23416, 23871, 24330, 24793, 25260, 25731, 26206, 26685, 27168, 27655, 28146, 28641, 29140, 29643, 30150, 30661, 31176, 31695, 32218, 32745, 33276, 33811, 34350, 34893, 35440, 35991, 36546, 37105, 37668, 38235, 38806, 39381, 39960, 40543, 41130, 41721, 42316, 42915, 43518, 44125, 44736, 45351, 45970, 46593, 47220, 47851, "
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 2\n    d = 1\n    # Find the nth tetrahedral number\n    for i in range(2, n+1):\n        a = a + 1\n        b = b * 3\n        c = c * 4\n        d = d + 1\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    # The first tetrahedral number is 1\n    if n == 1:\n        return 1\n\n    # Define the first three tetrahedral numbers\n    t1 = 1\n    t2 = 1\n    t3 = 1\n\n    # Use the formula to calculate the next tetrahedral number\n    for i in range(2, n+1):\n        t = 4 * t1**2 - t2**2 + t3**2\n        t1 = t2\n        t2 = t3\n        t3 = t\n\n    return t"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the volume of a sphere\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r and returns the volume of a sphere with that radius.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3 * pi * r ** 3"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_value = (ascii_sum % 26) + 65\n    return chr(char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for i in strr:\n        ascii_sum += ord(i)\n    char = chr((ascii_sum % 26) + 97)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    char_val = ascii_val % 26\n    char = chr(char_val + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Create an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character of the given string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        \n        # Add the ASCII value of the character to the result\n        result += chr((ascii_value + 13) % 26)\n    \n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr((char % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return char % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    return chr((char_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for i in range(len(strr)):\n        ascii_val = ord(strr[i])\n        sum_ascii += ascii_val\n    return chr((sum_ascii % 26) + ord('a'))\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    while len(sequence) < n:\n        new_sequence = []\n        for i in range(len(sequence)):\n            if sequence[i] == 1:\n                new_sequence.append(1)\n                if i > 0 and sequence[i-1] == 1:\n                    new_sequence.append(0)\n                if i < len(sequence)-1 and sequence[i+1] == 1:\n                    new_sequence.append(0)\n            else:\n                new_sequence.append(0)\n        sequence = new_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    sequence = [1, 1, 2, 1, 3, 1, 4, 4, 8, 5, 13, 8, 10, 10, 15, 10, 20, 15, 22, 15, 25, 25, 30, 22, 37, 30, 35, 35, 40, 35, 45, 45, 50, 45, 55, 55, 60, 55, 65, 65, 70, 65, 75, 75, 80, 75, 85, 85, 90, 85, 95, 95, 100]\n    if n < 0 or n >= len(sequence):\n        return None\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with the first two numbers\n    sequence = [0, 1]\n    # loop for n-1 times\n    for i in range(n-2):\n        # create a new list with the current sequence\n        new_sequence = []\n        # loop through each number in the current sequence\n        for j in range(len(sequence)):\n            # if the number is odd, add it to the new sequence\n            if sequence[j] % 2!= 0:\n                new_sequence.append(sequence[j])\n        # replace the current sequence with the new sequence\n        sequence = new_sequence\n    # return the last number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    sequence = [1]\n    for i in range(1, n+1):\n        next_num = (sequence[-1] * 2) % 1000000\n        sequence.append(next_num)\n\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0: \n        return None\n    \n    sequence = [2]\n    while len(sequence) < n: \n        next_sequence = []\n        for i in range(len(sequence)): \n            if i == 0 or i == len(sequence) - 1: \n                next_sequence.append(3)\n            else: \n                next_sequence.append(sequence[i-1] + sequence[i])\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 1, 2, 1, 2, 4, 2, 1, 2, 4, 4, 2, 1, 2, 4, 8, 4, 2, 1, 2, 4, 8, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 128, 64, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 128, 256, 128, 64, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 12"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3) + sequence(n-4)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 3, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n\nprint(surfacearea_sphere(1)) # Output: 50.26548245743669"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4 * math.pi * (r ** 2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Formula for surface area of a sphere\n    surface_area = (4/3) * math.pi * r ** 3\n\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area of the sphere\n    surface_area = (4/3) * math.pi * r ** 3\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_formula(n):\n        '''\n        This is the formula for centered hexagonal number:\n\n        C(n) = C(n-1) + 6 + (n-1) * (n-2)\n\n        where C(n) is the centered hexagonal number.\n        '''\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 6\n        else:\n            return centered_hexagonal_formula(n-1) + 6 + (n-1) * (n-2)\n\n    return centered_hexagonal_formula(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a, b = 1, 0\n    total = 0\n    \n    # Loop until the required number of centered hexagonal numbers are found\n    while total < n:\n        total = a + b\n        \n        # Update variables\n        a = b\n        b = 2 * a\n    \n    # Return the centered hexagonal number\n    return total"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        # Compute centered hexagonal number using formula\n        # H(n) = (n-1)H(n-2) - 1\n        h = centered_hexagonal_number(n-1)\n        return (n-1)*h - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Define a function to calculate the number of rows\n    def num_rows(n):\n        return (n - 1) // 2 + 1\n\n    # Define a function to calculate the number of columns\n    def num_cols(n):\n        return (n - 1) // 2\n\n    # Calculate the center row and column of the nth centered hexagonal number\n    center_row = (n - 1) // 2\n    center_col = (n - 1) % 2 + 1\n\n    # Initialize the result to 0\n    result = 0\n\n    # Iterate through the rows and columns to calculate the nth centered hexagonal number\n    for i in range(num_rows(n)):\n        for j in range(num_cols(n)):\n            result += (i + j) * (2 * i + 1) * (2 * i + 3) * (2 * j + 1)\n\n    # Return the result\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Base case\n    if n == 0:\n        return 0\n\n    # Find the nth centered hexagonal number\n    hexagonal_number = 2 * n * n + 2 * n - 1\n\n    # Return the centered hexagonal number\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    k = 1  # number of rows\n    a = 1  # number of odd rows\n    b = 1  # number of even rows\n    c = 1  # number of centers\n\n    # Calculate centered hexagonal number\n    while k <= n:\n        a = a + b\n        b = a - b\n        c = c + a\n        k = k + 1\n\n    # Return centered hexagonal number\n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Start with the first centered hexagonal number\n    current_num = 1\n    # Iterate n times\n    for i in range(n):\n        # Add the next centered hexagonal number to the current_num\n        current_num += 4\n        # If the current_num is odd, subtract 2 from it to get the correct centered hexagonal number\n        if current_num % 2!= 0:\n            current_num -= 2\n    return current_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Calculate the number of hexagons required to fill the gap between the two largest circles\n    num_hexagons = n * (n - 1)\n\n    # Calculate the distance between the centers of the two largest circles\n    max_circle_radius = (3 * (num_hexagons + 1) ** 0.5) // 2\n\n    # Calculate the angle of the center of the largest circle\n    angle = 60 * (num_hexagons + 1) // 2\n\n    # Calculate the length of a side of the hexagon\n    hex_side = 2 * max_circle_radius * 3 ** 0.5\n\n    # Calculate the length of the gap between the two circles\n    gap_length = 2 * max_circle_radius * 2 * 3 ** 0.5\n\n    # Calculate the angle of the gap between the two circles\n    gap_angle = 60 * ((num_hexagons + 1) * 2) // 2\n\n    # Calculate the total angle of the hexagon\n    total_angle = 60 * (num_hexagons + 1)\n\n    # Calculate the x and y coordinates of each vertex of the hexagon\n    x_coords = [max_circle_radius * 3 ** 0.5 * (cos(i * angle * pi / 180) ** 2 + sin(i * angle * pi / 180) ** 2),\n                -max_circle_radius * 3 ** 0.5 * (cos(i * angle * pi / 180) ** 2 + sin(i * angle * pi / 180) ** 2),\n                0]\n    y_coords = [max_circle_radius * 3 ** 0.5 * (sin(i * angle * pi / 180) ** 2 + cos(i * angle * pi / 180) ** 2),\n                -max_circle_radius * 3 ** 0.5 * (sin(i * angle * pi / 180) ** 2 + cos(i * angle * pi / 180) ** 2),\n                0]\n\n    # Calculate the length of each edge of the hexagon\n    edge_lengths = [sqrt(x_coords[i] ** 2 + y_coords[i] ** 2) for i in range(3)]\n\n    # Calculate the centroid of the hexagon\n    centroid_x = (edge_lengths[0] + edge_lengths[1]) / 2\n    centroid_y = (edge_lengths[1] + edge_lengths[2]) / 2\n\n    # Calculate the angle between the x-axis and the center line of the hexagon\n    center_angle = 60 * ((num_hexagons + 1) * 2 + 1) // 2\n\n    # Calculate the angle between the edge of the hexagon and the center line of the hexagon\n    edge_center_angle = 60 * ((num_hexagons + 1) * 2 + 1) // 2\n\n    # Calculate the angle between the center line of the hexagon and the x-axis\n    x_axis_angle = 60 * ((num_hexagons + 1) * 2 + 1) // 2\n\n    # Calculate the angle between the center line of the hexagon and the y-axis\n    y_axis_angle = 60 * ((num_hexagons + 1) * 2 + 1) // 2\n\n    # Calculate the angle between the edge of the hexagon and the x-axis\n    edge_x_angle = 60 * ((num_hexagons + 1) * 2 + 1) // 2\n\n    # Calculate the angle between the edge of the hexagon and the y-axis\n    edge_y_angle = 60 * ((num_hexagons + 1) * 2 + 1) // 2\n\n    # Return the centered hexagonal number\n    return round(abs(centroid_x * cos(center_angle * pi / 180) + centroid_y * sin(center_angle * pi / 180)), 16)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 1\n    c = 2\n    result = 0\n    # iterate until n is reached\n    for i in range(n):\n        # calculate the next centered hexagonal number\n        result = a + b + c\n        # update the values for the next iteration\n        a = 3*a - b\n        b = a + c\n        c = 2*c\n    # return the final result\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 13\n    else:\n        return 3 * centered_hexagonal_number(n-2) + 2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a single dictionary\n    that contains all the key-value pairs from all the dictionaries.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(str) # create a defaultdict object\n    for key in dict1:\n        merged_dict[key] = str(dict1[key])\n    for key in dict2:\n        merged_dict[key] = str(dict2[key])\n    for key in dict3:\n        merged_dict[key] = str(dict3[key])\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): A dictionary with key-value pairs.\n        dict2 (dict): A dictionary with key-value pairs.\n        dict3 (dict): A dictionary with key-value pairs.\n\n    Returns:\n        dict: A single dictionary that contains the key-value pairs from all three input dictionaries.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to store the merged data\n    merged_data = {}\n\n    # iterate over the keys of the first dictionary\n    for key in dict1.keys():\n        # check if the key is already in the merged dictionary\n        if key not in merged_data:\n            # if it's not, add the value of the first dictionary to the merged dictionary\n            merged_data[key] = dict1[key]\n        else:\n            # if it is, check if the values of the first dictionary and the second dictionary are the same\n            if dict1[key] == dict2[key]:\n                # if they are, add the value of the second dictionary to the merged dictionary\n                merged_data[key] = dict2[key]\n            else:\n                # if they're not, add the value of the third dictionary to the merged dictionary\n                merged_data[key] = dict3[key]\n\n    # return the merged dictionary\n    return merged_data"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict and key not in dict1:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of all the elements in the list.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of all the elements in the given list.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Use a dictionary to store the frequency of each element in the list\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency count\n    freq_dict = {}\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq_dict[elem] = 1\n    # Return the dictionary containing the frequency count\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    smallest_num = N\n    closest = N\n    \n    for i in range(1, N):\n        if i < smallest_num:\n            smallest_num = i\n            closest = i\n        elif i > closest:\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    smallest = n\n    largest = 2 * n\n    while largest - smallest > 1:\n        mid = (largest + smallest) // 2\n        if mid % 2 == 0:\n            smallest = mid\n        else:\n            largest = mid\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # list of all numbers between 1 and N (inclusive)\n    nums = [i for i in range(1, N+1)]\n\n    # sort the list in ascending order\n    nums.sort()\n\n    # find the median of the sorted list\n    mid = len(nums) // 2\n    if len(nums) % 2 == 0:\n        median = (nums[mid-1] + nums[mid]) / 2\n    else:\n        median = nums[mid]\n\n    # find the difference between the median and n\n    diff = abs(median - N)\n\n    # find the nearest smaller number to n\n    if diff < 1:\n        return N\n    elif diff < 2:\n        return median - 1\n    else:\n        return median"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        if n - 1 == N:\n            return n\n        elif n - 1 < N:\n            return n - 1\n        else:\n            return n + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function takes a positive integer N as input and returns the\n    closest smaller number than N.\n    \"\"\"\n    # initialize variables\n    min_num = N\n    min_diff = abs(N-1)\n    min_diff2 = abs(N-2)\n\n    # iterate through the numbers from 1 to N\n    for i in range(1, N+1):\n        # calculate the difference between N and the current number i\n        diff = abs(N-i)\n\n        # check if the current number is closer to N than the previous minimum\n        if diff < min_diff:\n            # update the minimum difference and minimum number\n            min_diff = diff\n            min_num = i\n\n        # check if the difference is closer to N-1 than the previous minimum\n        if diff == min_diff2 and i-1!= min_num:\n            min_diff2 = diff\n            min_num2 = i-1\n\n    # return the minimum difference\n    return min_diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        min_diff = float('inf')\n        closest = N\n        \n        for i in range(2, N):\n            diff = abs(N - i)\n            if diff < min_diff:\n                min_diff = diff\n                closest = i\n        \n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n\n    # Initialize a variable to store the closest smaller number\n    closest_smaller = N\n\n    # Iterate through the list of numbers\n    for num in range(1, N):\n        # Check if the current number is smaller than the closest smaller number\n        if num < closest_smaller:\n            # If it is, update the closest smaller number\n            closest_smaller = num\n\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = 1\n    while True:\n        if (n-N) <= 0:\n            return n\n        n += 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(n):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if n == 0:\n        return 0\n    diff = 10**9\n    for i in range(1, 10):\n        if abs(n-i) < diff:\n            diff = abs(n-i)\n            closest_num = i\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest_num = -1\n    for i in range(1, N+1):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n    return closest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #initialize the maximum length variable to zero\n    max_length = 0\n    #iterate over each word in the list\n    for word in list1:\n        #if the length of the word is greater than the current maximum length, update the maximum length\n        if len(word) > max_length:\n            max_length = len(word)\n    #return the maximum length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    longest_length = 0\n    for word in list1:\n        length = len(word)\n        if length > longest_length:\n            longest_length = length\n    return longest_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize max_length to 0\n    max_length = 0\n    # loop through each element in the list\n    for word in list1:\n        # check if the length of the current word is greater than max_length\n        if len(word) > max_length:\n            # if so, update max_length\n            max_length = len(word)\n    # return max_length\n    return max_length"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if sub_str not in str1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(lst, sub_str):\n    for word in lst:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Convert sub_str to lowercase\n    sub_str = sub_str.lower()\n    # Loop through each string in the list\n    for i in str1:\n        # Convert the string to lowercase and check if sub_str is present in the string\n        if sub_str in i.lower():\n            return True\n    # If no substring is found in any string in the list, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Check if the given number is even or not\n    if n % 2 == 0:\n        # If the number is even, it is not undulating\n        return False\n    else:\n        # If the number is odd, it is undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    if n % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    Args:\n    - n: An integer representing the height of the tower\n\n    Returns:\n    - True if the tower is undulating, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return is_undulating(n//2)\n    else:\n        return is_undulating((n//2)+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # define the range of possible values for the number of stars\n    stars = [5, 10, 15]\n\n    # iterate through the range of possible values\n    for i in range(len(stars)):\n        # if the given number is less than the current star, return True\n        if n < stars[i]:\n            return True\n        # if the given number is greater than the current star, move on to the next one\n        else:\n            continue\n\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    This function will check whether the given number is undulating or not.\n    '''\n    \n    # Check if the number is even or odd\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    An undulating number is a positive integer that is equal to the sum of its digits raised to the power of the number of digits.\n\n    For example, 155 is an undulating number because:\n\n    1^3 + 5^3 + 5^3 = 155\n\n    Therefore, the function should return True for 155.\n    \"\"\"\n\n    num_digits = len(str(n))\n    power = 1\n\n    for i in range(1, num_digits + 1):\n        power *= i\n\n    if power == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    num_chars = len(str(n))\n    if num_chars % 2 == 0:\n        return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the given number is even\n    if n % 2 == 0: \n        # If it is even, it is not undulating\n        return False\n\n    # Initialize variables for running sums\n    running_sum = 0\n    running_sum_of_squares = 0\n\n    # Calculate the running sum and the running sum of squares\n    for i in range(1, n+1):\n        running_sum += i\n        running_sum_of_squares += i*i\n\n    # Calculate the mean\n    mean = running_sum / n\n\n    # Calculate the variance\n    variance = running_sum_of_squares / n - mean**2\n\n    # Check if the variance is greater than 1\n    if variance > 1: \n        # If it is greater, it is not undulating\n        return False\n\n    # If none of the above conditions are satisfied, it is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n\n    # Check if the number is less than 1\n    if n < 1:\n        raise ValueError(\"The number must be greater than or equal to 1.\")\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return True\n\n    # Check if the number is divisible by 4\n    if n % 4 == 0:\n        return True\n\n    # Check if the number is divisible by 5\n    if n % 5 == 0:\n        return True\n\n    # Check if the number is divisible by 6\n    if n % 6 == 0:\n        return True\n\n    # Check if the number is divisible by 7\n    if n % 7 == 0:\n        return True\n\n    # Check if the number is divisible by 8\n    if n % 8 == 0:\n        return True\n\n    # Check if the number is divisible by 9\n    if n % 9 == 0:\n        return True\n\n    # Check if the number is divisible by 10\n    if n % 10 == 0:\n        return True\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n\n    # Check if the number is divisible by 12\n    if n % 12 == 0:\n        return True\n\n    # Check if the number is divisible by 13\n    if n % 13 == 0:\n        return True\n\n    # Check if the number is divisible by 14\n    if n % 14 == 0:\n        return True\n\n    # Check if the number is divisible by 15\n    if n % 15 == 0:\n        return True\n\n    # Check if the number is divisible by 16\n    if n % 16 == 0:\n        return True\n\n    # Check if the number is divisible by 17\n    if n % 17 == 0:\n        return True\n\n    # Check if the number is divisible by 18\n    if n % 18 == 0:\n        return True\n\n    # Check if the number is divisible by 19\n    if n % 19 == 0:\n        return True\n\n    # Check if the number is divisible by 20\n    if n % 20 == 0:\n        return True\n\n    # Check if the number is divisible by 21\n    if n % 21 == 0:\n        return True\n\n    # Check if the number is divisible by 22\n    if n % 22 == 0:\n        return True\n\n    # Check if the number is divisible by 23\n    if n % 23 == 0:\n        return True\n\n    # Check if the number is divisible by 24\n    if n % 24 == 0:\n        return True\n\n    # Check if the number is divisible by 25\n    if n % 25 == 0:\n        return True\n\n    # Check if the number is divisible by 26\n    if n % 26 == 0:\n        return True\n\n    # Check if the number is divisible by 27\n    if n % 27 == 0:\n        return True\n\n    # Check if the number is divisible by 28\n    if n % 28 == 0:\n        return True\n\n    # Check if the number is divisible by 29\n    if n % 29 == 0:\n        return True\n\n    # Check if the number is divisible by 30\n    if n % 30 == 0:\n        return True\n\n    # Check if the number is divisible by 31\n    if n % 31 == 0:\n        return True\n\n    # Check if the number is divisible by 32\n    if n % 32 == 0:\n        return True\n\n    # Check if the number is divisible by 33\n    if n % 33 == 0:\n        return True\n\n    # Check if the number is divisible by 34\n    if n % 34 == 0:\n        return True\n\n    # Check if the number is divisible by 35\n    if n % 35 == 0:\n        return True\n\n    # Check if the number is divisible by 36\n    if n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check whether the number is positive or not\n    if n < 0:\n        return False\n\n    # Initialize the count of zeros and ones\n    count_zeros = 0\n    count_ones = 0\n\n    # Loop through the digits of the number\n    for digit in str(n):\n        # If the digit is zero, increment the count of zeros\n        if digit == '0':\n            count_zeros += 1\n        # If the digit is one, increment the count of ones\n        elif digit == '1':\n            count_ones += 1\n\n    # Check whether the count of zeros and ones are equal or not\n    if count_zeros == count_ones:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    float: The value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    # Define a function to extract the second value from each tuple\n    def second_value(item):\n        return item[1]\n\n    # Use the sorted function to sort the list of tuples by the second value\n    sorted_list = sorted(test_list, key=second_value)\n\n    # Return the index of the first tuple with the smallest second value\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # Using the itemgetter function from the operator module to extract the second value from each tuple\n    min_index = min(test_list, key=lambda x: x[1])\n\n    # Return the index of the first tuple in the list that matches the minimum second value\n    return min_index[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = float('inf')\n    for i, tup in enumerate(test_list):\n        if tup[1] < min_value:\n            min_index = i\n            min_value = tup[1]\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = None\n    minimum_value = float('inf')\n    for index, value in enumerate(test_list):\n        if value[1] < minimum_value:\n            minimum_index = index\n            minimum_value = value[1]\n    return minimum_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Use the `sorted` function to sort the list by the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples by the second value\n    test_list.sort(key=itemgetter(1))\n\n    # Return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = 1000000 # set initial minimum length to a large number\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000000  # initial value of minimum length to a large number\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000000\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n\n    # Do sieve of Eratosthenes, starting from 2\n    while (p*p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # count the number of divisors\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its count\n        if elem in frequency:\n            frequency[elem] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            frequency[elem] = 1\n    \n    # Return the dictionary of frequency\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    frequency = {}\n    # loop through the flattened list of lists and update the frequency dictionary\n    for item in list1:\n        for subitem in item:\n            if subitem in frequency:\n                frequency[subitem] += 1\n            else:\n                frequency[subitem] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each element in the list1 and append each element to a new list\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # Loop through each element in the flattened list and increment its frequency in the dictionary\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for item in list1:\n        # If the item is not a list, add it to the dictionary with a value of 1\n        if not isinstance(item, list):\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n        # If the item is a list, flatten it and recursively call the function on the flattened list\n        else:\n            flattened_list = [subitem for sublist in item for subitem in sublist]\n            freq_dict = frequency_lists(flattened_list)\n\n    # Return the final frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n    # Iterate through each element in the flattened list\n    for item in list1:\n        # If the item is a list, recursively call the function to find its frequency in the flattened list\n        if isinstance(item, list):\n            freq_dict.update(frequency_lists(item))\n        # If the item is not a list, check if it is already a key in the frequency dictionary\n        elif item in freq_dict:\n            # Increment the frequency by 1 if the key is already in the dictionary\n            freq_dict[item] += 1\n        # If the item is not already a key in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through the list of lists\n    for sublist in list1:\n        # loop through each element in the sublist\n        for element in sublist:\n            # check if the element is already in the dictionary\n            if element in freq:\n                # increment the frequency count by 1\n                freq[element] += 1\n            # if the element is not in the dictionary, add it with a frequency count of 1\n            else:\n                freq[element] = 1\n    # return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        for sub_item in item:\n            if sub_item in frequency:\n                frequency[sub_item] += 1\n            else:\n                frequency[sub_item] = 1\n    return frequency"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    This function takes an integer number as input and returns its binary representation as a string.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    This function takes a decimal number and returns its binary equivalent as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        binary_n = []\n        while n > 0:\n            binary_n.append(str(n % 2))\n            n = n // 2\n        return ''.join(binary_n[::-1])"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n > 0:\n        rem = n % 2\n        binary_string = str(rem) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # convert the decimal number to binary and remove the leading zeros\n    binary_string = bin(n)[2:].zfill(32)\n\n    # return the binary string as a string\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize variables\n    binary = ''\n    remainder = 0\n\n    # loop through each digit of the decimal number\n    while n > 0: \n        # get the last digit of the decimal number\n        digit = n % 2\n\n        # add the digit to the binary string\n        binary = str(digit) + binary\n\n        # remove the last digit of the decimal number\n        n = n // 2\n\n    # check if the binary string has leading zeros\n    if binary[0] == '0':\n        binary = binary[1:]\n\n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_num = ''\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        binary_num = str(remainder) + binary_num\n    return binary_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        num = -num\n    palindrome = str(num)[::-1]\n    palindrome = int(palindrome)\n    while True:\n        palindrome += 1\n        if str(palindrome)[::-1] == str(num):\n            return palindrome - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # Initialize variables to store the palindrome and its reverse\n    palindrome = num\n    reverse = 0\n\n    # Convert the number to a string and reverse it\n    for digit in str(num):\n        reverse = reverse * 10 + int(digit)\n\n    # Check if the reversed number is less than or equal to the original number\n    while reverse > num:\n        palindrome = palindrome * 10 + reverse % 10\n        reverse = reverse // 10\n\n    # If the palindrome is less than 10^10, multiply it by 10 and add 10 to get the next smallest palindrome\n    if palindrome < 10**10:\n        palindrome = palindrome * 10 + 10\n\n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    result = (10**n - 1) // 10**n\n    while True:\n        str_result = str(result)\n        if str_result == str_result[::-1]:\n            return result\n        else:\n            result += 1\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    next_palindrome = next_smallest_palindrome(num)\n    print(f\"The next smallest palindrome of {num} is {next_palindrome}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer and check if it's a palindrome\n    next_num = int(rev_str)\n    if str(next_num) == rev_str:\n        return next_num\n    else:\n        # If the reversed string is not a palindrome, increment the last digit of the reversed string and convert it back to an integer\n        while str(next_num)!= rev_str:\n            if next_num % 10 == 9:\n                next_num = (next_num // 10) * 10\n            else:\n                next_num = next_num + 1\n        return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Base case: when num is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num\n\n    # Initialize variables for the palindrome\n    prev_num = num\n    is_palindrome = False\n\n    # While num is not a palindrome, find the next smallest palindrome\n    while not is_palindrome:\n        # Reverse the digits of num\n        num_reverse = int(str(num)[::-1])\n\n        # If the reverse is less than num, increment it and check if it's a palindrome\n        if num_reverse < num:\n            num = num_reverse + 1\n            if num == int(str(num)[::-1]):\n                return num\n        else:\n            # If the reverse is greater than num, decrement it and check if it's a palindrome\n            num = num_reverse - 1\n            if num == int(str(num)[::-1]):\n                return num\n\n        # If num is not a palindrome, check if its digits are the same as the previous digits\n        is_palindrome = True\n        for digit in str(num):\n            if int(digit)!= int(str(prev_num)[-1]):\n                is_palindrome = False\n                break\n\n        # Update prev_num to num for the next iteration\n        prev_num = num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome greater than the input number.\n    \"\"\"\n    # convert the number to a string and reverse it\n    str_num = str(num)[::-1]\n    # convert the reversed string to an integer and add 1 to get the next smallest palindrome\n    next_palindrome = int(str_num) + 1\n    # return the next smallest palindrome\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n    # Reverse the number string and check if it is already a palindrome\n    rev_num_str = num_str[::-1]\n    if rev_num_str == rev_num_str[::-1]:\n        # If it is, add 1 to get the next smallest palindrome\n        return int(num_str) + 1\n    # If it's not, return the next smallest palindrome\n    while True:\n        # Find the next smaller palindrome by incrementing the last character\n        new_num_str = str(int(num_str) + 1)\n        # Check if it's a palindrome\n        if new_num_str == new_num_str[::-1]:\n            return int(new_num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input is a valid integer\n    try:\n        num = int(num)\n    except ValueError:\n        print(\"Invalid input. Please enter a valid integer.\")\n        sys.exit()\n\n    # Initialize variables\n    is_palindrome = True\n    is_next_palindrome = True\n    result = 0\n\n    # Check if the input number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num + 1\n\n    # Check if the input number is a multiple of 10\n    if num % 10 == 0:\n        return 10\n\n    # Check if the input number is a multiple of 100\n    if num % 100 == 0:\n        return 100\n\n    # Check if the input number is a multiple of 1000\n    if num % 1000 == 0:\n        return 1000\n\n    # Check if the input number is divisible by 10\n    if num % 10 == 0:\n        num = num + 1\n\n    # Check if the input number is divisible by 100\n    if num % 100 == 0:\n        num = num + 10\n\n    # Check if the input number is divisible by 1000\n    if num % 1000 == 0:\n        num = num + 1000\n\n    # Check if the input number is divisible by 10000\n    if num % 10000 == 0:\n        num = num + 10000\n\n    # Check if the input number is divisible by 100000\n    if num % 100000 == 0:\n        num = num + 100000\n\n    # Check if the input number is divisible by 1000000\n    if num % 1000000 == 0:\n        num = num + 1000000\n\n    # Check if the input number is divisible by 10000000\n    if num % 10000000 == 0:\n        num = num + 10000000\n\n    # Check if the input number is divisible by 100000000\n    if num % 100000000 == 0:\n        num = num + 100000000\n\n    # Check if the input number is divisible by 1000000000\n    if num % 1000000000 == 0:\n        num = num + 1000000000\n\n    # Check if the input number is divisible by 10000000000\n    if num % 10000000000 == 0:\n        num = num + 10000000000\n\n    # Check if the input number is divisible by 100000000000\n    if num % 100000000000 == 0:\n        num = num + 100000000000\n\n    # Check if the input number is divisible by 1000000000000\n    if num % 1000000000000 == 0:\n        num = num + 1000000000000\n\n    # Check if the input number is divisible by 10000000000000\n    if num % 10000000000000 == 0:\n        num = num + 10000000000000\n\n    # Check if the input number is divisible by 100000000000000\n    if num % 100000000000000 == 0:\n        num = num + 100000000000000\n\n    # Check if the input number is divisible by 1000000000000000\n    if num % 100000"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a specified integer as an integer.\n    \"\"\"\n    max_num = 10**7\n    min_num = -10**7 - 1\n\n    # generate prime numbers up to the given limit\n    primes = []\n    for i in range(2, max_num + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    # find the next smallest prime palindrome greater than or equal to the given limit\n    for i in range(min_num, max_num + 1):\n        if is_palindrome(i) and i not in primes:\n            return i\n\n    # if no such palindrome exists, return None\n    return None\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        num = -num\n    digits = []\n    while num > 0:\n        digits.append(num % 10)\n        num //= 10\n    largest_digit = digits[-1]\n    next_largest_digit = digits[-2]\n    \n    if next_largest_digit + 1 < 10:\n        next_smallest_num = largest_digit * 10 + (next_largest_digit + 1)\n    else:\n        next_smallest_num = largest_digit * 10 - 9\n    \n    return next_smallest_num\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_num)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is valid\n    if k < 1 or k > len(arr):\n        return None\n    # initialize index and count\n    index = 0\n    count = 0\n    # loop through the array\n    for i in range(len(arr)):\n        count += 1\n        # if the current element is equal to k, return it\n        if count == k:\n            return arr[i]\n        # if we have found k elements, move the index one position to the right\n        elif count > k:\n            index += 1\n    # if we reach this point, k is not in the array\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return \"The given array does not have enough elements to find the kth element.\"\n    \n    for i in range(len(arr)):\n        if i+1 == k:\n            return arr[i]\n        elif i+1 > k:\n            return \"The kth element is not in the array.\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        return \"Error: k is out of range\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        mid = n // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] < k:\n            return kth_element(arr[mid+1:], k-mid-1)\n        else:\n            return kth_element(arr[:mid], k)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n\n        while left < right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid > k - 1:\n                right = mid\n            else:\n                left = mid + 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        print(\"Error: Kth element is out of range.\")\n        return None\n    else:\n        k -= 1\n        for i in range(len(arr)):\n            if k == 0:\n                return arr[i]\n            elif k < 0:\n                k += i + 1\n        print(\"Error: Kth element is out of range.\")\n        return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].lower()\n        elif word[i].isupper():\n            result += \"_\" + word[i].lower()\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for char in word:\n        if char.isupper():\n            camel_case += char\n        else:\n            camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    # convert snake_case to camelCase\n    camel = word[0].lower()\n    for i in range(1, len(word)):\n        if word[i].isupper():\n            camel += \"_\"\n        camel += word[i].lower()\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert all letters in the word to lowercase\n    word = word.lower()\n    # Split the word into words based on underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them together\n    camel_case_word = ''.join(word.capitalize() for word in words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n\n    # Convert the word to camel case\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i < len(word) - 1 and word[i].isupper():\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0 or char.isupper():\n            camel_case += char.lower()\n        else:\n            camel_case += '_' + char.lower()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case = [words[0]]\n    for word in words[1:]:\n        camel_case.append(word.capitalize())\n    # Join the camel case words into a string\n    camel_case_str = ''.join(camel_case)\n    return camel_case_str"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    prev_char_is_upper = False\n    for char in word:\n        if char == '_':\n            prev_char_is_upper = True\n        elif prev_char_is_upper:\n            camel_case += char.upper()\n            prev_char_is_upper = False\n        else:\n            camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # base case: n=1, m=1, a(1, 1)=1\n    if n == 1 and m == 1:\n        return 1\n    # base case: n=2, m=1, a(2, 1)=2\n    elif n == 2 and m == 1:\n        return 2\n    # base case: n=1, m=2, a(1, 2)=1\n    elif n == 1 and m == 2:\n        return 1\n    # base case: n=2, m=2, a(2, 2)=3\n    elif n == 2 and m == 2:\n        return 3\n    # base case: n>2, m=2, a(n, m)=0 for all n odd and m odd\n    elif n > 2 and m % 2!= 0:\n        return 0\n    # base case: n>2, m=2, a(n, m)=0 for all n odd and m even\n    elif n > 2 and m % 2 == 0:\n        return 0\n    # recursive case: a(n, m)=2*a(n-1, m-1)\n    else:\n        return 2 * eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    if gcd(n, m) == 1:\n        return 1\n    elif (n % 2 == 0) and (m % 2 == 0):\n        return 1 + eulerian_num(n//2, m//2)\n    else:\n        return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative integers\")\n    elif n == 0 or m == 0:\n        return 0\n    else:\n        # Initialize variables for the recursion\n        a = 1  # a(0, 0) = 1\n        b = 0  # a(0, 1) = 0\n        c = 0  # a(1, 0) = 0\n        d = 1  # a(1, 1) = 1\n        \n        # Use recursion to compute a(n, m)\n        for i in range(2, n+1):\n            temp = b\n            b = c\n            c = d\n            d = (a + b + c + d) % m\n        \n        return d"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 2 * n - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function finds the Eulerian number a(n, m).\n    \"\"\"\n    a = 0\n    for i in range(1, n+1):\n        a += (i * (m - i + 1)) // (i + 1)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a dictionary to store the powers of 2\n    powers = {0: 1}\n    for i in range(1, n):\n        # Calculate the next power of 2\n        next_power = 2 ** (i+1)\n        # Add the power to the dictionary\n        powers[i] = next_power\n        # Check if the sum of powers is less than m\n        if sum(powers.values()) < m:\n            # If yes, break the loop\n            break\n    # Calculate the Eulerian number a(n, m)\n    a = 0\n    for i in range(1, n):\n        a += i * powers[i]\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 0\n    elif n == 0:\n        return 2 * m + 1\n    elif m == 0:\n        return 2 * n + 1\n    else:\n        return 2 * n + 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize the result variable to zero\n    result = 0\n    # loop through all values of n and m\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # if the sum of i and j is even, the result is one more than the maximum of i and j\n            if i+j%2 == 0:\n                result += max(i, j)\n    # return the result\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function takes in two parameters n and m, which represent the dimensions of a 2D square grid.\n    It calculates and returns the Eulerian number a(n, m), which is the number of paths through the grid where all the cells are either black or white.\n    \"\"\"\n\n    # Initialize a boolean grid with all cells set to False\n    grid = [[False] * m for _ in range(n)]\n\n    # Calculate the number of paths through the grid\n    def paths(row, col, curr_path):\n        # Base case: if the row and column are out of bounds, return 1\n        if row < 0 or row >= n or col < 0 or col >= m:\n            return 1\n\n        # If the cell is not visited, mark it as visited and add the current path\n        if not grid[row][col]:\n            grid[row][col] = True\n            curr_path += 1\n            return paths(row + 1, col, curr_path) + paths(row - 1, col, curr_path) + paths(row, col + 1, curr_path) + paths(row, col - 1, curr_path)\n        # If the cell is already visited, add the current path to the count\n        else:\n            return paths(row + 1, col, curr_path) + paths(row - 1, col, curr_path) + paths(row, col + 1, curr_path) + paths(row, col - 1, curr_path)\n\n    return paths(0, 0, 0)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    else:\n        return (n * (n - 1)) // 2 + m - 1"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist alphabetically\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # sort the sublist in ascending order using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) is bool:\n            if item is True:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if type(elem) is bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append test_list to test_tup\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup.append(item)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Create a new list with the given list appended to the given tuples\n    new_list = test_list + test_tup\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + list(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists\n    combined_list = test_list + test_tup\n    \n    return combined_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    for i in test_tup:\n        i += test_list\n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists\n    final_list = test_list + test_tup\n    return final_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Use a min heap to merge the three lists\n    min_heap = []\n    for num in num1 + num2 + num3:\n        heapq.heappush(min_heap, num)\n    \n    # Combine the numbers in the min heap into a single sorted list\n    merged_list = []\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Concatenate all the lists and remove duplicates\n    merged_list = list(set(num1 + num2 + num3))\n\n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n    sorted_list = []\n\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into one sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    \n    # Use a min heap to find the median element\n    heappush(merged_list, float('-inf'))\n    heappush(merged_list, float('-inf'))\n    heappush(merged_list, float('-inf'))\n    heappush(merged_list, float('-inf'))\n    heappush(merged_list, float('-inf'))\n    \n    # Extract the median element from the heap\n    median = heappop(merged_list)\n    \n    # Remove the median element from the list\n    del merged_list[merged_list.index(median)]\n    \n    # Return the sorted and medianized list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create an empty list to store the merged sorted list\n    merged_list = []\n    # create a min heap to store the elements of the first list\n    min_heap = []\n    # create a min heap to store the elements of the second list\n    min_heap2 = []\n    # create a min heap to store the elements of the third list\n    min_heap3 = []\n    # push the elements of the first list into the min heap\n    for i in range(len(num1)):\n        heapq.heappush(min_heap,num1[i])\n    # push the elements of the second list into the min heap\n    for i in range(len(num2)):\n        heapq.heappush(min_heap2,num2[i])\n    # push the elements of the third list into the min heap\n    for i in range(len(num3)):\n        heapq.heappush(min_heap3,num3[i])\n    # merge the three lists into a single sorted list\n    while len(min_heap) > 0 or len(min_heap2) > 0 or len(min_heap3) > 0:\n        if len(min_heap) > 0 and len(min_heap2) > 0 and min_heap[0] <= min_heap2[0] and min_heap[0] <= min_heap3[0]:\n            merged_list.append(heapq.heappop(min_heap))\n            heapq.heappop(min_heap2)\n            heapq.heappop(min_heap3)\n        elif len(min_heap) > 0 and len(min_heap2) > 0 and min_heap[0] >= min_heap2[0] and min_heap[0] >= min_heap3[0]:\n            merged_list.append(heapq.heappop(min_heap2))\n            heapq.heappop(min_heap)\n            heapq.heappop(min_heap3)\n        elif len(min_heap) > 0 and len(min_heap3) > 0 and min_heap[0] <= min_heap3[0]:\n            merged_list.append(heapq.heappop(min_heap))\n            heapq.heappop(min_heap2)\n            heapq.heappop(min_heap)\n        else:\n            merged_list.append(heapq.heappop(min_heap3))\n            heapq.heappop(min_heap)\n            heapq.heappop(min_heap2)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as input and returns a single sorted list.\n    '''\n    # Create a priority queue (min heap) to keep track of the three lists\n    priority_queue = []\n    heapq.heappush(priority_queue, num1)\n    heapq.heappush(priority_queue, num2)\n    heapq.heappush(priority_queue, num3)\n\n    # Create a new list to store the merged sorted list\n    merged_list = []\n\n    # Merge the lists by repeatedly popping the smallest element from the priority queue\n    while priority_queue:\n        # Pop the smallest element from the priority queue\n        smallest = heapq.heappop(priority_queue)\n        # Add it to the merged list\n        merged_list.append(smallest)\n        # If there are more elements in the priority queue, add them to the queue\n        if priority_queue:\n            heapq.heappush(priority_queue, smallest)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merge_list = num1 + num2 + num3\n\n    # Sort the merged list using heap sort\n    heapq.heapify(merge_list)\n    sorted_list = []\n    while merge_list:\n        sorted_list.append(heapq.heappop(merge_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine all three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a min heap to store the merged list\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n    \n    # Merge the sorted lists into a single sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into one list\n    merged_list = num1 + num2 + num3\n    \n    # Use a min heap to sort the merged list\n    heapq.heapify(merged_list)\n    \n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as input and returns a single sorted list.\n    '''\n    # Merge the three lists into one\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n    \n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Merge three lists into one\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list in ascending order\n    heapq.heapify(merged_list)\n\n    # Reverse the sorted list\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    s (str): A binary string of digits.\n    n (int): The number of times to rotate the binary string.\n\n    Returns:\n    int: The number of odd numbers in the binary string after rotating it n times.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        if n == 1:\n            return 0\n        else:\n            return odd_Equivalent(s[-1] + s[:-1], n//2)\n    else:\n        if n == 1:\n            return 1\n        else:\n            return odd_Equivalent(s[-1] + s[:-1], (n-1)//2) + odd_Equivalent(s[-1] + s[:-1], n//2)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        for j in range(len(s)):\n            if int(s[j]) % 2 == 0:\n                count += 1\n                s = s[-1] + s[:j] + s[j+1:]\n            else:\n                count += 1\n                s = s[:j] + s[j+1:] + s[j]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n        s (str): The binary string to be rotated.\n        n (int): The number of times to rotate the binary string.\n\n    Returns:\n        int: The number of odd numbers found in the rotated binary string after rotating n times.\n\n    Example:\n        >>> odd_Equivalent(\"1010\", 2)\n        4\n        >>> odd_Equivalent(\"1010\", 3)\n        2\n    \"\"\"\n    # Initialize variables to keep track of odd numbers and counter\n    odd_count = 0\n    count = 0\n\n    # Loop through each character in the binary string and check if it's odd\n    for char in s:\n        count += 1\n        if char == \"1\":\n            odd_count += 1\n            if count > n:\n                break\n\n    # Return the number of odd numbers found after rotating n times\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n): \n    # Initialize variables\n    count = 0\n    length = len(s)\n\n    # Convert binary string to list\n    binary_list = list(s)\n\n    # Rotate the binary list the given number of times\n    for i in range(n):\n        binary_list = binary_list[-length:] + binary_list[:-length]\n\n    # Iterate through the list and count odd values\n    for i in binary_list:\n        if int(i) % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    count = 0\n    length = len(s)\n    temp = \"\"\n    for i in range(n):\n        if i == 0:\n            temp = s\n        else:\n            temp = temp + s\n        for j in range(length):\n            if temp[j] == \"1\":\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Find the length of the binary string\n    length = len(s)\n\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through each rotation\n    for i in range(n):\n\n        # Reverse the binary string\n        s = s[::-1]\n\n        # Loop through each character in the reversed binary string\n        for j in range(length):\n\n            # If the character is an odd number, increment the counter\n            if int(s[j]) % 2!= 0:\n                count += 1\n\n    # Return the final counter value\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # convert binary string to list of integers\n    s = list(map(int, list(s)))\n\n    # initialize counter to 0\n    counter = 0\n\n    # rotate the list n times\n    for i in range(n):\n        s = s[-len(s):] + s[:-len(s)]\n\n    # iterate through the list of integers and check if odd\n    for num in s:\n        if num % 2!= 0:\n            counter += 1\n\n    # return the count of odd numbers\n    return counter"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    s = s + s[::-1] # add the original string to itself to make a circular string\n    odd_count = 0\n    for i in range(n): # rotate the string n times\n        s = s[n:] + s[:n]\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the input binary string to a list of binary digits\n    binary_digits = [int(d) for d in s]\n\n    # Initialize a counter variable to keep track of the number of odd digits found\n    count = 0\n\n    # Rotate the list of binary digits the given number of times\n    for i in range(n):\n        temp = binary_digits[0]\n        for j in range(len(binary_digits) - 1, 0, -1):\n            binary_digits[j] = binary_digits[j - 1]\n        binary_digits[0] = temp\n\n        # Iterate through the rotated list of binary digits and count the number of odd digits\n        for digit in binary_digits:\n            if digit % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    # Find the length of the binary string\n    s_len = len(s)\n\n    # Initialize count to 0\n    count = 0\n\n    # Loop n times\n    for i in range(n):\n        # Convert the binary string to a list of integers\n        binary_list = [int(x) for x in s]\n\n        # Reverse the list\n        binary_list.reverse()\n\n        # Convert the reversed list to a binary string\n        reversed_binary = ''.join([str(x) for x in binary_list])\n\n        # Check if the original binary string is equal to the reversed binary string\n        if s == reversed_binary:\n            # Increment count if the original and reversed binary strings are equal\n            count += 1\n\n        # Convert the binary string to a list of integers\n        s_list = [int(x) for x in s]\n\n        # Reverse the list\n        s_list.reverse()\n\n        # Convert the reversed list to a binary string\n        s_reversed = ''.join([str(x) for x in s_list])\n\n        # Check if the original binary string is equal to the reversed binary string\n        if s == s_reversed:\n            # Increment count if the original and reversed binary strings are equal\n            count += 1\n\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set(nestedlist[0])\n    set2 = set(nestedlist[1])\n    set3 = set(nestedlist[2])\n    \n    common = set1.intersection(set2).intersection(set3)\n    \n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize empty sets for common elements and their counts\n    common = set()\n    count = set()\n\n    # loop through the nested lists\n    for i in nestedlist:\n        # loop through the current list and add the common elements to the sets\n        for j in i:\n            if j in common:\n                count[j] += 1\n            else:\n                common.add(j)\n                count[j] = 1\n\n    # create a new list of common elements and sort them in alphabetical order\n    result = sorted(common)\n\n    # return the result and their counts\n    return result, count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j in common:\n                common.remove(j)\n            else:\n                common.append(j)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                continue\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                continue\n            if set(i) & set(j):\n                common_elements.append(i)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(sublist)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n\n    first_element = nestedlist[0]\n    rest_of_list = nestedlist[1:]\n\n    if isinstance(first_element, list):\n        common_elements = common_in_nested_lists(rest_of_list)\n    else:\n        common_elements = []\n\n    for element in rest_of_list:\n        if element in common_elements:\n            common_elements.remove(element)\n\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # Initialize an empty set to store the common elements\n    common = set()\n    \n    # Iterate through the nested lists\n    for sublist in nestedlist:\n        # Iterate through the elements in the current sublist\n        for element in sublist:\n            # Add the current element to the common set if it's not already there\n            if element not in common:\n                common.add(element)\n    \n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_set = set()\n\n    # Iterate through each nested list\n    for lst in nestedlist:\n        # Iterate through each element in the nested list\n        for element in lst:\n            # Add the element to the common set if it is not already present\n            if element not in common_set:\n                common_set.add(element)\n\n    # Convert the common set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common_set = set()\n\n    # Iterate through the nested lists\n    for lst in nestedlist:\n        # Iterate through the list elements\n        for elem in lst:\n            # If the element is already in the set, add it to the common set\n            if elem in common_set:\n                common_set.remove(elem)\n            else:\n                common_set.add(elem)\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    # remove whitespace and convert to lowercase\n    text = text.replace(' ', '').lower()\n\n    # check if the text starts with a sign (+ or -)\n    if text[0] in ['+', '-']:\n        text = text[1:]\n\n    # check if the text contains only digits\n    if not text.isdigit():\n        return False\n\n    # check if the text is negative\n    if text[0] == '-':\n        return int(text)\n    else:\n        return int(text)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for item in list1:\n            if item:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if isinstance(nums, tuple):\n        result = 0\n        for num in nums:\n            if isinstance(num, int):\n                result += num\n        return result\n    else:\n        return \"Invalid input. Please provide a tuple of positive integers.\""
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list and concatenate all its elements into a single string\n    result = ''.join(str(num) for num in nums)\n    # Convert the concatenated string to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty integer variable to hold the sum of the tuple elements\n    total = 0\n    # Loop through each element in the tuple\n    for num in nums:\n        # Convert the element to an integer and add it to the total\n        total += int(num)\n    # Return the total integer value\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize an empty string to store the digits of the number\n    num_str = \"\"\n    # Loop through each digit of the number\n    for num in nums:\n        # Convert the digit to a string and append it to the number string\n        num_str += str(num)\n    # Convert the number string to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n        nums: a tuple of positive integers\n\n    Returns:\n        an integer that is the sum of the elements in the input tuple\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist.remove(element)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each element in the list\n    for element in test_list:\n        # Check if the element is convertible to a float\n        try:\n            float(element)\n            # If the element is convertible, convert it to a float and append it to a new list\n            new_list.append(float(element))\n        except ValueError:\n            pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                row[row.index(element)] = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for subitem in item:\n            try:\n                float(subitem)\n            except ValueError:\n                try:\n                    float(str(subitem))\n                except ValueError:\n                    try:\n                        float(int(subitem))\n                    except ValueError:\n                        pass\n                else:\n                    subitem = float(subitem)\n            else:\n                pass\n            test_list.remove(item)\n            item.remove(subitem)\n            test_list.append(item)\n            if item not in test_list:\n                test_list.append(item)\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Function to check if an element is convertible to a float\n    def is_float(element):\n        try:\n            float(element)\n            return True\n        except ValueError:\n            return False\n\n    # Convert all elements in test_list to float\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if is_float(test_list[i][j]):\n                test_list[i][j] = float(test_list[i][j])\n            else:\n                test_list[i][j] = 0.0\n\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, cell in enumerate(row):\n            try:\n                test_list[i][j] = float(cell)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for subitem in item:\n            try:\n                float(subitem)\n                subitem = float(subitem)\n            except ValueError:\n                subitem = None\n    return [subitem for sublist in test_list for subitem in sublist if subitem is not None]"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character and return the result\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Convert the list to a list of strings\n    result = [word for word in words]\n    # Return the list of strings\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Initialize an empty list to store the words\n    word_list = []\n    # Initialize a flag to keep track of whether the current character is part of a word or not\n    in_word = False\n    # Loop through the characters in the list\n    for char in char_list:\n        # If the current character is a space, add the current word to the list and reset the word flag\n        if char =='':\n            if in_word:\n                word_list.append( ''.join(char_list[start:i]) for start in range(start, i) if char_list[start] not in [' ', '\\t', '\\n'] )\n                start = i + 1\n                in_word = False\n        # If the current character is not a space, add it to the current word and set the word flag to True\n        else:\n            in_word = True\n    # Add the last word to the list\n    word_list.append( ''.join(char_list[start:]) )\n    # Return the list of words\n    return word_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Loop through the array and update the frequency of each element in the dictionary\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Loop through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] == arr[n-1]:\n        return search(arr[1:])\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n\n    # While there are still elements in the array to search\n    while left <= right:\n\n        # Calculate the middle index of the array\n        mid = (left + right) // 2\n\n        # If the element at the middle index is equal to the target element, we have found it\n        if arr[mid] == target:\n            # Initialize the count variable to 1\n            count = 1\n\n            # Move the left pointer to the left of the middle index until we find the first occurrence of the target element\n            while left <= mid and arr[left] == target:\n                left += 1\n\n            # Move the right pointer to the right of the middle index until we find the last occurrence of the target element\n            while mid <= right and arr[right] == target:\n                right -= 1\n\n            # Add the count variable to the sum of the counts of the elements between the left and right pointers\n            result = sum(mid - left + 1) + sum(right - mid)\n            return result\n\n        # If the element at the middle index is less than the target element, search in the right half of the array\n        elif arr[mid] < target:\n            left = mid + 1\n\n        # If the element at the middle index is greater than the target element, search in the left half of the array\n        else:\n            right = mid - 1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n\n    # Iterate through the array and update the count of each element in the dictionary\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Iterate through the array again to find the element that appears only once\n    for num in arr:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Traverse the array from the leftmost element to the rightmost element\n    for i in range(len(arr)):\n\n        # If an element is found which has only one occurrence\n        if i == 0 or arr[i]!= arr[i-1]:\n            if len(set([arr[i]])) == 1:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            if unique_element is None or arr[i]!= unique_element:\n                unique_element = arr[i]\n            else:\n                return None\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            unique_element = arr[i]\n            break\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    This function takes a sorted array as input and returns the element that appears only once in it.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        # Check if the current element is already present in the dictionary\n        if arr[i] in freq:\n            # If it is, increment its frequency by 1\n            freq[arr[i]] += 1\n        else:\n            # If not, add it to the dictionary with a frequency of 1\n            freq[arr[i]] = 1\n\n    # Iterate over the dictionary to find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == arr[arr.index(arr[i])]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize max_product to the first element of the list\n    max_product = list1[0][0] * list1[0][1]\n    \n    # Loop through the list of tuples\n    for i in range(1, len(list1)):\n        # Get the product of the current tuple\n        product = list1[i][0] * list1[i][1]\n        \n        # Update max_product if the product is greater\n        if product > max_product:\n            max_product = product\n    \n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function finds the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n    list1 (list): A list of tuples.\n\n    Returns:\n    int: The maximum absolute product between numbers in pairs of tuples within the given list.\n    \"\"\"\n\n    # Initialize variables to store the maximum product and the current product\n    max_product = 0\n    current_product = 1\n\n    # Loop through the list of tuples\n    for tup in list1:\n\n        # Calculate the product of the first and second elements in the tuple\n        first_product = tup[0] * tup[1]\n\n        # Calculate the absolute value of the product\n        abs_product = abs(first_product)\n\n        # Check if the absolute value of the product is greater than the current maximum product\n        if abs_product > max_product:\n            max_product = abs_product\n\n        # Update the current product\n        current_product = first_product\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    '''\n    Function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')  # initialize max_product variable to negative infinity\n    max_product_pair = None  # initialize max_product_pair variable to None\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i] * lst[j]) > max_product:\n                max_product = abs(lst[i] * lst[j])\n                max_product_pair = (lst[i], lst[j])\n\n    return max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][0]) > max_abs_product:\n                max_abs_product = abs(list1[i][0] * list1[j][0])\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # find the absolute difference between the numbers in the tuples\n            difference = abs(list1[i][0] - list1[j][0]) + abs(list1[i][1] - list1[j][1])\n            # update the maximum product if the current difference is greater than the current maximum\n            if difference > max_product:\n                max_product = difference\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    max_pair = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            abs_product = abs(product)\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n                max_pair = (lst[i], lst[j])\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')  # initialize to negative infinity\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a dictionary to store all the factors of each number in the range\n    factors_dict = {}\n    for num in range(1, limit+1):\n        factors = []\n        for factor in range(1, num):\n            if (num % factor) == 0:\n                factors.append(factor)\n        factors_dict[num] = factors\n    \n    # create a set to store all the numbers that are amicable\n    amicable_set = set()\n    for num in factors_dict:\n        for factor in factors_dict[num]:\n            if factor!= num:\n                if (num, factor) in factors_dict and (factor, num) in factors_dict:\n                    if (num, factor) == factors_dict[num][-1] and (factor, num) == factors_dict[factor][-1]:\n                        amicable_set.add(num)\n                        amicable_set.add(factor)\n    \n    # sum all the amicable numbers\n    amicable_sum = 0\n    for num in amicable_set:\n        amicable_sum += num\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all numbers from 1 to limit\n    numbers = list(range(1, limit+1))\n    # initialize a variable to store the sum of amicable numbers\n    sum_amicable = 0\n    # loop through all numbers and check if they are amicable\n    for num in numbers:\n        # check if the number is amicable\n        if num in numbers and num!= limit:\n            # check if the sum of the number and the limit is also amicable\n            if (num + limit) in numbers and (num + limit)!= limit:\n                # add the sum to the sum of amicable numbers\n                sum_amicable += num + limit\n    # return the sum of amicable numbers\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum variable to 0\n    total_sum = 0\n    # loop through numbers from 2 to limit\n    for i in range(2, limit+1):\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime and is amicable to any number between 1 and i-1, add i to the sum\n        if is_prime:\n            for j in range(1, i):\n                if i % j == 0 and j!= i:\n                    total_sum += i\n    # return the total sum of amicable numbers\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Check if the limit is a positive integer\n    if type(limit)!= int or limit <= 0:\n        raise ValueError(\"The limit must be a positive integer.\")\n    \n    # Initialize a dictionary to store the prime factors\n    prime_factors = {}\n\n    # Initialize the sum of amicable numbers\n    amicable_sum = 0\n    \n    # Iterate over all numbers from 2 to the limit\n    for num in range(2, limit+1):\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # Add the number to the sum of amicable numbers\n            amicable_sum += num\n            # Check if the number has any prime factors\n            for factor in prime_factors:\n                if num % factor == 0:\n                    # Remove the prime factor from the number\n                    new_num = num // factor\n                    # Check if the new number is prime\n                    is_new_prime = True\n                    for i in range(2, int(new_num**0.5)+1):\n                        if new_num % i == 0:\n                            is_new_prime = False\n                            break\n                    if is_new_prime:\n                        # Add the new number to the sum of amicable numbers\n                        amicable_sum += new_num\n    \n    # Return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize sum variable to 0\n    total_sum = 0\n    \n    # Loop through numbers from 1 to limit\n    for i in range(1, limit + 1):\n        \n        # Check if number is amicable by checking if it is divisible by any number from 1 to the square root of the number\n        amicable = False\n        for j in range(1, int(i ** 0.5) + 1):\n            if i % j == 0:\n                amicable = True\n                break\n        \n        # If number is not divisible by any number from 1 to the square root of the number, it is amicable\n        if not amicable:\n            total_sum += i\n    \n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    This function finds the sum of all amicable numbers from 1 to a specified number.\n\n    Args:\n    limit (int): The number up to which we want to find the sum of amicable numbers.\n\n    Returns:\n    int: The sum of all amicable numbers from 1 to the specified number.\n    '''\n\n    # Create a list of all numbers from 1 to the specified limit\n    nums = list(range(1, limit + 1))\n\n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is amicable by checking if it is divisible by any of the other numbers in the list\n        if num == sum(set(nums) - set([num])):\n            return num"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum_of_divisors(num) and num!= 1:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef sum_of_divisors(num):\n    '''\n    Write a function to sum all the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        if i == 2:\n            if i!= 2:\n                amicable_sum += 2\n            continue\n        if i % 2 == 0:\n            if i!= 2:\n                if i % 3 == 0:\n                    amicable_sum += i\n                elif i % 5 == 0:\n                    amicable_sum += i\n        else:\n            if i!= 1:\n                amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # List of prime numbers up to the specified limit\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # List to store amicable numbers\n    amicable_numbers = []\n\n    # Loop through each prime number\n    for prime in primes:\n        # Loop through each number from 1 to the specified limit\n        for num in range(1, limit + 1):\n            # Check if the number is amicable to the prime number\n            if is_amicable(num, prime):\n                # Add the amicable number to the list\n                amicable_numbers.append(num)\n\n    # Calculate the sum of the amicable numbers\n    amicable_sum = sum(amicable_numbers)\n\n    return amicable_sum\n\n\ndef is_amicable(num, prime):\n    \"\"\"\n    Check if a number is amicable to a specified prime number.\n    \"\"\"\n    if prime == 2 or prime == 3:\n        return False\n\n    if num % prime == 0 and num!= prime:\n        return True\n\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(2, limit + 1):\n        if i!= 1:\n            if i % 2 == 0:\n                j = 3 * i + 1\n            else:\n                j = 3 * i\n            if j <= limit:\n                if i == j:\n                    amicable_numbers.append(i)\n                elif i % j == 0 and j % i == 0:\n                    amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = round(angle.real, 2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    angle = round(angle, 4)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = cmath.degrees(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a + b*1j)\n    angle_deg = cmath.phase(a + b*1j) * 180/cmath.pi\n    angle_grad = cmath.phase(a + b*1j) * 180/cmath.pi * 100/25\n\n    return angle_rad, angle_deg, angle_grad"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = a + b*1j\n    angle = cmath.phase(complex_number)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Iterate through the string and count the number of 0s and 1s\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        # Calculate the maximum difference between the number of 0s and 1s\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of number of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is a 0, increment the zero_count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one_count\n        elif char == '1':\n            one_count += 1\n        # If we've seen a 1 and a 0, calculate the maximum difference and return it\n        elif one_count > zero_count:\n            return max(zero_count - one_count, 0)\n        # If we've seen a 0 and a 1, calculate the maximum difference and return it\n        else:\n            return max(one_count - zero_count, 0)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    n = len(string)\n    dp = [0] * (n + 1)\n    max_diff = 0\n\n    for i in range(1, n + 1):\n        if string[i - 1] == '0':\n            dp[i] = dp[i - 1] + 1\n            max_diff = max(max_diff, dp[i])\n        else:\n            dp[i] = dp[i - 1]\n\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    n = len(string)\n    diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = max(diff, abs(count_0 - count_1))\n    return diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    # initialize variables to store the count of 0s and 1s in each substring\n    zero_count = 0\n    one_count = 0\n\n    # loop through each character in the binary string\n    for char in string:\n        # check if the character is a 0 or 1\n        if char == '0':\n            zero_count += 1\n        elif char == '1':\n            one_count += 1\n        else:\n            # if the character is neither 0 nor 1, it means the substring starts here\n            # so check the difference in counts between this substring and the previous substrings\n            if zero_count > one_count:\n                zero_count = 0\n            else:\n                one_count = 0\n\n    # check the difference in counts between the last substring and the first substring\n    if zero_count > one_count:\n        return zero_count\n    else:\n        return one_count"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # Initialize a counter for the number of 0s\n    count_0 = 0\n    # Initialize a counter for the number of 1s\n    count_1 = 0\n    # Initialize the maximum difference between the number of 0s and 1s\n    max_diff = 0\n    # Iterate through the characters in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n            # If the count of 0s is odd, increment the count of 1s\n            if count_0 % 2 == 1:\n                count_1 += 1\n            # Update the maximum difference between the number of 0s and 1s if the current count of 1s is greater than the maximum count\n            max_diff = max(max_diff, count_1)\n            # Reset the count of 1s\n            count_1 = 0\n        # If the character is a 1, increment the count of 1s\n        else:\n            count_1 += 1\n            # If the count of 1s is odd, increment the count of 0s\n            if count_1 % 2 == 1:\n                count_0 += 1\n            # Update the maximum difference between the number of 0s and 1s if the current count of 0s is greater than the maximum count\n            max_diff = max(max_diff, count_0)\n            # Reset the count of 0s\n            count_0 = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(2)]\n\n    for i in range(n):\n        if string[i] == '0':\n            dp[0][i] = 1\n        else:\n            dp[0][i] = 0\n\n    for _ in range(1, 2):\n        for i in range(n):\n            if i > 0 and string[i] == string[i - 1]:\n                dp[_][i] = dp[_][i - 1]\n            else:\n                dp[_][i] = dp[1 - _][i - 1] + 1\n\n    max_diff = 0\n    for i in range(1, n):\n        for _ in range(2):\n            if dp[_][i] > dp[1 - _][i - 1]:\n                max_diff = max(max_diff, dp[1 - _][i] - dp[_][i])\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through the binary string\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        # Calculate the maximum difference between the number of 0s and number of 1s in the current sub-string\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n            if count > 1:\n                max_diff = max(max_diff, count - 1)\n        elif string[i] == '1':\n            count = 1\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    n = len(string)\n    \n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n            \n        max_diff = max(max_diff, count)\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    num1 = a\n    num2 = b\n    while num1!= 0 and num2!= 0:\n        if num1 % num2 == 0:\n            common_divisors.append(num2)\n        num1, num2 = num2, num1 % num2\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function calculates the sum of common divisors of two given numbers.\n    '''\n\n    # Check if a is a multiple of b\n    if a % b == 0:\n        # If a is multiple of b, check if b is a multiple of a\n        if b % a == 0:\n            # If b is also multiple of a, then add the two numbers\n            return a + b\n        else:\n            # If b is not a multiple of a, then return only the smallest of the two numbers\n            return a\n    else:\n        # If a is not a multiple of b, then return only the smallest of the two numbers\n        return a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # first find the largest common divisor using Euclidean algorithm\n    x,y = max(a,b),min(a,b)\n    while y!= 0:\n        x,y = y,x%y\n    common_divisor = x\n    # now find the sum of common divisors of a and b\n    sum_divisors = 0\n    for i in range(1,common_divisor+1):\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def common_divisors(n):\n        \"\"\"\n        This function finds the common divisors of a given number.\n        \"\"\"\n        divisors = []\n        i = 1\n        while i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                divisors.append(i)\n        return divisors\n\n    divisors_a = common_divisors(a)\n    divisors_b = common_divisors(b)\n\n    # Find the intersection of the two lists of divisors\n    common_divisors_set = set(divisors_a).intersection(set(divisors_b))\n\n    # Sum the common divisors and return the result\n    return sum(common_divisors_set)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(num1, num2):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n\n    Args:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of num1 and num2.\n    \"\"\"\n    # Calculate the common divisors of num1 and num2\n    divisors = set(set(num1).intersection(set(num2)))\n\n    # Calculate the sum of common divisors\n    sum_common = sum(divisors)\n\n    return sum_common\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Ensure that the two numbers are positive integers\n    if a < 1 or b < 1:\n        raise ValueError(\"Both numbers must be positive integers.\")\n\n    # Use the Euclidean algorithm to find the GCD of the two numbers\n    while b:\n        a, b = b, a % b\n\n    # Add 1 to the GCD if it is even, since the sum of common divisors is the sum of all divisors of a plus 1.\n    if a % 2 == 0:\n        a += 1\n\n    # Return the sum of common divisors\n    return a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    Calculate the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, b+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers a and b as input and returns the sum of common divisors of these two numbers.\n    \"\"\"\n    # Check if a is divisible by 1\n    if a % 1 == 0:\n        return sum(b, a % b)\n    # Check if b is divisible by 1\n    elif b % 1 == 0:\n        return sum(a, b % a)\n    # Check if both numbers are divisible by 1\n    elif a % 1 == 0 and b % 1 == 0:\n        return a * b\n    else:\n        # Calculate the sum of common divisors of a and b using Euclid's algorithm\n        while a % b!= 0:\n            c = a % b\n            a = b\n            b = c\n        return a"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input, x and y, and multiplies them together. The output will be stored in a variable called result.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    # Multiply the two integers and return the result\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into individual words\n    long_words = [] # create an empty list to store words that are longer than n characters\n    for word in words: # loop through each word in the list\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # if it is, append it to the list of longer words\n    return long_words # return the list of longer words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Returns a list of words from the given list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n    n (int): The length of the longest word you want to find.\n    words (list): A list of words.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    :param n: the maximum length of words to consider\n    :type n: int\n    :param str: a list of words\n    :type str: list\n    :return: a list of words that are longer than n characters\n    :rtype: list\n    \"\"\"\n    return [word for word in str if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the same dimensions as a magic square\n    n = len(my_matrix)\n    if n*n!= len(set(sum(row, []) for row in my_matrix)):\n        return False\n\n    # Check if each row, column, and 3x3 submatrix is a magic square\n    for i in range(n):\n        row = [row[i] for row in my_matrix]\n        col = [my_matrix[j][i] for j in range(n)]\n        submatrix = [my_matrix[k][l] for k in range(n-2) for l in range(n-2)]\n        if not (magic_square_test(row) and magic_square_test(col) and magic_square_test(submatrix)):\n            return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if all rows have the same sum\n    for i in range(n):\n        if not all(my_matrix[i][j] == my_matrix[0][0] for j in range(n)):\n            return False\n    # Check if all columns have the same sum\n    for j in range(n):\n        if not all(my_matrix[i][j] == my_matrix[0][0] for i in range(n)):\n            return False\n    # Check if the diagonals have the same sum\n    for i in range(n):\n        if not my_matrix[i][i] == my_matrix[0][0]:\n            return False\n    if not my_matrix[0][0] == my_matrix[0][n-1]:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the sum of all elements in the matrix is equal to the number of elements in the matrix\n    if sum(sum(row) for row in my_matrix)!= len(my_matrix) ** 2:\n        return False\n    \n    # Check if the matrix is a magic square\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix[0]))]\n    diag_sums = [row_sums[i] + col_sums[j] for i in range(len(row_sums)) for j in range(len(col_sums)) if i!= j]\n    if diag_sums!= row_sums + col_sums:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the dimensions of the matrix are 3x3 or 4x4\n    if len(my_matrix)!= 3 and len(my_matrix)!= 4:\n        return False\n    \n    # Check if all the rows have the same length\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n    \n    # Check if the sum of the diagonal elements is equal to the sum of the other elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if sum(sum(row) for row in my_matrix)!= diagonal_sum:\n        return False\n    \n    # Check if the product of the elements in each row is equal to the product of the elements in the diagonal\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i][j] for j in range(len(my_matrix)))\n        if row_sum!= diagonal_sum:\n            return False\n        diagonal_sum //= len(my_matrix)\n    \n    # Check if the product of the elements in each column is equal to the product of the elements in the diagonal\n    for j in range(len(my_matrix[0])):\n        column_sum = sum(my_matrix[i][j] for i in range(len(my_matrix)))\n        if column_sum!= diagonal_sum:\n            return False\n        diagonal_sum //= len(my_matrix)\n    \n    # If all the checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    n = len(my_matrix)  # Get the number of rows and columns in the matrix\n\n    # Check if all rows have the same sum\n    row_sums = []\n    for i in range(n):\n        row_sums.append(sum(my_matrix[i]))\n\n    if not all(row_sums[i] == row_sums[0] for i in range(1, n)):\n        return False\n\n    # Check if all columns have the same sum\n    col_sums = []\n    for j in range(n):\n        col_sums.append(sum(row[j] for row in my_matrix))\n\n    if not all(col_sums[j] == col_sums[0] for j in range(1, n)):\n        return False\n\n    # Check if the matrix is a magic square\n    square = []\n    for i in range(n):\n        square.append(sum(row[i] for row in my_matrix))\n\n    if not all(square[i] == square[0] for i in range(1, n)):\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += my_matrix[i][i]\n    \n    # Check if the sum of diagonal elements is the same as the sum of the row elements\n    for i in range(n):\n        row_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n        if row_sum!= diagonal_sum:\n            return False\n    \n    # Check if the sum of diagonal elements is the same as the sum of the column elements\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += my_matrix[i][j]\n        if column_sum!= diagonal_sum:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check that the input matrix is a list of lists\n    if not all(isinstance(row, list) for row in my_matrix):\n        return \"Input matrix must be a list of lists\"\n    \n    # Check that the input matrix has the same number of rows and columns\n    if len(my_matrix)!= len(set(len(row) for row in my_matrix)) or len(my_matrix[0])!= len(set(len(row) for row in my_matrix[1:])):\n        return \"Input matrix must have the same number of rows and columns\"\n    \n    # Check that each row has the same number of elements\n    for row in my_matrix:\n        if len(row)!= len(set(len(row) for row in my_matrix)):\n            return \"All rows must have the same number of elements\"\n    \n    # Check that the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == 0:\n                # Check if the values in the current row can form a magic square\n                for k in range(1, len(my_matrix)):\n                    row_sum = 0\n                    for l in range(len(my_matrix)):\n                        row_sum += my_matrix[i][l]\n                        if row_sum == k:\n                            break\n                    else:\n                        return \"The matrix is not a magic square\"\n                    \n                # Check if the values in the current column can form a magic square\n                col_sum = 0\n                for l in range(len(my_matrix)):\n                    col_sum += my_matrix[l][j]\n                    if col_sum == i + 1:\n                        break\n                else:\n                    return \"The matrix is not a magic square\"\n    \n    return \"The matrix is a magic square\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix has 16 elements\n    if len(my_matrix) * len(my_matrix[0])!= 16:\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if each row and column have the same sum\n    if row_sums!= col_sums:\n        return False\n\n    # Check if the matrix is a magic square\n    magic_sum = (1 + 10 + 15 + 20 + 25 + 30 + 35 + 40 + 45 + 50 + 55 + 60 + 65 + 70 + 75 + 80 + 85 + 90 + 95) * 2\n    if row_sums == [magic_sum] * 16:\n        return True\n    elif col_sums == [magic_sum] * 16:\n        return True\n    elif [magic_sum] * 16 == [row_sums[i] for i in range(16)]:\n        return True\n    elif [magic_sum] * 16 == [col_sums[i] for i in range(16)]:\n        return True\n\n    # If all checks fail, the matrix is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    total = rows * cols\n\n    # Check if the sum of all elements in the matrix is equal to the total number of elements\n    if sum(sum(row) for row in my_matrix)!= total:\n        return False\n\n    # Check if each row, column, and diagonal sum to the same value\n    for i in range(rows):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(cols))\n        diagonal_sum = sum(my_matrix[i][j] for j in range(rows))\n\n        if row_sum!= col_sum or row_sum!= diagonal_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is symmetric\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        square_sum = sum([my_matrix[k][l] for k in range(n) for l in range(n) if k!=i and l!=j])\n        if row_sum!= col_sum or col_sum!= square_sum or row_sum!= square_sum:\n            return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_num = None\n    max_freq = 0\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each number in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_num = None\n    max_count = 0\n    for num in count:\n        if count[num] > max_count:\n            max_count = count[num]\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers and returns the item with maximum frequency.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_num = None\n    max_freq = 0\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    \n    for num in nums:\n        count[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    \n    for item, freq in count.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    count = defaultdict(int)  # defaultdict to store the count of each item\n    \n    # loop through the list and count the frequency of each item\n    for num in nums:\n        count[num] += 1\n    \n    # find the item with the maximum frequency\n    max_count = 0\n    max_item = None\n    for item, freq in count.items():\n        if freq > max_count:\n            max_count = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Loop through the list and update the frequency count in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = \"AEIOUaeiou\"\n    reversed_str = \"\"\n\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    reversed_string = []\n    for char in string:\n        if char in vowels:\n            reversed_string.append(char)\n    reversed_string.reverse()\n    return ''.join(reversed_string)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    reversed_str = \"\"\n    \n    for i in range(len(str1)):\n        if str1[i] not in vowels_set:\n            reversed_str += str1[i]\n    \n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for i in range(len(string)-1, -1, -1):\n        if string[i] not in vowels:\n            result.append(string[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    rev_str = \"\"\n    for char in str1:\n        if char in vowels:\n            if not char in rev_str:\n                rev_str += char\n    return rev_str[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 = str1 + str(i)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    string = str(tup1)\n    return string"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [num for num in nums if num < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum_sum = 0\n    for num in nums:\n        if num < 0:\n            negativenum_sum += num\n    return negativenum_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # define a function to calculate the number of squares in a hexagon\n    def num_squares(n):\n        return (n*(3*n-1))//2\n\n    # define a function to calculate the distance of a point from the center of a hexagon\n    def hex_distance(r):\n        return (1/2)*r**2\n\n    # initialize variables\n    hexagon_size = 2*num_squares(n)\n    distance = hex_distance(n)\n\n    # calculate the nth hexagon\n    hexagon = int(hexagon_size*distance)\n\n    return hexagon"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))**2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Convert n to the base 26 representation\n    num_base_26 = ''\n    while n > 0:\n        num_base_26 += chr((n % 26) + 65)  # convert base 10 to base 26\n        n //= 26\n\n    # Calculate the nth hexagonal number\n    hexagonal_num = 0\n    for i in range(len(num_base_26)):\n        hexagonal_num += int(num_base_26[i]) ** (len(num_base_26) - 1 - i)\n\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n**2 - 1) * (5*n**2 + 3) // 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n)**0.5 + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 6\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    # Recursive case\n    else:\n        return n * (2 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 36\n    for i in range(n):\n        print(a)\n        a += b\n        b += c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Convert n to float to handle integer division\n    n = float(n)\n    \n    # Calculate the nth hexagonal number using the formula\n    # H(n) = 1/2 * (n^2 + 1)\n    return int(0.5 * (n**2 + 1))"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = non_zero_count / zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # initialize an empty array to store the count of zeroes and non-zeroes\n    count = array('i', [0, 0])\n    \n    # loop through each element in the array\n    for num in nums:\n        # check if the element is zero\n        if num == 0:\n            # increment the count of zeroes\n            count[0] += 1\n        else:\n            # increment the count of non-zeroes\n            count[1] += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    ratio = count[0] / count[1]\n    \n    # return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zeroes = 0\n    non_zeroes = 0\n    \n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    zero_ratio = zeroes / non_zeroes\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array of zeros with the same size as the input array\n    zeros = array('i', [0] * len(nums))\n    # iterate through each element in the input array\n    for i in range(len(nums)):\n        # if the element is zero, increment the corresponding element in the zeros array\n        if nums[i] == 0:\n            zeros[i] += 1\n    # calculate the ratio of zeroes to non-zeroes\n    non_zeros = len(nums) - sum(zeros)\n    ratio = non_zeros / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Convert the input array to an array type that can be indexed\n    arr = array('i', nums)\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in arr:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n            \n    if non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / non_zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    ones = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(0) + 1] += 1\n        else:\n            ones[ones.index(1) + 1] += 1\n\n    non_zeros = len(nums) - zeros[zeros.index(0)]\n    ratio = zeros[zeros.index(0)] / non_zeros if non_zeros!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Convert the input array to an array of integers\n    nums = array('i', nums)\n\n    # Find the sum of all non-zero elements in the array\n    non_zero_sum = sum(nums)\n\n    # Count the number of zeroes in the array\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_sum\n\n    # Return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Create a new array to store the zeros and non-zeros\n    zeros = array('i', [0] * len(nums))\n    \n    # Iterate through the array and count the zeros and non-zeros\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    \n    # Calculate the ratio of zeros to non-zeros\n    non_zeros = len(nums) - sum(zeros)\n    ratio = zeros[0] / non_zeros\n    \n    # Return the ratio of zeros to non-zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = len(nums)\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    zero_ratio = zero_count / non_zero_count\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # create a dictionary to store powers of 2\n    powers_of_two = {}\n    \n    # iterate through all possible numbers from 1 to n\n    for i in range(1, n+1):\n        # convert the current number to a binary string\n        binary_str = bin(i)[2:]\n        \n        # check if the binary string is equal to the length of the string of digits in n\n        if len(binary_str) == len(bin(n)[2:]):\n            # if it is, check if it is a valid power of 2\n            if binary_str in powers_of_two:\n                # if it is, return True as it is a valid representation\n                return True\n            else:\n                # if it is not, add it to the dictionary of powers of 2\n                powers_of_two[binary_str] = True\n                \n    # if the function gets here, it means that the number cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            if n // i == 1:\n                return True\n            if n // i == 2:\n                continue\n            if n // i % 2 == 0:\n                return False\n            if n // i % 2 == 1:\n                return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # find the power of 2 that is less than or equal to n\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 <<= 1\n\n    # check if (n - power_of_2) can be represented as sum of non-zero powers of 2\n    return is_Sum_Of_Powers_Of_Two(n - power_of_2)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # function to check whether a number is a sum of powers of 2\n    def is_sum_of_powers_of_two(num):\n        # check if the number is 0\n        if num == 0:\n            return True\n        # check if the number is a power of 2\n        elif num & (num - 1) == 0:\n            return True\n        # check if the number is a sum of powers of 2\n        else:\n            for i in range(1, num):\n                if num % i == 0 and is_sum_of_powers_of_two(num // i):\n                    return True\n            return False\n\n    # check whether the given number can be represented as sum of non-zero powers of 2 or not\n    if is_sum_of_powers_of_two(n):\n        print(n, \"can be represented as sum of non-zero powers of 2.\")\n    else:\n        print(n, \"cannot be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    for i in range(1, int(n**0.5)+1):\n        if n == 2**i:\n            return True\n        if n == 2**(i+1):\n            return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is a power of 2\n    if n & (n - 1) == 0:\n        # check if the sum of powers of 2 is less than or equal to n\n        if (n & ((n & -n) + 1)) == n:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # initialize a variable to store the sum of powers of 2\n    total_powers_of_2 = 0\n    # loop through the number of bits in the number\n    for i in range(32):\n        # check if the current bit is 1\n        if n & (1 << i):\n            # add the power of 2 to the total sum\n            total_powers_of_2 += (1 << i)\n        # if the number is 0, then we can't represent it as sum of powers of 2\n        if not n:\n            return False\n    # if we made it to the end of the loop, it means all bits were 1, so we can represent it as sum of powers of 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # if n is 0, then it cannot be represented as sum of non-zero powers of 2\n    if n == 0:\n        return False\n    # if n is 1, then it can be represented as sum of non-zero powers of 2\n    elif n == 1:\n        return True\n    # if n is a power of 2, then it cannot be represented as sum of non-zero powers of 2\n    elif n & (n - 1) == 0:\n        return False\n    # if n is a composite number, then it can be represented as sum of non-zero powers of 2\n    else:\n        # loop through all odd numbers between 3 and sqrt(n)\n        for i in range(3, int(n**0.5) + 1, 2):\n            # check if n can be written as 2^i + 2^(i+1)\n            if n % i == 0 and n % (i + 1) == 0:\n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n < 0:\n        n = -n\n\n    # Check if the number is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # Check for the sum of non-zero powers of 2\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Args:\n        n: The number whose parity can be checked.\n\n    Returns:\n        True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n\n    # n is odd. Now we need to check if it can be represented as sum of powers of 2\n    # We can do this by iterating from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of a circle of radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as input and returns the circumference of the circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # Formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference, \"units.\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    unique_list = list(set(flattened_list))\n    return unique_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Define a recursive function to flatten the list\n    def flatten(lst):\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            singly_list.append(lst)\n\n    # Initialize the singly_list to an empty list\n    singly_list = []\n\n    # Call the flatten function on the test_list\n    flatten(test_list)\n\n    # Return the flattened list\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result |= extract_singly(item)\n        else:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for item in test_list:\n        flattened_list += item\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened.extend(item)\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n    '''\n\n    # Find the maximum element in the list\n    max_num = max(nums)\n\n    # Do the pancake sort by repeatedly swapping adjacent elements and repeatedly selecting the largest element\n    # until the list is sorted.\n    while max_num!= 1:\n        max_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        max_num = max(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    def flip(nums, i):\n        for j in range(i):\n            if nums[j] > nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n\n    for i in range(len(nums)-1, 0, -1):\n        flip(nums, i)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # create a copy of the input list to avoid modifying the original list\n    nums_copy = list(nums)\n\n    # create an empty list to store the sorted elements\n    sorted_nums = []\n\n    # loop through the input list\n    for i in range(len(nums_copy), 0, -1):\n        # find the largest element in the list\n        max_index = nums_copy.index(max(nums_copy[:i]))\n\n        # add the element at the max index to the sorted list\n        sorted_nums.append(nums_copy[max_index])\n\n        # remove the largest element from the list\n        nums_copy.remove(nums_copy[max_index])\n\n        # decrement the index to start with the next largest element\n        i -= 1\n\n    # concatenate the sorted elements to the original list\n    nums_copy.extend(sorted_nums)\n\n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # create a copy of the original list\n    nums_copy = nums[:]\n    # start with the largest element and decrement it repeatedly\n    for i in range(n - 1, 0, -1):\n        # find the index of the next element that is larger than the current element\n        max_index = 0\n        for j in range(i):\n            if nums_copy[j] < nums_copy[max_index]:\n                max_index = j\n        # swap the current element with the largest element found so far\n        nums_copy[i], nums_copy[max_index] = nums_copy[max_index], nums_copy[i]\n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # In each iteration, we reverse the order of the first n-1 elements,\n    # then reverse the order of the last element.\n    for i in range(n - 1, 0, -1):\n        # Find the index of the largest element in the first i elements\n        largest_index = i - 1\n        for j in range(i):\n            if nums[j] > nums[largest_index]:\n                largest_index = j\n\n        # Swap the largest element with the i-th element (n-i)\n        nums[i-1], nums[largest_index] = nums[largest_index], nums[i-1]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # We'll use a \"bubble\" sort algorithm to sort the array in O(n^2) time complexity.\n    # The idea is to repeatedly swap adjacent elements if they are in the wrong order until the array is sorted.\n    swapped = True\n    while swapped:\n        swapped = False\n        # We'll start by comparing the first two elements, if they are in the wrong order, we'll swap them.\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        # We'll repeat this process for the remaining elements, if any.\n        n -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the largest element in the unsorted part of the list\n        largest = nums[i]\n        for j in range(i+1, n):\n            if nums[j] > largest:\n                largest = nums[j]\n        # Swap the largest element with the i-th element\n        nums[i], nums[largest_index] = nums[largest_index], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    swaps = 0\n    start = 0\n    end = n - 1\n\n    # Loop until the list is sorted\n    while start < end:\n\n        # Find the next largest index\n        next_largest_index = start\n        for i in range(start + 1, end + 1):\n            if nums[i] > nums[next_largest_index]:\n                next_largest_index = i\n\n        # Swap the elements at the current and next largest indices\n        nums[start], nums[next_largest_index] = nums[next_largest_index], nums[start]\n\n        # Increment the swaps counter\n        swaps += 1\n\n        # Move the start and end pointers\n        start += 1\n        end -= 1\n\n    # Return the sorted list and the number of swaps\n    return nums, swaps"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Get the length of the list\n    n = len(nums)\n\n    # Use two pointers to implement pancake sort\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the elements at the maximum index with the element at index i\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the entire list from i+1 to n-1\n        for j in range(i+1, n):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def partition(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if nums[j] <= pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n        nums[i+1], nums[high] = nums[high], nums[i+1]\n        return i+1\n\n    def quick_sort(nums, low, high):\n        if low < high:\n            pi = partition(nums, low, high)\n            quick_sort(nums, low, pi-1)\n            quick_sort(nums, pi+1, high)\n\n    quick_sort(nums, 0, len(nums)-1)\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of identical items in the same position.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    # Create a dictionary to store the count of same-position items\n    same_count = {}\n\n    # Iterate over the first list\n    for i in range(len(list1)):\n        # Check if the item is present in the second list\n        if list1[i] in list2:\n            # Check if the item is present in the third list\n            if list1[i] in list3:\n                # Check if the item is present in the same position in both lists\n                if list1[i] == list2[list2.index(list1[i])]:\n                    # Increment the count for the same-position item\n                    if list1[i] not in same_count:\n                        same_count[list1[i]] = 1\n                    else:\n                        same_count[list1[i]] += 1\n\n    # Return the count of same-position items\n    return same_count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize maximum absolute difference to the smallest possible value\n    max_diff = float('-inf')\n\n    # Iterate over all pairs of elements in the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate absolute difference between i and j\n            diff = abs(arr[i] - arr[j])\n            # Update maximum absolute difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Sorting the array in ascending order\n    arr.sort()\n    \n    # Finding the maximum absolute difference\n    max_diff = abs(arr[-1] - arr[0])\n    \n    # Returning the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the elements at indices i and j\n            diff = abs(arr[i] - arr[j])\n\n            # Update the maximum difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Find the minimum and maximum values in the array\n    min_value = min(arr)\n    max_value = max(arr)\n\n    # Initialize the maximum difference to the minimum value\n    max_diff = min_value\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current element is smaller than the minimum value\n        if arr[i] < min_value:\n            # Calculate the absolute difference between the current element and the minimum value\n            diff = abs(arr[i] - min_value)\n            # Update the maximum difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(1, n):\n        y = n - x * a - b\n        if y % b == 0:\n            return (x, y // b)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1, x2 = 0, 1\n    y1, y2 = 1, 0\n    while x2 - x1 > 0 and y2 - y1 > 0:\n        x = int((a * (x2 - x1) + b * (y2 - y1) - n) // (2 * a * b))\n        y = n - a * x - b * y1\n        if y == 0:\n            return (x, x)\n        elif y > 0:\n            x1, y1 = x2, y\n        elif y < 0:\n            x2, y2 = x, y\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n\n    # Initialize variables\n    x_list = []\n    y_list = []\n\n    # Loop through integers from 0 to n-1\n    for i in range(n):\n        # Initialize variables for current x and y\n        current_x = 0\n        current_y = 0\n\n        # Loop through integers from 0 to i\n        for j in range(i + 1):\n            # Calculate current x and y values\n            current_x += a * j\n            current_y += b * j\n\n        # Check if current_x + current_y equals n\n        if current_x + current_y == n:\n            # Add the current x and y to the x and y lists\n            x_list.append(current_x)\n            y_list.append(current_y)\n\n    # Check if x and y lists are not empty\n    if not x_list:\n        return None\n    elif not y_list:\n        return None\n\n    # Return the x and y lists as a tuple\n    return tuple(x_list), tuple(y_list)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        # Check if b = 0 (in which case x = -n/b)\n        if b == 0:\n            return None\n        else:\n            return (-n/b, 0)\n    else:\n        # Find x that satisfies ax = b/a (i.e. solve for x s.t. ax = b/a)\n        x_root = (-b + math.sqrt(b**2 - 4*a*n)) / (2*a)\n        # Find y that satisfies by = x/a (i.e. solve for y s.t. by = x/a)\n        y_root = (-x_root + b/a) / a\n        # Return (x_root, y_root) as a tuple\n        return (x_root, y_root)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # check if the given equation is not of the form ax + by = n\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # check if the given equation is not invertible\n    if b == 0:\n        return None\n\n    # find the values of x and y that satisfy the equation\n    x = (-n + b**0.5) / (2 * a)\n    y = (-n - b**0.5) / (2 * a)\n\n    # check if the equation has a solution\n    if x < 0 or y < 0:\n        return None\n\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are both non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # check if a is negative, which would mean that x is not a solution\n    if a < 0:\n        return None\n    \n    # calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # check if the discriminant is negative, which would mean that no solution exists\n    if discriminant < 0:\n        return None\n    \n    # calculate the roots\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # check if the roots are integers\n    if not root1.is_integer() or not root2.is_integer():\n        return None\n    \n    # return the solution as a tuple\n    return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        x = (b * i - n) // a\n        y = (a * i - n) // b\n        if x * a + y * b == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a, b, and n are integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # check if a and b are both positive integers\n    if a <= 0 or b <= 0:\n        return None\n\n    # check if n is divisible by a and b\n    if n % a!= 0 or n % b!= 0:\n        return None\n\n    # initialize variables\n    x = y = 0\n\n    # check if n is divisible by (a^2 + b^2)\n    if n % (a**2 + b**2)!= 0:\n        # find integer solutions of ax^2 + by^2 = n\n        root_a = (n**(1/2)) / (a**2)\n        root_b = (n**(1/2)) / (b**2)\n\n        x = int(root_a)\n        y = int(root_b)\n\n        # check if solutions exist and satisfy ax + by = n\n        if x**2 + y**2 == n:\n            return (x, y)\n        else:\n            return None\n\n    # if n is divisible by (a^2 + b^2), check if (a + b)^2 = n\n    else:\n        root_a = (n**(1/2)) / (a**2)\n        root_b = (n**(1/2)) / (b**2)\n\n        x = int(root_a)\n        y = int(root_b)\n\n        # check if solutions exist and satisfy ax + by = n\n        if x**2 + y**2 == n:\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Create a list of integers to check\n    possible_x = range(-1000, 1001)\n\n    # Loop through each possible x value\n    for x in possible_x:\n        # Calculate the corresponding y value\n        y = a * x + b\n\n        # Check if the result is equal to n\n        if y == n:\n            # Return the solution as a tuple\n            return (x, y)\n\n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # check if a is equal to zero\n    if a == 0:\n        return None\n    \n    # calculate d\n    d = -b / a\n    \n    # check if d is equal to n\n    if d == n:\n        x = -n / a\n        y = n / b\n        return (x, y)\n    \n    # check if d is less than n\n    elif d < n:\n        return None\n    \n    # check if d is greater than n\n    elif d > n:\n        x = -n / a\n        y = n / b\n        return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and removes all the elements present in the second list from the first list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Convert the given lists to sets to make it easier to compare them\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Iterate through the given list and check if each element is present in the other list\n    for item in set1:\n        if item in set2:\n            # Remove the element from the given list\n            list1.remove(item)\n    \n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the given lists\n    for element in list1:\n        # If the element is not present in the second list, add it to the result list\n        if element not in list2:\n            result.append(element)\n    # Return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # initialize variables to keep track of the running sum and the last non-negative index\n    s = 0\n    i = 0\n    while i <= n // 2:\n        # add the running sum and the current term to the total sum\n        s += n - 2 * i\n        # increment the index for the next term\n        i += 1\n    # return the total sum\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Loop through all integers from 0 to n // 2\n    for i in range(n // 2):\n        # Add the sum (n - 2*i) to the total sum\n        total_sum += n - 2 * i\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2*i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += (n - 2 * i)\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    else:\n        result = n\n        for i in range(0, n//2):\n            result += (n - 2*i)\n        return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_value = 0\n    for i in range(n // 2):\n        sum_value += (n - 2 * i)\n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    total = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n - 1) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (l ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l)) / (4 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        a = i * s\n        area += a * (1/tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * (tan(pi/l) + 1)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # convert length to float\n    l = float(l)\n    # convert side length to float\n    s = float(s)\n    # calculate area using Heron's formula\n    area = l * (s ** 2) * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += (s**2)/4 * tan((2*pi*i)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (4 * math.tan(math.pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the side length of the polygon\n    side_length = s / l\n    \n    # calculate the area of the polygon using the formula:\n    # A = 1/2 * s * (tan(pi/n) + tan(pi/n+2))\n    # where n is the number of sides\n    n = l - 2  # we subtract 2 since there are two sides for the origin point\n    \n    area = 0.5 * s * (tan(pi/n) + tan(pi/n+2))\n    \n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Define a function to calculate the sum of the divisors of an integer\n    def sum_divisors(num):\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n    \n    # Calculate the sum of the divisors of both integers\n    div1 = sum_divisors(n)\n    div2 = sum_divisors(n+1)\n    \n    # Compare the sum of divisors of both integers\n    if div1 == div2:\n        print(\"The sum of the divisors of {} and {} are the same.\".format(n, n+1))\n    else:\n        print(\"The sum of the divisors of {} and {} are different.\".format(n, n+1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to calculate the sum of divisors of a given number \n    def sum_of_divisors(num): \n        return sum(set(range(1, num+1)) - set(divisors(num))) \n\n    # Function to calculate the divisors of a given number \n    def divisors(num): \n        div = [] \n        for i in range(1, num+1): \n            if num % i == 0: \n                div.append(i) \n        return div\n\n    # Calculate the sum of divisors for both numbers \n    div1 = sum_of_divisors(n) \n    div2 = sum_of_divisors(m)\n\n    # Check if the sum of divisors is the same for both numbers \n    if div1 == div2: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div2 = [n//i for i in div1]\n    div3 = [j for j in range(1, int(math.sqrt(sum(div1)))+1) if sum(div1) % j == 0]\n    div4 = [sum(div1)//j for j in div3]\n    if div1 == div2 and div1 == div3 and div1 == div4:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    divisors = []\n\n    # Find all the divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n\n    # Calculate the sum of the divisors\n    div_sum = sum(divisors)\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    divisor_sum = 0\n    divisors = []\n    \n    while i <= n:\n        if n % i == 0:\n            divisor_sum += i\n            divisors.append(i)\n        i += 1\n        \n    if divisor_sum == sum(divisors):\n        print(f\"{n} has the same sum of divisors as {divisors}.\")\n    else:\n        print(f\"{n} does not have the same sum of divisors as {divisors}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the sum of the divisors of n\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i + n // i\n    \n    # check if the divisor sum is equal to the sum of n and its divisors\n    if divisor_sum == n*(n+1)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of divisors of n\n    div_sum = sum([i for i in range(1, int(n**0.5)+1) if n % i == 0])\n    \n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n using a loop \n    sum_div = 0 \n    for i in range(1, n+1): \n        if n % i == 0: \n            sum_div += i \n\n    # Calculate the sum of the divisors of n using math.prod() \n    # sum_math = math.prod(range(1, n+1)) \n\n    # Compare the two sums \n    if abs(sum_div - n) < 10**-9: \n        print(\"The sum of the divisors of\", n, \"is the same.\") \n    else: \n        print(\"The sum of the divisors of\", n, \"is different.\")\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    divisor_sum = sum(set(math.factorial(i) for i in range(1, int(math.sqrt(n))+1)))\n    \n    # Calculate the sum of the divisors of n^2\n    square_sum = sum(set(math.factorial(i) for i in range(1, int(math.sqrt(n**2))+1)))\n    \n    # Check if the sum of the divisors of n and n^2 are equal\n    if divisor_sum == square_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate the sum of the divisors of n\n    divisors_sum = sum([x for x in range(1, int(math.sqrt(n))+1) if n % x == 0])\n    \n    # calculate the sum of the divisors of 2*n\n    double_n_divisors_sum = sum([x for x in range(1, int(math.sqrt(2*n))+1) if 2*n % x == 0])\n    \n    # compare the two sums and print the result\n    if divisors_sum == double_n_divisors_sum:\n        print(\"The sum of the divisors of\", n, \"and 2*n\", \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and 2*n\", \"are different.\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n        # If the character is a letter and not a space\n        if char.isalpha() and not char.isspace():\n            # If the character is already in the dictionary, increment the count\n            if char in char_count:\n                char_count[char] += 1\n            # If the character is not in the dictionary, add it with a count of 1\n            else:\n                char_count[char] = 1\n    # Return the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    \n    # Create an empty dictionary to store the count of each character at each position in the English alphabet\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        \n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # Loop through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        \n        # If the character has a count greater than 0, increment the count of the character at the current position in the string\n        if chr(i) in char_count:\n            char_count[chr(i)] += 1\n    \n    # Create a sorted list of tuples containing the count of each character in the English alphabet and the position in the string\n    sorted_tuples = sorted(char_count.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Return the count of each character at each position in the string\n    return [count for count, pos in sorted_tuples]"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    # convert string to lowercase\n    str1 = str1.lower()\n    \n    # iterate through string and count characters at the same position in alphabet\n    for char in str1:\n        if char in alphabet:\n            index = alphabet.index(char)\n            if index == ord(char) - 96:\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # create an empty dictionary\n    count_dict = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is an English alphabet, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n    # count the number of characters that occur at the same position in the English alphabet\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i:j] in count_dict:\n                count += count_dict[str1[i:j]]\n    # return the count of characters that occur at the same position in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of each letter\n    count_dict = {}\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            count_dict[char] = 1 if char in count_dict else 0\n    # Initialize a counter variable to keep track of the number of matches\n    match_count = 0\n    # Iterate over each character in the English alphabet\n    for i in range(97, 123):\n        # If the character is already in the dictionary, check if it matches the current position in the string\n        if chr(i).lower() in count_dict:\n            # If it does, increment the counter variable\n            if count_dict[chr(i).lower()] == i - 97 + 1:\n                match_count += count_dict[chr(i).lower()]\n    # Return the number of matches\n    return match_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    count = 0\n    for i in range(26):\n        char = chr(i+97) # Convert the ASCII code of the English alphabet to its corresponding character\n        if char in str1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] == 'a' or str1[i] == 'b' or str1[i] == 'c' or str1[i] == 'd' or str1[i] == 'e' or str1[i] == 'f' or str1[i] == 'g' or str1[i] == 'h' or str1[i] == 'i' or str1[i] == 'j' or str1[i] == 'k' or str1[i] == 'l' or str1[i] =='m' or str1[i] == 'n' or str1[i] == 'o' or str1[i] == 'p' or str1[i] == 'q' or str1[i] == 'r' or str1[i] =='s' or str1[i] == 't' or str1[i] == 'u' or str1[i] == 'v' or str1[i] == 'w' or str1[i] == 'x' or str1[i] == 'y' or str1[i] == 'z':\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase and remove any non-alphabetic characters\n    str1 = ''.join(filter(str.isalpha, str1)).lower()\n    # Initialize a dictionary to store the count of characters at each position\n    counts = {}\n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n        # If the character is already in the dictionary, increment its count\n        if char in counts:\n            counts[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            counts[char] = 1\n    # Loop through each character in the English alphabet (case insensitive)\n    for i, char in enumerate('abcdefghijklmnopqrstuvwxyz'):\n        # If the character is already in the dictionary, increment its count\n        if char in counts:\n            counts[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            counts[char] = 1\n    # Return the count of characters at each position in the English alphabet\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the input string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    \n    # initialize a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    \n    # loop through the characters in the string\n    for char in str1:\n        # if the character is a letter, add it to the dictionary with a frequency of 1\n        if char.isalpha():\n            char_freq[char] = 1 if char in char_freq else 1\n    \n    # loop through the characters in the string again\n    for char in str1:\n        # if the character is a letter and its frequency is greater than 1, decrement its frequency\n        if char.isalpha() and char_freq[char] > 1:\n            char_freq[char] -= 1\n    \n    # loop through the characters in the dictionary and count the number of occurrences at the same position as in the English alphabet\n    count = 0\n    for char in char_freq:\n        if ord(char) - 96 == ord(char) - 102:\n            count += char_freq[char]\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            xor_result = A[i] ^ A[j] \n            if xor_result % 2 == 0: \n                even_pairs += 1 \n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize variable to keep track of the power of 2 that is greater than or equal to n\n    power = 1\n    \n    # Loop through all powers of 2 from 1 to 31 (the largest possible power of 2)\n    while power < n:\n        power = 2 * power\n    \n    # Return the largest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to keep track of the next power of 2\n    next_pow = 1\n    \n    # Iterate until the next power of 2 is greater than or equal to n\n    while next_pow < n:\n        next_pow *= 2\n    \n    # Return the next power of 2\n    return next_pow"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n\n    # Loop while the power of 2 is less than or equal to n\n    while power_of_2 <= n:\n        # Increment the power of 2 by 1\n        power_of_2 *= 2\n\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Convert n to binary and count the number of 1s\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n\n    # Calculate the smallest power of 2 greater than or equal to n\n    power = 1 << count\n\n    # Check if the power is greater than or equal to 2^(count + 1)\n    if power >= 2**count + 1:\n        power = 2**count\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    # initialize power of 2 to 2\n    power = 2\n    \n    # loop while power is less than or equal to n\n    while power <= n:\n        power *= 2\n    \n    # return power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n % 2 == 0:\n        n /= 2\n    if n == 0:\n        n = 1\n    return 2 ** int(np.ceil(np.log2(n)))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Make sure n is positive\n    n = abs(n)\n\n    # Initialize a flag variable\n    found = False\n\n    # Iterate until we find the next power of 2\n    while not found:\n        # If the next power of 2 is greater than n, we've found it\n        if 2**(i+1) >= n:\n            found = True\n        else:\n            i += 1\n\n    # Return the next power of 2\n    return 2**(i+1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_two = 1\n    while power_of_two < n:\n        power_of_two <<= 1\n\n    return power_of_two"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the first power of 2 that is greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x): \n    '''\n    This function takes a list a and a number x as input and returns the number of occurrences of x in a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n\n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n\n    :param a: The list that needs to be searched for the target number.\n    :param x: The target number that needs to be searched in the list.\n    :return: The number of occurrences of the target number in the given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(lst, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Find the sum of the first n elements of the list\n    sum_lst = sum(lst[:n])\n    # Find the sum of the elements between the first and second indices (inclusive)\n    sum_range = sum(lst[m-1:n])\n    # Return the sum of the two sums\n    return sum_lst + sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # calculate the area of the pentagon\n    area = (5 * a**2) / (2 * math.tan(math.pi / 5))\n\n    # calculate the circumference of the pentagon\n    circumference = 5 * area\n\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon using the formula:\n    #   semi-perimeter = (2a + sqrt(3)*a^2) / 3\n    semi_perimeter = (2*a + math.sqrt(3)*a**2) / 3\n    \n    # Convert the semi-perimeter to the perimeter using the formula:\n    #   perimeter = 5(a + sqrt(3)*a^2)\n    perimeter = 5 * (a + math.sqrt(3)*a**2)\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Finding the length of one side of the pentagon\n    side = a * math.sqrt(3)\n    \n    # Calculating the perimeter of the pentagon\n    perimeter = 5 * side\n    \n    # Returning the perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of a pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Formula for the perimeter of a regular pentagon\n    perimeter = (5 * a) ** 0.5\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of the pentagon using Heron's formula\n    s = (a * (a + math.sqrt(3)) + math.sqrt(3) * a) / 4\n    # calculate the perimeter of the pentagon using the formula for the circumference\n    p = 5 * s\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    semi_perimeter = 5 * a / 4\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * math.sqrt(semi_perimeter)\n    \n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start_index = 0\n    end_index = 0\n    while True:\n        end_index = s.find('std', start_index)\n        if end_index == -1:\n            break\n        else:\n            count += 1\n            start_index = end_index + 3  # skipping the'std' string\n\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if there are any elements in the tuple\n    if not test_tuple:\n        return True\n    \n    # get the first element in the tuple\n    element = test_tuple[0]\n    \n    # loop through the rest of the tuple\n    for i in range(1, len(test_tuple)):\n        # check if the data type of the current element is not the same as the data type of the first element\n        if type(element)!= type(test_tuple[i]):\n            return False\n    \n    # if all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n    return all(x == data_types[0] for x in data_types[1:])"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    # Initialize a variable to store the data type of the first element\n    first_type = type(first_element)\n    \n    # Loop through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # Get the data type of the current element\n        element_type = type(element)\n        \n        # If the data types are not the same, return False\n        if element_type!= first_type:\n            return False\n    \n    # If all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return \"Tuple is empty\"\n    elif len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for element in test_tuple:\n        type_list.append(type(element))\n    if len(set(type_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all elements in the tuple have the same data type.\n    '''\n\n    # get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n\n    # iterate through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the data type of the current element is the same as the first element\n        if type(element)!= data_type:\n            # if they are not the same, return False\n            return False\n\n    # if we've made it through the entire loop without returning False, we've found a match\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # First check if the tuple is empty or not\n    if len(test_tuple) == 0:\n        return True\n\n    # Initialize the first element as the data type\n    data_type = type(test_tuple[0])\n\n    # Iterate through the tuple and check if all elements are of the same data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n\n    # If all elements are of the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize variable to keep track of data types of all elements in the tuple\n    data_types = set()\n\n    # Iterate over all the elements in the tuple\n    for element in test_tuple:\n        # Get the data type of the current element\n        data_type = type(element)\n\n        # Add the data type to the set of data types\n        data_types.add(data_type)\n\n    # Check if all elements have same data type or not\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    # Initialize count to 0\n    count = 0\n    # Initialize the current element to None\n    current_element = None\n    # Loop through the array\n    for i in range(n):\n        # If the current element is equal to the given element\n        if arr[i] == x:\n            # Increment the count\n            count += 1\n        # If the count is greater than n/2\n        elif count > n/2:\n            # Set the current element to the given element\n            current_element = x\n            # Reset the count to 0\n            count = 0\n        # If the count is less than n/2\n        else:\n            # Increment the count\n            count += 1\n    # If the count is greater than n/2\n    if count > n/2:\n        # Return True\n        return True\n    # If the count is less than n/2\n    else:\n        # Return False\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count of occurrences of x\n    count = 0\n\n    # Iterate through array and count occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # Check if count is greater than n/2\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize a count dictionary to keep track of the frequency of each element in the array\n    count = {}\n\n    # Loop through the array and increment the count of each element in the dictionary\n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]] = 1\n        else:\n            count[arr[i]] += 1\n\n    # Loop through the count dictionary and check if the x element occurs more than n/2 times\n    for k, v in count.items():\n        if v > n/2:\n            return True\n\n    # If the loop completes without finding a majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        elif i < x:\n            count -= 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables to keep track of the count of elements\n    count_1 = 0\n    count_2 = 0\n\n    # Initialize variables to keep track of the position of the majority element\n    pos_1 = -1\n    pos_2 = -1\n\n    # Iterate through the array and check if the current element is the majority element\n    for i in range(n):\n        if arr[i] == x:\n            count_1 += 1\n            pos_1 = i\n        elif arr[i] == x and i!= pos_1:\n            count_2 += 1\n            pos_2 = i\n\n    # Check if the element is the majority element\n    if count_1 > n // 2 and count_2 > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    \"\"\"\n\n    # Initialize count and candidate variables\n    count = 1\n    candidate = arr[0]\n\n    # Traverse through the array\n    for i in range(1, n):\n        if arr[i] == candidate:\n            count += 1\n        else:\n            count -= 1\n\n        # If the count becomes 0, it means the candidate is the majority element\n        if count == 0:\n            return True\n\n        # If the count becomes negative, it means the candidate is not the majority element\n        if count < 0:\n            return False\n\n    # If the loop completes and the count is still 0, it means the candidate is the majority element\n    return True"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0 \n    while n!= 0: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0: \n        count += n & 1\n        n = n >> 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(string):\n    # create an empty string to store the result\n    result = ''\n    \n    # loop through each character in the input string\n    for char in string:\n        # check if the index of the current character is odd\n        if len(string) % 2!= 0:\n            # if it is, append the current character to the result string\n            result += char\n            \n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_chars = set()\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_chars.add(str[i])\n    return ''.join(odd_chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n    str (str): The string from which the odd index characters will be removed.\n\n    Returns:\n    str: The string with the odd index characters removed.\n    \"\"\"\n\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # Return the minimum number from the list.\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of these numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Iterate through all the bits in the given range\n    for i in range(l, r + 1):\n\n        # Check if the current bit is set or unset\n        if n & (1 << i):\n            # If the bit is set, return False as the bit is set in the range\n            return False\n\n    # If we reach this point, all the bits in the range are unset\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a variable to store the number of unset bits\n    unset_bits = 0\n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # check if the i-th bit is unset or not\n        if n & (1 << i):\n            # if it is unset, increment the unset_bits variable\n            unset_bits += 1\n    # if the unset_bits is equal to 0, then all the bits are set in the given range\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize variables to store the value of all bits in the given range\n    bit_value = 0\n    # Initialize variables to store the value of the unset bits in the given range\n    unset_value = 0\n    # Initialize a boolean variable to store the result of the check\n    result = True\n    \n    # Iterate through each bit in the given range\n    for i in range(l, r+1):\n        # Check if the i-th bit is set in n\n        if n & (1<<i):\n            # If it is, add 1 to the bit_value variable and set the i-th bit of the unset_value variable to 1\n            bit_value += 1\n            unset_value |= (1<<i)\n        else:\n            # If it is not, add 1 to the unset_value variable\n            unset_value += 1\n    \n    # Check if all the bits are unset in the given range\n    if bit_value == 0 and unset_value == 0:\n        result = True\n    else:\n        result = False\n    \n    # Return the result of the check\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 1\n    unset_bits = 0\n    for i in range(l-1, r):\n        mask = mask << 1\n        unset_bits = unset_bits | mask\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the range of bits in the given range\n    range_of_bits = r - l + 1\n\n    # Find the first unset bit in the range\n    unset_bit = 0\n    for i in range(range_of_bits):\n        if (n & (1 << i)) == 0:\n            unset_bit = i\n            break\n\n    # Check whether all the bits are unset in the given range or not\n    if unset_bit == 0:\n        print(\"All the bits are set in the given range.\")\n    else:\n        print(\"The first unset bit is at index\", unset_bit)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        if i & n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three arguments n, l, and r. n is the number in which we are checking the bits.\n    l and r are the two endpoints of the range that we want to check for unset bits.\n\n    The function returns True if all the bits in the given range are unset and False otherwise.\n\n    Example:\n    all_Bits_Set_In_The_Given_Range(10, 3, 7) # Output: False\n    all_Bits_Set_In_The_Given_Range(10, 0, 10) # Output: True\n    '''\n\n    if n == 0: # base case\n        return True\n    else:\n        # check if the last bit of the number is set or not\n        if n & (1 << (l-1)):\n            return False\n        else:\n            return all_Bits_Set_In_The_Given_Range(n>>1,l-1,r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    if l == 0:\n        return all_Bits_Set_In_The_Given_Range(n - 1, r, n)\n    if r == 0:\n        return all_Bits_Set_In_The_Given_Range(n - 1, l, n)\n    if l == 1:\n        return False\n    if r == 1:\n        return all_Bits_Set_In_The_Given_Range(n - 1, l, n - 1)\n    if l == r:\n        return all_Bits_Set_In_The_Given_Range(n - 1, l, n - 1)\n    if l < r:\n        return all_Bits_Set_In_The_Given_Range(n - 1, l + 1, r)\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n    n (int): An integer representing the given number n.\n    l (int): An integer representing the starting index of the range.\n    r (int): An integer representing the ending index of the range.\n\n    Returns:\n    bool: True if all the bits are unset in the given range, else False.\n    \"\"\"\n    # Initialize the count of unset bits\n    unset_bits = 0\n\n    # Iterate through each bit in the binary representation of n\n    for i in range(l, r+1):\n        # Check if the bit is 1\n        if n & (1 << i):\n            # If the bit is set, increment the count of unset bits\n            unset_bits += 1\n\n    # Check if all the unset bits are 0\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Bitwise AND operator\n    mask = (1 << (r + 1)) - 1\n\n    # Check if mask is zero or not. If it is, then all the bits are unset in the given range.\n    if not mask:\n        return True\n\n    # Check if all the bits are set in the given range using bitwise AND operator.\n    for i in range(l, r + 1):\n        if not (n & (1 << i)):\n            return False\n\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    neg_count = 0\n    pos_count = 0\n    for i in arr:\n        if i < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    neg_start = 0\n    pos_start = neg_count + 1\n\n    for i in range(n):\n        if i < neg_count:\n            arr[i], arr[neg_start] = arr[neg_start], arr[i]\n            neg_start += 1\n        else:\n            arr[i], arr[pos_start] = arr[pos_start], arr[i]\n            pos_start += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers, one for positive and one for negative elements\n    pos = 0\n    neg = n-1\n    \n    # loop through the array and swap elements accordingly\n    for i in range(n):\n        if arr[i] < 0:\n            # swap negative elements with their corresponding positive elements\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            # increment the negative pointer\n            neg -= 1\n            # increment the positive pointer\n            pos += 1\n    \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # Create two lists to store the negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Iterate through the array and add negative and positive elements to the respective lists\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n\n    # Sort the negative and positive lists using the bubble sort algorithm\n    for i in range(len(neg_list)):\n        for j in range(len(neg_list) - 1):\n            if neg_list[j] > neg_list[j + 1]:\n                neg_list[j], neg_list[j + 1] = neg_list[j + 1], neg_list[j]\n\n    for i in range(len(pos_list)):\n        for j in range(len(pos_list) - 1):\n            if pos_list[j] > pos_list[j + 1]:\n                pos_list[j], pos_list[j + 1] = pos_list[j + 1], pos_list[j]\n\n    # Combine the sorted negative and positive lists and return the result\n    result = neg_list + pos_list[:n]\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    \n    neg.sort()\n    pos.sort(reverse=True)\n    \n    res = neg + pos[:n] + pos[n:]\n    return res"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negative_arr = [x for x in arr if x < 0]\n    positive_arr = [x for x in arr if x >= 0]\n    neg_index = 0\n    pos_index = n-1\n    while neg_index < len(negative_arr) and pos_index >= 0:\n        negative_arr[neg_index], positive_arr[pos_index] = positive_arr[pos_index], negative_arr[neg_index]\n        neg_index += 1\n        pos_index -= 1\n    return negative_arr + positive_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n    Args:\n        arr (list): The input array.\n        n (int): The number of elements to re-arrange.\n\n    Returns:\n        list: The re-arranged array.\n    \"\"\"\n    # Initialize two pointers to the start and end of the array\n    start = 0\n    end = n - 1\n\n    # Iterate over the array from start to end, swapping elements as needed\n    while start < end:\n        # Check if the current element is negative\n        if arr[start] < 0:\n            # If it is negative, swap it with the next element in the array\n            arr[start], arr[end] = arr[end], arr[start]\n            # Move the start pointer to the next index\n            start += 1\n            # Move the end pointer to the previous index\n            end -= 1\n        # If the current element is positive or 0, just move the end pointer to the previous index\n        else:\n            end -= 1\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two empty lists for negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # loop through the given array and add negative and positive elements to their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # add the remaining elements to the end of the list of negative elements\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # combine the two lists into a single list in ascending order\n    combined_list = sorted(neg_list + pos_list)\n    \n    # loop through the combined list and add the elements to the original array in the desired order\n    for i in range(len(combined_list)):\n        if combined_list[i] < 0:\n            arr[i] = -combined_list[i]\n        else:\n            arr[i+n] = combined_list[i]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = [x for x in arr[:n] if x > 0]\n    negative = [x for x in arr[:n] if x < 0]\n    return negative + positive + arr[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the given array\n    for num in arr:\n        # If the element is negative, append it to the negative list\n        if num < 0:\n            neg_list.append(num)\n        # If the element is positive, append it to the positive list\n        elif num > 0:\n            pos_list.append(num)\n    \n    # Create a new array with the first n elements from the negative list, followed by the first n elements from the positive list\n    new_arr = neg_list[:n] + pos_list[:n]\n    \n    # Create a new array with the remaining elements from the negative list, followed by the remaining elements from the positive list\n    remaining_arr = neg_list[n:] + pos_list[n:]\n    \n    # Combine the two new arrays with the remaining elements\n    combined_arr = new_arr + remaining_arr\n    \n    # Return the combined array\n    return combined_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # Helper function to swap elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Initialize variables to keep track of the position of positive and negative elements\n    pos_start = 0\n    neg_start = 0\n\n    # Iterate through the array\n    for i in range(n):\n        if arr[i] < 0:\n            # If current element is negative, swap it with the last negative element in the array\n            if i!= neg_start:\n                swap(arr, neg_start, i)\n            neg_start += 1\n        else:\n            # If current element is positive, swap it with the first negative element in the array\n            if i!= pos_start:\n                swap(arr, neg_start, i)\n            pos_start += 1\n\n    # Move all remaining negative elements to the end of the array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            swap(arr, neg_start, i)\n            neg_start += 1\n\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a blank space, replace it with the specified character\n        if str1[i] =='':\n            str1 = str1.replace(' ',char,1)\n\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # replace blank spaces with character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # heapq module is used to maintain the largest n elements\n    # convert the list into a heap\n    heap = list(heapq.nlargest(n, list1))\n    # return the heap\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n    # initialize an empty list to store the n largest items\n    largest_items = []\n    # iterate over the first n elements of the sorted list\n    for i in range(n):\n        # add each element to the largest_items list\n        largest_items.append(sorted_list[i])\n    return largest_items"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n and fill it with the elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # Fill the remaining n-1 elements of the heap with the smallest elements of the list\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    # Return the n largest elements of the heap\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the input list into a min heap\n    min_heap = [heapq.nlargest(n, list1)[-1]]\n    # Iterate through the list and add each element to the min heap\n    for item in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n    # Convert the min heap back into a list and return it\n    return [item for item in min_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Initialize an empty list to store the n largest elements\n    largest = []\n\n    # Use a max heap to store the first n elements of the list\n    for i in range(n):\n        heapq.heappush(largest, list1[i])\n\n    # Use another max heap to store the remaining elements of the list\n    for i in range(n, len(list1)):\n        if list1[i] > heapq.heappop(largest):\n            heapq.heappush(largest, list1[i])\n\n    return largest"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of the first n elements of the list\n    min_heap = []\n    for i in range(n):\n        min_heap.append(list1[i])\n        heapq.heapify(min_heap)\n        \n    # Extract and return the n largest elements from the min heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n        \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # create a min-heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # pop the n smallest elements from heap and add them to result list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if n > len(list1):\n        raise ValueError(\"n is greater than the length of the list\")\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for item in list1[n:]:\n        if item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [num for num in heapq.nlargest(n, heap)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the surface area of the cylinder\n    area = 2 * (3.14 * r**2 + 2 * r * (3.14 * h + 2 * r))\n    \n    #return the surface area\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*r*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * pi * r * h\n    # return the value of the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*3.14159*(r**2) + 2*3.14159*(r**2)*(h/2)\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius r and the height h of a cylinder as input and returns the lateral surface area of the cylinder.\n    '''\n    # The lateral surface area of a cylinder is given by the formula:\n    # Lateral surface area = 2 * pi * r * h\n    # So, we can use the formula to calculate the lateral surface area of the cylinder.\n    lateral_surface_area = 2 * 3.14159 * r * h\n    \n    # Finally, we return the lateral surface area of the cylinder.\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * h  # formula for lateral surface area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return math.pi * r**2 * h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits\n    even_bits = []\n    \n    # loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # if the bit is an even number, append it to the even_bits list\n        if bit == '1':\n            even_bits.append(int(bit))\n            \n    # initialize a variable to store the final number with even bits set\n    final_number = 0\n    \n    # loop through the even_bits list and set each bit to 1\n    for bit in even_bits:\n        final_number |= (1 << bit)\n        \n    return final_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the result variable\n    result = 0\n    # loop through all bits of the number\n    for i in range(32):\n        # check if the current bit is even\n        if (n & 1) == 0:\n            # set the current bit of the result variable to 1\n            result |= 1 << i\n        # shift the number to the right by one bit\n        n >>= 1\n    # return the result variable\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the number of even bits set\n    even_count = 0\n    \n    # Loop through each bit in the binary representation of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, increment the even_count variable\n        if int(bit) == 0:\n            even_count += 1\n            # If all even bits have been set, break out of the loop\n            if even_count == 32:\n                break\n    \n    # Set all even bits in the binary representation of the input number to 1\n    n = int(bin(n)[2:], 2) | (1 << even_count)\n    \n    # Return the modified binary number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n        # Check if the current bit is even\n        if int(bit) % 2 == 0:\n            # Set the corresponding bit to 1 in the result\n            result |= (1 << int(bit))\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # Check if the bit is even\n        if bit == '0':\n            # If it's odd, set the next bit to 1\n            result += 1\n            \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the even bits\n    even_bits = ''\n    \n    # Iterate over each bit of the input number\n    for i in range(len(bin(n)[2:])):\n        # If the bit is even, set it to 1 and add it to the even_bits string\n        if (n & (1 << i))!= 0:\n            even_bits += '1'\n        else:\n            even_bits += '0'\n            \n    # Convert the even_bits string to an integer and return it\n    return int(even_bits, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits\n    even_bits = []\n    # Iterate through the binary representation of the given number\n    for i in range(len(bin(n))-2):\n        # Check if the current bit is even\n        if bin(n)[i] == '0':\n            # If the current bit is odd, add it to the even_bits list\n            even_bits.append(int(bin(n)[i]))\n    # Convert the even_bits list to a number and return it\n    return sum(even_bits)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for bit in bin(n)[2:]: # skip the '0b' prefix\n        if int(bit) == 1:\n            even_bits |= 1 << int(bit) # set the corresponding bit to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Create an empty string to store the even bits\n    even_bits = ''\n    # Iterate over each character in the binary string\n    for char in binary_str:\n        # If the character is even, add it to the even_bits string\n        if char == '0':\n            even_bits += '0'\n        else:\n            even_bits += '1'\n    # Convert the binary string to an integer and return it\n    return int(even_bits, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate over each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, add \"1\" to the result string\n        if int(bit) % 2 == 0:\n            result += \"1\"\n        else:\n            result += \"0\"\n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter() to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    dictionary = dict(counter)\n    return dictionary"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each unique tuple in the list\n    count_dict = {}\n\n    # Loop through the list of tuples and count the number of occurrences of each unique tuple\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # convert the Counter object to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the number of occurrences of each tuple in the list\n    counts = Counter(test_list)\n    \n    # Convert the Counter object to a dictionary\n    result = dict(counts)\n    \n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the counts of each tuple\n    count_dict = {}\n    # loop through the list of tuples\n    for tup in test_list:\n        # if the tuple is already in the count_dict, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # otherwise, add the tuple to the count_dict with a count of 1\n        else:\n            count_dict[tup] = 1\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    \n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring and substring!= str[i]:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    #initialize a counter variable to keep track of the number of non-empty substrings\n    count = 0\n    \n    #loop through each character in the string\n    for i in range(len(str)):\n        #loop through each character in the string again\n        for j in range(i+1, len(str)+1):\n            #if the substring is not empty (i.e., not all characters are identical), increment the counter\n            if str[i:j]!= str[i] * (j-i):\n                count += 1\n                \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    prev = -1\n    for i in range(n, m + 1):\n        for j in range(i, m + 1):\n            if i % 2 == 0 and j % 2 == 0:\n                total += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        total_sequences = 0\n        for i in range(1, m // 2 + 1):\n            if 2 * i >= n:\n                total_sequences += get_total_number_of_sequences(m, n - 1)\n        return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Calculate the number of possible sequences of length n that can be formed using m numbers\n    count = 0\n    for i in range(m, m + n):\n        count += i // 2\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize the number of possible sequences to 0\n    num_sequences = 0\n    \n    # Iterate through all possible sequences of length n\n    for i in range(1,m+1):\n        if i >= 2*n:\n            # Check if the current sequence is valid\n            if all(x >= 2*n for x in range(i-n+1,i+1)):\n                # If the sequence is valid, increment the number of possible sequences\n                num_sequences += 1\n    \n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(1,n+1):\n        for j in range(2,m//2+1):\n            if i%2==0:\n                if (i+j-1)>=2:\n                    total_sequences += (m//2+1)//2\n            else:\n                if (i+j-1)>=2:\n                    total_sequences += (m//2+1)//2\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n): \n    count = 0\n    for i in range(m):\n        if i >= 2 * i:\n            if i >= m * (n - 1) // 2:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m, n - 2)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(i, count, prev, current):\n        if i == n:\n            return count\n        if current > prev * 2:\n            return helper(i + 1, count, current, 0)\n        else:\n            return helper(i + 1, count, prev, current + 1)\n\n    return helper(0, 0, 0, 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through all possible sequences of length n\n    for i in range(m,n+1):\n        # Check if the current sequence is valid\n        if all(j>=2*i and j<=m for j in range(i+1,n+1)):\n            # Increment the count variable\n            count += 1\n            \n    # Return the total count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    sequence = []\n    count = 0\n\n    # Generate all sequences of length n\n    for i in range(2, n + 1):\n        # Generate all numbers greater than or equal to 2m and less than or equal to m\n        for j in range(2 * m, m + 1):\n            # Append the current sequence to the list of sequences\n            sequence.append(j)\n\n    # Count the number of sequences that satisfy the condition\n    for i in range(n):\n        if sequence[i] >= 2 * sequence[i + 1] <= m:\n            count += 1\n\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Create an empty list to store the combined elements\n    combined_list = []\n    # Iterate through the first list and add the elements to the combined list\n    for element in list1:\n        combined_list.append(element)\n    # Append the elements of the second list to the combined list\n    combined_list.extend(list2)\n    # Return the combined list\n    return combined_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n\n    # Loop through the list to replace the last element\n    for i in range(length - 1, -1, -1):\n        list1[i] = list2[i]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Get the length of the first list\n    length = len(list1)\n\n    # Check if the second list is longer than the first list\n    if length > len(list2):\n        print(\"Second list is longer than first list. Please make sure that the second list has the same length as the first list.\")\n    else:\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n\n        # Print the updated list\n        print(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists, list1 and list2, and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Initialize the index of the last element of list1\n    last_index = len(list1) - 1\n    \n    # Replace the last element of list1 with the elements of list2\n    list1[last_index] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Check if the second list has more elements than the first list\n    if len(list2) > length:\n        # If it does, slice the second list to only contain the last length elements\n        list2 = list2[-length:]\n    \n    # Combine the two lists\n    combined_list = list1 + list2\n    \n    # Set the last element of the first list to the elements of the second list\n    list1[-1] = combined_list\n    \n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the length of list2 is equal to 0, if it is return the original list1\n    if len(list2) == 0:\n        return list1\n    # check if the length of list1 is greater than 0, if not return the original list1\n    elif len(list1) == 0:\n        return list2\n    # check if the length of list2 is greater than 0, if not return the original list1\n    else:\n        # loop through the list1, starting from the last index\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2.pop(0)\n        # return the modified list1\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Remove the last element of list1\n    list1.pop()\n    # Add the elements of list2 to the end of list1\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Loop through the list from the second to the last element\n    for i in range(length-1,-1,-1):\n        # Replace the last element of the first list with the elements of the second list\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > 0 and len(list2) > 0:\n        list1[-1] = list2\n    else:\n        print(\"Error: one of the lists is empty.\")"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    sqrt_N = math.sqrt(N)\n    if sqrt_N % 1 == 0:\n        return int(sqrt_N) + 1\n    else:\n        return int(sqrt_N) + 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N <= 0:\n        return 1\n    \n    # Check if the given number is a perfect square\n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N*sqrt_N == N:\n        return N*sqrt_N\n    \n    # Find the next greater perfect square\n    sqrt_N_plus_1 = int(math.sqrt(N + 1))\n    next_sqrt_N_plus_1 = sqrt_N_plus_1 * sqrt_N_plus_1\n    \n    # If the next perfect square is less than the given number, return the next perfect square\n    if next_sqrt_N_plus_1 < N:\n        return next_sqrt_N_plus_1\n    \n    # If the next perfect square is equal to the given number, find the next larger square greater than sqrt(N)\n    sqrt_N_plus_1_plus_sqrt_N = int(math.sqrt(N + sqrt_N))\n    if sqrt_N_plus_1_plus_sqrt_N*sqrt_N_plus_1_plus_sqrt_N == N:\n        return sqrt_N_plus_1_plus_sqrt_N\n    \n    # If all the above conditions fail, return the next perfect square greater than sqrt(N)\n    return sqrt_N_plus_1_plus_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N and returns the next perfect square greater than N.\n    '''\n    while True:\n        x = N+1\n        while x**2 <= N:\n            x += 1\n        y = x - 1\n        if y*y == x:\n            return y\n        else:\n            x -= 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Check if the square root is an integer\n    if sqrt_N.is_integer():\n        # If it is, then increment the integer part by 1 and add 1 to the fractional part\n        increment = int(sqrt_N) + 1\n        fractional_part = (sqrt_N - increment) * 10000\n        return increment + fractional_part\n    else:\n        # If it is not, increment the square root by 1 and add 1 to the integer part\n        increment = int(sqrt_N) + 1\n        fractional_part = 10000\n        return increment + fractional_part"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # initialize variables\n    low = 1\n    high = int(math.sqrt(N))\n    result = None\n    \n    # binary search\n    while low <= high:\n        mid = (low + high) // 2\n        # if mid is a perfect square, check if it's greater than N\n        if mid * mid == N:\n            result = mid\n            # if mid is greater than N, low is mid+1\n            if mid * mid < N:\n                low = mid + 1\n        # if mid is not a perfect square, check if its square is greater than N\n        elif mid * mid > N:\n            result = mid * mid\n            high = mid - 1\n        # if mid is not a perfect square and its square is not greater than N,\n        # low is mid+1\n        else:\n            low = mid + 1\n    \n    return result"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N))\n    nextSqrtN = sqrtN\n    while True:\n        nextSqrtN += 1\n        if nextSqrtN*nextSqrtN > N:\n            break\n    return nextSqrtN*nextSqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    # start with the smallest number greater than N\n    num = N+1\n    while True:\n        # check if the number is a perfect square\n        if num**2 == N:\n            return num\n        # if not, increment by 1\n        num += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if N is a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        # N is already a perfect square\n        return N\n    # Find the next perfect square greater than N\n    i = int(math.sqrt(N))\n    while i * i <= N:\n        i += 1\n    return i * i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Convert the number to integer\n    N = int(N)\n\n    # Initialize variables\n    is_prime = True\n    is_square = False\n    square = N\n    square_next = 0\n\n    # Check if the number is prime\n    while is_prime:\n        if square < 2:\n            is_prime = False\n        else:\n            for i in range(2, int(math.sqrt(square))+1):\n                if square % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                is_square = True\n                break\n        square += 1\n\n    # If the number is not prime, find the next prime greater than the current square\n    if not is_square:\n        square_next = square + 1\n        while square_next**2 <= N:\n            is_prime = True\n            for i in range(2, int(math.sqrt(square_next))+1):\n                if square_next % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                is_square = True\n                break\n            square_next += 1\n\n    # If the number is still not a square, return 0\n    if not is_square:\n        return 0\n\n    # Return the next perfect square greater than the current square\n    return square_next"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    while True:\n        N += 1\n        sqrtN = int(math.sqrt(N))\n        if sqrtN**2 == N:\n            continue\n        else:\n            return sqrtN**2\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Find the increasing subsequence\n    increasing_subseq = [0]\n    current_sum = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            increasing_subseq.append(current_sum)\n            current_sum = arr[i]\n            \n    # Find the decreasing subsequence\n    decreasing_subseq = [0]\n    current_sum = 0\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            current_sum += arr[i]\n        else:\n            decreasing_subseq.append(current_sum)\n            current_sum = arr[i]\n            \n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(len(increasing_subseq)):\n        for j in range(len(decreasing_subseq)):\n            if increasing_subseq[i] + decreasing_subseq[j] > max_sum:\n                max_sum = increasing_subseq[i] + decreasing_subseq[j]\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    if len(arr) <= 1:\n        return max(arr)\n\n    max_left = max_right = arr[0]\n    min_left = min_right = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_left:\n            max_right = max_left\n            max_left = arr[i]\n        elif arr[i] > max_right:\n            max_right = arr[i]\n\n        if arr[i] < min_left:\n            min_right = min_left\n            min_left = arr[i]\n        elif arr[i] < min_right:\n            min_right = arr[i]\n\n    return max(max_left + max_right, max_right + min_left)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables for the maximum sum and the maximum sum ending at index 0\n    max_ending_at_0 = max_sum_ending_at_0 = float('-inf')\n    max_ending_at_1 = max_sum_ending_at_1 = float('-inf')\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing or decreasing\n        if arr[i] >= arr[i-1]:\n            # Update the maximum sum ending at index 0 if the current element is increasing\n            max_sum_ending_at_0 = max(max_sum_ending_at_0 + arr[i], max_sum_ending_at_1)\n            # Update the maximum sum if the current element is increasing and the previous element is decreasing\n            max_ending_at_0 = max(max_ending_at_0, max_sum_ending_at_0)\n        else:\n            # Update the maximum sum ending at index 1 if the current element is decreasing\n            max_sum_ending_at_1 = max(max_sum_ending_at_1 + arr[i], max_sum_ending_at_0)\n            # Update the maximum sum if the current element is decreasing and the previous element is increasing\n            max_ending_at_1 = max(max_ending_at_1, max_sum_ending_at_1)\n    \n    # Return the maximum sum ending at index 0\n    return max_ending_at_0"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        if arr[i] < dp[i - 1]:\n            dp[i] = max(dp[i], dp[i - 1] + arr[i])\n        elif arr[i] > dp[i - 1]:\n            dp[i] = max(dp[i], dp[i - 1] - arr[i])\n        else:\n            dp[i] = max(dp[i], dp[i - 1])\n\n    for i in range(n - 2, -1, -1):\n        if arr[i] < dp[i + 1]:\n            dp[i] = max(dp[i], dp[i + 1] + arr[i])\n        elif arr[i] > dp[i + 1]:\n            dp[i] = max(dp[i], dp[i + 1] - arr[i])\n        else:\n            dp[i] = max(dp[i], dp[i + 1])\n\n    max_sum = max(max_sum, dp[0])\n    max_sum = max(max_sum, dp[n - 1])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) == 0 or len(arr) == 1:\n        return 0\n    \n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Traverse through the array and calculate the maximum sum of bitonic subsequence\n    for num in arr:\n        if num > arr[0]:\n            curr_sum += num\n        else:\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            curr_sum = 0\n            \n    # Check if the current subsequence is a bitonic subsequence\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    n = len(arr)\n    if n < 2: \n        return 0\n\n    # Initialize variables for the maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array and calculate the maximum sum of a bitonic subsequence\n    for i in range(n):\n        if i % 2 == 0:  # i is even\n            current_sum += arr[i]\n        else:  # i is odd\n            current_sum -= arr[i - 1]\n\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_ending = 0\n    max_so_far = 0\n    \n    # Traverse the array from left to right\n    for i in range(n):\n        # Check if the element is increasing or decreasing\n        if arr[i] < arr[i-1]:\n            # If increasing, add the element to the current maximum ending\n            max_ending += arr[i]\n            # If the current maximum ending is greater than the maximum so far, update the maximum so far\n            if max_ending > max_so_far:\n                max_so_far = max_ending\n        else:\n            # If decreasing, subtract the element from the current maximum ending\n            max_ending -= arr[i-1]\n            # If the current maximum ending is greater than the maximum so far, update the maximum so far\n            if max_ending > max_so_far:\n                max_so_far = max_ending\n    \n    # Return the maximum sum of a bitonic subsequence\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize the maximum sum and the current sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the array and calculate the current sum for each element\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        \n        # If the current sum is negative, update the max sum and reset the current sum\n        if current_sum < 0:\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n    \n    # If the current sum is positive and greater than the max sum, update the max sum\n    if current_sum > 0:\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = max(dp[i-1], dp[i])\n\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is empty\n    if len(arr) < 2:\n        return 0\n\n    # Initialize variables for the maximum sum and the current subsequence sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n            # Add the current element to the current subsequence sum\n            curr_sum += arr[i]\n        else:\n            # If the current element is less than or equal to the previous element, then it must be part of the subsequence that is increasing\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            # Reset the current subsequence sum\n            curr_sum = 0\n\n    # Check if the last subsequence sum is greater than the maximum sum found so far\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print('Error: The input number must be a non-negative integer.')\n        return None\n    elif number == 0:\n        return 0\n    else:\n        x0 = number / 2\n        x1 = x0 - (number / x0) ** 2\n        count = 1\n        while abs(x1 - x0) > 1e-6:\n            x0 = x1\n            x1 = x0 - (number / x0) ** 2\n            count += 1\n        return count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    x = 1\n    dx = 1\n    \n    # Keep adding dx to x until the difference between the square of x and the original number is less than a small value\n    while abs(number - (x*x)) > 0.00001:\n        dx = (number - x*x) / (2*x)\n        x = x - dx\n        \n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # check if the input is a positive integer\n    if not isinstance(number, int) or number <= 0:\n        return \"Please enter a positive integer.\"\n\n    # initial guess for the square root\n    guess = number // 2\n\n    # iterate until the guess is within 1% of the actual root\n    while abs(guess * guess - number) / number > 0.01:\n        guess = (guess + number // guess) // 2\n\n    # return the square root\n    return math.sqrt(number)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while True:\n        x = guess * guess\n        if abs(x - number) < 0.00001:\n            return guess\n        elif x < number:\n            guess = x\n        else:\n            guess = (x + number) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables for the babylonian method\n    x = 0.5 * number\n    y = x\n    # Loop until the difference between the x and y values is less than a certain threshold\n    while abs(y - x) > 1e-10:\n        x = y\n        y = 0.5 * (x + number / x)\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n\n    Parameters:\n    -----------\n    number : float\n        A number for which we want to compute its square root.\n\n    Returns:\n    --------\n    float\n        The square root of the input number.\n\n    '''\n\n    # Check if the input number is negative\n    if number < 0:\n        raise ValueError('Input number must be non-negative.')\n\n    # Compute the initial estimate of the square root\n    x = number / 2\n\n    # Compute the remaining terms of the sequence\n    for i in range(3):\n        x = (x + number / x) / 2\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n\n    Parameters:\n    number (float): The number for which to find the square root.\n\n    Returns:\n    float: The square root of the input number.\n    '''\n\n    # Define a function to compute the square root of a number using the babylonian method\n    def sqrt(a, b, epsilon):\n        '''\n        Helper function to compute square roots using the babylonian method.\n\n        Parameters:\n        a (float): Lower bound of the interval for the square root.\n        b (float): Upper bound of the interval for the square root.\n        epsilon (float): The tolerance for the square root method.\n\n        Returns:\n        float: The square root of the input number.\n        '''\n\n        if a == b:\n            return a\n\n        # Compute the midpoint of the interval for the square root\n        c = (a + b) / 2\n\n        # Check if the midpoint is within the desired tolerance of the original number\n        if abs(c * c - number) < epsilon:\n            return c\n\n        # If the midpoint is too large, search in the upper half of the interval\n        if c * c > number:\n            return sqrt(a, c, epsilon)\n\n        # If the midpoint is too small, search in the lower half of the interval\n        else:\n            return sqrt(c, b, epsilon)\n\n    # Call the sqrt function with the initial guess of 1 and the desired tolerance of 1e-6\n    return sqrt(1, number, 1e-6)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize the variables\n    x0 = 1.0\n    x1 = 0.0\n    x2 = 0.0\n    error = 1e-6\n\n    # loop until the error is less than the given tolerance\n    while error > 1e-6:\n        x2 = x1 - (number / x1)\n        x0 = x1\n        x1 = x2\n        error = abs(x2 - number / x2)\n\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(guess - new_guess) < 0.001:\n            break\n        guess = new_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess*guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    if len(str) < 2:\n        return 0\n\n    # Initialize the LPS array\n    LPS = [0] * len(str)\n\n    # Find the length of LPS for odd length of the string\n    LPS[0] = 1\n    if str[0] == str[1]:\n        LPS[1] = 2\n    else:\n        LPS[1] = 1\n\n    # Find the length of LPS for even length of the string\n    for i in range(2, len(str)):\n        if str[i] == str[i-1]:\n            LPS[i] = LPS[i-1] + 2\n        else:\n            LPS[i] = max(LPS[i-1], LPS[i-2])\n\n    return LPS[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n\n    # create a 2D table to store lengths of subsequences \n    # of all possible lengths \n    table = [[0 for j in range(n+1)] for i in range(n+1)] \n\n    # base case \n    for i in range(n+1): \n        table[i][0] = 0 \n        table[0][i] = 0 \n\n    # fill table in bottom up manner \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if str[i-1] == str[j-1]: \n                table[i][j] = table[i-1][j-1] + 1 \n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n\n    # return the length of the longest palindromic subsequence \n    return table[n][n] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence for \n    # substrings of length i+1.\n    dp = [[0] * n for _ in range(n)]\n    # Initialize the first row and first column of the table.\n    for i in range(n):\n        if i == 0 or i == n-1:\n            dp[i][i] = 1\n        else:\n            if str[i] == str[i+1]:\n                dp[i][i+1] = 2\n            else:\n                dp[i][i+1] = 1\n    # Fill the table in bottom-up manner.\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    # Return the length of the longest palindromic subsequence.\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    n = len(str) \n    # create a 2D table to store lengths of subsequences ending at each index \n    table = [[0] * n for i in range(n)] \n  \n    # length of longest palindromic subsequence ending at index i is 0 \n    for i in range(n): \n        table[i][i] = 1 \n  \n    # check for subsequences of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            table[i][i+1] = 2 \n  \n    # check for subsequences of length greater than 2 \n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i+length-1 \n            if str[i] == str[j] and table[i+1][j-1] == 1: \n                table[i][j] = table[i+1][j-1] + 2 \n            else: \n                table[i][j] = max(table[i][j-1], table[i+1][j]) \n  \n    # return the length of the longest palindromic subsequence \n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Initialize a dictionary to store lengths of palindromic subsequences\n    dp = {}\n    n = len(str)\n    # If the string is empty or has only one character, it is a palindrome\n    if n == 0 or n == 1:\n        dp[0] = 1\n        return 1\n    # Calculate the longest palindromic subsequence for odd length strings\n    for i in range(1, n, 2):\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-2] + 2\n        else:\n            dp[i] = 1\n    # Calculate the longest palindromic subsequence for even length strings\n    for i in range(0, n-1, 2):\n        if str[i] == str[i+1]:\n            dp[i] = dp[i+2]\n        else:\n            dp[i] = 1\n    # Return the maximum length of the longest palindromic subsequence\n    return max(dp.values())"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n\n    Algorithm:\n\n    Create a 2D array of size n x n where n is the length of the given string. \n\n    In the first row and first column, all elements are 1.\n\n    In the remaining rows and columns, if the characters at the current position (i,j) are same, then the value at (i,j) will be equal to the value at (i+1,j-1) + 1.\n\n    If the characters at the current position (i,j) are not same, then the value at (i,j) will be equal to the maximum of the following values:\n\n    1. The value at (i+1,j) (for subproblems of length j+1).\n    2. The value at (i,j-1) (for subproblems of length j-1).\n    3. The value at (i,j) (for subproblems of length j).\n\n    To find the length of the longest palindromic subsequence in the given string, we need to find the maximum value in the 2D array.\n\n    Time Complexity: O(n^2)\n\n    Space Complexity: O(n^2)\n    '''\n\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1], dp[i][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    \n    for i in range(n):\n        if i == 0 or str[i] == str[i-1]:\n            dp[i][i] = 1\n            max_len = 1\n        else:\n            dp[i][i] = 2\n        \n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                max_len = max(max_len, dp[i][j])\n    \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    for i in range(n):\n        if str[i] == str[i]:\n            dp[i][i] = 1\n\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                dp[start][end] = dp[start+1][end-1] + 2\n            else:\n                dp[start][end] = max(dp[start+1][end], dp[start][end-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # create a 2D table to store the lengths of longest palindromic subsequences\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # initialize the base cases\n    dp[0][0] = 0\n    dp[0][1] = 1\n\n    for i in range(1, n):\n        # check for odd length palindromes\n        if str[i] == str[i-1]:\n            dp[i][i] = 2\n\n        # check for even length palindromes\n        else:\n            dp[i][i] = 1\n\n        # check for odd length palindromes that are also centered\n        for j in range(i-2, -1, -1):\n            if str[i] == str[j] and (i-j) % 2 == 0:\n                dp[i][i-j-1] = dp[j+1][i-1] + 2\n\n    # find the length of the longest palindromic subsequence\n    max_len = dp[n][n]\n    start = n-1\n\n    # backtrack to find the start index of the longest palindromic subsequence\n    for i in range(n-1, -1, -1):\n        if dp[i][n] > max_len:\n            max_len = dp[i][n]\n            start = i\n\n    # return the length of the longest palindromic subsequence\n    return max_len\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_reciprocals = 0\n    for i in range(1, n):\n        sum_of_reciprocals += 1/i\n    \n    return sum_of_reciprocals"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return 1/(1/n + 1/harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_harmonic_numbers = 0\n    for i in range(1, n):\n        sum_of_harmonic_numbers += (1/i)\n    return sum_of_harmonic_numbers"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 / n) + (1 / (n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_reciprocals = 0\n    for i in range(1, n):\n        sum_of_reciprocals += 1/i\n    return sum_of_reciprocals"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n\n    # Loop from 1 to n-1\n    for i in range(1, n):\n        # Calculate the harmonic sum of i\n        harmonic_sum_i = 1 / i\n\n        # Add the harmonic sum of i to the total\n        total += harmonic_sum_i\n\n    # Return the total\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (1/n + 1/n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (2*n - 1) / n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n    # Create two dictionaries to store the frequency of each element in the arrays\n    freq1 = {}\n    freq2 = {}\n\n    # Iterate through the first array and count the frequency of each element\n    for num in array_nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n\n    # Iterate through the second array and count the frequency of each element\n    for num in array_nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n\n    # Find the intersection of the two dictionaries\n    intersection = {}\n    for num in freq1.keys():\n        if num in freq2 and freq1[num] <= freq2[num]:\n            intersection[num] = min(freq1[num], freq2[num])\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two sets from the input arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of unique elements in array_nums1\n    unique_nums1 = set(array_nums1)\n\n    # create an empty list to store the intersection\n    intersection = []\n\n    # iterate through array_nums2\n    for num in array_nums2:\n        # if num is in unique_nums1, add it to intersection\n        if num in unique_nums1:\n            intersection.append(num)\n\n    # return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set of array_nums1\n    set_nums1 = set(array_nums1)\n    # create an empty list to store the common elements\n    intersection = []\n    # loop through array_nums2\n    for num in array_nums2:\n        # if the number is in set_nums1, add it to intersection list\n        if num in set_nums1:\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    i = j = 0\n    intersection = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the common elements of the two arrays.\n    \"\"\"\n    common_elements = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            common_elements.append(num1)\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the second array\n    freq = {}\n    for num in array_nums2:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Create an empty list to store the intersection of the two arrays\n    intersection = []\n\n    # Iterate through each element in the first array\n    for num in array_nums1:\n        # If the element is in the frequency dictionary and the frequency is greater than 0, add it to the intersection list\n        if num in freq and freq[num] > 0:\n            intersection.append(num)\n            freq[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays of integers as input and returns a new array containing the common elements of the two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n\n    Args:\n    - array_nums1: A list of integers.\n    - array_nums2: A list of integers.\n\n    Returns:\n    - A list of integers that are the intersection of the two input arrays.\n    \"\"\"\n    # Create a set to store the unique values of array_nums2\n    unique_nums2 = set(array_nums2)\n\n    # Use set intersection to get the intersection of the two arrays\n    intersection = list(set(array_nums1) & unique_nums2)\n\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for item in tup: \n        if item == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the number of occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # initialize an empty list to hold the new list\n    new_list = []\n    # loop through each element in the original list\n    for elem in list:\n        # add the element to the new list\n        new_list.append(elem)\n        # add the element to the new list\n        new_list.append(element)\n    # return the new list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Initialize the result list with the first element of the input list\n    result = [list[0]]\n    # Loop through the rest of the input list\n    for i in range(1, len(list)):\n        # Add the element to the result list before the current element\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for elem in list:\n        new_list.insert(0, element)\n        new_list.append(elem)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list `lst` and an element `elem` and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # create a new list to store the result\n    result = []\n    # loop over each element in the original list\n    for i in lst:\n        # insert the element before the current element in the list\n        result.insert(0, i)\n    # append the last element in the original list to the end of the result list\n    result.append(lst[-1])\n    # return the result list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        else:\n            list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    # Initialize an empty list to hold the result\n    result = []\n    # Loop through the original list\n    for item in lst:\n        # Add the element to the result list before the current item\n        result.append(element)\n        result.append(item)\n    # Return the result list\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        modulus = (real**2 + imag**2)**0.5\n        angle = cmath.phase(num)\n        \n        print(\"({},{}) -> modulus={}, angle={}\".format(real, imag, modulus, angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        # print polar coordinates\n        print(\"({},{})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function converts complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    polar_coordinates = []\n    for complex_number in complex_numbers:\n        r = abs(complex_number)\n        theta = cmath.phase(complex_number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag\n        \n        # calculate the magnitude of the complex number\n        mag = cmath.sqrt(real**2 + imag**2)\n        \n        # calculate the angle of the complex number\n        angle = cmath.phase(num)\n        \n        # create a tuple containing the magnitude and angle\n        polar_num = (mag, angle)\n        \n        # append the polar coordinate to the list of results\n        result.append(polar_num)\n        \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        polar_num = cmath.polar(num)\n        # print the converted number\n        print(polar_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        r = cmath.sqrt(real**2 + imag**2)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        \n        if imag == 0:\n            # Polar coordinates (r, theta) where r = abs(num) and theta = 0\n            r = abs(real)\n            theta = 0\n        else:\n            # Polar coordinates (r, theta) where r = abs(num) and theta = angle between x-axis and num\n            r = abs(real)\n            theta = cmath.phase(num)\n        \n        print(\"Polar coordinates (r, theta) where r = {}, theta = {}\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        # Add the polar coordinates to the result list\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert the input numbers to complex numbers\n    complex_numbers = [complex(num) for num in numbers]\n\n    # Iterate through the complex numbers\n    for num in complex_numbers:\n        # Get the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n\n        # Print the polar coordinates of the complex number\n        print(f'Magnitude: {magnitude}, Angle: {angle}')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        polar_num = (r, phi)\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generating all combinations of length n using itertools.combinations_with_replacement function\n    combos = list(combinations_with_replacement(l, n))\n\n    # Creating a list with tuples for each combination\n    result = []\n    for combo in combos:\n        result.append(tuple(combo))\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list lst and return a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(lst, n)\n    comb_lst = []\n    for c in comb:\n        comb_lst.append(tuple(c))\n    return comb_lst"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l[i:], n):\n            result.append((i,)+comb)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(1, n+1):\n        comb = combinations_with_replacement(l, i)\n        color_combinations.extend(tuple(comb) for comb in comb)\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return []\n\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n\n        # If the number is prime, increment the count variable\n        if all(i%j!=0 for j in range(2,int(i**0.5)+1)):\n            count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    prime_count = 0\n    \n    # loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # if the number is prime, count it\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    \n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Given a non-negative number n, returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # create a list of numbers from 2 to n\n    nums = list(range(2, n+1))\n    \n    # initialize a count variable to 0\n    count = 0\n    \n    # loop through the list of numbers\n    for i in nums:\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, add 1 to the count variable\n        if is_prime:\n            count += 1\n            \n    # return the count variable\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the tuple with the maximum value.\n    \"\"\"\n    max_tup = ()\n    for item in test_tup1:\n        if item > max_tup[0]:\n            max_tup = (item,)\n    for item in test_tup2:\n        if item > max_tup[0]:\n            max_tup = (item,)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize variables for each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    # initialize a new tuple with the maximum values for each tuple\n    max_tup = (max_val1, max_val2)\n    # return the new tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # If the first tuple is larger, swap them.\n    if test_tup1 > test_tup2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n\n    # Check if the second tuple is larger than the first tuple.\n    if test_tup2 > test_tup1:\n        return test_tup2\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple\n    that contains the maximum value from each tuple.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    max_tuple = (max1, max2)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Using max() function to find the maximum element in each tuple\n    max_tuple1 = max(test_tup1)\n    max_tuple2 = max(test_tup2)\n    \n    # Using a ternary operator to return the maximum value in each tuple\n    max_val1 = max_tuple1 if max_tuple1 > max_tuple2 else max_tuple2\n    max_val2 = max_tuple2 if max_tuple1 > max_tuple2 else max_tuple1\n    \n    # Using a dictionary to store the index of each element in the max tuple\n    max_dict = {0: test_tup1[0], 1: test_tup1[1], 2: test_tup1[2]}\n    \n    # Using a dictionary comprehension to find the index of the maximum value in each max tuple\n    max_dict_val1 = {idx: val for idx, val in max_dict.items() if val == max_val1}\n    max_dict_val2 = {idx: val for idx, val in max_dict.items() if val == max_val2}\n    \n    # Finding the maximum value in the max_dict_val1 and max_dict_val2\n    max_val_dict1 = max(max_dict_val1.values())\n    max_val_dict2 = max(max_dict_val2.values())\n    \n    # Returning the maximum value in each tuple\n    return max_val_dict1, max_val_dict2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # create an empty list to store the maximum values\n    max_list = []\n    # iterate through the tuples and compare their values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_list.append(test_tup1[i])\n        else:\n            max_list.append(test_tup2[i])\n    # return the maximum values as a tuple\n    return tuple(max_list)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Initialize variables to store the maximum elements\n    max_elem1 = max_elem2 = float('-inf')\n    \n    # Check if the first tuple has a higher value than the second tuple\n    if test_tup1[1] > test_tup2[1]:\n        max_elem1 = test_tup1[1]\n        max_elem2 = test_tup2[1]\n    else:\n        max_elem1 = test_tup2[1]\n        max_elem2 = test_tup1[1]\n    \n    # Check if the first tuple has a higher value than the maximum of the second tuple and the third tuple\n    if test_tup1[2] > max_elem2:\n        max_elem1 = test_tup1[2]\n        max_elem2 = max(max_elem2, test_tup1[2])\n    elif test_tup2[2] > max_elem2:\n        max_elem1 = test_tup2[2]\n        max_elem2 = max(max_elem2, test_tup2[2])\n    \n    # Check if the first tuple has a higher value than the maximum of the second tuple and the third tuple and the fourth tuple\n    if test_tup1[3] > max(max_elem2, max_elem1):\n        max_elem1 = test_tup1[3]\n        max_elem2 = max(max_elem2, max_elem1)\n    elif test_tup2[3] > max(max_elem2, max_elem1):\n        max_elem1 = test_tup2[3]\n        max_elem2 = max(max_elem2, max_elem1)\n    \n    # Return the maximum elements\n    return (max_elem1, max_elem2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # Check if all elements in the tuples are of the same type\n    if not all(isinstance(elem1, type(elem2)) for elem1, elem2 in zip(test_tup1, test_tup2)):\n        raise ValueError(\"All elements in the tuples must be of the same type.\")\n    # Find the maximum value in the first tuple\n    max_value = max(test_tup1)\n    # Create a new tuple with the same elements as the first tuple but with the maximum value replaced\n    new_tup = (elem if elem!= max_value else max_value for elem in test_tup1)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n        return\n    \n    # Initialize max values\n    max_value1 = max_value2 = 0\n    \n    # Compare elements of the two tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_value1:\n            max_value1 = test_tup1[i]\n        elif test_tup2[i] > max_value2:\n            max_value2 = test_tup2[i]\n    \n    # Check if one tuple has a value greater than the other\n    if max_value1 > max_value2:\n        return test_tup1\n    elif max_value2 > max_value1:\n        return test_tup2\n    else:\n        return \"Both tuples have the same value!\""
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Given two tuples of equal length, maximize the elements of each tuple by comparing them.\n    \"\"\"\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple = (test_tup1[i], test_tup2[i])\n        elif test_tup1[i] < test_tup2[i]:\n            max_tuple = (test_tup2[i], test_tup1[i])\n    return max_tuple"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True] * (n+1)\n    sieve[0], sieve[1] = False, False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    prime_nums = [i for i in range(2, n+1) if sieve[i]]\n    return prime_nums[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize variables\n    count = 0\n    prime = 2\n\n    # check if n is even or 1\n    if n % 2 == 0 or n == 1:\n        return None\n\n    # check if n is odd\n    while count < n:\n        # check if the current number is prime\n        if is_prime(prime):\n            # increment count and prime\n            count += 1\n            prime += 2\n        else:\n            # increment prime\n            prime += 2\n\n    # check if the nth newman-shanks-williams prime number is found\n    if count == n:\n        return prime\n    else:\n        return None\n\ndef is_prime(n): \n    '''\n    Write a helper function to check if a number is prime.\n    '''\n\n    # check if n is less than 2\n    if n < 2:\n        return False\n\n    # check if n is 2 or 3\n    if n == 2 or n == 3:\n        return True\n\n    # check if n is even\n    if n % 2 == 0:\n        return False\n\n    # check odd numbers up to the square root of n\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Start with 2 as the first newman-shanks-williams prime number\n    p = 2\n\n    # Loop until the nth newman-shanks-williams prime number has been found\n    while n > 1:\n        # Check if the current number is a newman-shanks-williams prime number\n        if is_newman_prime(p):\n            n -= 1\n        # Increment the current number by 1 and check if it is a newman-shanks-williams prime number\n        p += 1\n\n    return p\n\n\ndef is_newman_prime(n):\n    \"\"\"\n    Check if a given number is a newman-shanks-williams prime number.\n    \"\"\"\n    # Check if the number is divisible by 2 or less\n    if n <= 2:\n        return False\n\n    # Check if the number is divisible by any odd number between 3 and the square root of the number\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    # Define the sequence of numbers\n    sequence = [1]\n    # Find the length of the sequence\n    n = n - 1\n    while True:\n        # Add the current number to the sequence\n        sequence.append(sequence[-1] + 1)\n        # Check if the sequence has n elements\n        if len(sequence) == n:\n            # Check if the sequence is a Newman-Shanks-Williams prime\n            if all(x < sequence[-1] + x**2 - 1 for x in range(1, len(sequence))):\n                # The sequence is a Newman-Shanks-Williams prime\n                return sequence[-1]\n            else:\n                # The sequence is not a Newman-Shanks-Williams prime\n                break\n        else:\n            # The sequence has less than n elements, so add the next element\n            sequence.append(sequence[-1] + 1)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a list of primes up to the square root of n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # Initialize the nth prime number to -1\n    nth_prime = -1\n\n    # Loop through the primes until we find the nth prime number\n    for i in range(len(primes)):\n        prime = primes[i]\n        count = 0\n\n        # Check each number up to the square root of n to see if it is a prime\n        for j in range(2, int(n ** 0.5) + 1):\n            if n % j == 0:\n                count += 1\n                if count == 2:\n                    break\n\n        # If we've found the nth prime number, return it\n        if count == 1:\n            nth_prime = prime\n            break\n\n    return nth_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize the current prime number and count to zero\n    current_prime = 2\n    count = 0\n    \n    # Loop until we find the nth newman-shanks-williams prime number\n    while count < n:\n        # Check if the current prime number is a newman-shanks-williams prime\n        if is_newman_prime(current_prime):\n            # If it is, increment the count and move on to the next prime number\n            count += 1\n            current_prime += 1\n        else:\n            # If it's not, move on to the next prime number\n            current_prime += 2\n    \n    # Return the nth newman-shanks-williams prime number\n    return current_prime - 2\n\ndef is_newman_prime(n):\n    \"\"\"\n    Write a function to determine if a given number is a newman-shanks-williams prime.\n    \"\"\"\n    # Check if the number is less than 10\n    if n < 10:\n        return False\n    \n    # Check if the number is divisible by any number in the range of [2, sqrt(n)]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    # Otherwise, the number is a newman-shanks-williams prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def newman_prime_helper(n, count):\n        if count == n:\n            return True\n        if is_prime(count):\n            if newman_prime_helper(n, count + 1):\n                return True\n        return False\n    \n    newman_prime_helper(n, 2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and is_newman_shanks_williams_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef is_newman_shanks_williams_prime(num):\n    '''\n    Helper function to check if a number is a newman-shanks-williams prime or not.\n    '''\n    if num < 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n        if num % (i + i) == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a list to store the prime numbers\n    primes = [2]\n\n    # Loop through numbers up to the square root of n\n    for i in range(3, int(n**0.5) + 1, 2):\n        # Check if i is a prime number\n        if all(i % j!= 0 for j in range(3, int(i**0.5) + 1, 2)):\n            primes.append(i)\n            # Check if i^2 is in the list\n            if i**2 in primes:\n                # If it is, divide i^2 by i to get the next prime number\n                for j in range(len(primes)):\n                    if primes[j] * primes[j] > i**2:\n                        primes.insert(j, i)\n                        break\n\n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # initialize count and largest prime number\n    count = 0\n    largest_prime = 1\n\n    # loop through primes until the nth newman\u2013shanks\u2013williams prime is found\n    while count < n:\n        # check if the current prime is the nth newman\u2013shanks\u2013williams prime\n        if is_newman_prime(largest_prime, n):\n            return largest_prime\n        # increment the count and update the largest prime\n        count += 1\n        largest_prime += 1\n\n    # if no newman prime was found, return -1\n    return -1\n\ndef is_newman_prime(prime, n):\n    \"\"\"\n    Helper function to check if the given prime is the nth newman\u2013shanks\u2013williams prime.\n    \"\"\"\n\n    # check if the prime is divisible by the square root of n\n    if prime ** 0.5 * prime ** 0.5!= n:\n        return False\n\n    # check if the prime is divisible by the sum of its digits\n    digits = [int(digit) for digit in str(prime)]\n    if sum(digits)!= prime:\n        return False\n\n    # check if the prime is divisible by the product of its digits\n    if prime % reduce(lambda x, y: x * y, digits, 1)!= 0:\n        return False\n\n    # if all checks pass, the prime is a newman prime\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples must be of the same length!\")\n        return\n\n    # create a new tuple that will store the element-wise division results\n    result_tup = ()\n\n    # perform element-wise division using a for loop\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            result_tup += (0,)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the tuples is not equal.\")\n        return\n\n    # Perform element-wise division and store the result in a new tuple\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples should be the same.\")\n        return\n    \n    # Initialize an empty list to store the element-wise division results\n    result_list = []\n    \n    # Loop through each element of the two tuples and perform the element-wise division operation\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] / test_tup2[i]\n        result_list.append(result)\n    \n    # Return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # Perform division operation element-wise\n        test_tup1[i] /= test_tup2[i]\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples does not match!\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] // test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    \n    # Perform element-wise division\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        else:\n            print(\"Error: cannot perform element-wise division between\", type(test_tup1[i]), \"and\", type(test_tup2[i]))\n            return None\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Error: Division by zero not allowed!\")\n            return\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Check if the length of the list is less than L\n    if len(list1) < L:\n        raise ValueError(\"The length of the list is less than L\")\n    \n    # Calculate the length of the first part\n    first_part_length = L\n    \n    # Calculate the length of the second part\n    second_part_length = len(list1) - L\n    \n    # Split the list into two parts\n    first_part = list1[:first_part_length]\n    second_part = list1[first_part_length:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # If L is greater than or equal to the length of list1, return list1 as both parts\n    if L >= len(list1):\n        return (list1, list1)\n    \n    # Create an empty list to store the first part of the list\n    first_part = []\n    \n    # Loop through the list until we have reached the length of L\n    for i in range(len(list1)):\n        first_part.append(list1[i])\n        if len(first_part) == L:\n            break\n    \n    # Create an empty list to store the second part of the list\n    second_part = []\n    \n    # Loop through the list starting from the index after the first part, until we have reached the end of the list\n    for i in range(len(list1), len(list1) + len(first_part)):\n        second_part.append(list1[i])\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    mid = n // 2\n    list1_part1 = list1[:mid]\n    list1_part2 = list1[mid:]\n    return (list1_part1, list1_part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n\n    if L > len(lst):\n        print(\"The value of L is greater than the length of the list. Returning the original list.\")\n        return lst\n    else:\n        part1 = lst[:L]\n        part2 = lst[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Takes a list and an integer L and returns a tuple containing two parts of the list, where the length of the first part is L.\n    \"\"\"\n    n = len(lst)\n    if L > n:\n        raise ValueError(\"L should be less than or equal to the length of the list.\")\n    if L <= 0:\n        raise ValueError(\"L should be greater than 0.\")\n    \n    # Split the list into two parts and return as a tuple\n    part1 = lst[:L]\n    part2 = lst[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        return \"The given list is too short to split.\"\n    \n    mid = len(list1) // 2\n    list1_part = list1[:mid]\n    list2_part = list1[mid:]\n    \n    return (list1_part, list2_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1, []\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n:\n        raise ValueError(\"Length of L must be less than or equal to the length of the input list\")\n    else:\n        list2 = list1[L:]\n        list1 = list1[:L]\n        return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(lst) < L:\n        raise ValueError(\"The length of the list should be greater than or equal to the value of L\")\n    else:\n        part1 = lst[:L]\n        part2 = lst[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in dog's years\n    dog_age_in_years = 7 * h_age\n    \n    # Return the dog's age in dog's years\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dob = \"1990-01-01\"  # assume this is a legitimate date format\n    today = date.today()\n    age = today.year - int(dob.split(\"-\")[0])\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_years = h_age * 7\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob_age = 7\n    dog_years = h_age - dob_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    n = step\n    for i in range(0, len(S), step):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to hold the resulting lists\n    results = []\n    # loop through the list, splitting it every nth element\n    for i in range(0, len(S), step):\n        # create a new list with the nth element and add it to the results list\n        results.append(S[i:i+step])\n    # return the results list\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    res = []\n    i = 0\n    while i < n:\n        if i % step == 0:\n            res.append(S[i:i+step])\n        i += 1\n    return res"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize a list to hold the resulting lists\n    result = []\n    # initialize a counter to keep track of which list we're currently building\n    counter = 0\n    # loop through the input list S\n    for i in range(0, len(S), step):\n        # create a new list and append each element of S to it, starting from the current index\n        new_list = S[i:i+step]\n        # increment the counter and add the new list to the result list\n        counter += 1\n        result.append(new_list)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Define an empty list to store the resulting lists\n    results = []\n    # Iterate through the list and split it for every nth element\n    for i in range(0, len(S), step):\n        # Create a new list containing the current n-th element and append it to the results list\n        new_list = S[i:i+step]\n        results.append(new_list)\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = step\n    splits = []\n    while n > 0:\n        start = 0\n        end = step\n        splits.append(S[start:end])\n        n -= 1\n    return splits"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the resulting lists\n    result = []\n    \n    # loop through the input list\n    for i in range(0, len(S), step):\n        # extract a slice of the input list starting from the current index and for the length of the step\n        slice_list = S[i:i+step]\n        # add the extracted slice to the result list\n        result.append(slice_list)\n        \n    # return the result list\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the volume of the cube\n    volume = l**3\n\n    # calculate the surface area of the cube\n    surface_area = 6 * volume\n\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralSurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # formula for lateral surface area of a cube\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n + 1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    num = 1\n    while num <= 2*n:\n        sum += num**2\n        num += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        odd_squares = sum([i**2 for i in range(1, n+1, 2)])\n        return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum to zero\n    total = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the odd number to the sum\n        total += i*i\n    # return the total\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i**2\n    \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # initialize the sum to zero\n    sum = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n\n        # calculate the square of the current odd natural number\n        current_square = i*i\n\n        # add the square to the sum\n        sum += current_square\n\n    # return the final sum of squares\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the star number to 0\n    star_num = 0\n\n    # Loop through each digit of the input n\n    while n > 0:\n        # If the remainder of n divided by 10 is 0, add 1 to the star number\n        if n % 10 == 0:\n            star_num += 1\n        # If the remainder of n divided by 10 is not 0, multiply the remainder by the next power of 10\n        else:\n            star_num += n % 10 * 10 ** n % 10\n\n        # Divide n by 10 and truncate the integer part\n        n = n // 10\n\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    star = '*' * n\n    return star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n    if n < 1:\n        return \"n must be greater than or equal to 1.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        star_num = 1\n        for i in range(2, n+1):\n            star_num = star_num * (i+1)\n        return str(star_num)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    star = \"\"\n    while count < n:\n        star += \"*\"\n        count += 1\n    return star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*****'\n    elif n == 2:\n        return '****'\n    elif n == 3:\n        return '***'\n    elif n == 4:\n        return '**'\n    elif n == 5:\n        return '*'\n    else:\n        return 'Invalid input. Please enter an integer between 1 and 5.'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    # Create a list of 10000000 numbers ranging from 1 to 10000000\n    numbers = list(range(1, 10000001))\n\n    # Initialize the sum of the numbers to 0\n    sum_of_numbers = 0\n\n    # Loop through the list of numbers\n    for num in numbers:\n        # Add each number to the sum of the numbers\n        sum_of_numbers += num\n\n    # Calculate the fractional part of the sum\n    fractional_part = sum_of_numbers - int(sum_of_numbers)\n\n    # Calculate then'th star number\n    star_num = int((fractional_part * n) + 1)\n\n    # Return then'th star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        count *= i\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n * (n-1)) / 2\n    else:\n        return (n * (n-1)) / 2 + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*' + find_star_num(n-1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        if len(k) == 1:\n            return ord(k)\n        else:\n            print(\"The input is not a single character.\")\n            return None\n    else:\n        print(\"The input is not a string.\")\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_of_even_numbers = 0\n    even_index = 0\n    for num in arr:\n        if num % 2 == 0:\n            sum_of_even_numbers += num\n            even_index += 1\n            if even_index % 2 == 0:\n                break\n    return sum_of_even_numbers"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize a variable to store the sum of even numbers at even positions\n    sum_even_index = 0\n\n    # Loop through the list and add the even numbers at even positions to the sum\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even_index += arr[i]\n\n    # Return the sum of even numbers at even positions\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n\n    for i in range(0, len(arr), 2):  \n        sum_even += arr[i]\n\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i*i*i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize variables to keep track of the sum and the number of even numbers raised to the fifth power\n    sum_even_powers = 0\n    num_even_powers = 0\n    \n    # Loop through the first n even numbers\n    for i in range(2, n+1, 2):\n        # Calculate the even number raised to the fifth power and add it to the sum\n        sum_even_powers += i**5\n        # Increment the number of even numbers raised to the fifth power\n        num_even_powers += 1\n    \n    # Return the sum of the even numbers raised to the fifth power\n    return sum_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for i in range(2, n+1, 2):\n        power_sum += i**5\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power_n = 0\n    \n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum_even_power_n += i**5\n            \n    return sum_even_power_n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    total = 0\n    for i in range(2, 2*n+1, 2):\n        total += i**5\n    return total"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tuple_item in test_list:\n        rear = tuple_item[-1]\n        result_list.append(rear)\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    # create a new list to store the result\n    result = []\n    # loop through each index of the tuple\n    for i in range(len(test_tup1)):\n        # if the elements at the same index are equal, add 0 to the result list, else subtract the second tuple element\n        if test_tup1[i] == test_tup2[i]:\n            result.append(0)\n        else:\n            result.append(test_tup2[i] - test_tup1[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            test_tup1[i] -= test_tup2[test_tup2.index(i)]\n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if i%2 == 0 and j%2 == 0:\n                sum += math.comb(n, i-1)*math.comb(n, j-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Use a for loop to iterate through the range of n\n    for i in range(1, n+1):\n        # Calculate the current binomial coefficient\n        coeff = math.factorial(n) // math.factorial(i-1) // math.factorial(n-i+1)\n        # Check if the current coefficient is even\n        if i % 2 == 0:\n            # Add the coefficient to the sum\n            sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    \n    for i in range(1, n+1):\n        sum += math.comb(n, i)\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n\n    # calculate sum of even index binomial coefficients\n    for i in range(2, n+1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += binomial_coeff\n    \n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result += math.comb(n, i)\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math  \n\ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize sum and counter variables\n    sum_even = 0\n    counter = 0\n    \n    # iterate through even index binomial coefficients\n    for i in range(2, n+1, 2):\n        \n        # calculate the even index binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # check if it is even\n        if i % 2 == 0:\n            \n            # add the even index binomial coefficient to the sum\n            sum_even += coeff\n            \n            # increment the counter\n            counter += 1\n    \n    # return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(1, n+1):\n        for j in range(2, i+1, 2):\n            sum_even += math.comb(i, j-1)\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Calculate the binomial coefficients up to n-1\n    coeffs = [math.comb(n, i) for i in range(n)]\n    \n    # Initialize the sum to zero\n    sum_coeffs = 0\n    \n    # Iterate over the binomial coefficients and add the even indices to the sum\n    for i in range(len(coeffs)):\n        if i % 2 == 0:\n            sum_coeffs += coeffs[i]\n            \n    return sum_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r ** 2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159265359 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3)*pi*r*r*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2 * h)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function calculates the volume of a cylinder.\n\n    Parameters:\n    r: float\n        The radius of the cylinder.\n    h: float\n        The height of the cylinder.\n\n    Returns:\n    volume: float\n        The volume of the cylinder.\n    \"\"\"\n    pi = 3.14159265359\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159/3) * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    # Calculate the volume of the cylinder using the formula V = (1/3) * pi * r^2 * h\n    V = (1/3) * 3.14 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159 * r * r * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] > test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1] < test_tup[i]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0 and test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n):\n        print(a)\n        a += b\n        b += 2\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables\n    first_term = 1\n    second_term = 1\n    current_term = 0\n\n    # Loop to calculate the nth decagonal number\n    for i in range(n):\n        current_term = first_term + second_term\n        first_term = second_term\n        second_term = current_term\n\n    return current_term"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # initialize variables\n    decagonal = 0\n    counter = 1\n\n    # loop until nth decagonal number is reached\n    while counter <= n:\n\n        # add decagonal number to counter\n        decagonal += counter\n\n        # increment counter\n        counter += 1\n\n    # return decagonal number\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    dec_num = 1\n\n    while i <= n:\n        dec_num = (i * (3*i - 1)) / 2\n        i += 1\n\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += i*(3*i-1)/2\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        if i % 2 == 0 and i >= 1:\n            if i % 10 == 0:\n                if n == 1:\n                    return True\n                else:\n                    return False\n            else:\n                dec = i * 5 + 5\n                if dec == n:\n                    return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i * (3 * i - 1) // 2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        dec_n = 1\n        for i in range(2, n+1):\n            dec_n += i * i\n        return dec_n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define a variable to store the sum of the first n terms of the decagonal series\n    decagonal_sum = 1\n\n    # Loop through the first n terms of the series\n    for i in range(1, n+1):\n        # Add the current term to the sum\n        decagonal_sum += i\n\n        # If the sum is divisible by 12, then it is a decagonal number\n        if decagonal_sum % 12 == 0:\n            return True\n\n    # If the loop completes, then the nth decagonal number is not found\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, element in enumerate(dlist):\n        if element == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # initialize variables\n    index = -1\n    \n    # loop through the array\n    for i in range(len(dlist)):\n        # check if the element is equal to the item\n        if dlist[i] == item:\n            # set the index and return the result\n            index = i\n            return True, index\n    \n    # return the result\n    return False, index"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize variables\n    found = False\n    index = -1\n    \n    # Iterate through the array\n    for i in range(len(dlist)):\n        # If the current element is equal to the search element\n        if dlist[i] == item:\n            # Set the found and index variables to True and the current index\n            found = True\n            index = i\n            # Break out of the loop\n            break\n    \n    # Return a tuple containing the found and index variables\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set, which automatically removes duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n\n    Args:\n        test_list (list): List of elements to be checked for uniqueness.\n\n    Returns:\n        bool: True if all the elements of the list are unique, False otherwise.\n    \"\"\"\n\n    # Using set() to remove duplicates from the list\n    unique_list = list(set(test_list))\n\n    # If the length of the unique list is equal to the length of the original list, then all the elements are unique\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list of elements as input and returns True if all elements are unique or False otherwise.\n    \"\"\"\n    # creating a set to store unique elements in the list\n    unique_set = set(test_list)\n    # checking if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n\n    Args:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers.\n\n    Returns:\n    list: A list of the differences between the corresponding elements of the two input lists.\n\n    \"\"\"\n    # Check if the two input lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both input lists must have the same length.\")\n    # Initialize an empty list to store the differences\n    diff_list = []\n    # Loop through the two input lists\n    for i in range(len(nums1)):\n        # Subtract the corresponding elements and add them to the diff_list\n        diff_list.append(nums1[i] - nums2[i])\n    # Return the diff_list\n    return diff_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    def digit_frequency(n):\n        # Initialize frequency dictionary\n        freq = {}\n        for i in range(10):\n            freq[i] = 0\n\n        # Count frequency of each digit in n\n        while n > 0:\n            freq[n % 10] += 1\n            n //= 10\n\n        return freq\n\n    def is_valid(freq):\n        # Iterate through the frequency dictionary\n        for digit, freq_count in freq.items():\n            # Check if frequency count is less than or equal to the digit itself\n            if freq_count > digit:\n                return False\n\n        return True\n\n    # Convert integer to list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Calculate frequency of each digit\n    digit_freq = digit_frequency(n)\n\n    # Check if all digits have frequency less than or equal to themselves\n    return all(freq_count <= digit for digit, freq_count in digit_freq.items())"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # loop through each digit in the integer\n    for digit in str(n): \n        # check if the frequency of the digit is greater than the digit itself\n        if digit_frequency(digit) > int(digit): \n            return False\n\n    # if the loop completes without returning False, the integer has valid digits\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # Check if the integer is non-negative\n    if n < 0:\n        print(\"The integer must be non-negative.\")\n        return False\n    \n    # Convert the integer to a string\n    n_str = str(n)\n    \n    # Count the frequency of each digit\n    digit_freq = [0] * 10\n    for digit in n_str:\n        digit_freq[int(digit)] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit > digit:\n            print(\"The frequency of each digit in the integer must be less than or equal to the digit itself.\")\n            return False\n    \n    # If the function reaches this point, all checks passed\n    print(\"The integer is a valid Perfect Number.\")\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    frequency = []\n    for digit in str(n):\n        if digit in frequency:\n            frequency[frequency.index(digit)] += 1\n        else:\n            frequency.append(digit)\n    for digit in frequency:\n        if frequency[frequency.index(digit)] > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # Split the number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Count the frequency of each digit\n    frequency = {}\n    for digit in digits:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        if frequency[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    freq = {}\n\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_count = [0] * 10  # create a list of 10 to store the frequency of each digit\n\n    # loop through each digit in the number\n    for digit in str(n):\n        digit_count[int(digit)] += 1  # increment the count for the digit in the list\n\n    # loop through the list and check if the count for each digit is less than or equal to the digit itself\n    for digit_freq in digit_count:\n        if digit_freq > digit_freq:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store digit frequencies\n    freq = {}\n    # loop through each digit in the integer\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # increment the frequency of the digit\n            freq[digit] += 1\n        else:\n            # if the digit is not in the dictionary, add it with a frequency of 1\n            freq[digit] = 1\n    # loop through each digit in the integer again\n    for digit in str(n):\n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if freq[digit] >= int(digit):\n            # if it is, return False\n            return False\n    # if all digits have a frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize dictionary to store the frequency of digits\n    digit_freq = {}\n\n    # loop through each digit in the number and update the frequency of each digit in the dictionary\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # loop through the digits in the number and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in str(n):\n        if digit_freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10   # Initialize a list of 10 zeros to store the frequency of each digit\n    \n    # Iterate through each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > 1 and digit <= int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Check whether all items in a list are equal to a given element.\n\n    Parameters:\n    list (list): the list to check.\n    element (any): the element to compare.\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element,\n    otherwise, it returns False.\n    \"\"\"\n    # Loop through the list and check if all items are equal to the element\n    for item in lst:\n        if item!= element:\n            return False\n    # If all items are equal to the element, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    \n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba{2,3}b\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a{2,3}b')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_match_two_three(text):\n    pattern = re.compile(r'(?i).*a.*b[23]?.*')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a(?=[b]{2,3})'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){1,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    max_start = 0\n    max_end = 0\n\n    for i in range(1, n):\n        for j in range(1, k):\n            if i + j - 1 < n:\n                current_sum = a[i] + a[i+j-1] + a[i+j] + a[i+j+1]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_start = i\n                    max_end = i + j - 1\n\n    return max_sum, max_start, max_end"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # calculate the maximum sum of a non-repeating array\n    max_non_repeating = max(a)\n    # calculate the maximum sum of a repeating array\n    max_repeating = max(a) * k\n    # find the sum of the first k elements of the non-repeating array\n    non_repeating_sum = sum(a[:k])\n    # find the sum of the last k elements of the non-repeating array\n    non_repeating_sum_last_k = sum(a[-k:])\n    # find the sum of the first k elements of the repeating array\n    repeating_sum = sum(a[:k] * k)\n    # find the sum of the last k elements of the repeating array\n    repeating_sum_last_k = sum(a[-k:] * k)\n    # calculate the maximum sum of the modified array\n    max_modified = max(non_repeating_sum, non_repeating_sum_last_k, repeating_sum, repeating_sum_last_k)\n    return max_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the first k elements of the array\n    sum_k = sum(a[:k])\n    \n    # Initialize the maximum sum\n    max_sum = sum_k\n    \n    # Initialize the start and end indices of the subarray\n    start = 0\n    end = k\n    \n    # Repeat the process k times\n    for _ in range(k-1):\n        # Calculate the sum of the current subarray and the first k-1 elements of the array\n        sum_current = sum_k + sum(a[start+1:end+1])\n        \n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, sum_current)\n        \n        # Move the start and end indices of the subarray\n        start += 1\n        end += 1\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if n == 1:\n        return a[0]\n\n    # Store the maximum sum seen so far\n    max_sum = float('-inf')\n\n    # Repeat the array k times and calculate the maximum sum\n    for i in range(k):\n        temp = [a[j] for j in range(n)]\n        max_sum = max(max_sum, max_subarray_sum(temp))\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum\n\ndef max_subarray_sum(a):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in a:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Initialize the repeated array\n    repeated_array = [a] * k\n\n    # Traverse through the given array\n    for i in range(n):\n\n        # Add the current element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is greater than or equal to the maximum sum, remove the least significant element from the repeated array\n        while current_sum >= max_sum:\n            repeated_array.pop(0)\n            current_sum -= a[0]\n            if len(repeated_array) == k:\n                repeated_array.pop(-1)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array by repeating the given array k times\n    modified_array = []\n    for i in range(k):\n        modified_array.extend(a)\n\n    # sort the modified array in descending order\n    modified_array.sort(reverse=True)\n\n    # initialize variables to store the maximum sum and its index\n    max_sum = 0\n    max_index = -1\n\n    # loop through the modified array and update the maximum sum and its index\n    for i in range(n):\n        current_sum = 0\n        for j in range(k):\n            current_sum += modified_array[i+j]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(k):\n            a.append(a[i])\n    a.sort(reverse=True)\n    for i in range(n):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[i+j]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a modified array by repeating the given array k times\n    modified_array = a * k\n    \n    # Initialize variables for the maximum subarray sum and its index\n    max_sum = max_sum_index = float('-inf')\n    \n    # Iterate through the modified array to find the maximum subarray sum\n    for i in range(n):\n        for j in range(k):\n            subarray_sum = modified_array[i+j]\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n                max_sum_index = i + j\n    \n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes an array 'a', its size 'n' and a value 'k' as input and returns the maximum sum of a contiguous array formed by repeating the given array k times.\n    '''\n    \n    # initialize a variable to store the sum of the array\n    max_sum = float('-inf')\n    \n    # iterate over all possible indices of the array\n    for i in range(n - k + 1):\n        \n        # calculate the sum of the repeated array\n        sub_sum = sum(a[i:i+k])\n        \n        # update the maximum sum if necessary\n        max_sum = max(max_sum, sub_sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # find the maximum sum of a contiguous subarray using Kadane's algorithm\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, n):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    # modify the array by repeating it k times\n    modified_array = [a[i] for i in range(k)]\n    for i in range(k - 1):\n        modified_array.append(modified_array[i])\n\n    # find the maximum sum of a contiguous subarray using Kadane's algorithm on the modified array\n    max_modified_so_far = modified_array[0]\n    max_modified_ending_here = modified_array[0]\n\n    for i in range(1, k):\n        max_modified_ending_here = max(modified_array[i], max_modified_ending_here + modified_array[i])\n        max_modified_so_far = max(max_modified_so_far, max_modified_ending_here)\n\n    # find the difference between the maximum sum of a contiguous subarray and the maximum sum of a contiguous subarray on the modified array\n    max_diff = max_modified_so_far - max_so_far\n\n    return max_diff"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i*i\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = list(range(2, n+1, 2))\n    sum_of_squares = sum([x**2 for x in even_numbers])\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 1\n    while count <= n:\n        sum_of_squares += count*count\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 0\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n):\n        count += 1\n        if count % 2 == 0:\n            sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    max_length = max(lengths)\n    max_list = [lst for lst in list1 if len(lst) == max_length]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(sublist) for sublist in lst]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max_lengths[0]:\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max_lengths[0]:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    This function finds the maximum length of a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list) and len(i) < 1000:\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Find the length of the first list in the list of lists\n    length1 = len(list1[0])\n    # Initialize a variable to store the maximum length found so far\n    max_length_found = 0\n    # Loop through each list in the list of lists\n    for i in range(len(list1)):\n        # Find the length of the current list and compare it to the maximum length found so far\n        length2 = len(list1[i])\n        if length2 > max_length_found:\n            max_length_found = length2\n    # Return the list of maximum length\n    return list1[0][:max_length_found]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize max_length to the first list in the list of lists\n    max_length = len(list1[0])\n    \n    # iterate over the rest of the lists in the list of lists\n    for lst in list1[1:]:\n        # find the length of the current list\n        length = len(lst)\n        \n        # update max_length if the length is greater\n        if length > max_length:\n            max_length = length\n    \n    # return the list of maximum length in the list of lists\n    return [x for x in list1[0] if len(x) == max_length]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for item in list1:\n        if len(item) > max(max_lengths, default=0):\n            max_lengths = item\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(max_lengths) == 0:\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a 2D array to store the count of ways of painting the fence for each color combination\n    ways = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    \n    # Initialize the first row and first column of the array to 1\n    ways[0][0] = 1\n    \n    # Iterate through all possible combinations of colors\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            # If the current color is different from the previous color, the fence cannot be painted\n            if i!= j:\n                ways[i][j] = ways[i-1][j]\n            else:\n                # If the current color is the same as the previous color, we can paint the fence either way\n                ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    \n    # Return the count of ways to paint the fence\n    return ways[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize the dictionary to store the count of ways of painting the fence\n    count_dict = {0: 1, 1: 1}\n\n    # Check if the given fence is valid\n    if n < 3 or k < 3:\n        return 0\n    elif n == 3:\n        if k == 2:\n            return 4\n        elif k == 3:\n            return 10\n        else:\n            return 0\n    elif k == 3:\n        return 0\n\n    # Compute the count of ways of painting the fence using dynamic programming\n    for i in range(2, n):\n        for j in range(2, k):\n            if j == 2:\n                count_dict[i] += count_dict[i-1]\n            elif j == 3:\n                count_dict[i] += count_dict[i-1] + count_dict[i-2]\n\n    return count_dict[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a 2D list with size (n+1) x (k+1) and initialize all values to 0\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Fill the first row and first column with 1 (since we need to paint the first and last post with any color)\n    for i in range(1, n+1):\n        dp[i][1] = 1\n    for j in range(1, k+1):\n        dp[1][j] = 1\n        \n    # Fill the rest of the DP table\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            # If the i-th post has color j, then either paint the (i-1)-th post with color j or paint the (i-1)-th post with any other color (since we can only paint at most 2 adjacent posts with the same color)\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    \n    # Return the value in the bottom-right corner of the DP table (which is the number of ways of painting the fence)\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    # base case: if n is 0, then there is only 1 way to paint the fence\n    if n == 0: \n        return 1\n\n    # base case: if k is 0, then there is only 1 way to paint the fence\n    if k == 0: \n        return 0\n\n    # initialize variables to store the count of ways and the last two colors used\n    count = 0\n    last_colors = None\n    curr_colors = None\n\n    # iterate through the fence to calculate the count of ways\n    for i in range(n): \n        # iterate through the available colors to calculate the count of ways\n        for j in range(k): \n            # if the current color is the same as the previous color, then there is only 1 way to paint the fence\n            if curr_colors is not None and curr_colors[j] == last_colors[j]: \n                count += 1\n\n            # update the last colors and current colors\n            last_colors = curr_colors\n            curr_colors = curr_colors[:j] + [curr_colors[j] + 1] + curr_colors[j + 1:]\n\n    # return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D array to store the number of ways for each combination of colors for each post.\n    dp = [[0]*(n+1) for _ in range(k+1)]\n    \n    # Fill the first row and column of the dp array with the number of ways for each combination of colors.\n    for i in range(1, k+1):\n        dp[i][0] = 1\n        dp[0][i] = 1\n    \n    # Fill the rest of the dp array using the recurrence relation.\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            if j % (i+1) == 0:\n                # If the color of the jth post is i, then the number of ways to paint the fence is the sum of the number of ways to paint the fence without the jth post and the number of ways to paint the fence with the (j-i)th post of the same color.\n                dp[i][j] = dp[i-1][j] + dp[i][j-i]\n            else:\n                # If the color of the jth post is not i, then the number of ways to paint the fence is the sum of the number of ways to paint the fence without the jth post and the number of ways to paint the fence with the (j-1)th post of any color.\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    return dp[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an empty dictionary to store the count of ways for each pair of colors\n    ways = {}\n\n    # Iterate through all possible pairs of colors\n    for i in range(k):\n        for j in range(k):\n            # If the colors are different, then check if we have already calculated the count for that pair\n            if i!= j and (i, j) not in ways:\n                # If not, calculate the count of ways recursively\n                ways[(i, j)] = count_no_of_ways(n - 2, k)\n\n    # Return the count of ways for the last color pair\n    return ways[(k - 1, k - 1)]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # The number of ways to paint the fence without adjacent posts having the same color is 2\n    # So, the number of ways to paint the fence with at most 2 adjacent posts having the same color\n    # is n * (n-1)\n    ways_without_adj_same_color = n * (n-1)\n    # The number of ways to paint the fence with at most 2 adjacent posts having the same color\n    # and at most 1 adjacent post having any color is n * (n-1)\n    ways_with_adj_same_color_and_one_adj_any_color = n * (n-1)\n    # The number of ways to paint the fence with at most 2 adjacent posts having the same color\n    # and at most 2 adjacent posts having any color is n * (n-1)\n    ways_with_adj_same_color_and_two_adj_any_color = n * (n-1)\n    \n    # The number of ways to paint the fence with at most k adjacent posts having any color\n    # is n! / (n-1) * n * (n-1)\n    # Since n! can be very large, we are going to use the factorial function from math module\n    # to calculate the number of ways\n    factorial = math.factorial(n)\n    ways_with_k_adj_any_color = factorial // (factorial - (n-1)) * n * (n-1)\n    \n    # The total number of ways to paint the fence is the sum of the above three cases\n    total_ways = ways_without_adj_same_color + ways_with_adj_same_color_and_one_adj_any_color + ways_with_adj_same_color_and_two_adj_any_color + ways_with_k_adj_any_color\n    \n    return total_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, count, color):\n        if count == 0:\n            count_list.append(color)\n            return\n\n        if start >= n:\n            return\n\n        for i in range(k):\n            if count_list and color == count_list[-1]:\n                continue\n\n            backtrack(start + 1, count + 1, i)\n            backtrack(start + 1, count, i)\n\n    count_list = []\n    backtrack(0, 0, 0)\n    return len(set(count_list))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Helper function to check if adjacent colors are same\n    def is_same_color(color, next_color):\n        if next_color == color:\n            return True\n        if next_color == 1:\n            return next_color == k\n        return False\n    \n    # Helper function to count the number of ways\n    def count_ways(color, i, j):\n        if i == n-1:\n            return 1\n        if is_same_color(color, fence[i+1][j]):\n            return count_ways(color, i+1, j)\n        return count_ways(color, i+1, j) + count_ways(color, i, j+1)\n    \n    # Initialize the fence with all colors\n    fence = [[0]*k for _ in range(n)]\n    fence[0][0] = 1\n    fence[0][-1] = 1\n    \n    # Count the number of ways using the helper functions\n    count = 0\n    for i in range(n):\n        for j in range(k):\n            count += count_ways(j, i, j)\n    \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base cases\n    if n == 1:\n        return 1\n    elif k == 1:\n        return 1\n    elif n == 2 and k == 2:\n        return 2\n    elif n == 2 and k == 1:\n        return 1\n    \n    # recursive case\n    num_ways = 0\n    for i in range(1, n//2+1):\n        num_ways += count_no_of_ways(n-2*i, k)\n    \n    return num_ways"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n/m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    return (n//m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_a = math.sqrt(w**2 + h**2)\n    side_b = math.sqrt(w**2 - h**2)\n    side_c = w - side_b - side_a\n    return side_c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Use the Pythagorean theorem to calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    # Find the angle of the triangle using the law of cosines\n    angle = math.acos((w**2 + h**2 - s**2) / (2 * w * h))\n    # Calculate the third side of the triangle using the given angle and hypotenuse\n    third_side = hypotenuse * math.sin(angle / 2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = math.sqrt(w**2 + h**2)\n    return area"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the right angled triangle\n    s = (w + h) / 2\n    # Calculate the square root of the semi-perimeter\n    s_sqrt = math.sqrt(s)\n    # Calculate the third side of the right angled triangle\n    third_side = w * s_sqrt\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # calculate the area of the triangle\n    A = math.sqrt(s * (s-w) * (s-h))\n    \n    # calculate the length of the third side\n    third_side = A / math.sin(math.degrees(math.acos((w**2 + h**2 - A**2) / (2 * w * h))))\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Finding the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Using the Pythagorean theorem to find the hypotenuse\n    hypotenuse = math.sqrt(s * (s - w) * (s - h))\n\n    # Returning the third side\n    return hypotenuse"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the second side\n    s = math.sqrt(w ** 2 + h ** 2)\n    # calculate the third side\n    third_side = math.sqrt(s ** 2 - (w / 2) ** 2)\n    # return the value of third_side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return round(s, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        max1 = max_val(listval[:len(listval)//2])\n        max2 = max_val(listval[len(listval)//2:])\n        return max(max1, max2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to the first value in the list\n    max_val = listval[0]\n    # iterate through the list, comparing each value to the current maximum\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value to first element of list\n    max_val = listval[0]\n\n    # iterate over remaining elements of list\n    for i in range(1, len(listval)):\n        # compare current element with max value\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    # return max value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list as an argument and returns the maximum value in it.\n    '''\n    max_value = float('-inf')\n    for item in listval:\n        if item > max_value:\n            max_value = item\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        return None\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n\n    :param listval: A list of values.\n    :return: The maximum value in the list.\n    \"\"\"\n    if not listval:\n        return None\n\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to the first element of the list\n    max_val = listval[0]\n    # Loop through the list\n    for val in listval:\n        # If the current value is greater than the maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum_div = 0\n\n    # Iterate over all numbers from 1 to the square root of the given number\n    for i in range(1, int(number**0.5) + 1):\n        # If the given number is divisible by i, add it to the sum variable\n        if number % i == 0:\n            sum_div += i\n    \n    # Return the sum of all divisors of the given number\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n\nprint(sum_div(28)) # Output: 257"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sort(arr):\n    \"\"\"\n    Merge Sort function to sort an array.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    return merge(left_half, right_half)\n\n\ndef merge(left_half, right_half):\n    \"\"\"\n    Merge function to merge two sorted arrays.\n    \"\"\"\n    merged_arr = []\n    i = j = 0\n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] <= right_half[j]:\n            merged_arr.append(left_half[i])\n            i += 1\n        else:\n            merged_arr.append(right_half[j])\n            j += 1\n    merged_arr += left_half[i:]\n    merged_arr += right_half[j:]\n    return merged_arr\n\n\ndef get_Inv_Count(arr):\n    \"\"\"\n    Counts the inversions in an array using merge sort.\n    \"\"\"\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    i = 0\n    j = len(sorted_arr) - 1\n    while i < j:\n        if sorted_arr[i] > sorted_arr[j]:\n            inv_count += j - i + 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversions are counted as negative and are included in the count.\n    '''\n\n    # check if array is empty\n    if len(arr) == 0:\n        return 0\n\n    # partition the array into two sub-arrays\n    left = [x for x in arr if x < arr[0]]\n    right = [x for x in arr if x >= arr[0]]\n\n    # recursively count inversions in each sub-array\n    inv_count = get_Inv_Count(left) + get_Inv_Count(right)\n\n    # count inversions in the original array\n    for i in range(1, len(arr)):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n    for i in range(1, n): \n        inv_count += count_Inversions(arr, 0, i) \n    return inv_count \n\n\ndef count_Inversions(arr, low, high): \n    '''\n    Recursive function to count inversions in an array.\n    '''\n    if low == high: \n        return 0 \n    else: \n        inv_count = 0 \n        mid = (low + high) // 2 \n        inv_count += count_Inversions(arr, low, mid) \n        inv_count += count_Inversions(arr, mid + 1, high) \n        inv_count += merge_sort(arr, low, high) \n        return inv_count \n\n\ndef merge_sort(arr, low, high): \n    '''\n    Recursive function to merge sort an array.\n    '''\n    if low < high: \n        mid = (low + high) // 2 \n        merge_sort(arr, low, mid) \n        merge_sort(arr, mid + 1, high) \n        merge(arr, low, mid, high) \n    return 0 \n\n\ndef merge(arr, low, mid, high): \n    '''\n    Recursive function to merge two sorted arrays.\n    '''\n    n1 = mid - low + 1 \n    n2 = high - mid \n    left = [0] * n1 \n    right = [0] * n2 \n    for i in range(n1): \n        left[i] = arr[low + i] \n    for j in range(n2): \n        right[j] = arr[mid + 1 + j] \n    i = 0 \n    j = 0 \n    k = low \n    while i < n1 and j < n2: \n        if left[i] <= right[j]: \n            arr[k] = left[i] \n            i += 1 \n        else: \n            arr[k] = right[j] \n            inv_count += n1 - i \n            j += 1 \n        k += 1 \n    while i < n1: \n        arr[k] = left[i] \n        i += 1 \n        k += 1 \n    while j < n2: \n        arr[k] = right[j] \n        j += 1 \n        k += 1 "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # sort the array in ascending order\n    arr.sort()\n    # count inversions\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (n-i) - (j-i)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables to store the number of inversions\n    inv_count = 0\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate through the array until the two pointers meet\n    while left < right:\n\n        # If the elements at the left and right pointers are in the correct order\n        if arr[left] <= arr[right]:\n\n            # Move the left pointer to the right\n            left += 1\n\n        else:\n\n            # Count the number of inversions and move the pointers\n            inv_count += (right - left + 1)\n            left += 1\n            right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += n - j \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n\n    # Create a copy of the array to avoid modifying the original\n    arr_copy = arr.copy()\n\n    # Helper function to sort the array in ascending order\n    def sort_array(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = sort_array(arr[:mid])\n        right = sort_array(arr[mid:])\n        return merge(left, right)\n\n    # Helper function to merge two sorted arrays\n    def merge(left, right):\n        i = j = k = 0\n        merged = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n        merged += left[i:]\n        merged += right[j:]\n        return merged\n\n    # Sort the array in ascending order\n    arr_copy = sort_array(arr_copy)\n\n    # Count the number of inversions\n    inv_count = 0\n    for i in range(1, len(arr_copy)):\n        if arr_copy[i] < arr_copy[i-1]:\n            inv_count += len(arr_copy) - i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    # sort the array\n    arr.sort()\n    inv_count = 0\n    # iterate through the array and count inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += len(arr) - j - 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened structure\n    flattened_list = []\n    # Loop through each element in the given list\n    for element in list1:\n        # If the element is a list, recursively call the flatten_list function\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        # Otherwise, append the element to the flattened list\n        else:\n            flattened_list.append(element)\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a list as input and returns a flattened version of the list.\n    If a list contains another list, it will be recursively flattened as well.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n\n    Parameters:\n    - lst: A nested list structure.\n\n    Returns:\n    - A flattened version of the input list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_max = defaultdict(int)\n    for item in stdata:\n        for product, price in item:\n            aggregate_max[product] += price\n    max_price = max(aggregate_max.values())\n    return max_price"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for customer, order_items in stdata:\n        for item, quantity in order_items:\n            max_aggr[item] += quantity\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the count of each item in the dictionary\n    item_count = defaultdict(int)\n\n    # loop through the list of tuples and update the count of each item\n    for item, quantity in stdata:\n        item_count[item] += quantity\n\n    # find the maximum value in the dictionary\n    max_val = max(item_count.values())\n\n    # loop through the dictionary and calculate the total amount spent\n    total_spent = 0\n    for item, quantity in stdata:\n        total_spent += quantity * item_count[item]\n\n    # return the maximum aggregate\n    return total_spent / max_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the count of each item in the list\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples and update the count of each item\n    for item, price in stdata:\n        item_count[item] += price\n\n    # Find the maximum count\n    max_count = max(item_count.values())\n\n    # Initialize a variable to store the maximum aggregate\n    max_aggregate = 0\n\n    # Iterate through the item_count dictionary and update max_aggregate if the count is greater than max_count\n    for count in item_count.values():\n        if count > max_count:\n            max_aggregate = count\n\n    # Return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggs = defaultdict(int)\n    for st, ag in stdata:\n        max_aggs[st] = max(max_aggs[st], ag)\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each item in the list\n    max_aggs = defaultdict(int)\n\n    # iterate over the list of tuples\n    for item, price in stdata:\n        # update the max aggregate for this item\n        max_aggs[item] = max(price, max_aggs[item])\n\n    # find the maximum aggregate\n    max_agg = max(max_aggs.values())\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each transaction\n    transaction_count = defaultdict(int)\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Extract the transaction id and aggregate\n        transaction_id, aggregate = item\n        # Increment the count of the transaction id\n        transaction_count[transaction_id] += 1\n    # Calculate the maximum aggregate\n    max_agg = max(transaction_count, key=transaction_count.get)\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Use defaultdict to store the maximum aggregate for each month\n    month_agg = defaultdict(int)\n\n    # Iterate through the list of tuples and update the max_aggregate for each month\n    for month, agg in stdata:\n        month_agg[month] = agg\n\n    # Find the maximum aggregate for each month\n    max_agg = max(month_agg.values())\n\n    # Return the maximum aggregate for each month\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_dict = defaultdict(int)\n    for item in stdata:\n        max_aggregate_dict[item[0]] += item[1]\n    max_aggregate_list = max_aggregate_dict.items()\n    max_aggregate_list = sorted(max_aggregate_list, key=lambda x: x[1], reverse=True)\n    return max_aggregate_list[0][0]\n\nif __name__ == \"__main__\":\n    # Sample test case\n    stdata = [(1, 50), (2, 60), (3, 70), (4, 80), (5, 90)]\n    print(max_aggregate(stdata)) # Output: 5"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    max_aggr[0] = stdata[0][1]\n    for data in stdata:\n        max_aggr[data[0]] = max(max_aggr[data[0]], data[1])\n    return max(max_aggr.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(i)[-n:].zfill(n)\n        if sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = format(i, '0{}b'.format(2*n))\n        sum_first_n = sum([int(bit) for bit in binary[:n]])\n        sum_last_n = sum([int(bit) for bit in binary[n:]])\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        if i < 2**n-1:\n            # check if first n bits are equal to last n bits\n            if i % 2 == 0:\n                if (i % 2**n) == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n)\n        if sum(seq[:n]) == sum(seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        if i > 0:\n            if i < (2**n) // 2:\n                sum_first_n = (i + (2**n) // 2) // 2\n            else:\n                sum_first_n = i - (2**n) // 2\n            sum_last_n = i % 2**n\n        else:\n            sum_first_n = i\n            sum_last_n = i\n        \n        if sum_first_n == sum_last_n:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(1,2**n):\n        for j in range(i,2**(2*n)):\n            if i&j == 0:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    # Function to check if the sum of first n bits is same as the sum of last n bits\n    def check_sum(num, n):\n        sum = 0\n        for i in range(n):\n            sum += num % 2\n            num = num >> 1\n        return sum\n\n    # Function to find the count of binary sequences of length 2n\n    def count(n):\n        count = 0\n        for i in range(2**n):\n            binary = bin(i)[2:]\n            if check_sum(int(binary, 2), n) == n:\n                count += 1\n        return count\n\n    # Calling the count function with the given value of n\n    return count(n)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**(2*n)):\n        num = bin(i)[2:].zfill(2*n)\n        if sum(num[:n]) == sum(num[-n:]):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2 ** n - 1):\n        sum_1 = 0\n        sum_2 = 0\n        for j in range(n):\n            if (i >> j) & 1 == 1:\n                sum_1 += j + 1\n        for k in range(n, 2 * n):\n            if (i >> k) & 1 == 1:\n                sum_2 += k - n\n        if sum_1 == sum_2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def binary_seq(n):\n        return [format(i, '0{}b'.format(n)) for i in range(2 ** n)]\n\n    count = 0\n    for seq in binary_seq(2 * n):\n        count += 1\n        if int(seq[:n]) == int(seq[-n:]):\n            count += 1\n\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        depth = 1 + max(map(dict_depth, d.values()))\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            if depth > 1:\n                break\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth to 0\n    depth = 0\n    # Loop through each key-value pair in the dictionary\n    for key, value in d.items():\n        # Check if the value is a dictionary\n        if isinstance(value, dict):\n            # If so, increase the depth by 1\n            depth += 1\n        # If not, the value is the final value, so set depth to 1\n        else:\n            depth = 1\n    # Return the depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n                else:\n                    continue\n        else:\n            continue\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            if depth > 1:\n                return depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth += 1\n        for key, value in d.items():\n            depth = max(depth, dict_depth(value, depth))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize a depth counter variable to 0\n    depth = 0\n    # loop through each key in the dictionary\n    for key in d.keys():\n        # if the key is a dictionary, recursively call the function with the value\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n        # if the key is a list, recursively call the function with each item in the list\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item))\n        # otherwise, increment the depth counter\n        else:\n            depth += 1\n    # return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth\n    depth = 0\n\n    # Recursively call the function on all the values in the dictionary\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            pass\n\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, the number of rotations and the index of the element to be found.\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Get the element at the given index\n    element = arr[index]\n\n    # Check if the element is in any range\n    for range_ in ranges:\n        if range_[0] <= element <= range_[1]:\n            # Check if the element is in the second or later rotation\n            if range_[0] <= element <= range_[1] and index in range_[2]:\n                # Calculate the element after the specified number of rotations\n                element = arr[(index - 1 - rotations) % len(arr)]\n                break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges, a list of rotations, and an index.\n    It returns the element at the given index after the number of rotations.\n    '''\n    for i in range(len(ranges)):\n        if index >= ranges[i][0]:\n            index -= ranges[i][1]\n        elif index == ranges[i][0] - 1:\n            return arr[index + rotations[i]]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of rotations and an index as input.\n    It returns the element at the given index after rotating the array by the given rotations.\n    '''\n\n    # Perform rotations\n    for i in range(rotations):\n        j = 0\n        while j < len(arr) - 1:\n            arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            j += 1\n\n    # Get the element at the given index\n    element = arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of possible rotations, and an index\n    as input. It then returns the element at the given index after rotations.\n    '''\n    # Find the number of rotations required to reach the index\n    rotations = [0] + rotations\n    rotations.sort(reverse=True)\n    count = 0\n    for i in range(1, len(rotations)):\n        if rotations[i] <= index:\n            count += rotations[i] - rotations[i-1]\n        else:\n            break\n\n    # Rotate the array by the required number of rotations\n    for _ in range(count):\n        arr = arr[1:] + arr[0:1]\n\n    # Find the element at the required index\n    if index < len(arr):\n        return arr[index]\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a number of rotations, and an index as input.\n    It returns the element at the given index after the number of rotations.\n    \"\"\"\n\n    # Initialize the current index to the given index\n    current_index = index\n\n    # Iterate over the rotations number of times\n    for _ in range(rotations):\n        # Initialize a list to store the elements in the current range\n        current_range = []\n\n        # Iterate over the range and append elements to the current range\n        for i in range(len(ranges)):\n            start, end = ranges[i]\n            if start <= current_index <= end:\n                current_range.append(arr[start])\n                current_range.append(arr[end])\n        # Shuffle the elements in the current range\n        current_range = sorted(set(current_range))\n        # Extract the element at the current index from the shuffled range\n        current_element = current_range[current_index - ranges[0][0]]\n\n        # Find the index of the current element in the original array\n        original_index = current_index - ranges[0][0]\n        for i in range(len(arr)):\n            if arr[i] == current_element:\n                original_index = i\n                break\n\n        # Update the current index to the original index\n        current_index = original_index\n\n        # Shuffle the original array\n        arr = shuffle(arr)\n\n    # Return the element at the given index after the number of rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in four arguments:\n    arr: The list of integers representing the array.\n    ranges: The list of ranges that define the rotations.\n    rotations: The number of rotations to perform.\n    index: The index of the element to find.\n\n    The function returns the element at the given index after performing the given number of rotations.\n    \"\"\"\n    n = len(arr)\n\n    for _ in range(rotations):\n        arr = rotate_array(arr, ranges)\n\n    return arr[index]\n\n\ndef rotate_array(arr, ranges):\n    \"\"\"\n    This function takes in two arguments:\n    arr: The list of integers representing the array.\n    ranges: The list of ranges that define the rotations.\n\n    The function returns the rotated array.\n    \"\"\"\n    n = len(arr)\n    rotated_arr = arr.copy()\n\n    for i in range(n):\n        for j in range(len(ranges)):\n            if i in ranges[j]:\n                for k in range(j, len(ranges)):\n                    if ranges[k][0] > i:\n                        ranges[k][0] += n\n                        break\n\n    for i in range(n):\n        if i not in ranges[0]:\n            for j in range(len(ranges) - 1, -1, -1):\n                if ranges[j][1] >= i:\n                    break\n            else:\n                continue\n            k = 0\n            while ranges[j][1] - i + 1 + k < n:\n                rotated_arr[i + k] = arr[ranges[j][1] - i + 1 + k]\n                k += 1\n            rotated_arr[i + k] = arr[i]\n\n    return rotated_arr"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes the array, ranges, rotations and index as input parameters. \n    It finds the element at the given index after number of rotations. \n    The array and the rotations are passed as input, so that the function can be easily integrated with other parts of the code.\n    '''\n\n    # Find the element at the given index\n    element = arr[index]\n\n    # Find the element after rotations\n    count = 0\n    temp_index = index\n    while count < rotations:\n        count += 1\n        temp_index = (temp_index + ranges[count % len(ranges)]) % len(arr)\n        element = arr[temp_index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the number of rotations required to reach the given index.\n    for i in range(len(arr)):\n        if arr[i] == index:\n            break\n        elif arr[i] > index:\n            rotations += 1\n        else:\n            break\n\n    # Apply the number of rotations to get the final index.\n    for i in range(len(arr)):\n        if rotations % 2 == 0:\n            index -= arr[i]\n        else:\n            index += arr[i]\n        rotations //= 2\n\n    # Find the element at the final index.\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the current element\n    current_element = arr[index]\n\n    # Find the rotation number of the current element\n    rotation_number = 1\n    while rotation_number <= rotations:\n        if rotation_number == rotations:\n            # If the current element is the last element in the range, return the element at the given index\n            if index < len(ranges[ranges.index(current_element)]):\n                return arr[ranges.index(current_element)][index]\n            else:\n                # If the current element is not the last element in the range, return the current element\n                return current_element\n        else:\n            # If the current element is not the last element in the range, move to the next rotation\n            index = ranges.index(current_element) + 1\n            if index < len(ranges[ranges.index(current_element)]):\n                current_element = arr[ranges.index(current_element)][index]\n                rotation_number += 1\n            else:\n                current_element = arr[ranges.index(current_element)][-1]\n                rotation_number += 1\n\n    # If the current element is not found after rotations, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Function to find element after rotations\n    def rotate_right(arr, d):\n        n = len(arr)\n        for i in range(0, n // 2):\n            temp = arr[i]\n            arr[i] = arr[n-i-1]\n            arr[n-i-1] = temp\n        return arr\n    \n    # Apply rotations and return element at index\n    for i in range(rotations):\n        arr = rotate_right(arr, ranges[i])\n    return arr[index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern for checking if the word starts with 'p'\n    pattern = re.compile(r'p\\w+')\n    # Loop through the list of words and check if they start with 'p' using the regular expression pattern\n    for word in words:\n        if pattern.match(word):\n            # If a word starts with 'p', return two words starting with 'p'\n            return [word for word in words if word.startswith('p')][:2]\n    # If no words start with 'p', return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = re.findall(r'\\b[Pp]\\w*\\b',''.join(words))\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = pattern.findall(words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern for matching words starting with 'p'\n    pattern = re.compile(r'^p.*')\n    # Use pattern.findall() to find all words starting with 'p'\n    result = pattern.findall(words)\n    # Return the first two words found\n    if len(result) > 1:\n        return result[0], result[1]\n    elif len(result) == 1:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w+$')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)-1):\n        if words[i].startswith('p') and words[i+1].startswith('p'):\n            return words[i], words[i+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define regular expression pattern to match words starting with letter 'p'\n    pattern = re.compile(r'^p\\w+')\n    \n    # loop through the list of words and find words starting with 'p'\n    for word in words:\n        if pattern.match(word):\n            # return the two words starting with 'p'\n            return word, word\n    \n    # if no words starting with 'p' are found, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    if len(matches) >= 2:\n        return matches[0], matches[1]\n    else:\n        return \"No words starting with 'p' found.\""
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n    \n    for i in range(index, n + 1):\n        for j in range(i, min(n, i + k) + 1):\n            dp[j] = max(dp[j], dp[i] + a[j - 1])\n        \n        max_sum = max(max_sum, dp[i])\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == 0:\n        if a[0] > k:\n            return a[0]\n        else:\n            return 0\n    else:\n        if a[index] > a[index - 1]:\n            return a[index] + max_sum_increasing_subseq(a, n, index - 1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index - 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize an array to store the maximum sum of increasing subsequence for each prefix\n    dp = [0] * (n + 1)\n\n    # Initialize a variable to store the maximum sum\n    max_sum = 0\n\n    # Iterate through the prefix from the first to the kth index\n    for i in range(1, k + 1):\n        # Update the dp array by taking the maximum sum of the current sum and the sum of the current element\n        dp[i] = max(dp[i-1] + a[i-1], dp[i-2] + a[i-2])\n\n    # Iterate through the prefix from the kth index to the n-1 index\n    for i in range(k, n):\n        # Update the dp array by taking the maximum sum of the current sum and the sum of the current element\n        dp[i] = max(dp[i-1] + a[i-1], dp[i-2] + a[i-2])\n\n    # Update the max_sum variable with the maximum sum of the dp array\n    max_sum = max(max_sum, dp[n])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize maximum sum\n    max_sum = float('-inf')\n\n    # Initialize current subsequence sum\n    curr_sum = 0\n\n    # Initialize current index\n    curr_index = 0\n\n    # Initialize the list of subsequences\n    subseq_list = []\n\n    # Traverse through the array\n    for i in range(index, n):\n\n        # Check if the current element is greater than k\n        if a[i] > k:\n\n            # Calculate the maximum sum of increasing subsequence from prefix until i\n            temp_sum = curr_sum + a[i]\n\n            # Update the maximum sum if the current sum is greater\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n\n            # Update the current subsequence sum\n            curr_sum = temp_sum\n\n            # Update the current index\n            curr_index = i\n\n            # Create a new subsequence list\n            subseq_list = [a[index]]\n\n            # Traverse through the remaining array from i+1\n            for j in range(i+1, n):\n\n                # Check if the current element is greater than k and less than the current element\n                if a[j] > k and a[j] < a[i]:\n\n                    # Calculate the maximum sum of increasing subsequence from prefix until i and including a[j]\n                    temp_sum = curr_sum + a[j]\n\n                    # Update the maximum sum if the current sum is greater\n                    if temp_sum > max_sum:\n                        max_sum = temp_sum\n\n                    # Update the current subsequence sum\n                    curr_sum = temp_sum\n\n                    # Update the current index\n                    curr_index = j\n\n                    # Add a[j] to the subsequence list\n                    subseq_list.append(a[j])\n\n            # Check if the current subsequence sum is greater than the maximum sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n                # Update the subsequence list\n                subseq_list.append(a[index])\n\n        # Check if the current element is not greater than k\n        else:\n\n            # Calculate the maximum sum of increasing subsequence from prefix until i\n            temp_sum = curr_sum + a[i]\n\n            # Update the maximum sum if the current sum is greater\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n\n            # Update the current subsequence sum\n            curr_sum = temp_sum\n\n            # Update the current index\n            curr_index = i\n\n            # Create a new subsequence list\n            subseq_list = [a[index]]\n\n            # Traverse through the remaining array from i+1\n            for j in range(i+1, n):\n\n                # Check if the current element is greater than k and less than the current element\n                if a[j] > k and a[j] < a[i]:\n\n                    # Calculate the maximum sum of increasing subsequence from prefix until i and including a[j]\n                    temp_sum = curr_sum + a[j]\n\n                    # Update the maximum sum if the current sum is greater\n                    if temp_sum > max_sum:\n                        max_sum = temp_sum\n\n                    # Update the current subsequence sum\n                    curr_sum = temp_sum\n\n                    # Update the current index\n                    curr_index = j\n\n                    # Add a[j] to the subsequence list\n                    subseq_list.append(a[j])\n\n            # Check if the current subsequence sum is greater than the maximum sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n                # Update the subsequence list\n                subseq_list.append(a[index])\n\n    return max_sum, subseq_list\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n:\n        return 0\n    \n    if index > 0:\n        a[index] += a[index - 1]\n    \n    if index == k:\n        return a[index]\n    \n    max_sum = max_sum_increasing_subseq(a, n, index + 1, k)\n    \n    if index > 0 and a[index] > a[index - 1]:\n        return max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n    \n    return max_sum\n    "
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > n:\n        return 0\n\n    if index == 0:\n        return a[0] * k\n\n    if a[index] > a[index - 1] or k > index:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] * (index + 1))\n    else:\n        return max_sum_increasing_subseq(a, n, index - 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    # Initialize the maximum sum of increasing subsequence till i-1\n    dp = [0] * n\n    \n    # Traverse the array from i to n-1\n    for i in range(index, n):\n        # If the current element is greater than k, then the maximum sum of increasing subsequence till i-1 is either dp[i-1] or dp[i-1] + a[i]\n        dp[i] = max(dp[i-1], dp[i-1] + a[i])\n        \n        # If the current element is not greater than k, then the maximum sum of increasing subsequence till i-1 is either dp[i-1] or dp[i-1] + a[i] + a[k]\n        if i < k:\n            dp[i] = max(dp[i], dp[i-1] + a[i] + a[k])\n    \n    # Return the maximum sum of increasing subsequence from prefix until ith index\n    return max(dp[index])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create an array to store the maximum sum of increasing subsequences\n    max_sum_array = [0] * n\n\n    # Initialize the maximum sum of increasing subsequences for all indices to zero\n    for i in range(n):\n        max_sum_array[i] = 0\n\n    # Initialize the maximum sum of increasing subsequences for all prefixes to zero\n    for i in range(index):\n        max_sum_array[i] = 0\n\n    # Initialize the maximum sum of increasing subsequences for the prefix until i-1 to zero\n    for i in range(index - 1, -1, -1):\n        if a[i] <= k:\n            max_sum_array[i] = max(max_sum_array[i + 1] + a[i], max_sum_array[i])\n        else:\n            max_sum_array[i] = max_sum_array[i + 1]\n\n    # Find the maximum sum of increasing subsequences from the index until k\n    max_sum = max_sum_array[index]\n\n    # Return the maximum sum of increasing subsequences from the index until k\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return a[k]\n    if index == 0:\n        return 0\n    if index == 1:\n        return max(a[0], a[1])\n    if index == 2:\n        return max(a[0], a[1], a[2])\n    dp = [0] * (n + 1)\n    dp[0] = a[0]\n    dp[1] = max(a[0], a[1])\n    dp[2] = max(a[0], a[1], a[2])\n    for i in range(3, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2], dp[i - 3]) + a[i - 1]\n    return max(dp[k])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    \n    # Initialize the maximum sum to zero and the current subsequence sum to zero\n    max_sum = 0\n    curr_sum = 0\n    \n    # Loop through all the indices from 0 to i-1\n    for i in range(index):\n        # If the current element is less than or equal to k, add it to the current subsequence sum\n        if a[i] <= k:\n            curr_sum += a[i]\n        # Else, update the maximum sum if the current subsequence sum is greater than the maximum sum found so far\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n        # Reset the current subsequence sum to zero if the current element is greater than k\n        else:\n            curr_sum = 0\n            \n    # Add the last kth element to the current subsequence sum\n    curr_sum += k\n    \n    # Update the maximum sum if the current subsequence sum is greater than the maximum sum found so far\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # get the length of the tuple\n    length = len(tuplex)\n    \n    # create a list of the colon indices\n    colons = []\n    for i in range(m):\n        colons.append(length*i)\n        \n    # create a colon of the tuple\n    colon = []\n    for i in colons:\n        colon.append(tuplex[i])\n        \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deepcopy of the tuple to avoid modifying it\n    tuplex = deepcopy(tuplex)\n    # Add a colon to the tuple\n    tuplex += (None,) * (m - len(tuplex))\n    # Return the colon\n    return tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Deep copy the tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Get the index of the colon\n    colon_idx = m + n - 1\n    \n    # Reverse the tuple\n    tuplex_copy = tuplex_copy[::-1]\n    \n    # Slice the tuple\n    colon_tuplex = tuplex_copy[colon_idx]\n    \n    # Return the colon tuple\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copying the tuple to avoid any errors\n    tuplex = deepcopy(tuplex)\n\n    # Getting the number of elements in the tuple\n    length = len(tuplex)\n\n    # Getting the index of the last element of the colon\n    last_index = length - (m+1)\n\n    # Getting the colon\n    colon = tuplex[last_index:last_index+n]\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            tuplex_copy = tuplex_copy[:i] + (tuplex_copy[i],) + tuplex_copy[i+1:]\n    return tuple(tuplex_copy)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple to avoid modifying original\n    colon = deepcopy(tuplex)\n\n    # Get the length of the tuple\n    length = len(colon)\n\n    # Set the length of the colon to m+n-1\n    colon_length = m + n - 1\n\n    # Check if the length of the colon is less than or equal to the length of the tuple\n    if colon_length > length:\n        # If not, append zeros to the colon\n        colon += tuple([0] * (colon_length - length))\n    else:\n        # If yes, truncate the colon to m+n-1\n        colon = colon[:m+n-1]\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): A tuple of integers.\n        m (int): The row number of the first element of the colon.\n        n (int): The column number of the first element of the colon.\n\n    Returns:\n        tuple: A tuple containing the elements of the colon.\n    \"\"\"\n    # Get the number of elements in the tuple\n    n_elements = len(tuplex)\n\n    # Create a new tuple of length n_elements\n    colon_tup = tuple(range(n_elements))\n\n    # Shuffle the elements of the colon_tup\n    for i in range(m):\n        for j in range(n, n+n_elements):\n            colon_tup[j], colon_tup[j+1] = colon_tup[j+1], colon_tup[j]\n\n    # Return the colon_tup\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    t = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(t)\n    # Initialize the output tuple\n    colon = []\n    # Loop through the tuple\n    for i in range(length):\n        # Get the current element of the tuple\n        current_element = t[i]\n        # Check if the element is a tuple or not\n        if isinstance(current_element, tuple):\n            # If it is a tuple, then add the elements of the tuple to the colon\n            colon.extend(current_element)\n            # Check if the length of the colon is greater than m\n            if len(colon) > m:\n                # If it is, then add the last element of the colon to the colon\n                colon.append(t[i+1])\n                # Break the loop\n                break\n        else:\n            # If the element is not a tuple, then append it to the colon\n            colon.append(current_element)\n            # Check if the length of the colon is greater than m\n            if len(colon) > m:\n                # If it is, then break the loop\n                break\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the original tuple\n    tuplex = deepcopy(tuplex)\n\n    # Get the number of elements in the original tuple\n    num_elems = len(tuplex)\n\n    # Get the number of elements in each row\n    num_rows = num_elems // m\n    # Get the remaining elements in each row\n    remaining = num_elems % m\n\n    # If the number of remaining elements is greater than 0, then there is\n    # still one row left with less than m elements\n    if remaining > 0:\n        num_rows += 1\n\n    # Initialize an empty list to store the colon\n    colon = []\n\n    # Iterate over each row in the colon\n    for row in range(num_rows):\n        # Create an empty list to store the row\n        row_list = []\n\n        # Iterate over each element in the current row\n        for col in range(m):\n            # If there are any remaining elements, then choose the first element\n            # and remove it from the original tuple\n            if remaining > 0:\n                elem = tuplex.pop(0)\n            # If there are no remaining elements, then choose the first element\n            # from the original tuple and remove it\n            else:\n                elem = tuplex.pop(0)\n                remaining = num_elems\n\n            # Add the chosen element to the row list\n            row_list.append(elem)\n\n        # Add the row list to the colon list\n        colon.append(row_list)\n\n    # If there are any remaining elements, then there is a single row with less\n    # than m elements\n    if remaining > 0:\n        # Create an empty list to store the row\n        row_list = []\n\n        # Iterate over each element in the current row\n        for col in range(remaining):\n            # Choose the first element and remove it from the original tuple\n            elem = tuplex.pop(0)\n\n            # Add the chosen element to the row list\n            row_list.append(elem)\n\n        # Add the row list to the colon list\n        colon.append(row_list)\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The input should be a tuple.\")\n    # check if the length of the tuple is greater than or equal to m\n    if len(tuplex) < m:\n        raise ValueError(\"The length of the tuple should be greater than or equal to m.\")\n    # check if the length of the tuple is less than or equal to n\n    if len(tuplex) > n:\n        raise ValueError(\"The length of the tuple should be less than or equal to n.\")\n    # copy the tuple to avoid modifying the original one\n    tuplex = deepcopy(tuplex)\n    # loop through the tuple and get the appropriate colon\n    colon = []\n    for i in range(m):\n        colon.append(tuplex[i])\n    # add a colon to the end of the colon\n    colon.append(':')\n    # return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N % 2 == 0:\n        print(\"Error: N must be odd for this function to work.\")\n        return\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_products = []\n    for i in range(N // 2):\n        largest_products.append(nums1[i] * nums2[i])\n\n    return largest_products\n"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # initialize the largest product list\n    largest_products = []\n    # loop through the number of products to find\n    for i in range(N):\n        # find the largest product between the two lists\n        largest_product = max(nums1[i] * nums2[i], nums1[i] * largest_products[-1], nums2[i] * largest_products[-1])\n        # add the largest product to the list\n        largest_products.append(largest_product)\n    # return the largest product list\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        largest1 = max(nums1)\n        largest2 = max(nums2)\n        product1 = largest1 * largest2\n        max_products.append(product1)\n        nums1.remove(largest1)\n        nums2.remove(largest2)\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 > num2:\n                max_product = num1 * num2\n            else:\n                max_product = num2 * num1\n            max_products.append(max_product)\n    max_products.sort(reverse=True)\n    return max_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max1 = max2 = float('-inf')\n    for i in range(N):\n        if nums1[i] > max1:\n            max2 = max1\n            max1 = nums1[i]\n        elif nums1[i] > max2:\n            max2 = nums1[i]\n    for i in range(N):\n        if nums2[i] > max1:\n            max2 = max1\n            max1 = nums2[i]\n        elif nums2[i] > max2:\n            max2 = nums2[i]\n    result = max1 * max2\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in each list\n    max_num1 = max(nums1)\n    max_num2 = max(nums2)\n\n    # Initialize two variables to store the largest products\n    max_product1 = 0\n    max_product2 = 0\n\n    # Loop through each possible combination of factors and find the largest product\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            # Check if the combination is valid\n            if i + j > N:\n                break\n            # Calculate the product of the i-th largest number in nums1 and the j-th largest number in nums2\n            product = nums1[max_num1-i]*nums2[max_num2-j]\n            # Update the largest product variables if necessary\n            if product > max_product1:\n                max_product2 = max_product1\n                max_product1 = product\n            elif product > max_product2:\n                max_product2 = product\n\n    # Return the largest products\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables for the largest products found so far\n    max_prod1 = float('-inf')\n    max_prod2 = float('-inf')\n    max_prod3 = float('-inf')\n    \n    # Loop through the two lists\n    for i in range(N):\n        # Calculate the product of the two lists with a factor from nums1\n        prod1 = nums1[i] * nums2[i]\n        \n        # Calculate the product of the two lists with a factor from nums2\n        prod2 = nums2[i] * nums1[i]\n        \n        # Update the largest products found so far\n        max_prod1 = max(max_prod1, prod1)\n        max_prod2 = max(max_prod2, prod2)\n        max_prod3 = max(max_prod3, prod1 * prod2)\n    \n    # Return the three largest products found\n    return max_prod1, max_prod2, max_prod3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    max1, max2, max3 = float('-inf'), float('-inf'), float('-inf')\n    \n    # loop through each index of the list\n    for i in range(N):\n        # find the maximum of the two lists\n        if nums1[i] > nums2[i]:\n            if nums1[i] > max1:\n                max1 = nums1[i]\n        else:\n            if nums2[i] > max1:\n                max1 = nums2[i]\n        \n        # find the maximum of the three lists\n        if nums1[i] > nums2[i]:\n            if nums1[i] > max2:\n                max2 = nums1[i]\n        else:\n            if nums2[i] > max2:\n                max2 = nums2[i]\n        \n        if nums1[i] > nums2[i]:\n            if nums1[i] > max3:\n                max3 = nums1[i]\n        else:\n            if nums2[i] > max3:\n                max3 = nums2[i]\n        \n        if nums2[i] > nums1[i]:\n            if nums2[i] > max3:\n                max3 = nums2[i]\n        else:\n            if nums1[i] > max3:\n                max3 = nums1[i]\n                \n    # return the maximum product of the three lists\n    return max1 * max2 * max3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create an empty list to store the products\n    products = []\n    # Loop through the lists and compute the products of the largest products\n    for i in range(len(nums1)):\n        product = max(nums1[i], nums2[i]) * min(nums1[i], nums2[i])\n        products.append(product)\n    # Sort the products in descending order\n    products.sort(reverse=True)\n    # Return the top N products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if the length of the two input lists is equal\n    if len(nums1)!= len(nums2):\n        return \"Error: The two input lists must have the same length.\"\n\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Loop through each combination of two numbers from each input list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the current two numbers\n            product = nums1[i] * nums2[j]\n\n            # Check if the product is greater than the largest so far\n            if product > largest_products[0]:\n                # If so, update the largest_products list\n                largest_products = [product]\n            elif product > largest_products[1]:\n                # If not, but the current product is larger than the second largest so far, update the second largest\n                largest_products[1] = product\n                # and add the current product to the list\n                largest_products.append(product)\n\n            # If we have found the desired number of products, exit the loop\n            if len(largest_products) == N:\n                break\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of those numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns their maximum.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of those numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of those numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower() # converting all characters to lower case\n    return tuple(str1) # converting the string to a tuple of characters\n"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the index variable to the leftmost unset bit\n    i = 0\n    \n    # While the current bit is 0, increment the index variable\n    while (n & 1) == 0:\n        i += 1\n        n >>= 1\n    \n    # Set the leftmost unset bit to 1\n    n |= (1 << i)\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit in a given integer. \n    \"\"\"\n\n    # Convert the given integer to binary string\n    binary = bin(n)[2:]\n\n    # Find the index of the leftmost unset bit\n    unset_bit_index = None\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            unset_bit_index = i\n            break\n\n    # If no unset bit is found, return the original integer\n    if unset_bit_index is None:\n        return n\n\n    # If an unset bit is found, set it to 1 and return the modified integer\n    else:\n        binary = list(binary)\n        binary[unset_bit_index] = '1'\n        modified_binary = ''.join(binary)\n        modified_int = int(modified_binary, 2)\n        return modified_int"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the number of unset bits to the length of the binary representation of n\n    unset_bits = len(bin(n)[2:])\n    # Initialize the mask with the bits to unset\n    mask = ~(0 << unset_bits)\n    # Clear the least significant bit and return the result\n    return (n & mask)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes a positive integer n as input and returns the number with the left most unset bit set.\n    '''\n    # Initialize the number of set bits to zero\n    count = 0\n\n    # Iterate through each bit of the number\n    while n:\n        # Check if the current bit is set\n        if n & 1:\n            # Increment the count of set bits\n            count += 1\n\n        # Shift the number to the right by one bit\n        n >>= 1\n\n    # If all bits are already set, return the number as is\n    if count == 32:\n        return n\n\n    # Otherwise, set the left most unset bit and return the modified number\n    return n | (1 << count)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit in the integer n.\n    '''\n    # Loop through the bits of the integer from right to left\n    for i in range(31, -1, -1):\n        # If the current bit is 0, set the leftmost bit to 1\n        if n & (1 << i) == 0:\n            return n | (1 << i)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    bit_position = 0\n    while (n & (1 << bit_position)) == 0:\n        bit_position += 1\n    \n    n |= (1 << bit_position)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize a mask of unset bits to find the leftmost unset bit.\n    mask = 1 << (n.bit_length() - 1)\n    # Find the leftmost unset bit in the binary representation of n.\n    while (n & mask) == 0:\n        mask >>= 1\n    # Set the leftmost unset bit to 1 in binary representation of n.\n    n |= mask\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given number n.\n    It returns the modified number.\n    \"\"\"\n    # Get the binary representation of the given number\n    binary = bin(n)[2:]\n    \n    # Iterate through the binary representation from right to left\n    for i in range(len(binary) - 1, -1, -1):\n        if binary[i] == '0':\n            # Set the leftmost unset bit to 1\n            binary[i] = '1'\n            # Set the remaining bits to 0\n            binary[:i+1] = '0'*len(binary[:i+1])\n            # Break out of the loop\n            break\n    \n    # Convert the modified binary representation back to an integer\n    modified = int(binary, 2)\n    \n    # Return the modified number\n    return modified"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:  # loop while the least significant bit is 0\n        n >>= 1  # shift the number to the right by 1 bit\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*(math.pi*(r**2)+(h/3)*math.sqrt(r**2+h**2))\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with a base radius r and height h.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area_cone = math.pi * r**2\n    volume_cone = area_cone * h / 3\n    return volume_cone"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with radius r and height h.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3)*math.pi*r**2*h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3)*math.pi*r**2*h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone with radius r and height h.\n\n    Args:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: the volume of the cone\n\n    Raises:\n    TypeError: if r or h is not a float\n\n    \"\"\"\n    if not isinstance(r, float) or not isinstance(h, float):\n        raise TypeError(\"Both r and h must be floats.\")\n\n    # calculate the volume using the formula V = 1/3 * pi * r^2 * h\n    volume = 1/3 * math.pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r * r * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n        \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 to zero\n    highest_power_of_2 = 0\n\n    # loop through all possible powers of 2 between 0 and n\n    for power in range(0, n+1): \n        # if the power is greater than the highest power of 2 found so far, update the highest power of 2\n        if power > highest_power_of_2: \n            highest_power_of_2 = power\n\n    # return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        highest_power = 1\n        while highest_power < n:\n            highest_power <<= 1\n        return highest_power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize power to 0\n    power = 0\n    \n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return power\n    \n    # Find the highest power of 2 that is less than or equal to n\n    while n > 1:\n        n >>= 1 # shift right to divide by 2\n        power += 1 # increase power by 1\n    \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # convert n to binary and find the binary representation of the highest power of 2 less than or equal to n\n    binary = bin(n)[2:].zfill(100000)\n    binary_len = len(binary)\n    highest_power_of_2 = 1\n    while highest_power_of_2 < n and highest_power_of_2 <= 100000:\n        if binary[:binary_len-highest_power_of_2] == \"0\" * binary_len:\n            highest_power_of_2 *= 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the maximum power of 2 found so far to 0\n    max_power = 0\n    \n    # Loop through the bits of the integer n and set max_power to the maximum power of 2 found so far\n    for i in range(32):\n        if (n & (1 << i))!= 0:\n            max_power = i\n    \n    # Return the maximum power of 2 found so far\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the highest power of 2 as 1\n    highest_pow_of_2 = 1\n    \n    # Loop through all the numbers from 2 to n\n    for i in range(2, n+1):\n        # If i is a power of 2, then it is the highest power of 2\n        if i == 2**highest_pow_of_2:\n            return highest_pow_of_2\n        \n        # If not, then increase the highest power of 2 by 1\n        else:\n            highest_pow_of_2 += 1\n    \n    # If the loop is finished, it means n is not a power of 2, so return the highest power of 2\n    return highest_pow_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while power * 2 <= n:\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize variables\n    power = 1\n    highest_power = 0\n\n    # Iterate until power is greater than n\n    while power <= n:\n        # Check if power is a power of 2\n        if power & (power - 1) == 0:\n            # If it is, update highest_power\n            highest_power = power\n        # Increment power\n        power <<= 1\n\n    # Return highest_power\n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2)) % 1000000007"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize the first two lucas numbers\n    a, b = 2, 1\n    \n    # Loop through the remaining n-2 lucas numbers\n    for i in range(2, n-1):\n        # Update the next lucas number\n        c = a + b\n        # Update the previous lucas numbers\n        a = b\n        b = c\n    \n    # Return the nth lucas number\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through the list and apply the format string to each element\n    for index, element in enumerate(list_):\n        list_[index] = string.format(element)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(x, string) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(item) for item in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        result.append({'name': l1[i], 'age': l2[i], 'city': l3[i]})\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Parameters:\n    -----------\n    *lists: list\n        A list of lists.\n\n    Returns:\n    --------\n    dict\n        A nested dictionary with the keys being the first element of each list and the values being the second element of each list.\n    \"\"\"\n    if len(lists) == 0:\n        return None\n\n    def flatten(lst):\n        \"\"\"\n        Flatten a list of lists to a single list.\n        \"\"\"\n        flattened = []\n        for item in lst:\n            if isinstance(item, list):\n                flattened.extend(flatten(item))\n            else:\n                flattened.append(item)\n        return flattened\n\n    flattened = flatten(lists)\n    return dict(zip(*flattened))"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, item in enumerate(l1):\n        result[item] = {}\n        for j, nested_item in enumerate(l2[i]):\n            result[item][nested_item] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, item in enumerate(l1):\n        result[item] = {}\n        for j, sub_item in enumerate(l2):\n            result[item][sub_item] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {'list2': l2[i], 'list3': l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        for j in range(len(l2)):\n            d[l1[i]][l2[j]] = l3[i][j]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a dictionary to store the nested data\n    data = {}\n    # Loop through the lists and create nested data in the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {}\n        for j in range(len(l2)):\n            data[l1[i]][l2[j]] = l3[i][j]\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create a list to store nested dictionaries\n    nested_dict_list = []\n    # iterate through the lists and append each element to the nested dictionary list\n    for i in range(len(l1)):\n        nested_dict = {}\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l3[i]] = l1[i]\n        nested_dict_list.append(nested_dict)\n    # return the nested dictionary list\n    return nested_dict_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # loop through each list\n    for i in range(len(l1)):\n        # check if the current list is empty\n        if len(l1[i]) == 0:\n            # create a new key in the nested dictionary with the current index as the key\n            nested_dict[i] = []\n        else:\n            # create a new key in the nested dictionary with the current index as the key\n            nested_dict[i] = {}\n            \n            # loop through each element in the current list\n            for j in range(len(l1[i])):\n                # check if the current element is a list\n                if isinstance(l1[i][j], list):\n                    # add the nested dictionary of the current element to the nested dictionary\n                    nested_dict[i][j] = convert_list_dictionary(l1[i][j], l2[i][j], l3[i][j])\n                else:\n                    # add the current element to the nested dictionary\n                    nested_dict[i][j] = l1[i][j]\n    \n    # return the nested dictionary\n    return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n    \n    # Iterate through the first list\n    for i in range(len(l1)):\n        # Create an empty dictionary for the current item\n        item = {}\n        \n        # Iterate through the second list\n        for j in range(len(l2)):\n            # Add the key-value pair to the current item dictionary\n            item[l2[j]] = l1[i][j]\n            \n        # Add the current item dictionary to the result dictionary\n        result[l1[i][0]] = item\n        \n    # Iterate through the third list\n    for i in range(len(l3)):\n        # Add the key-value pair to the result dictionary\n        result[l3[i]] = l3[i]\n        \n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    def f(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 7\n        if n == 5:\n            return 11\n    \n    # Calculate the sum of the first n/2 numbers using the formula\n    # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # f(n/2) = f(2) * 2^(n/2)\n    # f(n/2) + f(n/3) + f(n/4) + f(n/5) = f(2) * 2^(n/2) * (1 + (2^(n/3) + 2^(n/4) + 2^(n/5))/2)\n    # f(n/2) * 2^(n/2) * (1 + (2^(n/3) + 2^(n/4) + 2^(n/5))/2) = f(2) * 2^(n/2) * (2^(n/3) * 2^(n/4) * 2^(n/5) + 2^(n/3) + 2^(n/4) + 2^(n/5))\n    # f(n/2) * 2^(n/2) * (2^(n/3) * 2^(n/4) * 2^(n/5) + 2^(n/3) + 2^(n/4) + 2^(n/5)) = f(2) * 2^(n/2) * (2^(n/3) * 2^(n/4) * 2^(n/5) + 2^(n/3) + 2^(n/4) + 2^(n/5))\n    # f(n/2) * 2^(n/2) * (2^(n/3) * 2^(n/4) * 2^(n/5) + 2^(n/3) + 2^(n/4) + 2^(n/5)) = f(2) * 2^(n/2) * (2^(n/3) * 2^(n/4) * 2^(n/5) - 2^(n/3) + 2^(n/4) + 2^(n/5))\n    # f(n/2) * 2^(n/2) * (2^(n/3) * 2^(n/4) * 2^(n/5) - 2^(n/3) + 2^(n/4) + 2^(n/5)) = f(2) * 2^(n/2) * (2^(n/3) * 2^(n/4) * 2^(n/5) - 2^(n/3) + 2^(n/4) + 2^(n/5) - 2^(n/3) * 2^(n/4) * 2^(n/5))\n    # f(n/2) * 2^(n/2) * (2^(n/3) * 2^(n/4) * 2^(n/5) - 2^(n/3) + 2^(n/4) + 2^(n/5) - 2^(n/3) * 2^(n/4) * 2^(n/5)) = f(2) * 2^(n/2) * (2^(n/3) * 2^(n/4) * 2^(n/5) - 2^(n/3) + 2^(n/4) + 2^(n/5) - 2^(n/3) * 2^(n/4) * 2^(n/5) + 2^(n/3) + 2^(n/4) + 2^(n/5) - 2^(n/3) * 2^(n/4) * 2^(n/5) + 2^(n/3) * 2^(n/4) * 2^(n/5) - 2^(n/3) * 2^(n/4) * 2^(n/5) - 2^(n/3) * 2^(n/4) * "
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(x):\n        if x == 1:\n            return 1\n        elif x == 2:\n            return 2\n        elif x == 3:\n            return 4\n        elif x == 4:\n            return 8\n        elif x == 5:\n            return 15\n        else:\n            return f(x-1) + f(x-2) + f(x-3) + f(x-4) + f(x-5)\n\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    elif n == 2:\n        return n * 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    This function finds the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n\n    # Recursive case: return the maximum of the sum of n/2, n/3, n/4, n/5 and n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 30\n    \n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n + 2\n    else:\n        f2 = get_max_sum(n/2)\n        f3 = get_max_sum(n/3)\n        f4 = get_max_sum(n/4)\n        f5 = get_max_sum(n/5)\n        return max(f2 + f3 + f4 + f5, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nprint(get_max_sum(10)) # Output: 35"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    max_length = 0\n    max_list = []\n\n    # loop through each element in the list\n    for i in input_list:\n        # loop through each element in the list again to find the length of each element\n        for j in range(len(input_list)):\n            if i == input_list[j]:\n                # if the length of the current element is greater than the maximum length found so far, update max_length and max_list\n                if len(i) > max_length:\n                    max_length = len(i)\n                    max_list = [i]\n                # if the length of the current element is equal to the maximum length found so far, add the current element to max_list\n                elif len(i) == max_length:\n                    max_list.append(i)\n\n    # return the list with the maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if a given tuple contains no duplicates.\n\n    :param test_tup: The tuple to check for duplicates.\n    :return: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if a given tuple contains no duplicates.\n    \"\"\"\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to set to check for duplicates\n    test_set = set(test_tup)\n    # Check if set is empty\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to a set\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        # if true, return true\n        return True\n    else:\n        # if false, return false\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for i, char in enumerate(str1):\n        if char_count[char] == 1:\n            return i\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        else:\n            seen.add(char)\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as an input and returns the first non-repeated character in the string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in str1:\n        if count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n\n    Args:\n    str1 (str): The string to search for the first non-repeated character.\n\n    Returns:\n    str: The first non-repeated character in the input string.\n\n    \"\"\"\n    char_count = {}\n\n    # Iterate through each character in the string and update the count in a dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character in the dictionary with a count of 1 and return it\n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            char_set.remove(char)\n    for char in char_set:\n        return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            char_set[char] += 1\n        else:\n            char_set[char] = 1\n    for char in str1:\n        if char_set[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first character that has frequency 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # if no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add it to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # find the first character in the dictionary with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store characters and their frequency\n    freq = {}\n    \n    # loop through the string\n    for char in str1:\n        # if the character is not in the dictionary, add it with a frequency of 1\n        if char not in freq:\n            freq[char] = 1\n        # if the character is already in the dictionary, increment its frequency\n        else:\n            freq[char] += 1\n    \n    # loop through the dictionary again to find the first non-repeating character\n    for char in freq:\n        # if the frequency is 1, return the character\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the dictionary and find the first character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if len(string)!= 1:\n        return False\n    if string[0].isalpha():\n        return False\n    if re.search(regex, string):\n        return True\n    return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n\nprint(check_char('a')) # True\nprint(check_char('A')) # True\nprint(check_char('b')) # False\nprint(check_char('Abc')) # False\nprint(check_char('abc')) # False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Using regular expressions to match the string with the given regex pattern\n    match = re.match(regex, string)\n\n    # Checking if the match is found or not\n    if match:\n        # If the match is found, then the string starts and ends with the same character\n        return True\n    else:\n        # If the match is not found, then the string does not start and end with the same character\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the midpoint\n    midpoint = len(sorted_numbers) // 2\n\n    # If the length of the sorted list is odd, then the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[midpoint]\n\n    # If the length of the sorted list is even, then the median is the average of the middle two numbers\n    else:\n        return (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint]) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return (numbers[n//2 - 1] + numbers[n//2]) / 2\n    else:\n        return numbers[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the middle index of the sorted array\n    mid = len(numbers) // 2\n\n    # If the length of the array is odd, the middle number is the median\n    if len(numbers) % 2 == 1:\n        return numbers[mid]\n\n    # If the length of the array is even, the median is the average of the two middle numbers\n    else:\n        return (numbers[mid - 1] + numbers[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the middle two numbers\n    middle_numbers = sorted_numbers[1:-1]\n\n    # find the median of the middle two numbers\n    median = (middle_numbers[0] + middle_numbers[1]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Find the midpoint of the three numbers\n    midpoint = len(nums) // 2\n\n    # Check if the length of the list is odd or even\n    if len(nums) % 2 == 0:\n        # Find the average of the two middle numbers\n        median = (nums[midpoint - 1] + nums[midpoint]) / 2\n    else:\n        # Return the middle number\n        median = nums[midpoint]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the list\n    length = len(sorted_numbers)\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # If it's even, the median is the average of the two middle numbers\n        middle_index = length // 2\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        # If it's odd, the median is the middle number\n        median = sorted_numbers[length // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the middle number\n    middle_number = (sorted_numbers[1] + sorted_numbers[2]) / 2\n    # Check if the middle number is odd or even\n    if middle_number % 1 == 0:\n        # If it's even, return the middle two numbers rounded up\n        median = (int(sorted_numbers[0]) + int(sorted_numbers[1])) / 2\n    else:\n        # If it's odd, return the middle number\n        median = int(sorted_numbers[1])\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle index of the sorted list\n    middle_index = len(sorted_numbers) // 2\n\n    # If the length of the list is odd, then the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[middle_index]\n\n    # If the length of the list is even, then the median is the average of the two middle numbers\n    else:\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into a list of digits\n        digits = list(str(num))\n        # loop through each digit and add it to a running total\n        total = 0\n        for digit in digits:\n            total += int(digit)\n        # print the sum of digits for each number\n        print(f\"{num}: {total}\")"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        temp = num\n        while temp > 0:\n            result += temp % 10\n            temp //= 10\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        for digit in str(num):\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        # iterate over each character in the string\n        for char in num_str:\n            # convert each character to an integer and add it to the sum\n            sum_of_digits += int(char)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        # convert the number to a string and then to a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # add up the digits and store the result in the total_sum variable\n        total_sum += sum(digits)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        sum_digits += sum(int(d) for d in str(num))\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits for each number\n    digit_sums = []\n\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        num_digits = [int(digit) for digit in str(num)]\n\n        # Compute the sum of digits for the number\n        digit_sum = sum(num_digits)\n\n        # Append the sum to the digit_sums list\n        digit_sums.append(digit_sum)\n\n    # Return the list of digit sums\n    return digit_sums"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples are not of equal length.\")\n        return None\n    \n    # perform the mathematical bitwise xor operation across the tuples\n    xor_result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize variables\n    xored_value = 0\n    carry_bit = 0\n\n    # loop through the tuples\n    for i in range(len(test_tup1)):\n        # add the corresponding bits from the tuples\n        xored_value += (test_tup1[i] ^ test_tup2[i])\n\n        # carry the bit if there are any more bits to carry\n        carry_bit = (test_tup1[i] & test_tup2[i]) << 1\n\n    # carry the remaining bits from the last tuple\n    xored_value += carry_bit\n\n    # return the final result\n    return xored_value"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        bit1 = 0 if i >= len(test_tup1) else test_tup1[i]\n        bit2 = 0 if i >= len(test_tup2) else test_tup2[i]\n        xor_result = bit1 ^ bit2\n        result += (xor_result,)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize a variable to store the result of the bitwise xor operation\n    result = 0\n\n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        # get the corresponding elements from the tuples\n        num1 = test_tup1[i]\n        num2 = test_tup2[i]\n\n        # perform the bitwise xor operation and update the result variable\n        result |= num1 ^ num2\n\n    # return the result\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    # Loop through each element in the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n        \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(xor_result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(i) ^ int(j) for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize an empty result tuple\n    result_tup = ()\n    \n    # iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # perform the mathematical bitwise xor operation between the corresponding elements of the tuples\n        xor_bit = test_tup1[i] ^ test_tup2[i]\n        \n        # append the result to the result tuple\n        result_tup += (xor_bit,)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get the lengths of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    # Create an empty result tuple with the same length as the longest tuple\n    result_tup = (0,) * max(len1, len2)\n    # Loop through the tuples and perform the bitwise xor operation on each pair of values\n    for i in range(len(result_tup)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the resulting tuple\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n\n    Args:\n        test_list (list): A list of tuples.\n\n    Returns:\n        int: The number of unique tuples in the given list.\n    \"\"\"\n    # Create a set of all the unique tuples in the list\n    unique_tuples = set(test_list)\n    \n    # Return the number of unique tuples in the list\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples have different lengths!\")\n\n    # Create a new tuple of the same length as the first tuple\n    result_tup = tuple(0 for _ in range(len(test_tup1)))\n\n    # Perform index wise addition of the two tuples and store the result in the result tuple\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in the two given tuples is not equal.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            print(\"Error: The types of elements in the two given tuples are not equal.\")\n            return\n        \n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup += add_nested_tuples(test_tup1[i], test_tup2[i])\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i], )\n    \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new tuple to store the result\n    result_tup = ()\n    # Loop through each index of the first tuple\n    for i in range(len(test_tup1)):\n        # If the index is not in the second tuple, append 0 to it\n        if i >= len(test_tup2):\n            result_tup += (test_tup1[i], 0)\n        else:\n            # Add the corresponding elements from both tuples and append the result to the new tuple\n            result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Iterate over each tuple element in both input tuples\n    for i in range(len(test_tup1)):\n        # Check if the current index exists in both tuples\n        if i < len(test_tup1) and i < len(test_tup2):\n            # If both tuples contain an element at the current index, add them and append the result to the result list\n            result_list.append(test_tup1[i] + test_tup2[i])\n        else:\n            # If either tuple does not contain an element at the current index, append None to the result list\n            result_list.append(None)\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The number of elements in both tuples should be same.\")\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            if len(test_tup1[i])!= len(test_tup2[i]):\n                raise ValueError(\"Both the elements in the tuple should be same length.\")\n        else:\n            if isinstance(test_tup1[i], str) and isinstance(test_tup2[i], str):\n                test_tup1[i] += test_tup2[i]\n            else:\n                raise ValueError(\"Both elements in the tuple should be of the same data type.\")\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty result list\n    result = []\n    \n    # iterate through each element of the two input tuples\n    for i in range(len(test_tup1)):\n        # append the sum of the corresponding elements of the two input tuples to the result list\n        result.append(test_tup1[i] + test_tup2[i])\n        \n    # return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the resultant tuple\n    result_tup = []\n    \n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize a variable to store the current index sum\n        current_sum = 0\n        \n        # Loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the corresponding elements in the two tuples\n            current_sum += test_tup1[i][j] + test_tup2[i][j]\n        \n        # Append the current sum to the resultant tuple\n        result_tup.append(current_sum)\n    \n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new list to store the resultant tuple\n    result_list = []\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through the second tuple\n        for j in range(len(test_tup2)):\n            # Append the sum of the elements at the current index to the result list\n            result_list.append(test_tup1[i] + test_tup2[j])\n    # Return the resultant list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n\n    # if a is less than b, then return a\n    if a < b:\n        return a\n    # otherwise, return b\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a Python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two tuples as input and checks whether an element exists within the second tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex: \n        if item in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1): \n    for element in tuple1: \n        if element == tuplex: \n            return True \n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x % 2 == 0: # if the number is even\n        print(f\"{x} is even\")\n    else: # if the number is odd\n        print(f\"{x} is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    parity = 0  # initialize a variable to keep track of the parity\n    if x == 0:  # if the number is zero, it is an even number\n        return \"Even\"\n    elif x % 2 == 0:  # if the number is even, it has an odd parity\n        return \"Odd\"\n    else:  # if the number is odd, it has an even parity\n        return \"Even\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0:\n        parity ^= x & 1\n        x >>= 1\n    return parity & 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Odd number\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer input and returns True if the parity of the number is odd, else False.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False \n    else: \n        return True "
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    next_bigger = 0\n    power = len(digits) - 1\n    for i in range(len(digits)):\n        if digits[i] + 1 <= 9:\n            next_bigger += digits[i] + 1\n            break\n        else:\n            next_bigger += 10\n            power -= 1\n    for i in range(power):\n        next_bigger *= 10\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a string of the digits of the input number\n    digits = [int(d) for d in str(n)]\n    # reverse the digits in the string\n    digits.reverse()\n    # find the length of the string\n    length = len(digits)\n    # create an empty list to store the digits of the next number\n    next_digits = []\n    # loop through each digit in the original string\n    for digit in digits:\n        # check if the digit is even or odd\n        if digit % 2 == 0:\n            # add the odd digits to the next number\n            next_digits.append(digit)\n        else:\n            # add the even digits to the next number\n            next_digits.append(digit + 1)\n    # convert the list of digits back to a string\n    next_n = ''.join(str(d) for d in next_digits)\n    # convert the string to an integer and return it\n    return int(next_n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initializing the list of digits\n    digits = list(str(n))\n    # finding the position of the maximum element in the list\n    max_index = digits.index(max(digits))\n    # swapping the maximum element with the first element in the list\n    digits[max_index], digits[0] = digits[0], digits[max_index]\n    # reversing the list of digits\n    digits.reverse()\n    # joining the list of digits to form the next bigger number\n    next_bigger = int(''.join(digits))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    max_digit = max(digits)\n    index = digits.index(max_digit)\n    digits.pop(index)\n    digits.insert(0, max_digit)\n    next_bigger = int(\"\".join(map(str, digits)))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Initialize a list of digits from n\n    digits = [int(d) for d in str(n)]\n\n    # Find the largest digit in the list\n    max_digit = max(digits)\n\n    # Initialize the next bigger number as 10^9 + 1 to make sure it's greater than the current number\n    next_bigger = 10**9 + 1\n\n    # Loop through the digits in reverse order\n    for i in range(len(digits)-1, -1, -1):\n        # Check if the current digit is the maximum digit\n        if digits[i] == max_digit:\n            # If so, find the next bigger digit by adding 1 to the current digit and removing the maximum digit from the list\n            digits[i] = next_bigger % 10\n            next_bigger = next_bigger // 10\n            digits.remove(max_digit)\n\n    # Convert the list of digits back to a number and return it\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Reverse the string\n    num_str = num_str[::-1]\n    # Split the string into digits\n    digits = [int(digit) for digit in num_str]\n    # Find the largest digit\n    max_digit = max(digits)\n    # Reverse the digits of the maximum digit\n    max_digit_index = digits.index(max_digit)\n    digits = digits[:max_digit_index] + digits[max_digit_index+1:] + digits[:max_digit_index]\n    # Convert the digits back to a string\n    next_bigger_num = ''.join([str(digit) for digit in digits])\n    # Convert the next bigger number to an integer and return it\n    return int(next_bigger_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # check if the input number is positive\n    if n < 0:\n        n = -n\n    # initialize the result variable\n    result = 0\n    # iterate through each digit in the input number\n    for digit in str(n):\n        # check if the current digit is 9\n        if int(digit) == 9:\n            # append a 0 to the result variable\n            result = str(result) + '0'\n        else:\n            # add 1 to the result variable for each digit except 9\n            result = str(result) + str(int(digit) + 1)\n    # add the sign to the result variable\n    if n < 0:\n        result = '-' + result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = str(n)\n    max_digits = len(digits)\n    for i in range(max_digits):\n        for j in range(i+1, max_digits):\n            if int(digits[i])+int(digits[j]) > int(digits[max_digits-1]):\n                digits[i], digits[j] = digits[j], digits[i]\n                break\n            elif int(digits[i])+int(digits[j]) == int(digits[max_digits-1]):\n                digits[i], digits[max_digits-1] = digits[max_digits-1], digits[i]\n                break\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    def next_bigger(num):\n        num = str(num)\n        max_num = 0\n        for i in range(len(num)):\n            max_num = max(max_num, int(num[:i] + num[i+1:]))\n        return max_num\n    \n    return next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Extract the digits of the given number\n    digits = [int(d) for d in str(n)]\n    # Sort the digits in ascending order\n    digits.sort()\n    # Reverse the sorted digits to get the next bigger number\n    result = int(\"\".join(str(d) for d in digits[::-1]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Combine the two arrays in a single list\n    combined_list = nums1 + nums2\n    # Convert the combined list to a heap\n    heap = sorted(combined_list)\n    # Initialize the minimum heap with the first k elements of the heap\n    min_heap = []\n    for i in range(k):\n        min_heap.append(heapq.heappop(heap))\n    # Initialize the result list with an empty list\n    result = []\n    # Pop elements from the heap and add them to the result list until the heap is empty\n    while min_heap:\n        # Pop the smallest element from the heap and add it to the result list\n        result.append(heapq.heappop(min_heap))\n        # Check if the length of the result list is equal to k\n        if len(result) == k:\n            break\n        # Pop the smallest element from the heap and add it to the result list\n        result.append(heapq.heappop(heap))\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap1 = []\n    heap2 = []\n    \n    for i in range(len(nums1)):\n        heapq.heappush(heap1, (nums1[i], i))\n        \n    for i in range(len(nums2)):\n        heapq.heappush(heap2, (nums2[i], i))\n    \n    while k > 0:\n        if len(heap1) > 0 and len(heap2) > 0:\n            if heap1[0][0] + heap2[0][0] < heap1[0][1]:\n                pair = (heap1[0][0], nums2[heap2[0][1]])\n                heap1[0] = heapq.heappop(heap1)\n                heapq.heappush(heap2, pair)\n            else:\n                pair = (heap2[0][0], nums1[heap1[0][1]])\n                heap2[0] = heapq.heappop(heap2)\n                heapq.heappush(heap1, pair)\n            pairs.append(pair)\n            k -= 1\n            \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num1 in nums1:\n        heapq.heappush(min_heap, (-num1, (0, num1)))\n    for num2 in nums2:\n        if not min_heap:\n            break\n        smallest_pair, (i, _) = heapq.heappop(min_heap)\n        if smallest_pair[1] == -num2:\n            if k == 0:\n                return []\n            k -= 1\n            heapq.heappush(min_heap, (-smallest_pair[0], (i, num2)))\n    return []"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    heapq.heapify(pq)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(pq) < k:\n                heapq.heappush(pq, (nums1[i] + nums2[j], (i, j)))\n            elif nums1[i] + nums2[j] > -heapq.heappop(pq)[0]:\n                heapq.heappush(pq, (nums1[i] + nums2[j], (i, j)))\n    return [x[1] for x in pq]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap of size k\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (float('inf'), None))\n\n    # iterate through the arrays and find the smallest pairs\n    for num1 in nums1:\n        for num2 in nums2:\n            # calculate the distance between the current pair\n            distance = abs(num1) + abs(num2)\n\n            # check if the distance is smaller than the smallest distance in the heap\n            if distance < min_heap[0][0]:\n                # if it is, remove the smallest distance from the heap and add the new distance to the heap\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (distance, (num1, num2)))\n\n    # extract the k smallest pairs from the heap\n    pairs = []\n    for i in range(k):\n        pair = heapq.heappop(min_heap)\n        pairs.append(pair[1])\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    i, j = 0, 0\n    while len(heap) < k:\n        if i == len(nums1) or (j < len(nums2) and nums2[j] < nums1[i]):\n            heapq.heappush(heap, (nums1[i], j))\n            i += 1\n        else:\n            heapq.heappush(heap, (nums2[j], i))\n            j += 1\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs of smallest numbers\n    min_heap = []\n    # Initialize the count of pairs as 0\n    count = 0\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Calculate the sum of the current numbers\n            current_sum = num1 + num2\n\n            # Check if the current sum is greater than the smallest number in the min heap\n            if not min_heap or current_sum > min_heap[0]:\n                # If yes, add the current pair to the min heap and increment the count\n                heapq.heappush(min_heap, current_sum)\n                count += 1\n\n            # If the min heap contains k elements, remove the smallest element and decrement the count\n            if count == k:\n                min_heap.pop(0)\n                count -= 1\n\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the elements of nums1\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n    \n    # Initialize an empty list to store the pairs of elements\n    pairs = []\n    \n    # Iterate k times\n    for i in range(k):\n        # Get the smallest element from nums1\n        num1 = heapq.heappop(min_heap)\n        \n        # Check if there are more elements in nums1\n        if min_heap:\n            # Get the smallest element from nums1\n            num2 = min_heap[0]\n        else:\n            # No more elements in nums1\n            num2 = float('inf')\n        \n        # If the sum of num1 and num2 is greater than or equal to the target k, add the pair to the list\n        if num1 + num2 >= k:\n            pairs.append((num1, num2))\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (float('inf'), 0))\n    # Initialize two pointers i, j to iterate through the arrays\n    i, j = 0, 0\n    # Initialize a variable to keep track of the number of pairs found\n    count = 0\n    # While there are elements in the min heap and count is less than k\n    while min_heap and count < k:\n        # Get the minimum element from the heap and the indices of the corresponding elements in the arrays\n        curr_dist, curr_i = heapq.heappop(min_heap)\n        curr_j = i\n        # If the current element in the first array is greater than the element in the second array, swap the indices\n        if nums1[curr_i] > nums2[curr_j]:\n            curr_i, curr_j = curr_j, curr_i\n        # Add the current pair to the list of pairs and increment count\n        heapq.heappush(min_heap, (curr_dist + nums1[curr_i], curr_i))\n        count += 1\n        # Move the pointers to the next pair in the arrays\n        i += 1\n        if i < len(nums1):\n            heapq.heappush(min_heap, (curr_dist + nums1[i], i))\n        if i > 0 and i >= len(nums1) - k:\n            j += 1\n            if j < len(nums2):\n                heapq.heappush(min_heap, (curr_dist + nums2[j], j))\n    # Return the list of pairs\n    return [(nums1[i], nums2[j]) for i, j in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (min(num1, num2), (num1, num2))\n            heapq.heappush(heap, pair)\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    return [(pair[1], pair[0]) for pair in heap]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # initialize variables\n    min_product = float('inf')\n    temp_product = 1\n    \n    # loop through the list of tuples\n    for tuple1 in list1:\n        # multiply all the elements in the tuple\n        product = 1\n        for element in tuple1:\n            product *= element\n            \n        # if the product is less than the minimum product so far, update the minimum product\n        if product < min_product:\n            min_product = product\n        \n        # if the product is the same as the minimum product so far, multiply it with the current product and update the temporary product\n        elif product == min_product:\n            temp_product *= product\n            \n    # return the minimum product and the temporary product\n    return min_product, temp_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n    # Iterate through the list\n    for i in range(len(list1)):\n        # Get the tuple at index i\n        tup = list1[i]\n        # Iterate through the rest of the list\n        for j in range(i+1, len(list1)):\n            # Get the tuple at index j\n            other_tup = list1[j]\n            # Calculate the product of the two tuples\n            product = tup[0] * other_tup[1]\n            # Update the minimum product if the product is smaller\n            if product < min_product:\n                min_product = product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    \n    # find the minimum value in the list\n    min_value = min(list1)\n    \n    # create a list of tuples\n    tuples_list = [(x, y) for x in list1 for y in list1 if x!= y]\n    \n    # find the minimum product of pairs in the list\n    min_product = min([x * y for x, y in tuples_list if x!= y and x!= min_value and y!= min_value])\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product to infinity\n    min_product = float('inf')\n\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # update the minimum product if the current product is smaller than the current minimum\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < minimum_product:\n                minimum_product = product\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for item in listval[1:]:\n            if item < min_val:\n                min_val = item\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize min_value variable with the first value in the list\n    min_value = listval[0]\n    # loop through the rest of the list\n    for i in range(1, len(listval)):\n        # if the current value is less than the current minimum, update min_value\n        if listval[i] < min_value:\n            min_value = listval[i]\n    # return the minimum value found\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    # Loop through the rest of the elements of the list\n    for i in range(1, len(listval)):\n        # Check if the current element is smaller than the current minimum value\n        if listval[i] < min_val:\n            # Update the minimum value to the current element\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for value in listval:\n        if value < min_value:\n            min_value = value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first element in the list\n    min_val = listval[0]\n    # Iterate through the list and compare each element to the current minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]  # assume the first element is the minimum\n    for num in listval[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError('Empty list')\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n\n    # Convert all words to lowercase\n    word = word.lower()\n\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Initialize an empty string to store the camel case version of the word\n    camel_case_word = ''\n\n    # Iterate over the words in the list\n    for i, word in enumerate(words):\n        # If the current word is not the first word in the list\n        if i!= 0:\n            # Add an uppercase letter to the camel case word\n            camel_case_word += word[0].upper() + word[1:]\n        else:\n            # Otherwise, add the first word to the camel case word as is\n            camel_case_word += word\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string as input and returns the corresponding camel case string.\n    \"\"\"\n\n    # Replace all underscores with spaces\n    word = re.sub('_','', word)\n\n    # Convert the string to title case\n    title_case = word.title()\n\n    # Replace spaces with underscores\n    camel_case = re.sub(' ', '_', title_case)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    capitalize = True\n    for letter in word:\n        if letter.isupper() and capitalize:\n            camel_case += letter.lower()\n            capitalize = False\n        elif letter.islower() or letter.isdigit():\n            camel_case += letter\n        else:\n            camel_case += '_'\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lower case and split the words into a list\n    words = word.lower().split('_')\n    \n    # Initialize an empty string to store the camel case version of the word\n    camel_case_word = ''\n    \n    # Iterate over the words in the list and append each word to the camel case word except the first word\n    for i in range(1, len(words)):\n        camel_case_word += words[i]\n        # If the next word starts with a digit, add an underscore before appending it to the camel case word\n        if words[i].isdigit():\n            camel_case_word += '_'\n    \n    # Add the first word to the camel case word\n    camel_case_word += words[0]\n    \n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake_case to CamelCase\n    return re.sub('_(.)', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces and capitalize the first letter\n    word = re.sub('_','', word)\n    word = word.capitalize()\n    # Split the string by spaces and join them with camel case\n    camel_case = ''.join(word.title().split())\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = re.findall(r'[A-Za-z]+|[0-9]+', word)\n    # Convert the words to camel case\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].capitalize()\n    return camel_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list):\n        if isinstance(list1[0], tuple):\n            if isinstance(n, int) and n >= 1 and n <= len(list1):\n                return list1[n-1]\n            else:\n                return 'Invalid index'\n        else:\n            return 'Invalid input type'\n    else:\n        return 'Invalid input type'"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return list1[0]\n    elif n == len(list1):\n        return list1[-1]\n    else:\n        return extract_nth_element(list1[1:], n - 1)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the input list is empty\n    if not list1:\n        return None\n    \n    # if the length of the list is 1, return the first element\n    if len(list1) == 1:\n        return list1[0]\n    \n    # if the length of the list is greater than 1, find the nth element recursively\n    else:\n        # divide the list in half\n        mid = len(list1) // 2\n        # extract the nth element from each half recursively\n        if n <= mid:\n            return extract_nth_element(list1[:mid], n)\n        else:\n            return extract_nth_element(list1[mid:], n-mid)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and the index of the nth element as input and returns the nth element from the list.\n    '''\n    if n < 1 or n > len(list1):\n        print(\"Invalid index value. Index should be between 1 and the length of the list.\")\n        return\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1][1]\n    except IndexError:\n        return \"Index out of range\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if n is a valid index\n    if n < 1 or n > len(list1):\n        print(\"Invalid index\")\n        return None\n\n    # Extract the nth element from the list\n    element = list1[n-1]\n\n    # Return the extracted element\n    return element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    :param list1: List of values to search in.\n    :param list2: List of values to search for.\n    :return: True if there is a value in list2 that exists in list1, False otherwise.\n    \"\"\"\n    for value in list2:\n        if value in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Iterate through each element in list1\n    for element in list1:\n        # Check if the element exists in list2\n        if element in list2:\n            # If it does, return True\n            return True\n    # If we reach here, we didn't find any overlapping values\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns True if any value in the first sequence exists in the second sequence and vice versa.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    for item in set1:\n        if item in set2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set of list2 to remove duplicates\n    set2 = set(list2)\n\n    # Loop through each value in list1\n    for value in list1:\n        # If the value exists in set2, return True\n        if value in set2:\n            return True\n\n    # If no values in list1 exist in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            print(f\"{val} exists in list2\")\n        else:\n            print(f\"{val} doesn't exist in list2\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1: a sequence of values\n    list2: a sequence of values\n\n    Returns:\n    True if any value in list1 exists in list2 or vice versa, False otherwise.\n    \"\"\"\n    return any(x in list1 for x in list2) or any(x in list2 for x in list1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize variables to store maximum product and indices of maximum and minimum elements\n    max_product = float('-inf')\n    max_index = 0\n    min_product = float('inf')\n    min_index = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        # if current element is greater than maximum element, update max_product and max_index\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_index = i\n\n        # if current element is less than minimum element, update min_product and min_index\n        if arr[i] < min_product:\n            min_product = arr[i]\n            min_index = i\n\n        # if current element is greater than maximum element, update max_product and max_index\n        if arr[i] * min_product > max_product:\n            max_product = arr[i] * min_product\n            max_index = i\n\n        # if current element is less than minimum element, update min_product and min_index\n        if arr[i] * max_product < min_product:\n            min_product = arr[i] * max_product\n            min_index = i\n\n    # return the pair with highest product\n    return arr[max_index], arr[min_index]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing two elements.\n    The first element of the tuple is the maximum product obtained by any two elements of the array.\n    The second element of the tuple is the pair of integers that has the highest product.\n    '''\n    # Initialize variables to store the maximum product and pair of integers\n    max_product = float('-inf')\n    pair = (0, 0)\n\n    # Iterate through the array and find the maximum product and pair of integers\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the two integers\n            product = arr[i] * arr[j]\n\n            # Update the maximum product if the current product is greater\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    # Return the pair of integers that has the highest product\n    return (max_product, pair)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_product = float('-inf')\n    max_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (i, j)\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the pair with highest product\n    max_product = arr[0] * arr[1]\n    if len(arr) == 2:\n        return max_product\n\n    for i in range(2, len(arr)):\n        product = arr[i-1] * arr[i]\n        if product > max_product:\n            max_product = product\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    max_product = float('-inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n        product = max1 * max2 * min1 * min2\n        if product > max_product:\n            max_product = product\n            \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple of two integers representing the pair with the highest product.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize two variables to store the pair with the highest product\n    max_1 = arr[0]\n    max_2 = arr[1]\n    # Find the pair with the highest product by iterating over the array from the second element to the end\n    for i in range(2, len(arr)):\n        # Check if the product of the current element and the previous two elements is greater than the previous maximum product\n        if arr[i] * max_1 > max_2 * max_1:\n            # Update the variables to store the current pair with the highest product\n            max_1 = arr[i]\n            max_2 = max(arr[i], max_2)\n        # If the product of the current element and the previous two elements is less than the previous maximum product\n        else:\n            # Update the variables to store the current pair with the highest product\n            max_1 = arr[i]\n            max_2 = min(arr[i], max_2)\n    # Return the pair with the highest product\n    return (max_1, max_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    max_product1 = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product1 = max_product\n                max_product = current_product\n            elif current_product > max_product1:\n                max_product1 = current_product\n    return max_product1"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = [0, 0]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_pair[0]:\n                max_pair[0] = product\n                max_pair[1] = arr[i]\n            elif product > max_pair[1]:\n                max_pair[1] = product\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append((Input[i][0], Input[i][1], Input[j][1]))\n    return common_elements\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize a dictionary to store common elements\n    common_dict = {}\n    \n    # loop through the input list\n    for tup in Input:\n        # check if the first element of the tuple is already in the dictionary\n        if tup[0] in common_dict:\n            # if it is, append the second element of the tuple to the corresponding list\n            common_dict[tup[0]].append(tup[1])\n        # if the element is not already in the dictionary, add it with a list containing the second element of the tuple\n        else:\n            common_dict[tup[0]] = [tup[1]]\n    \n    # return the dictionary containing common elements\n    return common_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for i in Input:\n        for j in i:\n            if j in result:\n                result[j].append(i)\n            else:\n                result[j] = [i]\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a dictionary with the common first element as keys and a list of tuples as values.\n    '''\n    common_first = {}\n    for tup in Input:\n        if tup[0] in common_first:\n            common_first[tup[0]].append(tup)\n        else:\n            common_first[tup[0]] = [tup]\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # creating a set to store common elements of tuples\n    common = set()\n    # iterating through the list of tuples\n    for tup in Input:\n        # finding the first element of the tuple\n        first_elem = tup[0]\n        # adding the first element to the set\n        common.add(first_elem)\n    # creating a dictionary to store the frequency of each element in the list\n    freq = {}\n    # iterating through the set of common elements\n    for elem in common:\n        # finding the frequency of the element in the set\n        freq[elem] = common.count(elem)\n    # finding the maximum frequency of any element in the set\n    max_freq = max(freq.values())\n    # creating a list of tuples containing elements and their frequency\n    result = [(elem, freq[elem]) for elem in freq if freq[elem] == max_freq]\n    # returning the list of tuples containing common first elements and their frequency\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store common elements and their count\n    common_elements = {}\n    \n    # iterate through the list of tuples\n    for i, tup in enumerate(Input):\n        # if the first element is not in the dictionary, add it with a count of 1\n        if tup[0] not in common_elements:\n            common_elements[tup[0]] = 1\n        # otherwise, increment the count of the element in the dictionary\n        else:\n            common_elements[tup[0]] += 1\n    \n    # sort the dictionary by value in descending order\n    sorted_elements = sorted(common_elements.items(), key=lambda x: x[1], reverse=True)\n    \n    # return the first element of the first tuple in the sorted list\n    return sorted_elements[0][0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Create a dictionary to store the count of each element in the list\n    element_count = {}\n    \n    # Iterate through the list of tuples\n    for tup in Input:\n        \n        # If the first element is not in the dictionary, add it with a count of 1\n        if tup[0] not in element_count:\n            element_count[tup[0]] = 1\n        \n        # If the first element is already in the dictionary, increment its count by 1\n        else:\n            element_count[tup[0]] += 1\n    \n    # Find the elements with a count greater than 1 (common elements)\n    common_elements = [k for k, v in element_count.items() if v > 1]\n    \n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples where each tuple contains\n    the common first element from the input list of tuples.\n    '''\n\n    # Loop through each tuple in the input list\n    for tup in Input: \n        # Initialize an empty list to store common elements of the current tuple\n        common = []\n        # Loop through each tuple in the input list to compare with the current tuple\n        for other_tup in Input: \n            # If the current tuple has the same length as the other tuple and the first elements are equal, \n            # add the first element of the other tuple to the common list\n            if len(tup) == len(other_tup) and tup[0] == other_tup[0]: \n                common.append(other_tup[0])\n        # If there are any common elements in the current tuple, add the tuple with the common elements to the result list\n        if common: \n            tup = tuple(tup[1:] + common)\n            result.append(tup)\n\n    # Return the result list of tuples\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        if Input[i] not in common and len(set(Input[i][0])) == 1:\n            common.append(Input[i])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_elements = []  # List to store common elements\n\n    for i in range(len(Input)):  # Traverse each tuple in the list\n        for j in range(i+1, len(Input)):  # Traverse each tuple after current tuple\n            if Input[i][0] == Input[j][0]:  # Check if first element of tuple is equal\n                common_elements.append(Input[i][0])  # If yes, add it to the common_elements list\n\n    return common_elements\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # find the maximum length of the list\n    max_length = max(len(x) for x in lst) \n\n    # find the maximum length element of the list\n    max_element = max(x for x in lst if len(x) == max_length) \n\n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = \"\" \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Find the maximum length of the list\n    max_len = max([len(lst)])\n    \n    # Loop through the list and find the element having maximum length\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            return lst[i]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    This function takes a list as an input and returns the element with maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        length = len(str(element))\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # loop through each number in the list\n    total = 0\n    for num in list1:\n        # round the number to the nearest integer\n        num = round(num)\n        # add the rounded number to the total\n        total += num\n        # print the rounded number\n        print(num)\n    # print the total sum multiplied by the length of the list\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    Rounds every number in a given list of numbers and returns the sum.\n    \"\"\"\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total*len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    length = len(list1)\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= length\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    total_sum *= len(list1)\n    print(total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum\n\nprint(cube_Sum(10))  # Output: 1536"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing a variable to store the sum of cubes\n    cube_sum = 0\n\n    # looping through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # adding the cube of the current even number to the cube_sum variable\n        cube_sum += i**3\n\n    # returning the cube_sum variable as the output\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    # initialize the sum and count variables to zero\n    sum = 0\n    count = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the even number and add it to the sum\n        cube = i**3\n        sum += cube\n        \n        # increment the count of even cubes\n        count += 1\n    \n    # return the sum of the cubes and the count of even cubes\n    return sum, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 3\n    return total"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(2, n+1, 2): \n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing variables \n    sum_of_cubes = 0\n    i = 0\n    \n    # loop for first n even natural numbers \n    while i <= n: \n        sum_of_cubes += i*i*i\n        i += 2\n        \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1] # remove trailing delimiter\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = delimiter.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) +''\n    return concatenated_string.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    This function takes in a tuple and concatenates each element with the given delimiter.\n    \"\"\"\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + ':'\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    # concatenate each element of the tuple by the delimiter\n    result = delimiter.join(map(str, test_tup))\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function takes a tuple as an input and concatenates each element of the tuple using the given delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    result = result[:-len(delimiter)]\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): Tuple to be concatenated.\n    delimiter (str): Delimiter to be used between elements of tuple.\n\n    Returns:\n    str: Concatenated tuple elements by delimiter.\n\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n    average_cube = sum_cube/n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # initialize the sum and count variables to 0\n    sum = 0\n    count = 0\n    \n    # loop through the first n natural numbers and calculate the cube of each number\n    for i in range(1, n+1):\n        sum += i ** 3\n        count += 1\n    \n    # calculate the average of cubes by dividing the sum by the count\n    average = sum / count\n    \n    # return the average of cubes\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of the first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum += cube\n        count += 1\n    average = sum / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize sum to zero and count to zero\n    sum = 0\n    count = 0\n\n    # iterate through the first n natural numbers\n    for i in range(1, n + 1):\n        # calculate the cube of the current number\n        cube = i ** 3\n\n        # add the cube to the sum\n        sum += cube\n\n        # increment the count\n        count += 1\n\n    # calculate the average\n    average = sum / count\n\n    # return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        cube = i**3  \n        sum_of_cubes += cube  \n        count += 1  \n    average_of_cubes = sum_of_cubes/count  \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cubes = sum_cubes/n\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    average_of_cubes = sum_of_cubes/count\n\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for string in test_tuple:\n        if len(string) >= 1:\n            rear_elements.append(string[len(string)-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i, element in enumerate(test_tuple):\n        rear_list.append(element[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # create a list to store the odd numbers\n    odd_nums = []\n    # loop through the input list of numbers\n    for num in nums:\n        # if the number is odd, append it to the odd_nums list\n        if num % 2!= 0:\n            odd_nums.append(num)\n    # return the list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    # Create an empty list to store the odd numbers\n    odd_nums = []\n\n    # Iterate through each number in the input list\n    for num in nums:\n        # Check if the number is odd by using the modulo operator\n        if num % 2!= 0:\n            # If the number is odd, append it to the odd_nums list\n            odd_nums.append(num)\n\n    # Return the list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.sub() to replace the matched pattern with a new format string\n    new_format = r'\\3-\\2-\\1'\n\n    # Use re.sub() to replace the date format in the input string with the new format string\n    result = re.sub(pattern, new_format, dt)\n\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f\"{day}-{month}-{year}\"\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(regex, dt)\n    if match:\n        yyyy, mm, dd = match.groups()\n        return f'{dd}-{mm}-{yyyy}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Match the pattern in the given date string\n    match = re.match(pattern, dt)\n    # If the pattern is matched, extract the date from the matched string and return it in dd-mm-yyyy format\n    if match:\n        year, month, day = int(match.group(1)), int(match.group(2)), int(match.group(3))\n        date_str = f\"{day}-{month}-{year}\"\n        return date_str\n    # If the pattern is not matched, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Check if the input date is in the correct format\n    if not re.match(r'\\d{4}-\\d{2}-\\d{2}', dt):\n        raise ValueError('Input date should be in the format yyyy-mm-dd')\n\n    # Split the date into its components\n    year, month, day = dt.split('-')\n\n    # Convert the components to yyyy-mm-dd format\n    new_date = '-'.join([day, month, year])\n\n    # Return the new date in the desired format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regular expression pattern to match date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # search the date string for the pattern and replace it with dd-mm-yyyy\n    new_date = re.sub(pattern, lambda m: '-'.join([m.group(3), m.group(2), m.group(1)]), dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match the pattern of yyyy-mm-dd\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Replace the pattern with dd-mm-yyyy\n    new_date = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.search() function to match the pattern in the date string\n    match = re.search(pattern, dt)\n    # If the date format matches, extract the year, month, and day\n    if match:\n        year, month, day = match.groups()\n        # Use the datetime module to convert the date to dd-mm-yyyy format\n        from datetime import datetime\n        dt = datetime.strptime(dt, '%Y-%m-%d').strftime('%d-%m-%Y')\n    else:\n        # If the date format doesn't match, return the original date string\n        dt = dt\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the pattern in the input string and extract the groups of matched values\n    match = re.match(pattern, dt)\n    if match:\n        # Extract the matched values from the match object and convert them to new format\n        day, month, year = map(int, match.groups())\n        new_dt = f\"{day:02d}-{month:02d}-{year:04d}\"\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Step 1: Compute the increment sequence\n    inc_seq = [1] * int(n/2)\n    for i in range(1, int(n/2)):\n        inc_seq.append(2 * inc_seq[i-1] + 1)\n\n    # Step 2: Sort the array using the increment sequence\n    for i in range(inc_seq[-1], 0, -1):\n        for j in range(0, n-i):\n            # Swap adjacent elements if they are in the wrong order\n            temp = my_list[j]\n            if temp > my_list[j+i]:\n                my_list[j] = my_list[j+i]\n                my_list[j+i] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap (the gap between successive elements)\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Perform insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n\n        # Decrease the gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Get the length of the array\n    n = len(my_list)\n\n    # Get the largest power of 2 smaller than or equal to n\n    power = 1\n    while power < n:\n        power = power * 3 + 1\n\n    # Start a loop to sort the array by increments of the power of 2\n    while power > 0:\n\n        # Start a loop to compare and swap the elements\n        for i in range(power, n):\n            # Get the element to be sorted\n            temp = my_list[i]\n\n            # Find the correct position for the element\n            j = i\n            while j >= power and my_list[j - power] > temp:\n                # Swap the elements\n                my_list[j] = my_list[j - power]\n                j -= power\n\n            # Insert the element at the correct position\n            my_list[j] = temp\n\n        # Decrease the power of 2\n        power = power // 3\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                temp = my_list[j]\n                my_list[j] = my_list[j - gap]\n                my_list[j - gap] = temp\n                j -= gap\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    \n    # Step 1: Calculate the increment sequence for each gap size\n    gap = n // 2\n    increment = 1\n    \n    while gap > 0:\n        # Step 2: For each gap size, sort the array by using insertion sort\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        \n        # Step 3: Decrease the gap size\n        gap //= 2\n        \n        # Step 4: Reset the increment sequence to 1\n        increment = 1"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup += (test_tup1[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i], test_tup1[i] and test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n    test_tup1 (tuple): A tuple of integers.\n    test_tup2 (tuple): A tuple of integers.\n\n    Returns:\n    tuple: A tuple of elementwise and tuples.\n    \"\"\"\n\n    # create an empty list to store the elementwise and tuples\n    result_list = []\n\n    # iterate over both tuples and extract their elementwise and tuples\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] & test_tup2[i])\n\n    # return the tuple of elementwise and tuples\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_list = []\n    for i in range(len(test_tup1)):\n        and_list.append(test_tup1[i] & test_tup2[i])\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return\n    \n    # create empty lists for the result and the corresponding indices\n    result = []\n    indices = []\n    \n    # loop through the tuples and add their corresponding elements\n    for i in range(len(test_tup1)):\n        # add the elementwise and of the corresponding elements\n        and_element = test_tup1[i] & test_tup2[i]\n        # add the index of the corresponding element to the indices list\n        indices.append(i)\n        # add the and element to the result list\n        result.append(and_element)\n    \n    # create a tuple of the result and the indices\n    and_tup = (result, indices)\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Input tuples are of different length.'\n    \n    # Extract the elementwise and tuples\n    and_tup = [t1 & t2 for t1, t2 in zip(test_tup1, test_tup2)]\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is greater than 0\n    if discriminant > 0:\n        # Find the two solutions of the quadratic equation\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n\n        # Sort the roots in ascending order\n        if root1 < root2:\n            roots = (root1, root2)\n        else:\n            roots = (root2, root1)\n\n        # Find the directrix\n        directrix = roots[0] - roots[1] / (2*a)\n\n    # If the discriminant is equal to 0\n    elif discriminant == 0:\n        # Find the root of the quadratic equation\n        root = -b/(2*a)\n\n        # Find the directrix\n        directrix = root\n\n    else:\n        # The discriminant is less than 0\n        directrix = None\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"The given equation does not have real roots.\")\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(f\"The directrix of the parabola is: {x1} and {x2}\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Args:\n        a (float): Coefficient of the first term of the parabola.\n        b (float): Coefficient of the second term of the parabola.\n        c (float): Constant term of the parabola.\n\n    Returns:\n        float: The directrix of the parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n    elif discriminant == 0:\n        x1 = -b / (2*a)\n        x2 = -b / (2*a)\n    else:\n        raise ValueError(\"The parabola does not have a real directrix.\")\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    root1 = (-b + discriminant ** 0.5) / (2 * a)\n    root2 = (-b - discriminant ** 0.5) / (2 * a)\n    print(\"The directrix of the given parabola is:\", root1, \"or\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculating the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Checking if the discriminant is less than 0\n    if discriminant < 0:\n        print(\"There are no real roots.\")\n    else:\n        # Calculating the two roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Printing the roots\n        print(\"The directrix of the parabola is at x =\", root1)\n        print(\"The directrix of the parabola is at x =\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    det = b**2 - 4*a*c\n    \n    if det < 0:\n        print(\"The parabola has no directrix.\")\n    else:\n        x1 = (-b + math.sqrt(det))/(2*a)\n        x2 = (-b - math.sqrt(det))/(2*a)\n        \n        print(\"The directrix of the parabola is x =\", x1)\n        print(\"The directrix of the parabola is x =\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b ** 2) - (4 * a * c)\n    if discriminant > 0:\n        root1 = (-b + (discriminant ** 0.5)) / (2 * a)\n        root2 = (-b - (discriminant ** 0.5)) / (2 * a)\n        print(\"The directrix is between root1 and root2.\")\n        print(\"Root1: {:.2f}\".format(root1))\n        print(\"Root2: {:.2f}\".format(root2))\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        print(\"The directrix is the root of the quadratic equation.\")\n        print(\"Root: {:.2f}\".format(root))\n    else:\n        print(\"The quadratic equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = 4*a*c - 4*b\n    \n    if d > 0:\n        root1 = (-b + d**0.5) / (2*a)\n        root2 = (-b - d**0.5) / (2*a)\n    elif d < 0:\n        root1 = (-b - d**0.5) / (2*a)\n        root2 = (-b + d**0.5) / (2*a)\n    else:\n        root1 = -b / (2*a)\n        root2 = -b / (2*a)\n    \n    return (root1 + root2) / 2"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        return False\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets and check for intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = []\n    for item in list1:\n        if item in list2:\n            common.append(item)\n    if common:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    common = []\n    for element in list1:\n        if element in list2 and element not in common:\n            common.append(element)\n    return bool(common)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    # find the intersection of the two sets\n    intersection = list1.intersection(list2)\n    \n    # check if there is at least one element in the intersection set\n    return len(intersection) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n    \n    # Calculate the sum of the base1, base2, and height of the trapezium\n    sum_of_sides = base1 + base2 + height\n    \n    # Calculate the product of the base1 and height\n    product_of_base1_height = base1 * height\n    \n    # Calculate the sum of the areas of two adjacent trapezoids\n    adjacent_trapezoid_area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the sum of the areas of two sides of the trapezoid\n    base1_area = 0.5 * base1 ** 2\n    base2_area = 0.5 * base2 ** 2\n    \n    # Calculate the sum of the areas of the two adjacent trapezoids and the sides of the trapezoid\n    total_area = adjacent_trapezoid_area + base1_area + base2_area\n    \n    # Calculate the sum of the areas of the two adjacent trapezoids and the sides of the trapezoid and divide the result by 2\n    sum_of_areas = (total_area + adjacent_trapezoid_area) / 2\n    \n    # Calculate the median length of the trapezium\n    median_length = sum_of_areas / product_of_base1_height\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    side1 = base1 + base2\n    area = 0.5 * side1 * height\n    side2 = height / area\n\n    return min(side1, side2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculates the median length of a trapezium using the trapezoidal rule.\n\n    Parameters:\n    base1 (float): The length of the first base of the trapezium.\n    base2 (float): The length of the second base of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the length of the trapezium\n    trapezium_length = 2 * base1 + 2 * base2\n\n    # Calculate the number of trapezoids\n    num_trapezoids = area / trapezium_length\n\n    # Calculate the area of each trapezoid\n    area_trapezoid = area / num_trapezoids\n\n    # Calculate the length of each trapezoid\n    length_trapezoid = trapezium_length / num_trapezoids\n\n    # Calculate the trapezoid medians\n    median_base1 = base1 * (1 - area_trapezoid / 2)\n    median_base2 = base2 * (1 + area_trapezoid / 2)\n\n    # Calculate the median height\n    median_height = height * area_trapezoid\n\n    # Calculate the median length of the trapezium\n    median_trapezium_length = 2 * median_base1 + 2 * median_base2\n\n    # Calculate the median of the trapezium length\n    median_trapezium = median_trapezium_length * (1 - 1 / num_trapezoids)\n\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area1 = 0.5*base1*base2\n    area2 = 0.5*base2*height\n    area3 = 0.5*base1*height\n    total_area = area1 + area2 + area3\n    median_area = total_area/3\n    median_height = 0.5*height\n    median_length = 0.5*area1\n    if median_length < median_height:\n        median = median_height\n    elif median_area < median_height:\n        median = median_area\n    else:\n        median = median_length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height/2\n    area_trapezium = (base1 + base2)/2\n    area_base1 = area_trapezium - half_height\n    area_base2 = area_trapezium + half_height\n\n    area_list = [area_base1, area_base2]\n    area_list.sort()\n\n    median_area = area_list[1]\n    median_length = (area_base1 + area_base2)/2\n\n    return median_length, median_area\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    length = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = (base1 * height) + (base2 * height)\n    \n    # Calculate the median length of the trapezium\n    median_length = length * 0.5\n    \n    # Calculate the area of the trapezium above the median\n    area_above_median = area * (median_length - length)\n    \n    # Calculate the area of the trapezium below the median\n    area_below_median = area * (length - median_length)\n    \n    # Determine the median of the two areas\n    if area_above_median > area_below_median:\n        median = area_above_median\n    else:\n        median = area_below_median\n    \n    # Return the median of the two areas\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    This function calculates the length of the median side of a trapezium based on its base lengths and height.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n    \n    # Calculate the length of each half of the trapezium\n    half1 = 0.5 * height * (base1 + base2)\n    half2 = 0.5 * height * (base1 - base2)\n    \n    # Calculate the length of the median side of the trapezium\n    median = 0.5 * (half1 + half2)\n    \n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Base length of the trapezium\n    base = base1 + base2\n\n    # First half of the trapezium\n    half1 = base1 + (base2/2)\n\n    # Second half of the trapezium\n    half2 = base2 - (base1/2)\n\n    # Length of the first half\n    len1 = half1 + height\n\n    # Length of the second half\n    len2 = height + half2\n\n    # Total length of the trapezium\n    trapezium_length = base + (len1 + len2)\n\n    # Sort the lengths of the trapezium\n    lengths = sorted([len1, len2])\n\n    # Calculate the median length of the trapezium\n    if trapezium_length % 2 == 0:\n        median = (lengths[0] + lengths[1])/2\n    else:\n        median = lengths[1]\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium using the trapezoidal rule.\n\n    Parameters:\n    base1, base2, height -- the dimensions of the trapezium\n\n    Returns:\n    float -- the median length of the trapezium\n    \"\"\"\n    area = 0.5 * (base1 + base2) * height\n    base1_length = (area / (base1 + base2)) ** 0.5\n    base2_length = (area / (base1 + base2)) ** 0.5\n    return 0.5 * (base1_length + base2_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    length1 = base1 + half_height\n    length2 = base2 + half_height\n    median = (length1 + length2) / 2\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater_than = True\n            break\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # loop through each element of the array and check if it is greater than the entered number\n    for i in arr:\n        if i > number:\n            print(\"Number is greater than the element at index\", i)\n            break\n        else:\n            print(\"Number is not greater than the element at index\", i)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Loop through each element in the array\n    for num in arr:\n        # If the number is greater than the current element, print True\n        if number > num:\n            print(True)\n            # If the number is not greater than any element, print False\n            break\n        # If the number is not greater than the current element, continue to the next iteration\n        else:\n            print(False)\n\n    # If the loop completes without finding any greater elements, print False\n    print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    # Find all matches of the pattern 'a.*b'\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n\n    # If there are matches, print them\n    if matches:\n        print(f\"Matches found: {matches}\")\n    else:\n        print(\"No matches found\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b.*b\\b.*'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b{1,})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1,}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print('No match found')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[bB]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # return the last digit of the number\n    return num_str[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # convert integer to string and get the last digit\n    last_digit = str(n)[-1]\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert number to string\n    str_num = str(n)\n    # find the length of the string\n    len_str = len(str_num)\n    # get the last character of the string\n    last_char = str_num[-1]\n    # convert the last character to an integer\n    last_int = int(last_char)\n    # return the last integer digit\n    return last_int"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n\n    :param n: the number whose last digit we want to find.\n    :return: the last digit of the number `n`.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)  # Convert negative number to positive number\n        return n % 10  # Return the last digit of the positive number\n    else:\n        n = str(n)  # Convert number to a string\n        return int(n[-1])  # Return the last digit of the string"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list containing the negative numbers in the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the input list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a list of negative numbers from the given list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Initialize an empty list to store negative numbers\n    neg_list = []\n    # Iterate over each element in the list\n    for num in list1:\n        # Check if the element is negative\n        if num < 0:\n            # If it is, add it to the negative list\n            neg_list.append(num)\n    # Return the negative list\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([char for char in str1 if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 1:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    return ''.join(char for char in str1 if char.isdigit() or (char.isalpha() and int(char) % 2 == 0))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the even characters\n    result = \"\"\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is odd\n        if int(char) % 2 == 1:\n            # If the character is odd, add it to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit() or (char.isalpha() and int(char) % 2 == 0)])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isalpha(), str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty list to store odd characters\n    odd_chars = []\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is odd\n        if int(char) % 2!= 0:\n            # if it is odd, add it to the odd_chars list\n            odd_chars.append(char)\n    # convert the odd_chars list to a string and return it\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    str1 = str1.lower()\n    odd_chars = ['1', '3', '5', '7', '9']\n    for char in odd_chars:\n        str1 = str1.replace(char, '')\n    return str1"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and (test_list[i], test_list[j]) in test_list[j:i+1] and (test_list[j], test_list[i]) in test_list[:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list or (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i + 1:j] or (test_list[j][0], test_list[i][0]) in test_list[i + 1:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1:] and (test_list[j][0], test_list[i][0]) in test_list[j][1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][1], test_list[j][1]) in test_list[i][0]:\n                count += 1\n\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    \n    # iterate over each integer in the list\n    for num in L:\n        # check if the integer is divisible by 2\n        if num % 2 == 0:\n            # if it is, add it to the result variable\n            result += num\n    \n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 1\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for n in L:\n        result *= n\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        if isinstance(num, int) and num % 2 == 0:\n            total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the accumulator to 0\n    accumulator = 0\n    \n    # iterate over the list of integers\n    for x in L:\n        # check if the integer is a multiple of 3\n        if x % 3 == 0:\n            # if so, add it to the accumulator\n            accumulator += x\n    \n    # return the accumulator as the single integer\n    return accumulator"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    product = 1\n    for n in L:\n        product *= n\n    return product"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each element in the list\n    for i in L:\n        # Multiply the current element by 10\n        result *= 10\n        \n        # Add the last digit of the current element to the result\n        result += i % 10\n    \n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r\"\\b([a-z]|-)(ing|ed|s|y)\\b\"\n    # Use re.findall() to find all the matches in the given text\n    matches = re.findall(pattern, text)\n    # Create a dictionary to store the adverbs and their positions\n    adverbs = {}\n    # Loop through each match and add it to the adverbs dictionary\n    for match in matches:\n        adverb = match[0]\n        position = matches.index(match)\n        adverbs[adverb] = position\n    # Return the adverbs dictionary\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a list of tuples where the first element is the adverb and the second element is the position in the sentence.\n    '''\n    # Find all instances of adverbs using regular expression\n    adverbs = re.findall(r'\\b\\w*?(ing|ed|ing|ly|ing|est|ly)\\b', text, re.IGNORECASE)\n    adverb_position = []\n\n    # Iterate through adverbs and their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Calculate the position in the sentence\n        position = text.lower().find(adverb.lower())\n\n        # Append the tuple to the list\n        adverb_position.append((adverb, position))\n\n    return adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w*ing\\b', text)\n    if not adverbs:\n        return None\n    else:\n        adverb_positions = []\n        for adverb in adverbs:\n            adverb_positions.append(text.find(adverb))\n        return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['well', 'good', 'great', 'bad', 'terrible']\n    pattern = r'\\b(' + '|'.join(re.escape(adv) for adv in adverbs) + r')\\b'\n    matches = re.findall(pattern, text)\n    for i, match in enumerate(matches):\n        print(f'{match} found at position {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the regular expression pattern for adverbs\n    pattern = r'\\b(adv|advs|advantage|advantages|advantaged|advantagedly|advantages|advantagesly|advantageously|advantagesously|advantaging|advantagingly|advantageous|advantages|advantagesly|advantagesously|advantageous|advantagefully|advantagefully|advantages|advantagesly|advantages|advantageously|advantages|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|advantageously|adv"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence using regular expressions\n    matches = re.findall(r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['very', 'great', 'good', 'better', 'well', 'well-known','really','most','seriously', 'amazingly', 'amazing', 'awfully', 'awful', 'terrible', 'terribly', 'awhile', 'awhile', 'ever', 'ever', 'never', 'never', 'always', 'always', 'never', 'never', 'neither', 'neither', 'both', 'both', 'either', 'either', 'both', 'both', 'either', 'either']\n    pattern = r'\\b(' + '|'.join(adverbs) + r')\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end]\n        print(f\"Adverb: {adverb}\")\n        print(f\"Position: {start} to {end}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern to find adverbs\n    pattern = r'\\b(adverb)(\\w*)\\b'\n    \n    # Use re.findall() method to find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # Initialize empty list to store the adverbs and their positions\n    adverbs = []\n    \n    # Loop through all matches and extract the adverbs and their positions\n    for match in matches:\n        adverb, position = match[0], match[1]\n        adverbs.append((adverb, position))\n        \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a list of tuples where each tuple contains the adverb and its position in the sentence.\n    '''\n    # Define regular expressions for detecting adverbs and their positions in the sentence\n    adverb_pattern = re.compile(r'\\b([a-z]+)\\b\\W*(?:on|before|after|above|below|beside|inside|next|before|behind)\\b')\n    # Find all matches of the adverb pattern in the input string\n    matches = re.findall(adverb_pattern, text)\n    # Convert the matches to a list of tuples\n    adverbs = [(match[0], i) for i, match in enumerate(matches)]\n    # Sort the list of tuples by their positions\n    adverbs.sort(key=lambda x: x[1])\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b\\w*[a-z]+\\w*s\\b'\n\n    # Find all occurrences of adverbs in the given text\n    adverbs = re.findall(pattern, text)\n\n    # Initialize a dictionary to store adverb positions\n    adverb_positions = {}\n\n    # Loop through all adverbs and their positions in the text\n    for i, adverb in enumerate(adverbs):\n        # Split the adverb into parts\n        parts = adverb.split()\n\n        # Check if the adverb has a number before it\n        if parts[0].isdigit():\n            adverb_positions[adverb] = i\n        else:\n            adverb_positions[adverb] = -1\n\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * (l**2)\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    side_area = 6 * l**2\n    surface_area = side_area * 6\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2  # calculate surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create a new array to store positive numbers\n    positive_arr = array('i')\n    # iterate through the array and append positive numbers to the new array\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n    # find the total number of positive numbers in the array\n    total = len(nums)\n    # find the ration of positive numbers by dividing the total by the length of the positive array\n    positive_ratio = total / len(positive_arr)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i', [0]*len(nums))\n    neg_nums = array('i', [0]*len(nums))\n\n    for num in nums:\n        if num > 0:\n            pos_nums.append(1)\n        else:\n            neg_nums.append(1)\n\n    total = pos_nums + neg_nums\n    pos_ratio = sum(pos_nums) / sum(total)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    \n    if positive_count == 0:\n        return 0\n    else:\n        return positive_count / (positive_count + negative_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Returns a tuple containing the number of positive integers and their count.\n    \"\"\"\n    # Initialize variables for positive count and count of all integers\n    pos_count = 0\n    count = 0\n    # Loop through each integer in the array\n    for num in nums:\n        # If the integer is positive, increment the positive count and increment the count of all integers\n        if num > 0:\n            pos_count += 1\n            count += 1\n        # If the integer is negative, increment the count of all integers\n        else:\n            count += 1\n    # Calculate the ration of positive integers and return a tuple containing the count and the ration\n    ration = pos_count / count\n    return pos_count, ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i', [])\n    negative = array('i', [])\n    for num in nums:\n        if num > 0:\n            positive.append(1)\n        else:\n            negative.append(1)\n    positive_count = float(len(positive)) / float(len(nums))\n    negative_count = float(len(negative)) / float(len(nums))\n    print(\"The ration of positive numbers is:\", positive_count)\n    print(\"The ration of negative numbers is:\", negative_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    zero = 0\n    \n    # loop through the array\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        else:\n            zero += 1\n    \n    # calculate the ration of positive numbers\n    positive_ratio = positive / (positive + negative + zero)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(arr)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst): \n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for i in lst:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -999999999\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0] # initialize the max_neg variable with the first element of the list\n    for num in list1:\n        if num < 0 and num > max_neg: # check if the current number is negative and larger than the max_neg variable\n            max_neg = num # update the max_neg variable if the current number is greater than the max_neg variable\n    return max_neg # return the max_neg variable"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = None\n    for num in list1:\n        if num < 0:\n            if largest_num is None or num > largest_num:\n                largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = [num for num in list1 if num < 0]\n    if neg_list:\n        return max(neg_list)\n    else:\n        return None"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf') #initialize the maximum negative number to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num #if a negative number is found and its value is greater than the current maximum negative number, update the maximum negative number\n    return max_neg #return the maximum negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n\n        # split each tuple into a list\n        temp_list = list(test_list[i])\n\n        # trim each list by k elements\n        temp_list = temp_list[:K]\n\n        # join the trimmed list back into a tuple\n        test_list[i] = tuple(temp_list)\n\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], test_list[i][j][1], test_list[i][j][2], test_list[i][j][3][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        tup = tup[:K]\n        result.append(tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n        test_list[i] = test_list[i][:K]\n        test_list[i] = tuple(test_list[i])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # Loop through the given tuple list\n    for i, tup in enumerate(test_list):\n        # Check if the length of the current tuple is greater than or equal to k\n        if len(tup) >= K:\n            # Trim the tuple by k elements\n            trimmed_tup = tup[:K]\n            # Add the trimmed tuple to the list\n            trimmed_list.append(trimmed_tup)\n    \n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tuple([x[K] for x in tup])\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j < K:\n                test_list[i][j] = None\n            else:\n                break\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tuple = tuple(tup[i:i+K] for i in range(len(tup), 0, -1))\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate through the list of tuples and trim each tuple by k\n    for i in range(len(test_list)):\n        test_list[i] = tuple([x for x in test_list[i] if x!= 'x'])\n    \n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # create a new tuple with length of the maximum length of the two input tuples\n    new_tup = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        # add the product of the elements at the corresponding indices in both input tuples\n        new_tup += (test_tup1[i] * test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return\n\n    for i in range(len(test_tup1)):\n        print(f\"{i+1}: {test_tup1[i]} x {test_tup2[i]} = {test_tup1[i] * test_tup2[i]}\")"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # get the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # check if the two tuples have the same length\n    if len1!= len2:\n        print(\"The two tuples do not have the same length!\")\n        return\n    \n    # create an empty tuple to store the result\n    result_tup = ()\n    \n    # loop through each element in the two tuples\n    for i in range(len1):\n        # multiply the corresponding elements from the two tuples and append it to the result tuple\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_result = []\n    for i in range(len(test_tup1)):\n        multiplication_result.append(test_tup1[i] * test_tup2[i])\n    return multiplication_result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements!\")\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Get the value of the first tuple at index i\n        val1 = test_tup1[i]\n\n        # Iterate through each element of the second tuple\n        for j in range(len(test_tup2)):\n            # Get the value of the second tuple at index j\n            val2 = test_tup2[j]\n\n            # Multiply the values at index i and j and append the result to the result_list\n            result_list.append(val1 * val2)\n\n    # Convert the result_list to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the two input tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuple lengths do not match.\"\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Perform index wise multiplication of tuple elements\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_lst = []\n    for key, value in count.items():\n        count_lst.append((key, value))\n    for item in lst:\n        if item in count_lst:\n            count_lst[count_lst.index(item)][1] += 1\n        else:\n            count_lst.append((item, 1))\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a set to eliminate duplicates\n    set_lst = set(lst)\n    # Create a dictionary to store the counts of each element in the set\n    counts = Counter(tup)\n    # Create a list to store the counts for each element in the set\n    counts_lst = []\n    # Loop through each element in the set_lst\n    for elem in set_lst:\n        # Check if the element is present in the counts dictionary\n        if elem in counts:\n            # Append the count for the element to the counts_lst list\n            counts_lst.append(counts[elem])\n        else:\n            # If the element is not present in the counts dictionary, append 0 to the counts_lst list\n            counts_lst.append(0)\n    return counts_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for i in lst:\n        count[i] += tup.count(i)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple `tup` and a list `lst` as input, and returns a dictionary where\n    the keys are the elements of `lst` and the values are the number of occurrences of each\n    element in `tup`.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in a tuple and a list and counts the occurrence of all elements in the list in the tuple.\n    '''\n    counter = Counter(tup)\n    for item in lst:\n        if item in counter:\n            counter[item] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)  # count the occurrences of each element in the list\n    count_list = []  # store the count of each element in the tuple\n    for i in range(len(tup)):  # iterate over each element in the tuple\n        if tup[i] in count_dict:  # check if the element is in the list\n            count_list.append(count_dict[tup[i]])  # append the count of the element to the list\n    return count_list  # return the list of count of each element in the tuple"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(tup)\n    for elem in lst:\n        counts[elem] += 1\n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    set_lst = set(lst)\n\n    # Create a dictionary to count the occurrence of each element in the set\n    count_dict = Counter(tup)\n\n    # Count the occurrence of each element in the set and store it in a list\n    count_list = [count_dict[x] for x in set_lst]\n\n    # Return the list of count for each element in the tuple\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    return Counter(tup).most_common(len(lst))"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a Counter object to count the occurrence of each element in the list\n    counter = Counter(tup[lst.index(i) for i in lst])\n    return counter"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = [1, 2, 4, 7, 12, 19, 28, 41, 56, 75]\n    sum_list = []\n    for i in range(n):\n        sum_list.append(perrin_list[i]*perrin_list[i])\n    return sum_list"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 3, 4, 6, 10, 15, 20, 25, 30]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initializing variables\n    p = 1\n    s = 0\n    # calculating perrin numbers\n    while p <= n:\n        s += p\n        p += 1\n    # returning the sum\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += p\n        p += 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin_number(i)\n    return sum\n\ndef perrin_number(n):\n    '''\n    Return the n-th perrin number.\n    '''\n    if n < 2:\n        return 0\n    return (2*n - 1)**2"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(1, n+1):\n        p = 1/i + p\n    return p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i * (2*i-1)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    perrin_numbers = [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864, 268435456, 1073741824, 4294967296]\n\n    total_sum = 0\n\n    for num in perrin_numbers:\n        total_sum += num\n\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in l:\n        if len(i) == l[0]:\n            extracted_strings.append(i)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size of strings to extract and returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n        else:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a target size as input and\n    returns a new list containing the extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return l[:l.index(str)+1]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(str) <= l[i]:\n            result.append(str)\n            break\n        else:\n            result.append(str[:l[i]])\n            str = str[l[i]:]\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            extracted_strings.append(str)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract a specified size of strings from a list of string values.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == l:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # use regular expression to remove all whitespaces\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Removes all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # define a regular expression pattern to match whitespace characters\n    pattern = re.compile(r'\\s+')\n    # remove whitespace characters from the string using the pattern\n    text2 = re.sub(pattern, '', text1)\n    # return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Removing all whitespaces using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expressions to remove all whitespaces\n    text1 = re.sub('\\s+','', text1)\n    # use string slicing to remove the first and last whitespaces\n    text1 = text1[1:-1]\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Using regex to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all spaces\n    text1 = re.sub(r'\\s+','', text1)\n    # remove all tabs\n    text1 = re.sub(r'\\t+','', text1)\n    # remove all newlines\n    text1 = re.sub(r'\\n+','', text1)\n    # remove all spaces in the beginning and end of the string\n    text1 = text1.strip()\n    # return the modified string\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount: \n        return 0\n    else: \n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = actual_cost / sale_amount\n    if loss_percent < 0.1:\n        return 0\n    else:\n        return actual_cost * (1 - loss_percent)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_rate = 0.05 # assume 5% loss rate\n    \n    if actual_cost > sale_amount:\n        loss_amount = (actual_cost - sale_amount) * loss_rate\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost < sale_amount:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n        \n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount\n    else: \n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0 \n    for i in range(1,n+1) : \n        if n%i == 0 and i % 2 == 0 : \n            total += i \n    return total \n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum of even factors to zero\n    sum = 0\n\n    # loop through all odd factors of n\n    for i in range(1, int(math.sqrt(n))+1, 2): \n        # check if n is divisible by i\n        if n % i == 0: \n            # if it is, add i to sum\n            sum += i\n\n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize a boolean array to mark all numbers as prime\n    isPrime = [True] * (n+1)\n    # mark 0 and 1 as prime\n    isPrime[0] = False\n    isPrime[1] = False\n    # mark all multiples of 2 as not prime\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if isPrime[i]:\n            for j in range(i*i, n+1, i):\n                isPrime[j] = False\n    # find the sum of even factors of n using the prime boolean array\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        if isPrime[i]:\n            sum_even += i\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    if n > 2:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize variables\n    sum = 0\n    i = 1\n    \n    # Loop through numbers from 1 to sqrt(n)\n    while i <= int(math.sqrt(n)):\n        # Check if i is even and a factor of n\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        # Move on to the next number\n        i += 1\n    \n    # Return the sum of even factors of n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors_sum += i\n    return even_factors_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initializing the sum to 0\n    sum_even_factors = 0\n\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # if the number is even\n        if i % 2 == 0:\n            # add it to the sum\n            sum_even_factors += i\n\n    return sum_even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # Define a regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    \n    # Use the re.search() method to search for a match in the text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return the matched text\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[zZ]\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_wordz(text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b(z)\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]+z\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b[a-z]+\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]{3,}\\b\\sz'\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if it contains 31 days, else False.\n    \"\"\"\n    if monthnum < 1 or monthnum > 12:\n        return False\n    else:\n        days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        return True if days_in_months[monthnum-1] == 31 else False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_num = monthnum2\n    if month_num in [1,3,5,7,8,10,12]:\n        return True\n    elif month_num in [4,6,9,11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number\")\n        return\n\n    # Check if the month number contains 31 days or not\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            print(monthnum2, \"has 29 days\")\n        else:\n            print(monthnum2, \"has 28 days\")\n    else:\n        print(monthnum2, \"has 30 days\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 2 == 0:\n        if monthnum2 % 4 == 0 and monthnum2 % 100!= 0 or monthnum2 % 400 == 0:\n            if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                return True\n        else:\n            if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n                return True\n    else:\n        if monthnum2 % 4 == 0 and monthnum2 % 100!= 0 or monthnum2 % 400 == 0:\n            if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                return True\n        else:\n            if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n                return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum <= 0 or monthnum > 12:\n        return \"Invalid month number\"\n    elif monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return \"31 days\"\n        else:\n            return \"28 days\"\n    else:\n        return \"30 days\"\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 > 0 and monthnum2 <= 12:\n        return days_in_month[monthnum2-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate through the list and reverse each string in the list\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [word[::-1] for word in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # Reverse the string using slicing\n\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and finds the sublist having minimum length.\n    '''\n    # Initialize two variables to store the minimum sublist and its length\n    min_sublist = lst\n    min_length = len(min_sublist)\n    \n    # Loop through the list and find the sublist having minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of lists as input and returns the sublist with minimum length. \n    If multiple sublists have same minimum length, it returns the first one.\n    '''\n    \n    # initialize minimum length as infinity\n    min_len = float('inf')\n    \n    # initialize minimum length sublist\n    min_sublist = []\n    \n    # loop through all sublists\n    for sublist in lst:\n        \n        # check if length of sublist is less than minimum length\n        if len(sublist) < min_len:\n            \n            # update minimum length\n            min_len = len(sublist)\n            \n            # update minimum length sublist\n            min_sublist = sublist\n            \n    # return minimum length sublist\n    return min_sublist\n    \n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize an empty list to store the minimum sublist\n    \n    for sublist in lst: # iterate over each sublist in the input list\n        if len(sublist) < min_len: # if the length of the sublist is less than the current minimum length\n            min_len = len(sublist) # update the minimum length\n            min_sublist = sublist # update the minimum sublist\n    \n    return min_sublist # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and finds the sublist with the minimum length.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    min_sublist = None # initialize minimum sublist to none\n\n    for sublist in lst: # iterate over all sublists in the list\n        if len(sublist) < min_len: # if current sublist has a smaller length\n            min_len = len(sublist) # update minimum length\n            min_sublist = sublist # update minimum sublist\n\n    return min_sublist # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an argument and returns the sublist with the minimum length.\n    '''\n    length = len(lst)\n    min_length = length\n    min_list = []\n    for i in range(length):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_list = lst[i]\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_lst = lst[i:j+1]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist having \n    minimum length.\n    '''\n    min_sublist = None\n    min_length = None\n    for sublist in lst:\n        if min_sublist is None or len(sublist) < min_length:\n            min_sublist = sublist\n            min_length = len(sublist)\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = lst[0]\n    min_len = len(sublist)\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            sublist = lst[i]\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n            \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two arguments - length and breadth of the rectangle.\n    It returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all uppercase substrings in the input string\n    matches = pattern.findall(str1)\n    # Iterate over the matches and replace them with empty strings\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    new_str = pattern.sub('', str1)\n    return new_str"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # define a regex pattern for matching uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n\n    # iterate over each match in the string using regex search method\n    matches = pattern.findall(str1)\n\n    # remove each uppercase substring from the string and return the result\n    for match in matches:\n        str1 = re.sub(r'(?i)'+match, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    matches = re.findall(pattern, str1)\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)(\\w)(?=[A-Z])')\n    # use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # loop through the matches and replace them with empty strings\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to match all uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n    # Replace uppercase substrings with an empty string\n    str1 = pattern.sub('', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]+', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # remove uppercase substrings using regular expression\n    result = re.sub(r'\\b[A-Z]{1}[a-z]*\\b', '', str1)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # Use a regular expression to match uppercase substrings\n    uppercase_pattern = re.compile(r'[A-Z]+')\n\n    # Find all matches of the pattern in the string\n    matches = uppercase_pattern.findall(string)\n\n    # Remove all matches from the string and return the result\n    return string.replace(match, '') for match in matches"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n    return first_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    # loop through each sublist in the list\n    for sublist in lst:\n        # check if the sublist is not empty\n        if sublist:\n            # get the first element of the sublist\n            first_element = sublist[0]\n            # print the first element of each sublist\n            print(first_element)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_element = []\n    for sublist in lst:\n        first_element.append(sublist[0])\n    return first_element\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for item in lst:\n        res.append(item[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case = 0\n    for i in str:\n        if i.isupper():\n            upper_case += 1\n    return upper_case"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of uppercase characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    combinations = []\n\n    # loop through each element of the list1\n    for i in range(len(list1)):\n        # create a list to store the remaining elements in the list1\n        remaining_list = list1[i:]\n\n        # loop through each remaining element\n        for j in range(len(remaining_list) + 1):\n            # create a combination list by combining the current element with the remaining elements\n            combination = [list1[i]] + remaining_list[:j]\n\n            # add the combination to the list of combinations\n            combinations.append(combination)\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as an argument and returns all possible combinations of the elements in the list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(tuple(sorted([lst[i], lst[j]])))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Define the length of the list\n    n = len(list1)\n    # Initialize an empty list to store the combinations\n    combinations = []\n    # Initialize the indices for the two pointers\n    i = 0\n    j = 0\n    # Loop through all possible combinations of two elements\n    while j < n:\n        # Check if the current combination is valid\n        valid = True\n        # Loop through the current combination\n        for k in range(i, j):\n            # Check if the element at the current index is already in the combination\n            if list1[k] in combinations[-1]:\n                valid = False\n                break\n        # If the combination is valid, append it to the list of combinations\n        if valid:\n            combinations.append([list1[i], list1[j]])\n        # Move the pointers to the next elements\n        i += 1\n        j += 1\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i):\n            print(list1[j], end=' ')\n        print()"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            res.append(list1[i:j])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a copy of the list to avoid modifying it.\n    combined_list = list1.copy()\n    # Initialize a list to store all combinations.\n    result = []\n    # Use two nested loops to generate all combinations.\n    for i in range(len(combined_list)):\n        for j in range(i+1, len(combined_list)+1):\n            # Combine the elements and append them to the result list.\n            result.append(combined_list[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    negative_product = 1\n    for num in arr:\n        if num < 0:\n            negative_product *= num\n        else:\n            current_product *= num\n            max_product = max(max_product, current_product)\n            negative_product = 1\n        current_product = max(negative_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp_max = max(max_so_far * arr[i], arr[i], min_so_far * arr[i])\n        temp_min = min(max_so_far * arr[i], arr[i], min_so_far * arr[i])\n        \n        max_so_far = temp_max\n        min_so_far = temp_min\n        \n        max_product = max(max_product, max_so_far)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    end = 0\n\n    while end < len(arr):\n        if current_product > 0:\n            current_product *= arr[end]\n        else:\n            current_product = arr[end]\n\n        if current_product > max_product:\n            max_product = current_product\n            start = end\n\n        end += 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of a given array.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    int: maximum product subarray\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n    neg_product = 1\n    \n    for i in range(1, len(arr)):\n        if current_product > 0:\n            current_product *= arr[i]\n        elif current_product < 0:\n            current_product = arr[i]\n            neg_product = max(neg_product, current_product)\n        else:\n            current_product = arr[i]\n        \n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n        result = max(result, max_product)\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = 1\n\n    for num in arr:\n        if num < 0:\n            curr_product = 1\n        else:\n            curr_product *= num\n\n        if curr_product > max_product:\n            max_product = curr_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Update current product\n        current_product *= arr[i]\n        \n        # If current product is negative, reset to 1\n        if current_product < 0:\n            current_product = 1\n        \n        # Update max product if current product is greater\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        value = dict[key]\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[value]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if dictionary is empty\n    if not dict:\n        return True\n    \n    # Get the first key and value from the dictionary\n    key = next(iter(dict))\n    value = dict[key]\n    \n    # Check if all values are the same for the given key\n    for i in range(1, n):\n        if dict[key]!= value:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    for val in dict.values():\n        if val!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict.keys()]\n    return all(values[0] == val for val in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values.count(values[0]) == len(values)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create a new dictionary to store the non-empty items\n    result = {}\n    # Loop through the items in the original dictionary\n    for key, value in dict1.items():\n        # If the value is not empty, add it to the new dictionary\n        if value!= '':\n            result[key] = value\n    # Return the new dictionary\n    return result"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    for i in range(n):\n        max_product = max(max_product, arr[i] * arr[i+1])\n        min_product = min(min_product, arr[i] * arr[i+1])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n\n    for i in range(n):\n        if i == 0:\n            max_product_ending_here = arr[0]\n        else:\n            max_product_ending_here = max(max_product_ending_here * arr[i], max_product_ending_here * arr[i], arr[i])\n\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, n):\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n\n    return max(max_product, min_product)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Calculate the length of the array\n    n = len(arr)\n\n    # Initialize the maximum product and the current product as 1\n    max_product = 1\n    current_product = 1\n\n    # Loop through all possible subsequences of length n\n    for i in range(1, n):\n        # Check if the element is increasing\n        if arr[i] > arr[i-1]:\n            # Update the current product\n            current_product *= arr[i]\n            # Update the maximum product if the current product is greater\n            if current_product > max_product:\n                max_product = current_product\n        else:\n            # Reset the current product\n            current_product = 1\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n        arr (list): A list of integers representing the array.\n\n    Returns:\n        int: The maximum product of increasing subsequence multiplied by the length of the subsequence.\n\n    \"\"\"\n    # Initialize variables\n    max_val = float('-inf')\n    curr_max = arr[0]\n    prev_max = float('-inf')\n    subsequence_length = 1\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            subsequence_length = 1\n        elif arr[i] < curr_max:\n            subsequence_length += 1\n            curr_max = prev_max + (subsequence_length - 1) * arr[i]\n        else:\n            continue\n\n        if curr_max > max_val:\n            max_val = curr_max\n\n        prev_max = curr_max\n\n    return max_val * subsequence_length\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # Initialize variables\n    max_product = float('-inf')\n    curr_product = 1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current number is greater than the maximum product\n        if arr[i] > max_product:\n            # Update the maximum product and reset the current product\n            max_product = arr[i]\n            curr_product = arr[i]\n        elif arr[i] < 0:\n            # Reset the current product\n            curr_product = 1\n        \n        # Multiply the current product with the next number in the array\n        curr_product *= arr[i]\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Initialize two variables to store the maximum product and the maximum product ending at index i\n    max_prod = float('-inf')\n    max_ending_at_i = float('-inf')\n\n    # Initialize a variable to store the current product\n    curr_prod = 1\n\n    # Loop through the array starting from the second element (index 1)\n    for i in range(1, n):\n        # If the current element is greater than the maximum product ending at the previous index, update both max_prod and max_ending_at_i\n        if arr[i] > max_ending_at_i:\n            max_prod = curr_prod\n            max_ending_at_i = arr[i]\n\n        # If the current element is less than the maximum product ending at the previous index, update curr_prod\n        else:\n            curr_prod *= arr[i]\n\n    # Return the maximum product formed by multiplying numbers of the increasing subsequence of the array\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Update max_ending_here\n        max_ending_here = max(num, max_ending_here * num)\n\n        # Update current_product\n        current_product = max(current_product, max_ending_here)\n\n        # Update max_product\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    # Traverse through the array\n    for i in range(1, n):\n        # Update maximum\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        # Update minimum\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        # Update maximum product\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    # Initialize variables for the maximum product and the current maximum subsequence product\n    max_product = float('-inf')\n    curr_product = 1\n    \n    for i in range(len(arr)):\n        # Check if the current element is greater than the current maximum subsequence product\n        if arr[i] > curr_product:\n            # Update the current maximum subsequence product\n            curr_product = arr[i]\n        else:\n            # Update the maximum product if the current element is less than the current maximum subsequence product\n            max_product = max(max_product, curr_product)\n            # Reset the current maximum subsequence product to the current element\n            curr_product = arr[i]\n    \n    # Update the maximum product with the last subsequence product\n    max_product = max(max_product, curr_product)\n    \n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # get the length of the tuple\n    n = len(test_tup)\n    \n    # loop over the neighboring elements\n    for i in range(n):\n        # compute the sum of the current and next elements\n        sum_i_next = test_tup[i+1]\n        \n        # update the current element\n        test_tup[i] += sum_i_next\n    \n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = 0\n        for i in range(len(test_tup) - 1):\n            result += test_tup[i] + test_tup[i+1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Please provide at least two elements in the tuple.\"\n    else:\n        first_element = test_tup[0]\n        result = [first_element]\n        for i in range(1, len(test_tup)-1):\n            second_element = test_tup[i+1]\n            result.append(first_element + second_element)\n            first_element = second_element\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Split the tuple into two halves\n    left, right = test_tup[:len(test_tup)//2], test_tup[len(test_tup)//2:]\n    # Use a loop to add the pairwise elements and return the result\n    result = 0\n    for i in range(len(left)):\n        result += left[i] + right[i]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a tuple containing the pairwise sum of the\n    neighboring elements of the original tuple.\n    \"\"\"\n    n = len(test_tup)\n    new_tup = []\n    for i in range(n-1):\n        new_tup.append(test_tup[i] + test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(1, len(test_tup)):\n        result.append(test_tup[i] + test_tup[i-1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    total_sum = 0\n\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        total_sum += test_tup[i] + test_tup[i + 1]\n\n    return total_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize an empty list to store the pairwise additions\n    pairwise_sum = []\n\n    # Loop through the tuple and add the pairwise sum of each adjacent element to the list\n    for i in range(1, len(test_tup)):\n        pairwise_sum.append(test_tup[i] + test_tup[i-1])\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n-1):\n        print(test_tup[i]+test_tup[i+1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            result.append(test_tup[i] + test_tup[i+j+1])\n            \n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result *= arr[i]\n        result %= n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr: \n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array `arr` and an integer `n` as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    # Iterate through the array and multiply each element with the product modulo n\n    for element in arr:\n        product = (product * element) % n\n    # Return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments: an array `arr` and an integer `n`.\n    The function finds the product of the elements of `arr` modulo `n`.\n    The product of the array elements can be obtained using the built-in `reduce` function.\n    '''\n    product = reduce((lambda x, y: x * y) % n, arr)\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result variable to 1\n    result = 1\n    # Loop through the array\n    for num in arr:\n        # Calculate the multiplication result modulo n\n        multiplication_result = (num * result) % n\n        # Update the result variable with the new value\n        result = multiplication_result\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer n as input. It then finds the product of the array\n    multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product*num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments - an array `arr` and an integer `n`.\n    It multiplies all the elements of the array using the array multiplication method,\n    and then returns the result modulo `n`.\n    '''\n\n    # Calculate the product of all elements using array multiplication\n    product = 1\n    for element in arr:\n        product = (product * element) % n\n    \n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n < 2:\n        return False\n    elif n == 2:\n        return (l[0] + 1) == l[1]\n    else:\n        for i in range(1, n):\n            if (l[i] - l[i-1]!= 1) and ((l[i] + 1)!= l[i+1]):\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return \"The list must contain at least two elements.\"\n\n    for i in range(len(l)-1): \n        if l[i] == l[i+1] - 1:\n            return \"The list contains consecutive numbers.\"\n        elif l[i] == l[i+1]:\n            return \"The list does not contain consecutive numbers.\"\n\n    return \"The list does not contain consecutive numbers.\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list of integers as input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    else: \n        if l[0] == l[1]: \n            for i in range(2, len(l)): \n                if l[i] == l[i-1] + 1: \n                    return True\n                else: \n                    return False\n        else: \n            return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n        elif l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    if len(l) < 2: \n        return False\n\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] + 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Check if both lists are of the same length\n    if len(test_list1)!= len(test_list2):\n        return None\n\n    # Create a new list to store the intersection of elements\n    intersection = []\n\n    # Loop through each element in the first list\n    for item in test_list1:\n        # Check if the element is also present in the second list\n        if item in test_list2:\n            # If the element is present in both lists, append it to the intersection list\n            intersection.append(item)\n\n    # Return the intersection list\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    test_list1.sort()\n    test_list2.sort()\n    i, j = 0, 0\n    result = []\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            result.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set of tuples from the given list\n    set_list1 = set(test_list1)\n    # create a set of tuples from the given list\n    set_list2 = set(test_list2)\n    # find the intersection of the two sets and store it in a new set\n    intersection = set_list1.intersection(set_list2)\n    # convert the set back to a list and sort the elements in the list based on the tuple order\n    intersection_list = sorted(list(intersection))\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists and returns a new list containing the common elements of the two lists.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates while preserving order\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of the elements in the first list\n    set1 = set(test_list1)\n    # Create a set of the elements in the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets and convert it to a list\n    result = list(set1.intersection(set2))\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert lists to sets to remove duplicates and sort the tuples\n    set1 = set(sorted(test_list1))\n    set2 = set(sorted(test_list2))\n\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Use a set to remove duplicates from the test_list1 and test_list2\n    unique_elements = set(test_list1 + test_list2)\n    \n    # Create an empty set to store the intersection of the unique_elements\n    intersection = set()\n    \n    # Iterate through the unique_elements and check if each element is present in both test_list1 and test_list2\n    for element in unique_elements:\n        if element in test_list1 and element in test_list2:\n            intersection.add(element)\n            \n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Sorting the lists to find their intersection\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n\n    # Initializing the set to store the common elements\n    common_elements = set()\n\n    # Looping through the lists to find the common elements\n    for element in test_list1:\n        if element in test_list2:\n            common_elements.add(element)\n\n    # Converting the set to a list and returning it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create an empty set to store the intersection tuples\n    result = set()\n\n    # iterate over each element in the first list\n    for item in test_list1:\n        # iterate over each element in the second list\n        for other_item in test_list2:\n            # if the two elements are equal, add them to the result set\n            if item == other_item:\n                result.add((item, other_item))\n\n    # return the result set as a tuple\n    return tuple(result)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # create a new string with the new character\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in three parameters:\n    str1 - The string to be processed.\n    ch - The character to be replaced.\n    newch - The new character to replace the old character with.\n\n    This function replaces all occurrences of the old character with the new character in the string.\n    \"\"\"\n    # Split the string into individual characters\n    str1_list = list(str1)\n    # Loop through the list of characters and replace the old character with the new character\n    for i in range(len(str1_list)):\n        if str1_list[i] == ch:\n            str1_list[i] = newch\n    # Join the list of characters back into a string\n    return ''.join(str1_list)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of the specified character in a string with a new character.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    \n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # If the current character is the specified character, replace it with the new character\n        if char_list[i] == ch:\n            char_list[i] = newch\n    \n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of the specified character 'ch' with 'newch' in the string'str1'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items()))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    \n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the counter by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Convert the sorted counter to a dictionary\n    result = dict(sorted_counter)\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n\n    # Find the sum of the smallest and largest values\n    sum_of_smallest_largest = nums[0] + nums[-1]\n\n    # Return the sum\n    return sum_of_smallest_largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    # find the largest and smallest values in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Find the largest and smallest values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Calculate the sum of the largest and smallest values\n    big_sum = max_num + min_num\n\n    return big_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest values in the array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Find the sum of the largest and smallest values in the array\n    sum_of_largest_and_smallest = nums[len(nums) - 1] + nums[0]\n    return sum_of_largest_and_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        min_num = nums[0]\n        max_num = nums[0]\n        for num in nums:\n            if num < min_num:\n                min_num = num\n            elif num > max_num:\n                max_num = num\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n\n    # Convert the given string to lower case\n    lower_string = string.lower()\n\n    # Check if the converted string is equal to the original string\n    if lower_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #convert the string to lower case\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w*\\b', re.IGNORECASE)\n    # find all matches of the pattern in the given string\n    matches = pattern.findall(str1)\n    # loop over the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern for lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    \n    # Find all lowercase substrings in the string\n    substrings = pattern.findall(string)\n    \n    # Loop through the substrings and remove them from the string\n    for substring in substrings:\n        string = string.replace(substring, '')\n    \n    # Return the modified string\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regex to find all lowercase substrings and replace them with an empty string\n    regex = r'[a-z]+'\n    return re.sub(regex, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]+') # regex pattern to match lowercase substrings\n    result = pattern.sub('', str1) # use regex to replace all lowercase substrings with empty strings\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    # Compile a regular expression pattern to match all lowercase substrings\n    pattern = re.compile(r'(?i)\\b\\w+\\b')\n    # Find all the lowercase substrings in the input string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the input string\n    for match in matches:\n        str1 = re.sub(r'(?i)'+match, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Create a regular expression object to match lowercase substrings\n    lowercase_pattern = re.compile(r'\\b[a-z]+\\b')\n\n    # Use the pattern to find all lowercase substrings in the given string\n    lowercase_substrings = lowercase_pattern.findall(str1)\n\n    # Loop through all the lowercase substrings and remove them from the original string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define regex pattern to match lowercase substrings\n    pattern = r'\\b[a-z]\\w*\\b'\n\n    # Use regex search to find all lowercase substrings in the string\n    matches = re.findall(pattern, string)\n\n    # Loop through each match and remove it from the string\n    for match in matches:\n        string = string.replace(match, '')\n\n    # Return the modified string\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Loop through each word and remove any lowercase substrings\n    for word in words:\n        if word[0].islower():\n            word = ''\n        if word[len(word)-1].islower():\n            word = word[:-1]\n    # Join the words back together into a string\n    return''.join(words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression to match lowercase letters\n    lowercase_pattern = re.compile(r'[a-z]+')\n    # Find all matches of lowercase letters in the input string\n    matches = lowercase_pattern.findall(str1)\n    # Iterate over the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to string\n    n = str(n)\n    # find the first digit of the given number\n    first_digit = n[0]\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # get the first digit of the string\n    first_digit = num_str[0]\n    # convert the first digit to an integer and return it\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string and get the first character\n    digit = str(n)[0]\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Find the length of the number\n    len_n = len(str(n))\n    \n    # Find the first digit by taking the first digit of the number\n    first_digit = n // 10**(len_n - 1)\n    \n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10 ** len(str(n))"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # convert the number to a string\n    num = str(n)\n\n    # return the first digit of the number\n    return num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2 == 1: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    Takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd = []\n    for num in lst:\n        if num % 2!= 0:\n            odd.append(num)\n    return odd"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers as input and returns a list of odd integers.\n    '''\n    odd_list = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2 == 1]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of first n natural numbers\n    cubes = [i*i*i for i in range(1,n+1)]\n    sum_cubes = sum(cubes)\n    \n    # Calculate the sum of first n natural numbers\n    first_n = [i for i in range(1,n+1)]\n    sum_first_n = sum(first_n)\n    \n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_first_n\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Find the sum of the first n natural numbers\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    # Calculate the difference\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n) : \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #sum of cubes of first n natural numbers \n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    \n    #sum of first n natural numbers \n    sum_of_natural = 0\n    for i in range(1,n+1):\n        sum_of_natural += i\n    \n    #difference between sum of cubes and sum of natural numbers\n    difference = sum_of_cubes - sum_of_natural\n    \n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([num**3 for num in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_nums = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_nums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1,n+1)]\n    sum_cubes = sum(cubes)\n    sum_natural = sum(range(1,n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # difference between the two sums\n    diff = sum_cubes - sum_natural\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i*i*i\n        sum_natural += i\n    \n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_cubes(n):\n    '''\n    Returns the sum of cubes of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * n * n + sum_of_cubes(n-1)\n\ndef sum_of_natural_numbers(n):\n    '''\n    Returns the sum of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_of_natural_numbers(n-1)\n\ndef difference(n):\n    '''\n    Returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum_of_cubes(n) - sum_of_natural_numbers(n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the sum of cubes of n natural numbers\n    def sum_cubes(n):\n        return sum([i**3 for i in range(n+1)])\n    \n    # Function to calculate the sum of first n natural numbers\n    def sum_natural(n):\n        return sum(range(1, n+1))\n    \n    # Calculating the difference between the two sums\n    difference = sum_cubes(n) - sum_natural(n)\n    \n    # Returning the difference\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes in a list A and an integer N and returns the count of odd pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    # count the number of pairs whose xor value is odd\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of size N and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(N):\n            xor ^= A[i] ^ A[j]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n                if count == N:\n                    return count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in a list A and an integer N and returns the number of pairs whose xor value is odd.\n    \n    Parameters:\n    A: a list of integers\n    N: an integer\n    \n    Returns:\n    an integer representing the number of pairs whose xor value is odd.\n    \n    \"\"\"\n\n    # Initialize two counters\n    count_odd = 0\n    count_even = 0\n\n    # Loop through the list A\n    for i in range(len(A)):\n        # Calculate the xor value of the current element with all the other elements in the list\n        xor_value = 0\n        for j in range(len(A)):\n            if i!= j:\n                xor_value ^= A[j]\n\n        # Check if the xor value is odd or even\n        if xor_value % 2 == 1:\n            count_odd += 1\n        else:\n            count_even += 1\n\n    # Return the total count of odd xor values\n    return count_odd"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Iterate through each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, toggle it to lowercase\n        if string[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, toggle it to uppercase\n        elif string[i] in 'abcdefghijklmnopqrstuvwxyz':\n            string = string[:i] + string[i].upper() + string[i+1:]\n\n    # Convert the string back to uppercase\n    string = string.upper()\n\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the new string\n    new_string = ''\n    # loop through each character in the string\n    for char in string:\n        # check if the character is uppercase\n        if char.isupper():\n            # if the character is uppercase, make it lowercase\n            new_string += char.lower()\n        # otherwise, make it uppercase\n        else:\n            # add the lowercase version of the character to the new string\n            new_string += char.upper()\n    # return the new string\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_char = \"\"\n        if char.isupper():\n            new_char = char.lower()\n        elif char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n1!= 0 and n2!= 0:\n        digit_diff = abs(n1 - n2)\n        n1 //= 10\n        n2 //= 10\n        diff += digit_diff\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        num1 = n1 // 10**(i+1)\n        num2 = n2 // 10**(i+1)\n        diff = abs(num1 - num2)\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the difference between the two lists of digits\n    diff_digits = [(n1_digit - n2_digit) % 10 for n1_digit, n2_digit in zip(n1_digits, n2_digits)]\n\n    # Calculate the sum of the absolute values of the differences\n    total_diff = sum(abs(diff) for diff in diff_digits)\n\n    # Return the total difference\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_sum = 0\n    for i in range(10):\n        digit_sum = abs(n1 % 10 - n2 % 10)\n        total_sum += digit_sum\n        n1 //= 10\n        n2 //= 10\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = n1 ^ n2\n    result = 0\n\n    while diff > 0:\n        result += diff % 10\n        diff //= 10\n\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    for i in range(10):\n        digit_n1 = n1 // 10**i\n        digit_n2 = n2 // 10**i\n        diff = abs(digit_n1 - digit_n2)\n        diff_sum += diff\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to lists of digits\n    lst1 = [int(d) for d in str(n1)]\n    lst2 = [int(d) for d in str(n2)]\n\n    # calculate the distance between the lists\n    diff_list = [abs(lst1[i] - lst2[i]) for i in range(len(lst1))]\n\n    # calculate the sum of the differences\n    sum_diff = sum(diff_list)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the sum of per-digit differences\n    sum_diff = 0\n    for i in range(max(len(digits1), len(digits2))):\n        diff = abs(digits1[i] - digits2[i])\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    for i in range(10):\n        digit_sum += abs(n1 // 10**i - n2 // 10**i)\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two numbers to a string\n    num1_str = str(n1)\n    num2_str = str(n2)\n    # Initialize the sum of the differences\n    diff_sum = 0\n    # Loop through the digits of the two numbers\n    for i in range(len(num1_str)):\n        # Convert the current digit to integers\n        digit1 = int(num1_str[i])\n        digit2 = int(num2_str[i])\n        # Find the absolute difference between the digits\n        diff = abs(digit1 - digit2)\n        # Add the difference to the sum of differences\n        diff_sum += diff\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    while end < len(a):\n        current_sum += a[end]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end\n\n        if current_sum < 0:\n            current_sum = 0\n\n        end += 1\n\n    return max_sum, start, end"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(len(a)):\n        current_sum += a[i]\n        \n        if i >= size-1:\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    \n    max_sum = a[0]\n    curr_sum = a[0]\n    i = 1\n    \n    while i < size:\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = a[i]\n        \n        i += 1\n    \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    # Find the union of the list using set() function\n    union_set = set(combined_list)\n    # Sort the elements of the set in ascending order\n    sorted_set = sorted(union_set)\n    # Convert the sorted set back to a tuple and return it\n    return tuple(sorted_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n\n    # Remove duplicates and sort the union\n    union = sorted(list(set(union)))\n\n    # Output the sorted union\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Use set to remove duplicates from both tuples\n    combined_set = set(test_tup1) | set(test_tup2)\n    # Convert set back to a list and sort it\n    union_list = sorted(list(combined_set))\n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples into one\n    combined_tuple = test_tup1 + test_tup2\n\n    # Convert the tuple to a set and sort it\n    unique_elements = sorted(set(combined_tuple))\n\n    # Convert the set back to a tuple and return it\n    return tuple(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples and remove duplicates using set()\n    combined_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(combined_set))\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Define a set to store the unique elements of the two tuples\n    unique_elements = set(test_tup1 + test_tup2)\n    # Convert the set to a list and sort it in ascending order\n    sorted_elements = sorted(list(unique_elements))\n    # Output the sorted list of unique elements\n    print(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the elements of the two tuples\n    union = sorted(set(test_tup1) | set(test_tup2))\n    \n    # Output the union of the elements in sorted order\n    print(\"Union of the elements of the two tuples:\", union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # Combine the two tuples using the '+' operator\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple into a set to remove duplicates\n    unique_tup = set(combined_tup)\n    \n    # Convert the set back into a tuple\n    union_tup = tuple(unique_tup)\n    \n    # Sort the union tuple in ascending order and print it\n    print(sorted(union_tup))\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = test_tup1 + test_tup2\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    \n    # convert the set back to a tuple and sort it\n    sorted_tup = sorted(tuple(unique_set))\n    \n    # print the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            maxLength = max(maxLength, len(lst[i:j]))  \n    return maxLength  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize variables\n    max_length = 0  \n    # loop through each list\n    for sublist in lst:  \n        # check if current sublist has a larger length than max_length\n        if len(sublist) > max_length:  \n            # update max_length\n            max_length = len(sublist)  \n    # return max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize max_length variable with 0\n    max_length = 0\n    \n    # loop through all sublists in lst\n    for i in range(len(lst)):\n        # initialize current_length variable with 1\n        current_length = 1\n        \n        # loop through all elements in the current sublist starting from i+1\n        for j in range(i+1, len(lst)):\n            # increment the current_length if the element at j is not None\n            if lst[j] is not None:\n                current_length += 1\n            # if the current_length is greater than the max_length, update max_length\n            if current_length > max_length:\n                max_length = current_length\n            \n    # return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n    \"\"\"\n    # Find the length of the longest sublist\n    max_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_length = len(lst[i])\n        else:\n            max_length = max(max_length, len(lst[i]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables to store the longest sublist and its length\n    longest_sublist = []\n    longest_length = 0\n\n    # Loop through the list and find the longest sublist\n    for i in range(len(lst)):\n        is_sublist = True\n        for j in range(len(lst)):\n            if i!= j and lst[i] in lst[j]:\n                is_sublist = False\n                break\n        if is_sublist:\n            sublist = [lst[i]]\n            for j in range(i+1, len(lst)):\n                if lst[j] in lst[i]:\n                    sublist.append(lst[j])\n                else:\n                    break\n            if len(sublist) > longest_length:\n                longest_length = len(sublist)\n                longest_sublist = sublist\n\n    # Return the length of the longest sublist\n    return longest_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > longest:\n                longest = len(sublist)\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > longest:\n                longest = len(sublist)\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length = len(lst[j])\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"' # use regex pattern to match values between quotes\n    values = re.findall(pattern, text) # find all matches of pattern in text\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"(?!\\\\)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'(?<=[\"\\'])(.*?)(?=[\"\\'])'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    # Define an empty dictionary to store the frequency of each integer\n    freq = {}\n\n    # Loop through the array and update the frequency of each integer\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through the array again and count the number of possible unordered pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            if freq[arr[i]] == freq[arr[j]]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs \n    where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n        arr (list): A list of integers.\n        n (int): The maximum element in the list.\n\n    Returns:\n        int: The count of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # Initialize a dictionary to store the count of elements in the array\n    count_dict = {}\n    \n    # Iterate through the array\n    for i in range(n):\n        # Get the element at the current index\n        curr_elem = arr[i]\n        \n        # Check if the element is already in the dictionary\n        if curr_elem in count_dict:\n            # Increment the count of the current element\n            count_dict[curr_elem] += 1\n        else:\n            # If the element is not in the dictionary, add it with a count of 1\n            count_dict[curr_elem] = 1\n            \n    # Initialize the count of pairs\n    count_pairs = 0\n    \n    # Iterate through the dictionary\n    for key in count_dict:\n        # Check if the count of the element is greater than 1\n        if count_dict[key] > 1:\n            # Increment the count of pairs\n            count_pairs += (count_dict[key] * (count_dict[key]-1))\n            \n    # Return the count of pairs\n    return count_pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    pairs = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            pairs += 1\n    return pairs // 2"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the sum of the digits as 0\n    digit_sum = 0\n    # Loop through the characters in the string and add each digit to the sum\n    for digit in num_str:\n        digit_sum += int(digit)\n    # Return the sum of the digits\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and iterate over its digits\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Use integer division to avoid integer division by 0 error\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum variable to zero\n    sum_of_digits = 0\n    # Iterate over the list of digits and add each digit to the sum variable\n    for digit in digits:\n        sum_of_digits += digit\n    # Return the sum of the digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n\n    sum = 0\n\n    # convert the integer to a string and loop through its digits\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif list1[0] <= list1[1]:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if the list is empty or not\n    if not list1:\n        return True\n    \n    # Check the first element with the last element of the list\n    if list1[0] > list1[-1]:\n        return False\n    \n    # Recursively check the rest of the list\n    for i in range(1, len(list1)-1):\n        if list1[i] < list1[i-1] or list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n\n    Args:\n        list1 (list): A list to be checked for sorting\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n\n    Examples:\n        >>> issort_list([1, 2, 3, 4, 5])\n        True\n        >>> issort_list([1, 5, 3, 4, 2])\n        False\n    \"\"\"\n\n    # Check if the length of the list is less than 2\n    if len(list1) < 2:\n        return True\n\n    # Check if the first element of the list is smaller than or equal to the second element\n    if list1[0] <= list1[1]:\n        return False\n\n    # Check if the list is sorted recursively\n    for i in range(1, len(list1)):\n        if list1[i] <= list1[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) <= 1:\n        return True\n\n    # compare the first two elements of the list\n    if list1[0] > list1[1]:\n        return False\n\n    # recursively check the rest of the list\n    for i in range(2, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Loop through the list and compare each element with the next one\n    for i in range(len(list1)-1):\n        # If the element is greater than the next one, it means the list is not sorted\n        if list1[i] > list1[i+1]:\n            return False\n    # If the loop completes without returning False, it means the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    return list1 == sorted(list1)"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n        length (int): The length of the list to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n\n        # Sort the sublist\n        sublist.sort()\n\n    # Return the sorted list of lists\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # create a set to store unique numbers\n    unique_set = set()\n\n    # loop through each number in the input list\n    for num in nums:\n        # check if the number is already in the set\n        if num in unique_set:\n            # if it is, remove it from the set\n            unique_set.remove(num)\n        else:\n            # if it isn't, add it to the set\n            unique_set.add(num)\n\n    # convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    # Loop through each element of the list\n    for num in nums:\n        # Add the element to the set if it's not already there\n        if num not in unique_set:\n            unique_set.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicates from each list\n    for i in range(len(nums)):\n        nums[i] = list(set(nums[i]))\n\n    # Concatenate all lists into one list\n    final_list = []\n    for i in range(len(nums)):\n        final_list += nums[i]\n\n    # Remove duplicates from the final list\n    final_list = list(set(final_list))\n\n    return final_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # First, create a set to keep track of unique numbers\n    unique_nums = set()\n    # Loop through each list in the input list\n    for lst in nums:\n        # Loop through each number in the list\n        for num in lst:\n            # Add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set back to a list\n    unique_lst = list(unique_nums)\n    return unique_lst"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set from the original list\n    original_set = set(nums)\n    # convert the set back to a list\n    unique_nums = list(original_set)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): a list of lists containing unique numbers\n\n    Returns:\n        list: a list with all the unique numbers from all the input lists\n    \"\"\"\n\n    # Use a set to remove duplicates from each list\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(lst)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    # Create a set of unique numbers from the lists\n    unique_nums = set(nums)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculating the surface area of the cylinder using the formula:\n    # surface area = 2*pi*r*h\n    surface_area = 2*math.pi*r*h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find the surface area of a cylinder\n    surface_area = 2*3.14159*(r**2)+2*3.14159*r*h+2*3.14159*(r**2)+2*3.14159*r*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the half-height of the cylinder\n    half_height = h/2\n    \n    # Calculate the surface area using the formula:\n    # A = pi * r^2 * h\n    surface_area = 3.14159 * r**2 * half_height\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of a cylinder\n    surface_area = 2 * math.pi * r * r + 2 * math.pi * h * r + 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r**2 + 2 * 3.14159 * h + 2 * 3.14159 * 2 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 2 * math.pi * r * h\n    return S"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14 * r * h + 2 * 3.14 * r"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A in B:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    if not B:\n        return True\n    if not A or len(A) < len(B):\n        return False\n\n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n\n    return j == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n        elif i > 0:\n            i = i - 1\n            j += 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n\n    for i in range(len(A)): \n        if A[i] in B: \n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(len(A)):\n            if A[i] not in B:\n                return False\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    return True if j==len(B) else False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = j\n            j = 0\n    return j == len(B)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        temp = n\n        while temp > 0:\n            last_digit = temp % 10\n            temp //= 10\n        return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    temp = n\n    while temp > 0:\n        factorial = factorial * temp % 10\n        temp = temp // 10\n\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    last_digit = int(factorial % 10)\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the last digit of its factorial.\n\n    Args:\n        n: positive integer\n\n    Returns:\n        The last digit of the factorial of n.\n    \"\"\"\n    factorial = 1\n    i = 1\n    while i <= n:\n        factorial *= i\n        i += 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = int(factorial/10)\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the given number to a string\n    num = str(n)\n\n    # Find the last digit in the number\n    last_digit = num[-1]\n\n    # Convert the last digit to an integer\n    last_digit = int(last_digit)\n\n    # Find the factorial of the number excluding the last digit\n    factorial = 1\n    for i in range(1, int(num[:-1])+1):\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize the last digit to 0\n    last_digit = 0\n\n    # Loop through each digit of the factorial and update the last digit accordingly\n    for i in range(1, n+1):\n        last_digit = (last_digit * i) % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0: \n        factorial *= n \n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0: \n        factorial *= n \n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    # loop through the 3 input lists and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes three lists of the same length as input and returns a single flat list containing all the elements of all the lists.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # iterate through the lists and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Determine the length of the resulting list\n    length = len(list1) + len(list2) + len(list3)\n    \n    # Initialize an empty list to hold the interleaved elements\n    result = []\n    \n    # Iterate over each index in the list\n    i = 0\n    while i < length:\n        # Add the corresponding element from each list to the result list\n        result.append(list1[i % len(list1)])\n        result.append(list2[i % len(list2)])\n        result.append(list3[i % len(list3)])\n        \n        # Increment the counter\n        i += 1\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Loop through each element of the 3 input lists\n    for i in range(len(list1)):\n        # Append the element from each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Concatenate the three lists into a single list\n    flat_list = list1 + list2 + list3\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    # compare each element in the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # if there's a dissimilar element, add it to the list\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of the elements that are present in test_tup1 but not in test_tup2.\n    '''\n    # Create a set of elements in test_tup1\n    set_1 = set(test_tup1)\n\n    # Create a set of elements in test_tup2\n    set_2 = set(test_tup2)\n\n    # Create a set of common elements in both sets\n    common_set = set_1.intersection(set_2)\n\n    # Convert the common set to a list\n    common_list = list(common_set)\n\n    # Return the list of common elements\n    return common_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element1, element2 in zip(test_tup1, test_tup2):\n        if element1!= element2:\n            dissimilar_elements.append(element1)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    diff = set1.symmetric_difference(set2)\n    return list(diff)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n\n    def is_even(num):\n        return num % 2 == 0\n\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            item = even_ele(item, even_fnc)\n        elif not even_fnc(item) and not is_even(even_fnc(item)):\n            new_tuple.append(item)\n        elif even_fnc(item) and not is_even(even_fnc(item)):\n            new_tuple.append(even_fnc(item))\n        else:\n            new_tuple.append(item)\n\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return x % 2 == 0\n    \n    return tuple(x for x in test_tuple if is_even(even_fnc(x)))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(i) for i in test_tuple if even_fnc(i)!= None]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Using list comprehension to flatten the nested tuple\n    flat_list = [item for sublist in test_tuple for item in sublist]\n    # Using list comprehension to filter even elements\n    even_list = [item for item in flat_list if even_fnc(item)]\n    # Using list comprehension to remove duplicates from even_list\n    unique_list = list(set(even_list))\n    # Return the unique even_list\n    return unique_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple: \n        if isinstance(i, tuple): \n            even_list.append(even_ele(i, even_fnc)) \n        else: \n            even_list.append(even_fnc(i)) \n    return even_list \n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for element in test_tuple:\n        if isinstance(element, list):\n            even_list += even_ele(element, even_fnc)\n        else:\n            even_list.append(even_fnc(element))\n    return even_list\n\ndef sum_even_elements(num):\n    '''\n    A function to sum even numbers from a nested mixed tuple.\n    '''\n    return sum(num) if num % 2 == 0 else num\n\ntest_tuple = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (169, (170, (171, (172, (173, (174, (175, (176, (177, (178, (179, (180, (181, (182, (183, (184, (185, (186, (187, (188, (189, (190, (191, (192, (193, (194, (1"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if type(item) is tuple:\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple: \n        if type(item) in [tuple, list]: \n            result.extend(even_ele(item, even_fnc)) \n        elif even_fnc(item): \n            result.append(item) \n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if all(even_fnc(x) for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 0:\n        return []\n    elif type(test_tuple[0]) in [tuple, list]:\n        return even_ele(test_tuple[0], even_fnc) + even_ele(test_tuple[1:], even_fnc)\n    else:\n        if even_fnc(test_tuple[0]):\n            return even_ele(test_tuple[1:], even_fnc)\n        else:\n            return even_ele(test_tuple[1:], even_fnc)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    This function calculates the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the surface area of the pyramid\n    surface_area = (b * s) + (b * s) + (b * s) + (b * s) + (b * s) + (b * s)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b * s) + 2 * (b * s) + 6 * b * s * s + 12 * b * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculating the surface area of the pyramid\n    surface_area = 2*(b**2 + s**2)\n    \n    #returning the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    This function takes two parameters - b(base edge) and s(height) of a square pyramid and returns the surface area of the pyramid.\n    \n    The formula for surface area of a pyramid is:\n    s(h) = 1/2bh^2\n    \n    \"\"\"\n    return 0.5*b*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (b * s) + (b * s) + (b * s)\n    print(\"The surface area of the pyramid is:\", area)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculating the area of each square\n    area1 = (b**2)\n    area2 = ((b/2)**2)\n    area3 = ((s/2)**2)\n\n    # Adding up the areas of the squares to get the total area of the pyramid\n    area = area1 + area2 + area3\n\n    # Returning the total area of the pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_Area = 2 * b * s + 2 * b * s * (s - b) + 6 * b**2\n    return surface_Area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = 4 * (b**2 + s**2) \n    return surfaceArea"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s * b\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the surface area of a square with base b and height s\n    area_square = b*s\n\n    # calculate the surface area of a pyramid with base b and height s and a triangle whose base is b/3 and height is h/3\n    b_half = b/3\n    h_half = s/3\n    area_triangle = b_half*h_half\n\n    # calculate the sum of the square and triangle surface areas\n    total_area = area_square + area_triangle\n\n    return total_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(d):\n    if len(d) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty!\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using recursion.\n    \n    Args:\n    - n (int): The number of terms to calculate.\n    \n    Returns:\n    - The nth Catalan number.\n    \"\"\"\n    # Base case: return 0 for n=0\n    if n == 0:\n        return 0\n    \n    # Base case: return 2 for n=1\n    if n == 1:\n        return 2\n    \n    # Recursive case: return (2n)! / ((n-1)! * n!)\n    return catalan_number(n-1) * (2*n-1) // (n*(n-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n\n    :param n: an integer\n    :return: the nth catalan number\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    catalan = 1\n    for i in range(1, n+1):\n        catalan = (i * catalan) // (i + 1)\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula:\n    C(n,k) = (n+1) * C(n,k-1) / k\n    \n    The Catalan numbers are the numbers that occur in the Fibonacci sequence.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num < 0:\n        raise ValueError('The number of terms must be non-negative.')\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 2\n    else:\n        catalan = 0\n        for i in range(2, num+1):\n            catalan = catalan + ((2*i-1) * catalan_number(i-1))\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    This function calculates the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    # Initialize the Catalan number\n    catalan = 1\n\n    # Iterate from 0 to n-1\n    for i in range(n):\n        # Calculate the value of the term\n        term = binomial(2 * n, 2 * i)\n        # Multiply the term with the current Catalan number\n        catalan *= term\n\n    return catalan\n\ndef binomial(n, k):\n    \"\"\"\n    This function calculates binomial coefficient.\n    \"\"\"\n    # Initialize the factorial\n    factorial = 1\n\n    # Iterate from 0 to k\n    for i in range(k+1):\n        # Calculate the factorial of i\n        factorial *= n\n        # Divide by i!\n        factorial //= i+1\n\n    return factorial"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (num * catalan_number(num - 1)) // (num + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n-1) / n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n    \n    # Search for all the occurrences of the pattern in the given string\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the positions of the adverbs found\n    adverb_positions = []\n    \n    # Iterate through all the matches and append their positions to the list\n    for match in matches:\n        start, end = match.start(), match.end()\n        adverb_positions.append((start, end))\n        \n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regex pattern for adverb ending with ly\n    pattern = re.compile(r'(.*\\bly\\b.*)')\n    \n    # Find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of tuples containing the first adverb ending with ly and its position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find all the adverbs ending with ly in the text\n    matches = re.findall(r'\\b\\w*[ly]$', text)\n    # loop through the matches and get their positions in the text\n    for match in matches:\n        # get the position of the match in the text\n        position = text.find(match)\n        # print the adverb and its position\n        print(match, position)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Using regular expressions to find the first adverb ending with \"ly\"\n    pattern = r'\\b(ly)$\\w*'\n    matches = re.finditer(pattern, text)\n    \n    # Loop through the matches and print the adverb and its position in the text\n    for i, match in enumerate(matches, start=1):\n        print(f\"Adverb {i}: {match.group()}\")\n        print(f\"Position: {text.find(match.group())}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b(?:in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from|in|of|on|to|with|about|above|below|across|along|around|at|by|from"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all instances of the word \"ly\" at the end of the word\n    matches = re.findall(r'\\bly\\b', text)\n    \n    # Loop through each match and find its position in the string\n    adverbs = []\n    for match in matches:\n        position = text.find(match)\n        adverbs.append((match, position))\n    \n    # Sort the matches by position and return the first adverb\n    return sorted(adverbs, key=lambda x: x[1])[0]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define a regular expression to match an adverb ending with ly\n    pattern = re.compile(r'\\bly\\b')\n\n    # Find all the occurrences of the adverb ending with ly\n    matches = pattern.finditer(text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Iterate through each match and add its position to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match the first adverb ending with ly\n    pattern = r\"\\b[a-zA-Z]+ly\\b\"\n    \n    # Use the re.finditer() function to find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Iterate over the matches and extract the positions of the matches and the matched text\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        print(f\"Adverb: {adverb}, Start: {start}, End: {end}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Use a min heap to store the n most expensive items\n    min_heap = []\n    # Iterate over the items in the dataset and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # Remove the least expensive item if the heap size exceeds n\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items in the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    :param items: a list of (price, item) tuples\n    :param n: the number of most expensive items to return\n    :return: a list of the n most expensive items, sorted by price\n    '''\n    heap = []\n\n    # Convert the items list to a heap\n    for price, item in items:\n        heapq.heappush(heap, (price, item))\n\n    # Extract and return the n most expensive items from the heap\n    result = []\n    for _ in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): A list of items with prices.\n    n (int): The number of most expensive items to find.\n\n    Returns:\n    list: A list of the n most expensive items.\n    \"\"\"\n    # Build a min heap of n items from the list of items\n    heap = [(-price, item) for price, item in items[:n]]\n    heapq.heapify(heap)\n\n    # Remove the smallest item from the heap and add the next-smallest item\n    # until we have collected the n most expensive items\n    result = []\n    while len(heap) > 0:\n        _, item = heapq.heappop(heap)\n        result.append(item)\n        heapq.heappush(heap, (-items[len(result)][0], item))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    \n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n    \n    # Remove the least expensive item from the heap and add the next item to it\n    for item in items[n:]:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    # Return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): List of items to filter through.\n        n (int): Number of most expensive items to find.\n\n    Returns:\n        list: List of n most expensive items in the dataset.\n    \"\"\"\n\n    # Convert the list of items into a dictionary with the item as the key and the price as the value\n    item_dict = {item: price for item, price in items}\n\n    # Create a min heap of the n largest items (key-value pairs) and a max heap of the n smallest items\n    max_heap = []\n    min_heap = []\n\n    for item, price in item_dict.items():\n        # If the item is greater than the current maximum item in the max heap, add it to the max heap\n        if len(max_heap) < n or price > max_heap[0][1]:\n            heapq.heappush(max_heap, (-price, item))\n\n        # If the item is less than the current minimum item in the min heap, add it to the min heap\n        elif len(min_heap) < n or price < min_heap[0][1]:\n            heapq.heappush(min_heap, (price, item))\n\n        # If the item is between the current minimum and maximum items in the min heap, remove the current min item and add the new item\n        else:\n            heapq.heappushpop(min_heap, (-price, item))\n\n    # Extract the n most expensive items from the min heap and return them as a list\n    return [item for price, item in heapq.nsmallest(n, min_heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a dataset of items and an integer n as input,\n    and returns the n most expensive items in the dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        if not heap or item[1] < heap[0][1]:\n            heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, -item)\n        else:\n            if item < -heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, -item)\n    \n    return [item for item in heap]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        raise ValueError('The value of n is greater than the length of the list.')\n    return l[:n] + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Create a new empty list to store the first part of the list\n    new_list = []\n    # Loop through the elements of the original list and add them to the new list\n    for i in range(len(l)):\n        if i < n:\n            new_list.append(l[i])\n        else:\n            break\n    # Combine the new list with the first part of the original list\n    new_list.extend(l[:n])\n    # Return the new combined list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 1:\n        return \"Invalid input. The value of n should be greater than or equal to 1.\"\n    elif n >= len(l):\n        return \"Invalid input. The value of n should be less than the length of the list.\"\n    else:\n        split_index = n - 1\n        first_part = l[:split_index]\n        last_part = l[split_index:]\n        return first_part + l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) >= n:\n        return l[n:] + l[:n]\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create a list of empty lists to hold the parts of the list\n    parts = [[] for i in range(n)]\n    # split the list into n parts\n    for i, item in enumerate(l):\n        parts[i % n].append(item)\n    # concatenate the parts into a single list and return it\n    return parts[0] + parts[1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Split the list at the nth eelment\n    first_part = l[:n]\n    second_part = l[n:]\n\n    # Add the first part to the end of the second part\n    l = first_part + second_part\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.append(l.pop(n))\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid input\"\n\n    split_point = len(l)//2\n\n    if n == split_point:\n        return l[:split_point] + l[split_point:]\n    else:\n        return l[:split_point] + [l[split_point]] + l[split_point+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l.pop(0))\n    new_list += l\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return l\n    else:\n        mid = len(l) // 2\n        left_half = l[:mid]\n        right_half = l[mid:]\n        return right_half + split_Arr(left_half, n)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert the list to tuple\n    tup = tuple(listx)\n    return tup"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    return tuple(lst)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize the variables for the smallest and largest values\n    smallest = nums[0]\n    largest = nums[0]\n\n    # Loop through the list and update the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    # Return the difference between the smallest and largest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    # Return the difference between the largest and smallest values\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    if len(nums) == 0:\n        return \"List is empty!\"\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # check if the list is not empty\n    if not nums:\n        return \"The list is empty\"\n    # initialize variables\n    smallest = nums[0]\n    largest = nums[0]\n    # loop through the list and compare each element with smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    # return the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # Loop through the list and update largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Calculate the difference between the two values\n    diff = largest - smallest\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as an argument and finds the difference between the largest and smallest values in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Sorting the list in ascending order\n    nums.sort()\n    # Finding the difference between the largest and smallest value\n    diff = nums[-1] - nums[0]\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i**2\n        if square == i and i > 0:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables to store the count and sum of squares found\n    count = 0\n    sum_of_squares = 0\n    \n    # Loop through the range of numbers between a and b\n    for num in range(a, b+1):\n        # Check if the current number is a perfect square\n        square = num**0.5\n        if square.is_integer():\n            # If it is, add it to the sum of squares and increment the count\n            sum_of_squares += square\n            count += 1\n    \n    # Return the count and sum of squares found\n    return count, sum_of_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # create a list to store perfect squares\n    perfect_squares = []\n\n    # loop through all possible values of a and b\n    for i in range(a, b+1):\n        # check if the square of i is a perfect square\n        square = i*i\n        if square == i**2:\n            # add the square to the list of perfect squares\n            perfect_squares.append(square)\n\n    # return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # create a list to store the perfect squares between a and b\n    squares = []\n    \n    # loop through all integers between a and b, inclusive\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        j = int(i ** 0.5)\n        if i == j ** 2:\n            # if it is, add it to the list of perfect squares\n            squares.append(i)\n    \n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i*i:\n            print(i, square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a variable to store the result\n    result = []\n\n    # loop through the range of the two given numbers\n    for num in range(a, b+1):\n        # check if the square is a perfect square\n        if num**0.5**2 == int(num**0.5**2):\n            result.append(num)\n\n    # return the result\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list of all perfect squares between a and b\n    perfect_squares = []\n    for i in range(a, b+1):\n        square = i*i\n        if square == i**2:\n            perfect_squares.append(square)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Check if a is less than or equal to zero\n    if a <= 0:\n        return \"a must be a positive integer\"\n    \n    # Check if b is less than or equal to zero\n    if b <= 0:\n        return \"b must be a positive integer\"\n    \n    # Check if a is greater than b\n    if a > b:\n        return \"a must be less than or equal to b\"\n    \n    # Initialize variables\n    perfect_squares_list = []\n    \n    # Loop through a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if i * i == i:\n            perfect_squares_list.append(i)\n            \n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        a, b = b, a  # swap a and b if a is greater than or equal to b\n\n    # find the largest perfect square less than or equal to b\n    perfect_square = int(b**0.5)\n    while perfect_square**2 > b:\n        perfect_square -= 1\n\n    # find the smallest perfect square greater than or equal to a\n    if perfect_square**2 < a:\n        perfect_square += 1\n\n    # find all perfect squares between a and b\n    squares = [x**2 for x in range(perfect_square + 1, perfect_square**2 + 1)]\n\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store perfect squares\n    perfect_squares_list = []\n    # loop through the range of numbers from a to b\n    for i in range(a, b+1):\n        # check if the square is a perfect square\n        if i**2 == i:\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(i**2)\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radial coordinate.\n    theta (float): The angle in radians.\n    \n    Returns:\n    tuple: The rectangular coordinates (x, y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): the radius of the point\n    theta (float): the angle of the point\n\n    Returns:\n    tuple: (x, y) the rectangular coordinates of the point\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes in two values, r and theta, which represent the polar\n    and rectangular coordinates respectively. It then converts these two values\n    to rectangular coordinates and returns the resulting values in a tuple.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert angle from degrees to radians\n    theta = cmath.radians(theta)\n\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radial component of the complex number.\n    theta (float): The angle (in radians) of the complex number.\n\n    Returns:\n    tuple: The rectangular coordinates as a tuple.\n\n    \"\"\"\n\n    # Convert r and theta to complex numbers\n    z = cmath.rect(r, theta)\n\n    # Return the rectangular coordinates\n    return (z.real, z.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # swapping the first and last elements in the list\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    # Find the first and last elements of the list \n    first_element = newList[0] \n    last_element = newList[-1] \n\n    # Interchange the first and last elements of the list \n    newList[0] = last_element \n    newList[-1] = first_element "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) <= 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return swap_List(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty\n    if len(newList) == 0:\n        print(\"The list is empty.\")\n    else:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # print the list after swapping\n        print(\"List after swapping: \", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # create a new list with the elements of the original list\n    tempList = list(newList)\n    # swap the first and last elements in the list\n    tempList[0], tempList[-1] = tempList[-1], tempList[0]\n    # return the swapped list\n    return tempList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has at least two elements\n    if length < 2:\n        return newList\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Swap the first and last elements in the list using slicing\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum_prod = 0\n    # Calculate the binomial coefficient using the formula nCr = (n!)/(r!*(n-r)!)\n    # where r is the value of k\n    for i in range(n, n-k, -1):\n        binomial = 1\n        for j in range(1, i+1):\n            binomial *= j\n        binomial_coeff = binomial\n        for j in range(1, k+1):\n            binomial_coeff *= i-j+1\n        sum_prod += binomial_coeff\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum = 0\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            sum += i*j\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two integers n and k as input and returns the sum of the product of consecutive binomial co-efficients.\n\n    The binomial coefficient C(n,k) is defined as the number of ways of selecting k objects from a collection of n objects.\n\n    The product of consecutive binomial co-efficients can be calculated using the following formula:\n\n        C(n,0)C(n,1) + C(n,1)C(n,2) +... + C(n,k)C(n,k)\n\n    We can use this formula to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters: \n    n: int\n        Number of terms in the binomial coefficient\n    k: int\n        Order of the binomial coefficient\n\n    Returns: \n    int\n        Sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # initialize product to 1\n    product = 1\n\n    # iterate through the range of k values\n    for i in range(1, k+1):\n\n        # calculate the binomial coefficient and multiply it with the product\n        binomial = (n + 1 - i) // i * binomial(n, i)\n        product *= binomial\n\n        # add the product to the sum\n        sum += product\n\n    # return the sum\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): the number of elements in the set.\n    k (int): the number of elements to select from the set.\n\n    Returns:\n    int: the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeff = 1\n    for i in range(k, n + 1):\n        coeff *= (n - i + 1) // i\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n or k < 0:\n        return 0\n\n    coeff = 1\n    sum_coeff = 0\n\n    for i in range(1, k+1):\n        coeff *= (n-i+1)\n        coeff //= i\n        sum_coeff += coeff\n\n    return sum_coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern to match any sequence of one or more digits\n    pattern = r'\\d+'\n    # Find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, ip)\n    # Convert each match to an integer and remove leading zeroes\n    for i, match in enumerate(matches):\n        matches[i] = int(match)\n        if matches[i] == 0:\n            matches.pop(i)\n    # Join the non-zero integers back into a string and return it\n    return '.'.join(str(match) for match in matches)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from ip address using regular expressions\n    ip = re.sub(r'^(0){1,3}\\.', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression pattern to match leading zeroes in ip address\n    pattern = r'^\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+$'\n    \n    # Check if input string matches the given pattern\n    if re.match(pattern, ip):\n        # Remove leading zeroes from ip address\n        ip = re.sub(r'^\\d+:', '', ip)\n        return ip\n    else:\n        # If input string doesn't match the pattern, return the original string\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    match = re.match(pattern, ip)\n    if match:\n        ip = ip.replace('0.0.0.0', '')\n        ip = ip.replace('0.0.0', '')\n        ip = ip.replace('0.0', '')\n        ip = ip.replace('0', '')\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression pattern to match any sequence of one or more digits followed by a period\n    pattern = r'\\d+\\.\\d+'\n    # Use the re.sub() function to replace the matched pattern with an empty string\n    ip = re.sub(pattern, '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(0+)(\\d+\\.\\d+\\.\\d+\\.\\d+)$'\n    if re.match(pattern, ip):\n        return re.sub(r'^(0+)(\\d+\\.\\d+\\.\\d+\\.\\d+)$', r'\\2', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        return re.sub(r'^(\\d+\\.\\d+\\.\\d+\\.\\d+).*', r'\\1', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+(\\.\\d+){3}$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n    \n    # Iterate through the list to find the even and odd numbers\n    for i in list1:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n            \n    # Check if even and odd numbers were found\n    if even is None or odd is None:\n        print(\"No even or odd numbers found in the list.\")\n    else:\n        # Calculate the difference and return it\n        return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        elif odd_num is None:\n            odd_num = num\n        else:\n            odd_num = odd_num - num\n    \n    if even_num is None:\n        return None\n    elif odd_num is None:\n        return None\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Find the first even and first odd number in the list\n    first_even = next(i for i, x in enumerate(list1) if x % 2 == 0)\n    first_odd = next(i for i, x in enumerate(list1) if x % 2!= 0)\n\n    # Calculate the difference between the first even and first odd number\n    diff = list1[first_even] - list1[first_odd]\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0:\n        return odd_num - even_num\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list and check if the number is even or odd\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            elif even_num!= num:\n                even_num = None\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            elif odd_num!= num:\n                odd_num = None\n                break\n    \n    # Calculate the difference of the first even and first odd numbers\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    # get the first even number from the list\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            even = lst[i]\n            break\n    else:\n        even = None\n    # get the first odd number from the list\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 1:\n            odd = lst[i]\n            break\n    else:\n        odd = None\n    # calculate the difference of the even and odd numbers\n    diff = even - odd if even and odd else None\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num = list1[i]\n        else:\n            odd_num = list1[i]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List should have at least two elements.\"\n    else:\n        even = list1[0]\n        odd = list1[1]\n        if even % 2 == 0 and odd % 2 == 1:\n            diff = even - odd\n            return diff\n        else:\n            return \"List should have at least two even and odd numbers.\""
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the variables to keep track of swaps\n    swaps = 0\n    i = 0\n    j = 0\n\n    # While both numbers are not equal, swap the bits and increment the swaps\n    while num1!= num2:\n        if num1 & 1:\n            # If the bit at position i is set, then swap the bits at position i and j\n            num1 ^= 1 << i\n            num2 ^= 1 << j\n            swaps += 1\n        else:\n            # If the bit at position i is not set, then increment i\n            i += 1\n\n        if num2 & 1:\n            # If the bit at position j is set, then swap the bits at position i and j\n            num1 ^= 1 << j\n            num2 ^= 1 << i\n            swaps += 1\n        else:\n            # If the bit at position j is not set, then increment j\n            j += 1\n\n    # Return the minimum number of swaps required to convert the binary numbers\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    # convert strings to binary\n    binary_str1 = bin(int(str1))[2:]\n    binary_str2 = bin(int(str2))[2:]\n    # calculate the length of the binary strings\n    length = max(len(binary_str1), len(binary_str2))\n    # initialize the minimum swaps variable\n    min_swaps = float('inf')\n    # loop through each position in the binary strings\n    for i in range(length):\n        # calculate the xor of the corresponding bits in the binary strings\n        xor = int(binary_str1[i]) ^ int(binary_str2[i])\n        # if the xor is not 0, add 1 to the minimum swaps variable\n        if xor!= 0:\n            min_swaps = min(min_swaps, xor)\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n\n    # base cases\n    for i in range(m+1):\n        dp[i][0] = i\n    for j in range(n+1):\n        dp[0][j] = j\n\n    # recurrence relation\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + (str1[i-1]!= str2[j-1])\n\n    return dp[m][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings into integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize the variable to store the minimum number of swaps required\n    swap = 0\n    \n    # Convert the binary strings into a list of integers and sort the list\n    lst1 = list(map(int, bin(num1)[2:].zfill(32)))\n    lst2 = list(map(int, bin(num2)[2:].zfill(32)))\n    lst = lst1 + lst2\n    lst.sort()\n    \n    # Iterate through the sorted list and count the number of swaps required\n    for i in range(len(lst)):\n        if lst[i]!= lst[i-1]:\n            swap += 1\n    \n    return swap"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for counting swaps\n    swap_count = 0\n    max_swap = 0\n\n    # Iterate through bits of both numbers, comparing them, and counting swaps\n    while num1!= num2:\n        # If the last bit of num1 is 1 and the last bit of num2 is 0, swap the last bit of num1 with the last bit of num2\n        if num1 & 1 == 1 and num2 & 1 == 0:\n            swap_count += 1\n            max_swap = max(max_swap, swap_count)\n            num1 = (num1 & 0b11111110) | (num2 & 0b00000001)  # Shift right by 1 and set last bit to 1\n            num2 = (num2 & 0b11111110) | (num1 & 0b00000001)  # Shift right by 1 and set last bit to 1\n        else:\n            # If the last bit of num1 is 0 and the last bit of num2 is 1, swap the last bit of num2 with the last bit of num1\n            swap_count += 1\n            max_swap = max(max_swap, swap_count)\n            num1 = (num1 & 0b11111110) | (num2 & 0b00000001)  # Shift right by 1 and set last bit to 1\n            num2 = (num2 & 0b11111110) | (num1 & 0b00000001)  # Shift right by 1 and set last bit to 1\n\n    # Return the final swap count\n    return max_swap"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to lists of digits\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Initialize variables for current digit and current index\n    current_digit = 0\n    current_index = 0\n\n    # Initialize variables for minimum number of swaps and current minimum\n    min_swaps = float('inf')\n    current_min = float('inf')\n\n    # Loop through both lists\n    for i in range(len(list1)):\n\n        # Compare current digits\n        if list1[i]!= list2[i]:\n\n            # If the digits are different, update current digit and current index\n            current_digit = list1[i]\n            current_index = i\n\n            # Calculate the number of swaps required to convert the current digit\n            swaps = abs(list1.index(current_digit) - list2.index(current_digit))\n\n            # Update minimum number of swaps and current minimum\n            if swaps < min_swaps:\n                min_swaps = swaps\n                current_min = swaps\n\n        # If the digits are the same, increment current digit and current index\n        else:\n            current_digit += 1\n            current_index += 1\n\n    # If the current digit is greater than 1, calculate the number of swaps required to convert it to 1\n    if current_digit > 1:\n        swaps = abs(list1.index(1) - list2.index(1))\n        current_min = min(current_min, swaps)\n\n    return current_min"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the two binary strings into lists of digits\n    digit_list1 = [int(digit) for digit in str1]\n    digit_list2 = [int(digit) for digit in str2]\n\n    # find the length of the shorter binary number\n    min_len = min(len(str1), len(str2))\n\n    # initialize the minimum number of swaps to the length of the shorter binary number\n    min_swaps = min_len\n\n    # iterate through the digits of the shorter binary number\n    for i in range(min_len):\n        # if the digits are not equal, swap them\n        if digit_list1[i]!= digit_list2[i]:\n            min_swaps -= 1\n\n    # return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the input strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the result variable to store the minimum number of swaps\n    swaps = 0\n\n    # Loop until both binary numbers are equal\n    while num1!= num2:\n        # Check if the binary numbers have any common digits\n        if num1 & num2:\n            # Swap the digits in the binary numbers\n            temp = num1 ^ num2\n            num1 = num2\n            num2 = temp\n            swaps += 1\n        else:\n            # Find the position of the first different digit\n            position = 0\n            while (num1 & position) == 0:\n                position <<= 1\n            while (num2 & position) == 0:\n                position <<= 1\n            # Swap the digits at the given positions\n            temp = num1\n            num1 = num1 ^ num2 ^ (temp & position)\n            num2 = num2 ^ temp ^ (num2 & position)\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings to lists of 0's and 1's\n    lst1 = list(map(int, list(str1)))\n    lst2 = list(map(int, list(str2)))\n\n    # Calculate the length of the binary strings\n    n = len(str1)\n\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = n\n\n    # Perform a brute-force approach to find the minimum number of swaps\n    for i in range(n):\n        for j in range(n):\n            # Check if the i-th bit of str1 is equal to the j-th bit of str2\n            if lst1[i] == lst2[j]:\n                # If yes, swap the i-th and j-th bits\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n\n                # Update the minimum number of swaps\n                min_swaps = min(min_swaps, n - i - j)\n\n                # Swap the i-th and j-th bits back to restore the original string\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n\n                # If no swap is required, break out of the inner loop\n                if min_swaps == 0:\n                    break\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings into integer arrays\n    arr1 = [int(i) for i in str1]\n    arr2 = [int(i) for i in str2]\n    # Find the lengths of the two binary strings\n    len1 = len(str1)\n    len2 = len(str2)\n    # Initialize the minimum number of swaps\n    min_swaps = 0\n    # Initialize two variables to keep track of the positions of the digits in the binary strings\n    i = j = 0\n    # While the i-th digit in arr1 is greater than or equal to the j-th digit in arr2, do the following:\n    while arr1[i] >= arr2[j]:\n        # If the i-th digit in arr1 is greater than or equal to the j-th digit in arr2, increment the minimum number of swaps and increment the i-th digit in arr1\n        if arr1[i] >= arr2[j]:\n            min_swaps += 1\n            arr1[i] += 1\n        # If the i-th digit in arr1 is less than the j-th digit in arr2, increment the j-th digit in arr2\n        if arr1[i] < arr2[j]:\n            j += 1\n        # Increment the i-th digit in arr1\n        i += 1\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert the tuple list to a byte string\n    byte_string = bytearray(tuple_list)\n    # calculate the size in bytes\n    size = len(byte_string)\n    # return the size\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        if type(item) in [int, float, str]:\n            size += sys.getsizeof(item)\n        elif type(item) is tuple:\n            size += 2 * tuple_size(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function finds the kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                i += 1\n                k -= 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                j += 1\n                k -= 1\n    if k == 1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < k:\n        arr1, arr2 = arr2, arr1\n\n    left1, right1 = 0, len(arr1) - 1\n    left2, right2 = 0, len(arr2) - 1\n\n    while left1 <= right1 and left2 <= right2:\n        mid1 = left1 + (right1 - left1) // 2\n        mid2 = left2 + (right2 - left2) // 2\n\n        if arr1[mid1] == arr2[mid2]:\n            if k == 1:\n                return arr1[mid1]\n            k -= 1\n            left1 = mid1 + 1\n            left2 = mid2 + 1\n        elif arr1[mid1] < arr2[mid2]:\n            if k <= mid1 + 1:\n                return arr1[mid1]\n            right1 = mid1 - 1\n        else:\n            if k <= mid2 + 1:\n                return arr2[mid2]\n            right2 = mid2 - 1\n\n    if k == 1:\n        return arr1[left1]\n    elif k == 2:\n        return arr1[left1], arr2[left2]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    # If one of the arrays is exhausted, return the remaining elements of the other array\n    if i == len(arr1):\n        return arr2[j:j+k]\n    else:\n        return arr1[i:i+k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the total length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    # Find the length of the smaller array\n    if n1 < n2:\n        n = n1\n        arr = arr1\n    else:\n        n = n2\n        arr = arr2\n    # Initialize the left and right pointers for both arrays\n    left = 0\n    right = n - 1\n    # Initialize the kth index\n    kth_index = 0\n    # Traverse both arrays while kth_index is less than k\n    while kth_index < k:\n        if arr[left] < arr[right]:\n            kth_index += 1\n            left += 1\n        else:\n            left += 1\n    # If kth_index is equal to k, then the kth element is arr[left]\n    return arr[left]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    count = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n            j += 1\n\n    if i == len(arr1):\n        return arr2[j]\n    elif j == len(arr2):\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize variables for current index of arrays and the count of elements in common\n    i = 0\n    j = 0\n    count = 0\n    \n    # Iterate through both arrays\n    while i < len(arr1) and j < len(arr2):\n        # Check if the current elements of both arrays are same\n        if arr1[i] == arr2[j]:\n            count += 1\n            # If kth element is found, return it\n            if count == k:\n                return arr1[i]\n            # Move both pointers to the next element\n            i += 1\n            j += 1\n        # If arr1[i] is smaller, move i pointer to next element\n        elif arr1[i] < arr2[j]:\n            i += 1\n        # If arr2[j] is smaller, move j pointer to next element\n        else:\n            j += 1\n    \n    # If kth element is not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    if k <= len(arr1):\n        return find_kth(arr1[1:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[1:], k - len(arr1) - 1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes in two sorted arrays and the k value as input\n    and returns the kth element from the two arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong_number(number):\n    '''\n    Function to check whether a given number is Armstrong or not.\n    '''\n    # Check if the number is less than 10\n    if number < 10:\n        return False\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Iterate through each digit in the number\n    for digit in number_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Multiply the digit to the power of the length of the number\n        digit_power = digit_int ** len(number_str)\n        # Add the digit power to the sum variable\n        sum += digit_power\n\n    # Check if the sum equals the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num_str = str(number)\n    num_len = len(num_str)\n    sum_of_powers = 0\n    base = 1\n    \n    for i in range(num_len):\n        power = num_len - 1 - i\n        power_val = 1\n        \n        for j in range(power):\n            power_val *= int(num_str[j])\n        \n        sum_of_powers += power_val ** base\n        \n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    sum_of_powers = 0\n    \n    for i in range(1, len(number_str)+1):\n        power = len(number_str) - i\n        sum_of_powers += int(number_str[i-1]) ** power\n    \n    return sum_of_powers == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    sum_of_squares = 0\n    \n    for digit in num_str:\n        digit = int(digit)\n        square = digit ** len(num_str)\n        sum_of_squares += square\n        \n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Determine whether a number is an Armstrong number or not.\n    \"\"\"\n    n_str = str(n)\n    n_len = len(n_str)\n    sum_of_squares = 0\n    power = n_len\n\n    while power > 0:\n        digit = int(n_str[-power])\n        sum_of_squares += digit ** power\n        power -= 1\n\n    return n == sum_of_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string and initialize the sum to 0\n    num_str = str(number)\n    sum = 0\n\n    # Iterate over each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum\n        digit = int(digit)\n        sum += digit ** len(num_str)\n\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Check if the number is less than 10\n    if number < 10:\n        return False\n\n    # Compute the power of each digit from right to left\n    digits = [int(digit) for digit in str(number)]\n    power = len(digits)\n    sum_of_powers = sum(digit ** power for digit in digits)\n\n    # Check if the sum of the powers of the digits is equal to the original number\n    return number == sum_of_powers"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(number):\n    # initialize sum and digit variables\n    sum = 0\n    digit = 0\n\n    # loop through each digit in the number\n    while number > 0:\n        digit = number % 10\n        sum += digit ** 3\n        number //= 10\n\n    # return True if the sum is equal to the number, else return False\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n    # calculate the sum of the digits raised to the power of the length of the list\n    result = sum(digits[i] ** len(digits) for i in range(len(digits)))\n    # compare the result to the original number\n    if result == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    total = 0\n    power = len(number)\n    for digit in number:\n        total += int(digit)**power\n    return total == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize variables to store sum and average\n    sum = 0\n    avg = 0\n\n    # Loop through the first n numbers\n    for i in range(1, number+1):\n        # Add i to sum\n        sum += i\n\n        # Calculate average by dividing sum by n\n        avg = sum / number\n\n    # Return the sum and average\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    for i in range(1, number+1):\n        sum += i\n        count += 1\n        \n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the current natural number to the sum\n        sum += i\n        # increment the count variable\n        count += 1\n    \n    # calculate the average\n    average = sum/count\n    \n    # return a tuple with the sum and average\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n\n    average = sum / count\n    print(f\"The sum of the first {number} natural numbers is {sum}.\")\n    print(f\"The average of the first {number} natural numbers is {average}.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    \n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and average variables to zero\n    sum_n = 0\n    average = 0\n\n    # iterate through first n natural numbers\n    for i in range(1, number+1):\n        # add each number to the sum\n        sum_n += i\n\n    # calculate the average\n    average = sum_n/number\n\n    # return the sum and average as a tuple\n    return sum_n, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize variables\n    total = 0\n    count = 0\n\n    # loop through first n numbers\n    for i in range(1, n+1):\n        # add the number to the sum\n        total += i\n\n        # increment the count\n        count += 1\n\n    # find the average\n    average = total / count\n\n    # return the result\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    # initialize sum and count\n    total = 0\n    count = 0\n\n    # iterate through the numbers from 1 to n\n    for i in range(1, number + 1):\n        # add each number to the sum\n        total += i\n        # increment the count\n        count += 1\n\n    # calculate the average\n    average = total / count\n\n    # return the sum and average as a tuple\n    return (total, average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n): \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n\nprint(is_Even(6)) #Output: True\nprint(is_Even(5)) #Output: False\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even, else it returns False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    # check if the number is even or not\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # initialize a variable to store the first repeated character\n    first_repeated = None\n\n    # iterate through each character in the string again\n    for char in str1:\n        # if the character has a frequency greater than 1, update the first_repeated variable\n        if freq[char] > 1 and first_repeated is None:\n            first_repeated = char\n\n    # return the first_repeated variable\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        else:\n            char_freq[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of characters\n    freq = {}\n    # Iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Iterate through the string again and find the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n    # If no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # loop through each character in the string again and find the first repeated character\n    for char in str1:\n        # if the character count is greater than 1, return the character\n        if char_count[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize an empty dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            # if the character is already in the dictionary, increment its count by 1\n            char_count[char] += 1\n        else:\n            # if the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n    \n    # iterate through the character dictionary to find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    # loop through each character in the string again to find the first repeated character\n    for char in str1:\n        # if the character is already in the dictionary, return the character\n        if char in char_count:\n            return char\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize variables to store the count of each character in the string\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the char_count dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # loop through the dictionary again and find the first character with a count of 2\n    for char in char_count:\n        if char_count[char] == 2:\n            return char\n    # if no character has a count of 2, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a lucid number\n        if is_lucid(i):\n            # if it is, add it to the list of lucid numbers\n            lucid_numbers.append(i)\n\n    # return the list of lucid numbers\n    return lucid_numbers\n\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    A lucid number is a positive integer whose digits are in increasing order.\n    '''\n    # check if the number has at least one digit\n    if num == 0:\n        return False\n\n    # check if the number has at least two digits\n    if num < 10:\n        return False\n\n    # loop through all digits in the number\n    for digit in str(num):\n        # check if the digit is greater than the previous digit\n        if int(digit) <= int(digit) - 1:\n            return False\n\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_nums = [2]\n    num = 3\n    while num <= n:\n        is_lucid = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_nums.append(num)\n        num += 2\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            j = i\n            while j*j <= n:\n                n -= j\n                j += 1\n            lucid_numbers.append(i)\n            i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            ludic_list.append(i)\n    return ludic_list\n\n\ndef is_lucid(num):\n    '''\n    A function to check if a given number is a lucid number or not.\n    A lucid number is a positive integer that is equal to the sum of its digits raised to the power of the number of digits in the number.\n    '''\n    num_str = str(num)\n    num_digits = len(num_str)\n    return num == sum(int(digit) ** num_digits for digit in num_str)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for num in range(2, n):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            lucids.append(num)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucids.append(i)\n    return lucids\n\ndef is_lucid(num):\n    '''\n    Check if a given number is a lucid number or not. A lucid number is a number that is the square of a prime number.\n    '''\n    if num < 2:\n        return False\n    is_prime = True\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        return True\n    return False"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if all(j <= i for j in range(2, int(i**0.5)+1)):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    i = 1\n\n    while True:\n        lucid_numbers.append(i)\n        i += 1\n        if i**2 > n:\n            break\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if len(str(i)) == len(str(n)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word and join it back to a string\n    reversed_words =''.join(reversed(word) for word in words)\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    # Convert the string to a list of words\n    words = s.split()\n    # Reverse the list of words\n    words.reverse()\n    # Join the reversed words back into a string\n    reversed_s = \" \".join(words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()  # Split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])  # Reverse the word\n    return \" \".join(reversed_words)  # Join the reversed words back into a string with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the input string into words\n    words = s.split()\n    # Reverse each word\n    words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Initialize an empty list to store the reversed words\n    reversed_words = []\n    # Loop through each word and reverse it\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    # Join the reversed words into a string with spaces between them\n    reversed_string = \" \".join(reversed_words)\n    # Return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    words.reverse()  # reverse the order of the words\n    result =''.join(words)  # join the words back into a string with spaces\n    return result"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, else False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(f\"{num} is a prime number.\")\nelse:\n    print(f\"{num} is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is equal to 2\n    elif num == 2:\n        return True\n    # check if the number is divisible by any number between 2 and the square root of the number\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(num**0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if num < 2:\n        return False\n    elif is_prime(num):\n        return True\n    else:\n        return prime_num(num-1)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Find all substrings that match a given regex pattern in the given text.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        # Get the substring\n        substring = text[match.start():match.end()]\n        # Get the start and end indices\n        start_index = match.start()\n        end_index = match.end()\n        # Add the result to the list\n        results.append((substring, start_index, end_index))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regex to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Loop through the matches and extract the substrings and their start and end indices\n    for match in matches:\n        # Extract the substring\n        substring = text[match.start():match.end()]\n        # Get the start index\n        start_index = match.start()\n        # Get the end index\n        end_index = match.end()\n        # Print the substring, start index, and end index\n        print(substring, start_index, end_index)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        substring = text[start:end]\n        result.append((substring, start, end))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    start_index = 0\n    end_index = len(matches[0])\n    for match in matches:\n        if match.startswith(\" \"):\n            start_index += len(match)\n        else:\n            break\n    for match in matches[::-1]:\n        if match.endswith(\" \"):\n            end_index -= len(match)\n        else:\n            break\n    return matches[0], start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Found literal: '{literal}', start index: {start_index}, end index: {end_index}\")"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return (bell_Number(n-1) + bell_Number(n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Convert the list to a list of tuples\n    list2 = [(i, x) for i, x in enumerate(list1)]\n    # Sort the list of tuples based on the second element (index)\n    list2.sort(key=lambda x: x[1])\n    # Extract the k'th element from the sorted list\n    kth = list2[L-1][0]\n    # Extract the elements from the original list except the k'th element\n    list3 = [x for i, x in enumerate(list1) if i!= kth]\n    return list3"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return list1\n    else:\n        list1.pop(L - 1)\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return [list1[0]]\n    elif L == len(list1):\n        return []\n    else:\n        return [list1[0]] + remove_kth_element(list1[1:], L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and a value L, and returns a new list with the k'th element removed.\n    \"\"\"\n    k = L - 1 # The value of k is 1-indexed since we want to remove the kth element\n    return list1[:k] + list1[k+1:] # We concatenate the first k elements of the list to the remaining elements"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    for i in range(len(list1)):\n        if i == k - 1:\n            list1.pop(i)\n            return list1\n        elif i > k - 1:\n            list1[i-1] = list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Check if the length of the list is less than or equal to L\n    if len(list1) <= L:\n        return list1\n    # Create a new list with all the elements but the k'th element\n    new_list = list1[:L-1]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and L, and returns a new list with the same elements, but the k'th element removed.\n    '''\n    # Initialize the result list with all elements of the original list\n    result = list1\n    # Remove the kth element from the result list\n    result.pop(L-1)\n    # Return the result list\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = int(input(\"Enter the value of k: \"))\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1 # index of the k'th element to remove (0-based)\n    list1.pop(k) # remove the k'th element from the list\n    return list1 # return the updated list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Check if N is an integer\n    if not isinstance(N, int):\n        raise ValueError('N must be an integer.')\n    \n    # Check if N is a valid index in the first row of the matrix\n    if N < 0 or N >= len(test_list[0]):\n        raise ValueError('N is not a valid index in the first row of the matrix.')\n    \n    # Create an empty list to store the max values\n    max_vals = []\n    \n    # Iterate over each row in the matrix\n    for row in test_list:\n        # Extract the nth column from the row and store it in a temporary list\n        col = [row[n] for n in range(len(row)) if n!= N]\n        \n        # If the list is not empty, find the maximum value and append it to the max_vals list\n        if col:\n            max_vals.append(max(col))\n    \n    # If the max_vals list is empty, return None\n    if not max_vals:\n        return None\n    \n    # Find the maximum value in the max_vals list and return it\n    return max(max_vals)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n        else:\n            max_val = 0\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = max(test_list[i][N-1])\n        for j in range(len(test_list[i])):\n            if j == N-1:\n                print(max_val)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Create a list to store the max values\n    max_values = []\n\n    # Iterate through each row in the matrix\n    for row in test_list:\n        # Append the value of then'th column to the max_values list\n        max_values.append(row[N-1])\n\n    # Find the maximum value in the max_values list and return it\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Extracting then'th column from the matrix\n    col = [row[N-1] for row in test_list]\n\n    # Returning the max of the column\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first list in the list of lists\n    length = len(test_list[0])\n    # Initialize an empty list to store the max values of each column\n    col_max = []\n    # Loop through each column of the matrix\n    for i in range(length):\n        # Initialize an empty list to store the values of the nth column\n        nth_col = []\n        # Loop through each row of the matrix\n        for row in test_list:\n            # Append the value of the nth column to the list\n            nth_col.append(row[i])\n        # Sort the list in descending order\n        nth_col.sort(reverse=True)\n        # Append the max value of the nth column to the col_max list\n        col_max.append(nth_col[N-1])\n    # Return the max value of then'th column\n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the list of lists\n    n = len(test_list)\n    \n    # Check if the N is valid\n    if N > n:\n        raise ValueError('N is greater than the number of rows in the matrix.')\n    \n    # Initialize the variable to store the maximum value\n    max_value = None\n    \n    # Loop through each row of the matrix\n    for row in test_list:\n        # Get the value of then'th column\n        col_value = row[N-1]\n        \n        # Check if the current value is greater than the maximum value\n        if max_value is None or col_value > max_value:\n            max_value = col_value\n    \n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # create an empty list to store the merged lists\n    merged_lst = []\n\n    # iterate over each sublist in the main list\n    for sublist in lst:\n        # append the first element of the sublist to the first list in the merged list\n        merged_lst.append([sublist[0], sublist[1]])\n\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    # Convert the nested list to a single list\n    flat_lst = [item for sublist in lst for item in sublist]\n    # Split the single list into two lists\n    first_list = flat_lst[:len(flat_lst)//2]\n    second_list = flat_lst[len(flat_lst)//2:]\n    # Return the two lists\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append([sublist[0], sublist[1]])\n    return new_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cumulative_sum += val\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize cumulative sum to 0\n    cum_sum = 0\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Extract each value from the tuple\n        value = tup[0]\n        \n        # Add the value to the cumulative sum\n        cum_sum += value\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][0]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    if not test_list:\n        return None\n    total_sum = 0\n    for i in range(len(test_list)):\n        if not isinstance(test_list[i], tuple):\n            return None\n        total_sum += sum(test_list[i])\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for val in test_list:\n        cum_sum += val\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for num in nums:\n        average = sum(num) / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        average = sum(i)/len(i)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = [0, 0]\n    count = 0\n    for tup in nums:\n        for num in tup:\n            total[0] += num\n            count += 1\n    for i in range(2):\n        if count > 0:\n            total[i] /= count\n        else:\n            total[i] = 0\n    return total"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        sum_ = 0\n        count = 0\n        for i in num:\n            sum_ += i\n            count += 1\n        avg = sum_ / count\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in nums:\n        for j in i:\n            total.append(j)\n    return total"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    averages = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of all values in the tuple\n        total = sum(tup)\n        # Calculate the number of values in the tuple\n        count = len(tup)\n        # Calculate the average value of the tuple\n        average = total / count\n        # Append the average value to the list of average values\n        averages.append(average)\n    # Return the list of average values\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for i in range(len(nums)):\n        averages.append(sum(nums[i]) / len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize a list to hold the averages\n    averages = []\n\n    # loop through each tuple in the list\n    for tup in nums:\n        # initialize a variable to hold the sum of the values in the tuple\n        total = 0\n\n        # loop through each value in the tuple and add it to the total\n        for value in tup:\n            total += value\n\n        # calculate and add the average value to the list\n        averages.append(total / len(tup))\n\n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        sum_of_num = sum(num_tuple)\n        average = sum_of_num / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for sub_tuple in nums:\n        total = 0\n        for num in sub_tuple:\n            total += num\n        average = total/len(sub_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # If the lengths of the tuples are not equal, raise a ValueError\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length')\n\n    # Loop through each element of the two tuples and perform the element wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Perform element-wise modulo operation on the two tuples\n    result = tuple((a % b for a, b in zip(test_tup1, test_tup2)))\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # perform element wise modulo\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initializing the variables\n    current_x = 0\n    current_y = 0\n    steps_taken = 0\n    step_count = 0\n    \n    # checking if the distance from origin to point (0, d) is less than or equal to the number of steps\n    if steps <= abs(current_x) + abs(current_y):\n        return steps_taken\n    \n    # iterating till the end of the given number of steps\n    while steps_taken < steps:\n        \n        # checking if the distance from origin to point (current_x, current_y) is less than or equal to the distance from origin to the point (d, 0)\n        if abs(current_x) + abs(current_y) <= d:\n            \n            # if the distance from origin to point (current_x, current_y) is less than or equal to the distance from origin to the point (0, d),\n            # then we can make a step in the current direction\n            current_x += 1\n            \n            # incrementing the steps taken\n            steps_taken += 1\n            \n            # if the current step leads to the point (0, d), then we can continue the loop\n            if current_x == 0 and current_y == d:\n                continue\n            \n            # decrementing the step count\n            step_count -= 1\n            \n            # decrementing the current y value\n            current_y -= 1\n            \n        # if the distance from origin to point (current_x, current_y) is greater than the distance from origin to the point (0, d),\n        # then we can take a step in the opposite direction\n        else:\n            \n            # decrementing the current x value\n            current_x -= 1\n            \n            # incrementing the steps taken\n            steps_taken += 1\n            \n            # if the current step leads to the point (0, d), then we can continue the loop\n            if current_x == 0 and current_y == d:\n                continue\n            \n            # incrementing the step count\n            step_count += 1\n            \n            # decrementing the current y value\n            current_y += 1\n            \n    return steps_taken + step_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d == 0:\n        return 0\n    elif d < 0:\n        return -1\n    \n    jumps = 0\n    current_pos = 0\n    while True:\n        if current_pos == steps-1:\n            return jumps\n        elif current_pos == steps-2:\n            current_pos -= 1\n            jumps += 1\n            if current_pos == steps-1:\n                return jumps\n        else:\n            current_pos += 1\n            jumps += 1\n            \n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize the variables\n    steps = steps\n    d = d\n    min_jumps = 0\n\n    # check if the starting point is (0, 0)\n    if (0, 0) == (steps % d, 0):\n        min_jumps = 0\n    else:\n        # check if the starting point is in the first half\n        if (0, 0) == (steps // 2) % (d, 0):\n            min_jumps = 0\n        else:\n            # check if the starting point is in the second half\n            if (0, 0) == ((steps - 1) // 2) % (d, 0):\n                min_jumps = 1\n            else:\n                # check if the starting point is in the third half\n                if (0, 0) == ((steps - 2) // 2) % (d, 0):\n                    min_jumps = 2\n                else:\n                    # check if the starting point is in the fourth half\n                    if (0, 0) == ((steps - 3) // 2) % (d, 0):\n                        min_jumps = 3\n                    else:\n                        # check if the starting point is in the fifth half\n                        if (0, 0) == ((steps - 4) // 2) % (d, 0):\n                            min_jumps = 4\n                        else:\n                            # check if the starting point is in the sixth half\n                            if (0, 0) == ((steps - 5) // 2) % (d, 0):\n                                min_jumps = 5\n                            else:\n                                # check if the starting point is in the seventh half\n                                if (0, 0) == ((steps - 6) // 2) % (d, 0):\n                                    min_jumps = 6\n                                else:\n                                    # check if the starting point is in the eighth half\n                                    if (0, 0) == ((steps - 7) // 2) % (d, 0):\n                                        min_jumps = 7\n                                    else:\n                                        # check if the starting point is in the ninth half\n                                        if (0, 0) == ((steps - 8) // 2) % (d, 0):\n                                            min_jumps = 8\n                                        else:\n                                            # check if the starting point is in the tenth half\n                                            if (0, 0) == ((steps - 9) // 2) % (d, 0):\n                                                min_jumps = 9\n                                            else:\n                                                # check if the starting point is in the eleventh half\n                                                if (0, 0) == ((steps - 10) // 2) % (d, 0):\n                                                    min_jumps = 10\n                                                else:\n                                                    # check if the starting point is in the twelfth half\n                                                    if (0, 0) == ((steps - 11) // 2) % (d, 0):\n                                                        min_jumps = 11\n                                                    else:\n                                                        # check if the starting point is in the thirteenth half\n                                                        if (0, 0) == ((steps - 12) // 2) % (d, 0):\n                                                            min_jumps = 12\n                                                        else:\n                                                            # check if the starting point is in the fourteenth half\n                                                            if (0, 0) == ((steps - 13) // 2) % (d, 0):\n                                                                min_jumps = 13\n                                                            else:\n                                                                # check if the starting point is in the fifteenth half\n                                                                if (0, 0) == ((steps - 14) // 2) % (d, 0):\n                                                                    min_jumps = 14\n                                                                else:\n                                                                    # check if the starting point is in the sixteenth half\n                                                                    if (0, 0) == ((steps - 15) // 2) % (d, 0):\n                                                                        min_jumps = 15\n                                                                    else:\n                                                                        # check if the starting point is in the seventeenth half\n                                                                        if (0, 0) == ((steps - 16) // 2) % (d, 0):\n                                                                            min_jumps = 16\n                                                                        else:\n                                                                            # check if the"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 0:\n        return 0\n    \n    if d >= steps:\n        return 1\n    \n    jumps = 1\n    for i in range(2, d+1):\n        jumps += min_Jumps(steps-i, d-i)\n        \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumpCount = 0\n    jumps = 1\n    steps = steps + 1\n    while steps > 0:\n        if d > 0:\n            steps -= 1\n            d = d - 1\n        else:\n            steps -= 1\n            d = d + 1\n            jumpCount += 1\n        if d == 0 and steps == 0:\n            break\n        jumps += 1\n    return jumpCount"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # initialize variables\n    cost = 0\n    num_jumps = 0\n    x = 0\n    y = d\n\n    # iterate until the point (d, 0) is reached\n    while x >= 0:\n        # check if we can reach the target point\n        if y == 0:\n            # add a cost for reaching the target point\n            cost += d\n            # increment the number of jumps\n            num_jumps += 1\n            # reset the position and target\n            x = 0\n            y = d\n        else:\n            # move to the right\n            x -= 1\n            # move down one step\n            y -= 1\n\n    # return the number of jumps and cost\n    return num_jumps, cost"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_jumps = 0\n    curr_pos = 0\n    jumps = 0\n\n    while curr_pos < len(steps) - 1:\n        if steps[curr_pos] == d:\n            jumps += 1\n            if jumps > max_jumps:\n                max_jumps = jumps\n            curr_pos += 1\n        else:\n            jumps = 0\n            curr_pos += 1\n\n    if jumps > max_jumps:\n        max_jumps = jumps\n\n    return max_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # calculate number of jumps required to reach (d, 0) from origin\n    num_jumps = (steps + d) // d\n    \n    # check if number of jumps is less than or equal to steps\n    if num_jumps > steps:\n        num_jumps = steps\n    \n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    # initialize variables\n    dist = 0\n    steps_taken = 0\n    jumps = 0\n\n    # check if starting point is at (0, d)\n    if (steps, d) == (0, 0):\n        return 0\n\n    # loop until we reach the end point\n    while True:\n\n        # move in the direction of the distance\n        steps_taken += 1\n        if steps_taken > steps:\n            break\n\n        # move to the next point\n        dist += 1\n        if d - dist == 0:\n            jumps += 1\n        if (dist, 0) == (d, 0):\n            break\n\n    # return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # find the minimum number of jumps required to reach (0, 0)\n    min_jumps = steps\n    for i in range(steps):\n        x, y = 0, i\n        while x <= d:\n            x += 1\n            y -= 1\n            if y < 0:\n                break\n        if y == 0:\n            min_jumps = min(min_jumps, i+1)\n\n    return min_jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists should have the same length.\")\n        return\n    \n    # iterate through the list and divide each element by the corresponding element in the other list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError('Cannot divide by zero')\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_start = None\n    for i, char in enumerate(test_str):\n        if char.isdigit():\n            num_start = i\n            break\n    if num_start is not None:\n        num_end = num_start\n        while num_end < len(test_str):\n            if not test_str[num_end].isdigit():\n                break\n            num_end += 1\n        test_str = test_str[:num_start] + test_str[num_start:num_end] + test_str[num_end:]\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        test_str = ''.join(num_list) + test_str\n        return test_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result = char + result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            chars.append(char)\n    \n    return ''.join(chars) + ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        return ''.join(num_list) + test_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = [char for char in test_str if char.isdigit()]\n    nums.sort(reverse=True)\n    nums_str = \"\".join(nums)\n    return test_str.replace(nums_str, \"\") + nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return num_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = \"\"\n    non_numbers = \"\"\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            non_numbers += char\n    \n    return non_numbers + numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # list to store numbers\n    num_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, add it to the end of the string\n        else:\n            test_str += char\n    # join the list of numbers into a string and return the result\n    return \"\".join(num_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a = sorted(a)\n\n    # Initialize variables for size of largest subset and current subset size\n    max_size = 0\n    current_size = 0\n\n    # Iterate through the list, keeping track of the current subset size\n    for num in a:\n        current_size += 1\n        # Check if the current number is divisible by all elements in the subset\n        if num % a[:current_size] == 0:\n            max_size = max(max_size, current_size)\n        else:\n            current_size -= 1\n\n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * n\n    max_size = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                dp[j] += dp[i]\n                if dp[j] > max_size:\n                    max_size = dp[j]\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    result = [0] * (len(a)+1)\n    for i in range(len(a)):\n        for j in range(i+1, len(a)+1):\n            if a[i] % a[j] == 0:\n                result[j] = max(result[j], result[i]+1)\n    return result[-1]"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    size = 1\n    subset_size = 1\n    largest_size = 0\n\n    for i in range(len(a)-1):\n        if a[i] % a[i+1] == 0:\n            subset_size += 1\n            if subset_size > largest_size:\n                largest_size = subset_size\n        else:\n            subset_size = 1\n\n    return largest_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    n = len(a)\n\n    # Initialize two pointers, left and right, to the start of the list\n    left = 0\n    right = n - 1\n\n    # Initialize variables for the size of the largest subset and the current subset size\n    largest = 1\n    current = 1\n\n    # Loop until the right pointer is greater than the left pointer\n    while right > left:\n        # If the difference between the current element and the element at the left pointer is divisible by 2,\n        # update the current subset size and move the right pointer one position to the right\n        if a[right] - a[left] % 2 == 0:\n            current += 1\n            right += 1\n        # If the difference between the current element and the element at the right pointer is divisible by 2,\n        # update the current subset size and move the left pointer one position to the left\n        else:\n            current = 1\n            left += 1\n\n        # Update the largest subset size if the current subset size is greater than the largest subset size\n        if current > largest:\n            largest = current\n\n    # Return the largest subset size\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1]*n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n\n    return max(dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a dictionary to store the number of pairs that are divisible with each number\n    divisible_pairs = {}\n    for i in a:\n        for j in a:\n            if j % i == 0:\n                divisible_pairs[i] = divisible_pairs.get(i, 0) + 1\n                divisible_pairs[j] = divisible_pairs.get(j, 0) + 1\n\n    # find the largest subset of numbers that are divisible by the largest number\n    largest_subset = []\n    largest_size = 0\n    for i in sorted(divisible_pairs, reverse=True):\n        if divisible_pairs[i] > largest_size:\n            largest_size = divisible_pairs[i]\n            largest_subset = [i]\n        elif divisible_pairs[i] == largest_size:\n            largest_subset.append(i)\n\n    return largest_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the number of pairs that can be formed with each number in the list\n    pair_counts = {}\n    for num in a:\n        if num in pair_counts:\n            pair_counts[num] += 1\n        else:\n            pair_counts[num] = 1\n\n    # Sort the keys in the dictionary in descending order\n    sorted_keys = sorted(pair_counts, key=pair_counts.get, reverse=True)\n\n    # Initialize a variable to store the size of the largest subset\n    largest_subset_size = 0\n\n    # Loop through the sorted keys and add up the numbers that can be formed with each key\n    for key in sorted_keys:\n        pair_count = pair_counts[key]\n        possible_pairs = pair_count * (pair_count - 1) // 2\n        current_subset_size = key + possible_pairs\n        if current_subset_size > largest_subset_size:\n            largest_subset_size = current_subset_size\n\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # first, sort the list in ascending order\n    a.sort()\n\n    # initialize the current subset size as 1\n    current_size = 1\n\n    # initialize the current sum as the first number in the list\n    current_sum = a[0]\n\n    # initialize the maximum size of the subset\n    max_size = 1\n\n    # iterate over the rest of the list\n    for i in range(1, len(a)):\n        # add the next number to the current sum\n        current_sum += a[i]\n\n        # check if the current sum can be divided by 2\n        if current_sum % 2 == 0:\n            # if it can, increment the current subset size and update the maximum size if necessary\n            current_size += 1\n            if current_size > max_size:\n                max_size = current_size\n\n        # if the current sum can't be divided by 2, decrement the current subset size and update the maximum size if necessary\n        else:\n            current_size -= 1\n            if current_size > max_size:\n                max_size = current_size\n\n        # reset the current sum to the next number in the list\n        current_sum = a[i]\n\n    # return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two arrays\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged array\n    merged_arr.sort()\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # If the size of the array is odd, the median is the middle element\n    if n % 2 == 1:\n        median = merged_arr[median_index]\n    \n    # If the size of the array is even, the median is the average of the two middle elements\n    else:\n        median = (merged_arr[median_index - 1] + merged_arr[median_index]) / 2\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three parameters:\n    1. arr1 - a list of integers\n    2. arr2 - a list of integers\n    3. n - an integer, the size of the lists\n\n    This function finds the median of two sorted lists of same size and returns the result.\n    '''\n\n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n\n    # Check if the lists have an equal size\n    if n!= len(arr1) or n!= len(arr2):\n        raise ValueError('Both lists must have the same size.')\n\n    # Calculate the median\n    median = None\n    if n % 2 == 0:\n        # Find the average of the two middle elements\n        median = (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 4\n    else:\n        # Find the middle element\n        median = arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # Calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2-1] + merged_arr[n//2]) / 2\n    else:\n        median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    arr.sort()\n    \n    # Find the median index\n    if n % 2 == 0:\n        median_index = n // 2\n    else:\n        median_index = (n - 1) // 2\n    \n    # Return the median element\n    return arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # Find the middle index\n    mid = n // 2\n\n    # If the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return arr[mid]\n\n    # If the length of the array is even, return the average of the middle elements\n    else:\n        return (arr[mid - 1] + arr[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    # concatenate the two lists and sort them\n    combined = arr1 + arr2\n    combined.sort()\n\n    # find the median index\n    median_index = n // 2\n\n    # if the length of the list is odd, return the middle element\n    if n % 2 == 1:\n        return combined[median_index]\n\n    # if the length of the list is even, return the average of the two middle elements\n    else:\n        return (combined[median_index - 1] + combined[median_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Parameters:\n    arr1 (list): A sorted list of integers.\n    arr2 (list): A sorted list of integers.\n    n (int): The size of both arrays.\n\n    Returns:\n    float: The median of the two sorted lists.\n    \"\"\"\n\n    # Merge the two sorted arrays into one sorted array\n    merged_arr = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Add remaining elements of arr1 or arr2 to the merged array\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n\n    # Get the median\n    if n % 2 == 0:\n        return (merged_arr[n//2 - 1] + merged_arr[n//2]) / 2\n    else:\n        return merged_arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Check if the input lists are of the same size\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Input lists must be of the same size\")\n    \n    # Concatenate the two lists\n    arr = arr1 + arr2\n\n    # Sort the combined list\n    arr.sort()\n\n    # Determine the median\n    if n % 2 == 0:\n        # If the length of the list is even, return the average of the two middle elements\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        # If the length of the list is odd, return the middle element\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2 - 1] + merged_arr[n//2]) / 2\n    else:\n        median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Initialize a list to store the n-th powers of the numbers\n    nth_powers = []\n    \n    # Loop through the numbers in the list\n    for num in nums:\n        # Calculate the n-th power of the number and append it to the list\n        nth_powers.append(num ** n)\n    \n    # Return the list of n-th powers\n    return nth_powers"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the nth power of each number in a list.\n\n    Args:\n    nums (list): A list of numbers to compute the nth power of.\n    n (int): The power to raise each number to.\n\n    Returns:\n    list: A list of n-th powers of each number in the input list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = ''\n    for char in string:\n        if char.isupper():\n            upper_string += char\n        else:\n            upper_string += char.upper()\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and swaps the first and last element of the list.\n    '''\n    \n    # checking if the list is empty or has less than two elements\n    if len(newList) < 2:\n        return \"The list is empty or has less than two elements.\"\n    \n    # swapping the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # returning the modified list\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is empty\n    if len(newList) == 0:\n        return []\n\n    # check if the list has only one element\n    elif len(newList) == 1:\n        return [newList[0], newList[0]]\n\n    else:\n        # find the first and last element in the list\n        first = newList[0]\n        last = newList[-1]\n\n        # create a new list with swapped elements\n        newList = [last, first] + newList[1:-1] + [first, last]\n\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"The list should have at least two elements.\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # check if the list has more than one element\n    if len(newList) < 2: \n        return newList \n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0] \n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Assuming that the list has at least two elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return None\n    \n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n    \n    # swap the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Convert the radius to radians\n    r_rad = r * (math.pi/180)\n    \n    # Calculate the area of a triangle\n    a = math.sqrt(3)/2\n    b = 2 * r_rad / math.sin(math.pi/3)\n    c = math.sqrt(3)/2\n    \n    # Calculate the area of the largest triangle\n    max_area = max(a*b, b*c, c*a)\n    \n    # Return the area\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # find the semiperimeter of the semicircle\n    semiperimeter = 2 * r\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    s = (semiperimeter**2) * (math.sqrt(3) / 4)\n    area = math.sqrt(s / math.tan(math.pi / 3))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define the semi-circle\n    xc = 0\n    yc = 0\n    r_c = r\n\n    # Define the sides of the triangle\n    a = 2 * r_c\n    b = r_c * r_c\n    c = 2 * r_c\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (a * b * c) / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # First, we need to find the area of the smallest circle that can be inscribed in the semicircle with radius r\n    area_of_smallest_circle = 2 * r * r\n    # Next, we need to find the area of the largest triangle that can be inscribed in the semicircle with radius r\n    area_of_largest_triangle = (3 * r * r) ** 0.5\n    # Finally, we can calculate the area of the largest triangle that can be inscribed in the semicircle with radius r\n    return area_of_smallest_circle + area_of_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n    pi = math.pi\n    area = 0.5 * pi * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of the base of the triangle\n    area_base = math.pi * r**2\n    \n    # Calculate the area of the triangle with sides of equal length\n    area_equal = 2 * math.pi * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    area_largest = max(area_base, area_equal)\n    \n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with the given radius\n    area = (3 * math.pi * r**2) / 4\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula for area of a triangle:\n    # a = (1/2) * b * c\n    # where a, b, and c are the sides of the triangle\n    # We will find the largest possible side of the triangle by finding the radius of the semicircle\n    # which is half the radius of the given triangle\n    h = r/2\n    # We can find the area of the largest triangle that can be inscribed in the semicircle by\n    # finding the area of a right triangle with sides r and h\n    a = r**2\n    b = h**2\n    c = r**2\n    # Now we can find the area of the triangle with sides a, b, and c\n    # The area of the triangle with sides a, b, and c will be the smallest possible triangle that can form a right triangle with sides r and h\n    # Therefore, we can find the area of the largest triangle by finding the maximum of the area of the triangles a, b, and c\n    area = max(a, b, c)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    sp = 2 * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (3 * r * r) / (4 * math.tan(math.pi/6))\n    \n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Formula for area of the triangle: s (sin(angle))^2\n    # Formula for the angle of the triangle: arccos((s^2 - r^2) / (2*s*r))\n    \n    # Base case: if r is zero, return zero area\n    if r == 0:\n        return 0\n\n    # Find the semi-circle with radius r\n    s = 2 * r\n\n    # Find the maximum possible angle for the triangle\n    angle_max = 2 * math.acos(1 - 1/s)\n\n    # Find the area of the triangle with the maximum angle\n    area_max = r * r * (1 - math.cos(angle_max)) / (2 * math.sin(angle_max))\n\n    return area_max"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n        else:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If the list is empty or only contains one element, return 1\n    if len(array) <= 1:\n        return 1\n    \n    # If the list has only one element, return 1 if it's missing or 2 if it's not\n    if len(array) == 2:\n        if array[0] > array[1]:\n            return 2\n        else:\n            return 1\n    \n    # If the list has more than two elements, divide it into two halves until there's only one element left\n    while len(array) > 2:\n        mid = len(array) // 2\n        left_half = array[:mid]\n        right_half = array[mid:]\n        \n        # If the right half has a smaller number, we can merge it with the left half\n        if right_half[0] < left_half[-1]:\n            array = left_half + right_half\n        # Otherwise, we need to merge the right half with the left half again\n        else:\n            array = left_half + merge_sort(right_half)\n    \n    # If the list contains only one element, return 1 if it's missing or 2 if it's not\n    if len(array) == 1:\n        if array[0] > array[0]:\n            return 2\n        else:\n            return 1\n    \n    # If the list has more than one element, return the difference between the largest and smallest elements\n    return array[0] - array[-1]"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes a list of natural numbers as input and returns the smallest missing number from the list.\n    The input list should be sorted in ascending order.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i] == i:\n            start = i + 1\n            break\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i] == i:\n            continue\n        else:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!=i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): Starting index. Defaults to 0.\n        end (int, optional): Ending index. Defaults to None.\n\n    Returns:\n        int: The smallest missing number.\n    '''\n    if not array or len(array) == 0:\n        return None\n    \n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i] == i:\n            return i\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if i == array[i]:\n            continue\n        else:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of sorted natural numbers as input and returns the smallest missing number.\n\n    Parameters:\n    -----------\n    array: list of int\n        A sorted list of natural numbers.\n\n    start: int, optional\n        The start index of the search range. The default is 0.\n\n    end: int, optional\n        The end index of the search range. If None, it will be the length of the array. The default is None.\n\n    Returns:\n    --------\n    int\n        The smallest missing number in the array.\n\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    # create an empty list to store even numbers\n    even_numbers = []\n\n    # iterate over each number in the list\n    for num in list:\n        # if the number is even, add it to the even_numbers list\n        if num % 2 == 0:\n            even_numbers.append(num)\n\n    # return the even_numbers list\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    '''\n    This function takes in a list of numbers as input and returns a new list containing only the even numbers from the original list.\n    '''\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    # iterate over all possible directions\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            if dx == 0 and dy == 0:\n                # ignore diagonal moves\n                continue\n            # add the adjacent coordinate to the list\n            sub.append((x + dx, y + dy))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # if tuple has only one element, return the tuple as is\n    if len(ele) == 1:\n        return ele\n    \n    # if tuple has two elements, return the first element as a tuple\n    elif len(ele) == 2:\n        return (ele[0],)\n    \n    # if tuple has three elements, extract the first and last elements as tuples and return them concatenated\n    elif len(ele) == 3:\n        return (ele[0],) + sub + (ele[2],)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    if i-1 >= 0 and i+1 < 10 and j-1 >= 0 and j+1 < 10:\n        sub.append((i-1, j-1))\n        sub.append((i-1, j))\n        sub.append((i-1, j+1))\n        sub.append((i, j-1))\n        sub.append((i, j+1))\n        sub.append((i+1, j-1))\n        sub.append((i+1, j))\n        sub.append((i+1, j+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple): \n        for item in ele: \n            adjac(item, sub)\n    elif isinstance(ele, list): \n        for item in ele: \n            adjac(item, sub)\n    elif isinstance(ele, int): \n        sub.append(ele)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    # check the coordinates around the element\n    adj_coords = []\n    if x > 0:\n        adj_coords.append((x-1, y))\n    if x < len(sub)-1:\n        adj_coords.append((x+1, y))\n    if y > 0:\n        adj_coords.append((x, y-1))\n    if y < len(sub[0])-1:\n        adj_coords.append((x, y+1))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 0:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 0:\n        adj.append((x, y+1))\n    for i in range(len(sub)):\n        adj.append((x+sub[i][0], y+sub[i][1]))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if sub == []:\n        sub = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define a dictionary to store the adjacent coordinates\n    adjc = {}\n\n    # Extract the adjacent coordinates for the given element\n    for i, coord in enumerate(ele):\n        if i!= 0:\n            # Check the coordinates to the left\n            adjc[coord - 1] = ele[i - 1]\n        if i!= len(ele) - 1:\n            # Check the coordinates to the right\n            adjc[coord + 1] = ele[i + 1]\n        if coord!= len(ele[0]) - 1:\n            # Check the coordinates above\n            adjc[coord - len(ele[0])] = ele[i][coord + 1]\n        if coord!= 0:\n            # Check the coordinates below\n            adjc[coord + len(ele[0])] = ele[i][coord - 1]\n\n    # Return the adjacent coordinates\n    return adjc"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    # add coordinates above\n    if y > 0:\n        adjacent.append((x, y - 1))\n    # add coordinates below\n    if y < len(sub) - 1:\n        adjacent.append((x, y + 1))\n    # add coordinates to the left\n    if x > 0:\n        adjacent.append((x - 1, y))\n    # add coordinates to the right\n    if x < len(sub[0]) - 1:\n        adjacent.append((x + 1, y))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    # Extract the x and y coordinates of the given element\n    x, y = ele\n    # Create a list to store the adjacent coordinates\n    adj = []\n    # Iterate over the four adjacent cells (top, bottom, left, right)\n    for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n        # Check if the new coordinate is within the boundaries of the map\n        new_x, new_y = x + dx, y + dy\n        if 0 <= new_x < len(sub) and 0 <= new_y < len(sub[0]):\n            # If it is, add it to the list of adjacent coordinates\n            adj.append((new_x, new_y))\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    result = \"\"\n    for char in text:\n        if char.isspace():\n            result += \"_\"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace all underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for char in text:\n        if char =='':\n            text = text.replace(char, '_')\n        elif char == '_':\n            text = text.replace(char,'')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Replace spaces with underscores and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # iterate through each character in the string\n    for i in range(len(text)):\n        # check if the character is a whitespace\n        if text[i].isspace():\n            # replace the whitespace with an underscore\n            text = text[:i] + '_' + text[i+1:]\n        # check if the character is an underscore\n        elif text[i] == '_':\n            # replace the underscore with a whitespace\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    non_zero_index = []\n    \n    # Separate the list into two lists, one for non-zero numbers and one for zeroes\n    for i, num in enumerate(num_list):\n        if num!= 0:\n            non_zero_index.append(i)\n        else:\n            zero_index.append(i)\n    \n    # Merge the two lists, with zeroes at the end\n    merged_index = non_zero_index + zero_index\n    \n    # Create a new list with the numbers in the original list, but in the merged order\n    new_list = [0] * num_list.count(0)\n    for i in merged_index:\n        new_list.append(num_list[i])\n        \n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index == -1:\n        return num_list\n    \n    for i in range(zero_index, len(num_list)-1, -1):\n        num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers: one to the left of the first non-zero element,\n    # and one to the right of the last non-zero element.\n    left = 0\n    right = len(num_list) - 1\n\n    # Move all non-zero elements to the left of the left pointer.\n    while left < right:\n        while left < right and num_list[left]!= 0:\n            left += 1\n        while left < right and num_list[right] == 0:\n            right -= 1\n        num_list[left], num_list[right] = num_list[right], num_list[left]\n\n    # Move all zeroes to the end of the list.\n    while left < right:\n        while left < right and num_list[left] == 0:\n            left += 1\n        while left < right and num_list[right]!= 0:\n            right -= 1\n        num_list[left], num_list[right] = num_list[right], num_list[left]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = list(num_list)\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.reverse()\n    zero_index = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            # move the zero to the end of the list by swapping it with the last element\n            num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers: one for the last non-zero element and one for the last element\n    i = j = 0\n\n    while j < len(num_list):\n        # If the current element is non-zero, swap it with the last non-zero element\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n\n        j += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create an empty list to store non-zero values\n    non_zero = []\n    # loop through the given list\n    for num in num_list:\n        # if the number is not zero, append it to the non_zero list\n        if num!= 0:\n            non_zero.append(num)\n    # loop through the non_zero list and append all zeroes to the end of the original list\n    for i in range(len(non_zero)):\n        num_list[i] = non_zero[i]\n    # append the last non-zero value to the end of the original list\n    num_list.append(non_zero[-1])\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all pairs of numbers\n    xor_sum = sum([i^j for i in arr for j in arr if i!=j])\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all the elements of the list\n    xor_sum = sum(arr) ^ 0\n\n    # XOR of all pairs of elements\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers arr and its length n as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initializing variables to store the sum of xor of pairs and the xor of pairs\n    xor_sum = 0\n    xor = 0\n    # looping through the list of integers\n    for i in range(n):\n        # XOR operation to get the xor of pairs of elements in the list\n        xor = arr[i] ^ arr[i+1]\n        # adding the xor of pairs to the sum of xor of pairs\n        xor_sum += xor\n    # returning the sum of xor of pairs\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    This function takes a list of integers and the length of the list as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    #Initializing the sum variable to 0\n    sum_of_xor = 0\n\n    #Iterating through all pairs of elements in the list\n    for i in range(n): \n        for j in range(i+1, n): \n            #Taking xor of elements in the pair and storing the result in the variable 'xor_result'\n            xor_result = arr[i] ^ arr[j]\n\n            #Adding the xor_result to the sum_of_xor variable\n            sum_of_xor += xor_result\n\n    return sum_of_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    # XOR of first and last elements\n    x = arr[0] ^ arr[n-1]\n    # XOR of all the elements except the first and last\n    for i in range(1,n-1):\n        x = x ^ arr[i]\n    # XOR of all the elements\n    for i in range(n-1,len(arr)):\n        x = x ^ arr[i]\n    # XOR of all elements and the given number\n    x = x ^ n\n    # XOR of all elements and the XOR of first and last elements\n    x = x ^ x\n    \n    return x"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    # Use heapq to sort the list in ascending order\n    hq.heapify(lst)\n    for i in range(len(lst)-1, 0, -1):\n        hq.heappop(lst)\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Create a max heap from the input list\n    heap = [float('-inf')] * len(iterable)\n    hq.heapify(heap)\n    for item in iterable:\n        # Add the current item to the heap\n        hq.heappush(heap, item)\n        # Remove the maximum item from the heap\n        hq.heappop(heap)\n    # Return the sorted list\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n\n    # Convert the list into a max-heap\n    hq.heapify(iterable)\n\n    # Extract the max element from the heap and append it to the end of the sorted list\n    sorted_list = [hq.heappop(iterable)]\n\n    # Extract the remaining elements from the heap and append them to the end of the sorted list\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Build max-heap\n    hq.heapify(iterable)\n    \n    # Extract items from max-heap and append to result list\n    result = []\n    while iterable:\n        item = hq.heappop(iterable)\n        result.append(item)\n    \n    # Return result list\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(iterable)\n    # Remove and return the minimum element until the heap is empty\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        iterable.pop(0)\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(iterable)\n\n    # Remove the minimum element from the heap and append it to a new list\n    sorted_list = [hq.heappop(iterable)]\n\n    # Repeat until the heap is empty\n    while iterable:\n        # Find the minimum element from the remaining elements in the heap\n        min_value = hq.heappop(iterable)\n\n        # Append the minimum element to the sorted list and repeat the process\n        sorted_list.append(min_value)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Build max heap\n    for i in range(n//2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    # Extract elements from heap one by one\n    for i in range(n-1, 0, -1):\n        # Move current root to end\n        hq.heappushpop(iterable, hq.heappop(iterable))"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max heap of the given list using heapq.heapify()\n    heap = hq.heapify(iterable)\n    \n    # Use heapq.heappop() to remove and return the maximum element from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Build a max-heap from the given iterable\n    hq.heapify(iterable)\n\n    # Extract the maximum element from the heap and remove it\n    max_element = hq.heappop(iterable)\n\n    # Build a new max-heap with the remaining elements\n    heap = []\n    for element in iterable:\n        if element > max_element:\n            heapq.heappush(heap, element)\n        else:\n            heapq.heappushpop(heap, element)\n\n    # Return the sorted list\n    return heap"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0 and sale_amount == 0:\n        return True\n    elif sale_amount == 0:\n        return False\n    else:\n        return noprofit_noloss(actual_cost, sale_amount - actual_cost)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two parameters: actual_cost and sale_amount.\n    It calculates the profit and loss by subtracting the actual cost from the sale amount.\n    If the profit is positive and the loss is negative, the function returns True.\n    Otherwise, it returns False.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit > 0 and loss < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    It calculates the profit and loss for the given amount and compares it with the actual cost of the sale.\n    \"\"\"\n\n    # Calculate the profit and loss for the given amount\n    profit_loss = sale_amount - actual_cost\n\n    # Check whether the profit is negative\n    if profit_loss < 0:\n        return \"The given amount has no profit and no loss.\"\n    else:\n        return \"The given amount has a profit and no loss.\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit or loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount < 0:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit and loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function will check if the given amount has no profit and no loss.\n    \"\"\"\n    if actual_cost == 0:\n        return True\n    elif actual_cost > 0 and sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return \"No Profit and No Loss\"\n    else:\n        return \"Profit or Loss\"\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if actual_cost - sale_amount >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    kelvin = t + 273.15\n    \n    # Calculate the dew point temperature using the Clausius-Clapeyron relation\n    dew_point = 243.04 * math.exp((17.625 * kelvin) / (kelvin + 243.04))\n    \n    # Calculate the wind chill index\n    wci = round(dew_point - 0.0065 * v ** 0.16)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the absolute temperature difference\n    abs_temp_diff = abs(t - 273.15)\n    \n    # calculate the difference between the absolute temperature difference and the wind chill temperature\n    diff = abs_temp_diff - 0.0065 * v**0.16 + 10.3 * (v**0.16)**0.5\n    \n    # calculate the wind chill index using the formula given in the problem statement\n    wci = round(diff)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.log(t_f) + 0.4275 * v * math.log(t_f) - 0.000016 * v * v\n    \n    # Round the wind chill index to the nearest integer\n    wci_int = int(wci + 0.5)\n    \n    # Return the wind chill index rounded to the nearest integer\n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < -10 or t > 100:\n        raise ValueError(\"Temperature should be between -10 and 100 degrees Celsius.\")\n    if v < 0:\n        raise ValueError(\"Wind velocity should be positive.\")\n    if t == 0 or v == 0:\n        return 0\n\n    # Convert wind velocity to m/s and temperature to K\n    ws = v * 1.60934  # m/s to km/h\n    ts = t + 273.15  # celsius to kelvin\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * ts - 35.75 * math.log(ws) + 0.4275 * ts * math.log(ws)\n\n    # Round to the nearest integer and return the result\n    return int(math.ceil(wc))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t >= 0 and t <= 100:\n        # calculate the dew point temperature\n        dew_point = 25 - 45 * (t / 100) ** 0.25\n        # calculate the wind chill index\n        wind_chill_index = 13.12 + 0.6215 * v + 11.37 * t - 0.3965 * v * t + 0.14 * dew_point\n        # round wind chill index to the next integer\n        wind_chill_index = int(math.ceil(wind_chill_index))\n        return wind_chill_index\n    else:\n        print(\"Invalid temperature input. Please enter a temperature between 0 and 100 degrees celsius.\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -273.15:\n        raise ValueError('Temperature must be in Celsius.')\n    elif v > 100 or v < 0:\n        raise ValueError('Wind velocity must be between 0 and 100 km/h.')\n    elif t > 273.15:\n        raise ValueError('Temperature must be below 40 degrees Celsius.')\n    else:\n        # Calculate the chill index using the formula provided in the problem statement\n        chill_index = int(math.ceil(35.74 + 0.6215*t - 35.75*math.log(v/100) + 0.4275*t**2 - 0.000007*t**2*t**2))\n        # Return the rounded chill index\n        return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -273.15:\n        return \"Error: Invalid temperature.\"\n    elif v <= 0:\n        return \"Error: Invalid wind velocity.\"\n    else:\n        # Calculate the dew point temperature\n        dp = 10.0 * math.log((t + 273.15) / (273.15 + t + 273.15))\n\n        # Calculate the heat index\n        hi = 13.12 + 0.6215 * v - 11.37 * math.exp(-0.16 * t) + 0.3965 * dp\n        hi = max(hi, 10.0)\n        hi = min(hi, 80.0)\n\n        # Calculate the wind chill index\n        wc = 35.74 + 0.6215 * v - 35.75 * math.exp(-0.16 * t) + 44.79 * math.log(dp)\n        wc = max(wc, 10.0)\n        wc = min(wc, 80.0)\n\n        # Calculate the wind chill value\n        wcv = round(hi - wc)\n\n        return wcv"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0 or t <= -5 or t >= 50:\n        return None\n    elif v <= 12:\n        w = 13.12 + 0.6215*t - 11.37*math.log(t) + 0.3965*t*t\n        return round(w)\n    else:\n        u = 6.894 + 1.8013*t - 15.74*math.log(t) + 10.42*t*t\n        return round(u)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 293.15  # temperature in Kelvin\n    k = 1.381e-23  # Boltzmann's constant in J/K\n    # calculate the heat capacity at constant pressure\n    cp = k * c / (math.pow(t, 2))\n    # calculate the heat capacity at constant volume\n    cv = cp * (v / 1000)\n    # calculate the heat capacity ratio\n    cr = cv / cp\n    # calculate the enthalpy of the air\n    h = (2 * (cp * v * (t + 273.15))) / (math.pow(t + 273.15, 2))\n    # calculate the specific heat of water vapor\n    s = 461.5 * math.exp((17.67 * t) / (t + 243.5))\n    # calculate the heat capacity of water vapor\n    cw = (s * 1000) / (math.pow(t, 2))\n    # calculate the heat capacity ratio of water vapor\n    cwr = cw / cp\n    # calculate the temperature of the air at constant pressure\n    T_air = (h * (cp - cw)) / (cp * cr - cw)\n    # calculate the temperature of the air at constant volume\n    T_air_v = ((cp * v * (t + 273.15)) / (cv * cr - cw))\n    # calculate the effective temperature of the air\n    T_eff = (T_air * (1 + ((cr * cw) / cp) * ((1 - (cr * cw) / cp) / 2))) / ((1 + (cr * cw) / cp) / 2)\n    # calculate the wind chill index rounded to the nearest integer\n    WI = round((T_eff - 32) / 1.8)\n    return WI"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate the wind chill\n    chill = round(23.75 + 0.6215 * (v * 0.6215) + ((v * 0.6215) * (t - 76.8) * (t - 76.8)) / (17.625 * math.exp((t - 76.8) / 17.625)))\n    \n    return chill"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            names_sum += len(name)\n    return names_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum to 0\n    total_len = 0\n    \n    # iterate over each name in the list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, skip it\n        if name[0].islower():\n            continue\n        # otherwise, add its length to the sum\n        total_len += len(name)\n        \n    # return the sum of the lengths of the non-lowercase names\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = [name for name in sample_names if not name.islower()]\n    total_length = sum([len(name) for name in valid_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of the names' lengths\n    sum_len = 0\n    \n    # loop through the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it and move to the next name\n            continue\n        # if the name does not start with a lowercase letter, add its length to the sum\n        sum_len += len(name)\n        \n    # return the sum of the names' lengths\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # create an empty list to store the names that start with a lowercase letter\n    names_to_remove = []\n\n    # loop through the names in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, add it to the list of names to remove\n            names_to_remove.append(name)\n\n    # remove the names from the list of names\n    for name in names_to_remove:\n        sample_names.remove(name)\n\n    # sum the lengths of the remaining names in the list\n    total_length = sum([len(name) for name in sample_names])\n\n    # return the sum\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names\n    sum_length = 0\n    # Iterate through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if not name.startswith(name[0].upper()):\n            # If it doesn't, add the length of the name to the sum\n            sum_length += len(name)\n    # Return the sum of the lengths of the names that don't start with a lowercase letter\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    for match in re.finditer(pattern, items):\n        items = items.replace(match.group(), '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # Remove all the parenthesis from the input string\n    items = re.sub(r'\\((.*?)\\)', '', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)') # regex pattern to match parenthesis\n    result = pattern.sub('', items) # remove the parenthesis from the string\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*?\\)' # match any parenthesis and capture its contents\n    items_without_parenthesis = re.sub(pattern, '', items) # remove the parenthesis and what's inbetween them\n    return items_without_parenthesis # return the string without parenthesis"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(', '').replace(')', '') # remove all the parenthesis\n    items = re.sub('\\(.*?\\)', '', items) # remove all the items inside the parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Remove all parenthesis from the string\n    items = re.sub('\\([^)]*\\)', '', items)\n\n    # Remove all spaces from the string\n    items = items.replace(' ', '')\n\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    pattern = r'\\([^)]*\\)' # regex pattern to find any parenthesis\n\n    # iterate over each item in the list\n    for item in items:\n\n        # check if the item contains a parenthesis\n        if re.search(pattern, item):\n\n            # if it does, split the item into two parts - one before the parenthesis and one after it\n            before_parenthesis, after_parenthesis = item.split('(', 1)\n\n            # remove the parenthesis from the before_parenthesis\n            before_parenthesis = before_parenthesis.strip('()')\n\n            # join the two parts together and append the result to the list\n            items.append(before_parenthesis + after_parenthesis)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # First nonagonal number is 1\n    if n == 1:\n        return True\n\n    # Calculate sum of first n-1 nonagonal numbers\n    sum = 1\n    for i in range(2, n):\n        sum += i\n\n    # Calculate sum of squares of first n-1 nonagonal numbers\n    sum_sq = 0\n    for i in range(2, n):\n        sum_sq += i*i\n\n    # Check if the sum of squares is equal to the sum of squares of nonagonal numbers\n    if sum_sq == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the sum of squares of the first n squares\n    total_squares = n * (n + 1) * (2 * n + 1) // 6\n    \n    # initialize the sum of cubes of the first n cubes\n    total_cubes = n * (n + 1) * (2 * n + 1) * (2 * n + 2) // 24\n    \n    # return the square root of the sum of squares minus the sum of cubes\n    return int(total_squares ** 0.5 - total_cubes ** 0.5)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    i = 1\n    j = 1\n    while i <= n:\n        j += 1\n        i += 2\n    return j"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n+1))//2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def helper(i, j):\n        if i == 0:\n            return 0\n        elif i == 1:\n            return 1\n        else:\n            return helper(i - 1, j) * helper(i - 2, j)\n    \n    def nth_nonagonal(n):\n        if n < 0:\n            return None\n        elif n == 0:\n            return 0\n        else:\n            k = 1\n            sum = 0\n            while k <= n:\n                sum += helper(k, 0)\n                k += 1\n            return sum\n    \n    return nth_nonagonal(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize counter and total\n    counter = 1\n    total = 0\n\n    # Loop through the first n rows of Pascal's triangle\n    for i in range(n):\n        # Calculate the number of elements in the row\n        row_size = (counter * (counter + 1)) // 2\n\n        # Loop through the elements in the row\n        for j in range(row_size):\n            # Add the element to the total\n            total += 1\n\n        # Increment the counter\n        counter += 1\n\n    # Return the total\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def nonagonal_helper(a, b, c, d):\n        if a + b == c + d:\n            return True\n        elif a + b > c + d:\n            return nonagonal_helper(a + b, c + d, c, d)\n        else:\n            return nonagonal_helper(a + b, c + d, a, b)\n    \n    a, b = 1, 1\n    while a <= n:\n        a, b = b, a + b\n        if not is_square(b):\n            return nonagonal_helper(1, b, 1, a)\n\ndef is_square(num):\n    return int(num ** 0.5) ** 2 == num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    while b < n:\n        c = a + b\n        if c * c == n:\n            return a\n        a += 1\n        b += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n\n    # Define the two endpoints for the nonagonal number sequence\n    a = 1\n    b = 2\n\n    # Find the number of terms in the sequence\n    count = 0\n    while b <= n:\n        count += 1\n        b += a\n\n    # Return the nth nonagonal number\n    return a*count + b"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define the regular expression pattern\n    pattern = r'(?<!^)z(?!$)'\n    # find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # loop over the matches and count the number of 'z' characters in the middle of words\n    count = 0\n    for match in matches:\n        if match.start() < len(text) // 2 and match.end() > len(text) // 2:\n            count += 1\n    # return the number of 'z' characters in the middle of words\n    return count"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define regular expression pattern to match 'z' except at the start and end of a word\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # Use re.search() method to check if the pattern matches any substring in the text\n    match = re.search(pattern, text)\n    # If pattern matches a substring, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Replace all special characters with spaces\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Loop through each word and check if it contains 'z' except at the start and end of the word\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            continue\n        elif word[0] == 'z':\n            return True\n        elif word[-1] == 'z':\n            return True\n    # If no words contain 'z' at the start and end of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern for words containing 'z'\n    pattern = r'\\b[a-zA-Z]\\w*[z]\\w*\\b'\n\n    # Use the regular expression search() method to search for matches\n    result = re.search(pattern, text)\n\n    # If a match is found, return True\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define a regular expression pattern for matching 'z' except at the start and end of the word\n    pattern = r'(?<!\\w)(z)(?!\\w)'\n\n    # Use the re.search() function to search for the pattern in the text\n    result = re.search(pattern, text)\n\n    # Return True if the pattern is found, else return False\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b(?<![a-zA-Z])[zZ](?!\\w)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define regex pattern to match any instance of 'z' except at the start and end of a word\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    # Search the text for pattern and return True if found, False otherwise\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(\\b[^\\s]*\\b)z(?!\\w)\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the array\n    n = len(input)\n    \n    # If the position is greater than or equal to the length of the array,\n    # return the original array\n    if k >= n:\n        return input\n    \n    # Find the index of the first element to reverse\n    start = 0\n    \n    # Initialize the index of the last element to reverse\n    end = k - 1\n    \n    # Initialize a variable to store the temporary value\n    temp = 0\n    \n    # Reverse the first k elements of the array\n    while start < end:\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        start += 1\n        end -= 1\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    # reverse the array from k to the end\n    for i in range(k, len(input)//2):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    # reverse the array from the end to the end\n    for i in range(len(input)//2, len(input)):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array up to the kth position\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining array\n    input[k:] = input[k:][::-1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, k-1, -1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k >= len(input): \n        return None\n    \n    left, right = 0, k - 1\n    while left < right: \n        input[left], input[right] = input[right], input[left] \n        left += 1 \n        right -= 1 "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the array from 0 to k-1\n    input[0:k] = input[0:k][::-1]\n    \n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    \n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    input[0:k] = input[0:k][::-1]\n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the array from position 0 to k-1\n    for i in range(0, k): \n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    # Reverse the array from k to n-1\n    for i in range(k, n): \n        input[i], input[k-1+i-k] = input[k-1+i-k], input[i]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert the tuple to a list so we can add a dictionary to it\n    test_list = list(test_tup)\n    # add the dictionary to the list\n    test_list.append(test_dict)\n    # convert the list back to a tuple\n    new_tup = tuple(test_list)\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #create an empty dictionary\n    new_dict = {}\n    \n    #iterate through the elements in the tuple\n    for element in test_tup:\n        #if the element is a dictionary, update the new dictionary with the key-value pairs\n        if isinstance(element, dict):\n            new_dict.update(element)\n        else:\n            #if the element is not a dictionary, add it to the new tuple\n            new_tup.append(element)\n    \n    #combine the new dictionary with the new tuple\n    new_tup.append(new_dict)\n    \n    #return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    new_tup = test_tup + (test_dict,)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for key in test_dict:\n        new_tup += (test_dict[key],)\n    new_tup += test_tup\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup += tuple(test_dict.items())\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new tuple with the added dictionary\n    new_tup = (test_tup, test_dict)\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, visited):\n        if i == n-1 and j == m-1:\n            if visited.count(False) == 0:\n                return 0, visited\n            else:\n                return float('-inf'), visited\n\n        if i < 0 or i == n or j < 0 or j == m or visited[i][j]:\n            return float('-inf'), visited\n\n        visited[i][j] = True\n        if i > 0:\n            a, visited = dfs(i-1, j, visited)\n        if j > 0:\n            b, visited = dfs(i, j-1, visited)\n        visited[i][j] = False\n\n        return (a + b) / 2, visited\n\n    n = len(cost)\n    m = len(cost[0])\n    visited = [[False] * m for _ in range(n)]\n    return dfs(0, 0, visited)[0]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n\n    # Initialize variables to keep track of the maximum path and its average\n    max_path_cost = cost[0][0]\n    max_path_avg = cost[0][0]\n    current_path_cost = cost[0][0]\n    current_path_avg = cost[0][0]\n\n    # Create an NxN matrix to store the visited cells of each path\n    visited_cells = [[0] * N for _ in range(N)]\n\n    # Initialize a list to keep track of the paths found so far\n    paths = []\n\n    # Define a recursive function to find the maximum average of all paths\n    def find_max_avg(i, j):\n        # Base case: if we reach the bottom right cell, add the current path to the list and return the average\n        if i == N - 1 and j == N - 1:\n            current_path_avg = current_path_cost / (i + j + 1)\n            paths.append(current_path_avg)\n            return current_path_avg\n\n        # Recursive case: check if the cell has already been visited\n        if visited_cells[i][j] == 1:\n            return 0\n\n        # Mark the cell as visited\n        visited_cells[i][j] = 1\n\n        # Check if the next cell is in the right direction\n        if j < N - 1:\n            new_avg = max(find_max_avg(i, j + 1), current_path_avg)\n            if new_avg > max_path_avg:\n                max_path_avg = new_avg\n\n        # Check if the next cell is in the downward direction\n        if i < N - 1:\n            new_avg = max(find_max_avg(i + 1, j), current_path_avg)\n            if new_avg > max_path_avg:\n                max_path_avg = new_avg\n\n        # Unmark the cell as visited\n        visited_cells[i][j] = 0\n\n        # Return the maximum average\n        return max_path_avg\n\n    # Call the recursive function to find the maximum average\n    find_max_avg(0, 0)\n\n    # Return the maximum average of all paths\n    return max(paths)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False for j in range(N)] for i in range(N)]\n    max_path_cost = 0\n    max_path_avg = 0\n    max_avg = 0\n\n    # Initialize visited cells for all paths\n    for i in range(N):\n        visited[i][0] = True\n        visited[0][i] = True\n\n    # Helper function to find paths from top-left to bottom right\n    def find_paths(i, j, path_cost, path_avg):\n        if i == N-1 and j == N-1:\n            global max_path_cost, max_path_avg, max_avg\n            if path_cost > max_path_cost:\n                max_path_cost = path_cost\n                max_path_avg = path_avg\n            elif path_cost == max_path_cost and path_avg > max_path_avg:\n                max_path_avg = path_avg\n            return\n\n        if not visited[i][j]:\n            visited[i][j] = True\n            # Consider cells to be visited in the path\n            path_cost += cost[i][j]\n            path_avg += cost[i][j]\n            # Recursively find paths from top-left to bottom right\n            find_paths(i+1, j, path_cost, path_avg)\n            find_paths(i, j+1, path_cost, path_avg)\n            # Un-visit cells visited in the path\n            visited[i][j] = False\n\n    # Find paths from top-left to bottom right\n    find_paths(0, 0, 0, 0)\n\n    return max_path_cost, max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                avg = cost[0][0]\n            elif i == 0:\n                avg = cost[0][j] + avg * (N-1)\n            elif j == 0:\n                avg = cost[i][0] + avg * (N-1)\n            else:\n                avg = cost[i][j] + avg * (N-1)\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n            if i == N-1 and j == N-1:\n                avg = dp[i][j]\n                if avg > max_avg:\n                    max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # initialize the variables to keep track of maximum average and current average\n    max_avg = 0\n    curr_avg = 0\n\n    # initialize a list of visited cells\n    visited = []\n\n    # iterate through each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # if the current cell has not been visited yet\n            if (i, j) not in visited:\n                # recursively calculate the maximum average of the path starting from the current cell\n                max_avg_sub = maxAverageOfPath(cost, visited + [(i, j)])\n                # update the maximum average if the new path has a higher average\n                if max_avg_sub > max_avg:\n                    max_avg = max_avg_sub\n                # update the current average\n                curr_avg += cost[i][j]\n\n    # update the current average by dividing it by the number of visited cells\n    curr_avg /= len(visited)\n\n    # return the maximum average found\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    max_path = None\n    \n    for i in range(N):\n        # Starting from top-left cell, move right or down\n        for j in range(i+1, N):\n            # Check if we have reached bottom-right cell\n            if j == N-1:\n                # Check if current path has a higher average\n                current_avg = sum(cost[i][j]) / (j-i+1)\n                if current_avg > max_avg:\n                    max_avg = current_avg\n                    max_path = (i,j)\n            else:\n                # Recursively check the remaining cells in the path\n                current_avg, current_path = maxAverageOfPath(cost)\n                if current_avg > max_avg:\n                    max_avg = current_avg\n                    max_path = current_path\n                # Move back to the current cell and continue searching for better paths\n                cost[i][j] = 0\n                cost[j][i] = 0\n                i -= 1\n                j += 1\n    \n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N%2 == 0:\n        N -= 1\n    dp = [[0]*N for i in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for i in range(1,N):\n        dp[i][0] = cost[i][0]\n        dp[i][N-1] = cost[i][N-1]\n    for i in range(1,N):\n        for j in range(1,N):\n            dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + cost[i][j]\n    for i in range(1,N):\n        for j in range(1,N):\n            avg = (dp[i][j]+dp[i-1][j-1]-dp[i-1][j]+dp[i][j-1])/(4*(N-1))\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_path = [0]*(N*N)\n    max_sum = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                max_sum = cost[i][j]\n                max_path[i*N+j] = 1\n            elif i == 0:\n                max_sum += cost[i][j]\n                max_path[i*N+j] = 1\n            elif j == 0:\n                max_sum += cost[i][j]\n                max_path[i*N+j] = 1\n            else:\n                max_sum += cost[i][j]\n                max_path[i*N+j] = max_path[(i-1)*N+j]+max_path[i*N+(j-1)]\n                max_path[i*N+j] -= max_path[(i-1)*N+(j-1)]\n\n    return max_sum/(N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Finding the size of the matrix\n    n = len(cost)\n\n    # Finding the maximum element in the matrix\n    max_val = max(cost[i][j] for i in range(n) for j in range(n))\n\n    # Finding all paths from the top-left cell\n    paths = [[(0, 0, cost[0][0])]]\n\n    # Iterating over all cells except the bottom right cell\n    for i in range(1, n):\n        for j in range(1, n):\n\n            # Generating all possible paths from the current cell\n            new_paths = []\n\n            # Generating paths starting from the top-left cell\n            for path in paths:\n\n                # Checking if the current cell is a valid move\n                if (i, j) == (n-1, n-1):\n                    new_paths.append(path + [(i, j, max_val)])\n                else:\n                    new_paths.append(path + [(i, j, max(cost[i][j], max_val))])\n\n            paths = new_paths\n\n    # Finding the maximum average over all paths\n    max_avg = max(path[-1][2] for path in paths)\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filter the students based on height and weight\n    filtered_students = {name: data for name, data in students.items() if data[0] > h and data[1] > w}\n    \n    # print the filtered students\n    print(filtered_students)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # iterate over the students and filter out those who are below the height and weight\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter students based on height and weight\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # Initialize an empty dictionary to store the indices\n    indices = {}\n\n    # Iterate through the first list of numbers\n    for i, num1 in enumerate(nums1):\n        # Check if the number is already in the dictionary\n        if num1 in indices:\n            # If it is, add the index to the list of indices\n            indices[num1].append(i)\n        else:\n            # If not, add the index to the dictionary with a list of one index\n            indices[num1] = [i]\n\n    # Initialize an empty list to store the counts\n    counts = []\n\n    # Iterate through the second list of numbers\n    for i, num2 in enumerate(nums2):\n        # Check if the number is already in the dictionary\n        if num2 in indices:\n            # If it is, add the count to the list of counts\n            counts.append(len(indices[num2]))\n        else:\n            # If not, add zero to the list of counts\n            counts.append(0)\n\n    # Count the number of indices where the lists have the same values\n    count = sum(1 for count in counts if count > 0)\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    This function takes in two lists of equal length and returns the indices of the elements that are the same in both lists.\n\n    Parameters:\n    nums1: list\n    nums2: list\n\n    Returns:\n    list\n    \"\"\"\n    # initialize an empty list to store the same indices\n    same_indices = []\n\n    # loop through both lists and compare each element with the next one\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            # if the elements are the same, append their indices to the same_indices list\n            same_indices.append(i)\n\n    return same_indices"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize a variable to hold the sum of all digits\n    sum_of_digits = 0\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Convert the digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit)\n    # Calculate the sum of all digits to the specified power and return the result\n    return sum_of_digits ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_digits = [int(digit) for digit in str(base)]\n    total = 0\n    for i in range(len(base_digits)):\n        total += base_digits[i] ** power\n\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    \n    sum_of_digits = 0\n    \n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        power //= 10\n        \n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    for i in range(1, power + 1):\n        digit = base % 10\n        sum += digit ** i\n        base = base // 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = [int(digit) for digit in str(base)]\n    total = 0\n    for digit in digits:\n        total += digit ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += sum_of_digits(base)\n    return sum\n\ndef sum_of_digits(num):\n    '''\n    Write a function that takes a number as input and calculates the sum of its digits.\n    '''\n    return sum(int(digit) for digit in str(num))"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum of digits to 0\n    digit_sum = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the sum of digits\n        digit_sum += int(digit)\n    # calculate the sum of digits raised to the power\n    result = 0\n    for i in range(power):\n        result += digit_sum\n    # return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Convert the base to a string and iterate over each character\n    for digit in str(base):\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit) ** power\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        if power % 2 == 1:\n            result += int(base)\n        base = int(base) // 10\n        power //= 2\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # Iterate through matches and return them as a list\n    result = []\n    for match in matches:\n        result.append(match)\n\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=^|\\s)\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    match = pattern.search(text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Use regex to find all the occurrences of \" \" within the text\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    \n    # Loop through each match and extract the value between the quotation marks\n    for match in matches:\n        # Remove the leading and trailing quotation marks\n        value = match.strip('\"')\n        # Print the value\n        print(value)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Check if the input tuple is of length N+1\n    if len(test_tup)!= len(test_tup) - 1:\n        raise ValueError(\"The input tuple should have length N+1\")\n    \n    # Create an empty tuple of length N\n    result_tup = tuple()\n    \n    # Loop through the input tuple and multiply each pair of elements\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n        \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x * test_tup[x+1] for x in range(len(test_tup)-1))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result = []\n    for i in range(N):\n        result.append(test_tup[2*i] * test_tup[2*i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    multiplied_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return multiplied_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # get the length of the tuple\n    N = len(test_tup)\n    # create a new tuple of length N and fill it with the result of t_i * t_{i+1}\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * test_tup[i+1] for i, x in enumerate(test_tup[:-1])])"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"Both lists must have the same length\")\n        return\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n\n    # convert the set back to a list for further processing\n    unique_list = list(unique_nums)\n\n    # sort the list\n    unique_list.sort()\n\n    # use itertools to group the list by consecutive duplicates\n    grouped_list = groupby(unique_list)\n\n    # return the original list with consecutive duplicates removed\n    return [x[0] for x in grouped_list if not x[1]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list.\n\n    Args:\n    nums (list): the list of integers to be cleaned of duplicates.\n\n    Returns:\n    list: a new list with consecutive duplicates removed.\n    '''\n    # Convert the list to a set to remove duplicates and group them by consecutive duplicates\n    duplicates = set([tuple(g) for k, g in groupby(sorted(nums)) if len(list(g)) > 1])\n\n    # Convert the set back to a list of lists\n    result = []\n    for group in duplicates:\n        result += list(group)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if key not in result:\n            result.append(key)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby() to group the numbers by their value\n    grouped_nums = groupby(nums)\n    # Create an empty list to store the unique consecutive duplicates\n    consecutive_duplicates_list = []\n    # Loop through the grouped numbers\n    for _, group in grouped_nums:\n        # Loop through the group to check if there are any consecutive duplicates\n        for i in range(1, len(group)):\n            if group[i] == group[i-1]:\n                # If there are, append the current number to the consecutive duplicates list\n                consecutive_duplicates_list.append(group[i])\n    # Return the list of unique consecutive duplicates\n    return list(set(consecutive_duplicates_list))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n\n    Parameters:\n    - nums (list): A list of integers.\n\n    Returns:\n    - A new list without consecutive duplicates.\n    '''\n\n    # Use itertools.groupby to group consecutive duplicates together\n    grouped = groupby(nums)\n\n    # Use itertools.chain to combine groups of consecutive duplicates\n    return list(chain.from_iterable(grouped))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums, lambda x: x-1))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == consecutive_duplicates:\n            group = list(group)\n            group.pop()\n            yield group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the elements of the list by their value\n    grouped = groupby(nums)\n    # create a list to store the consecutive duplicates\n    result = []\n    # iterate over the grouped list and check if the next element is the same\n    for key, group in grouped:\n        # check if the next element is the same\n        if group:\n            # if it is, add the current key to the result list\n            result.append(key)\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculating the area of the cone using the formula: A = pi*(r^2 + h^2)\n    A = math.pi*(r**2 + h**2)\n    # Returning the value of A\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (1/3) * r * r * math.tan(math.pi/6)\n    # s = r * math.sin(math.pi/6) * h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone using formula A = pi r^2 h\n    A = math.pi * r**2 * h\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes two parameters, radius r and height h, and returns the lateral surface area of a cone.\n    '''\n    \n    # Using the formula for the lateral surface area of a cone, \n    # we can find the lateral surface area using the formula:\n    # LSA = pi*(r^2 + h^2)\n    # Since we only need the lateral surface area, we can return only the LSA value.\n    # We can also use the math module to simplify the calculation.\n    \n    return math.pi*(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*(math.pi*r*h)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (1/3)*(math.pi*(r**2)*h + 2*math.pi*r*h)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r**2) + (math.pi/4) * (r**2) * (h**2)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern to match spaces, commas, or dots\n    pattern = r\"[\\s.,;!@#$%^&*()<>?/|{}[\\]]\"\n    # replace all occurrences of pattern with colon\n    result = re.sub(pattern, ':', text)\n    # return the modified text\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"[^\\w\\s]\", \"\", text)\n    text = re.sub(r\"[^\\w\\s]\", \":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = r'[\\s,\\.]'\n    # Replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'[,.]'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[^a-zA-Z0-9\\s]', '', text).replace(' ', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s|,|\\.|:', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|\\,|\\.|:', text, flags=re.IGNORECASE)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern\n    pattern = r\"[\\s.,]\"\n    # Use the replace() method to replace all matches with a colon\n    text = re.sub(pattern, \":\", text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Find the left and right boundaries of the array using binary search\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            # If the element is found at mid, then check if it's the first occurrence\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            # If the element is not the first occurrence, then update the right boundary\n            right = mid - 1\n        elif A[mid] > x:\n            # If the element is greater than mid, then update the right boundary\n            right = mid - 1\n        else:\n            # If the element is less than mid, then update the left boundary\n            left = mid + 1\n\n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Find the index of the first occurrence of x in A\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n\n    # If x is not found, return -1\n    if i == len(A):\n        return -1\n\n    # Find the index of x in A\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n\n    # Return the index of x in A\n    return i if j == len(A) else -1\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    i = 0\n    j = len(A) - 1\n\n    while i <= j:\n        mid = (i + j) // 2\n\n        if A[mid] == x:\n            while i < mid and A[i] == x:\n                i += 1\n\n            return i\n\n        elif A[mid] < x:\n            i = mid + 1\n\n        else:\n            j = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the index variable to -1\n    index = -1\n    # loop through the array\n    for i in range(len(A)):\n        # check if the current element is equal to the target number\n        if A[i] == x:\n            # if it is, update the index variable\n            index = i\n            # break out of the loop\n            break\n    # return the index of the first occurrence of the target number\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first element in the array that is greater than or equal to x\n    i = bisect_left(A, x)\n    # If x is not in the array, return -1\n    if i == len(A) or A[i]!= x:\n        return -1\n    # If x is the first occurrence of A, return i\n    if i > 0 and A[i-1] == x:\n        return i-1\n    # If x is the last occurrence of A, return i+1\n    if i < len(A) - 1 and A[i+1] == x:\n        return i+1\n    # If x is neither the first nor the last occurrence of A, return i\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Binary search for the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # Found x, now check if it's the first occurrence or not\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(A) == 0:\n        return -1  # Return -1 if the array is empty\n    \n    # Find the leftmost occurrence of x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not present in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Find the index of the first occurrence of x in A\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # If the mid element is equal to x, search the right half of the array\n            right = mid - 1\n        elif A[mid] < x:\n            # If the mid element is greater than x, search the left half of the array\n            left = mid + 1\n        else:\n            # If the mid element is less than x, search the right half of the array\n            right = mid - 1\n\n    # Return the index of the first occurrence of x in A\n    return left if A[left] == x else -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product = 1\n    result = 0\n    prefix_sum = [0] * n\n    \n    for i in range(n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n        \n    for i in range(n-1):\n        for j in range(i+1, n):\n            sub_array = arr[i:j+1]\n            product = 1\n            for num in sub_array:\n                product *= num\n            result += product\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    MOD = 1000000007\n\n    # Calculate cumulative sum of products\n    cum_prod = [1]\n    for i in range(1, n):\n        cum_prod.append(cum_prod[i-1] * arr[i])\n\n    # Calculate prefix sums of products\n    prefix_sum = [0]\n    for i in range(1, n+1):\n        prefix_sum.append(prefix_sum[i-1] + cum_prod[i-1])\n\n    # Calculate sum of products of all possible sublists\n    def sum_subarray_prod(start, end):\n        prod = 1\n        for i in range(start, end+1):\n            prod *= prefix_sum[i] - prefix_sum[start-1]\n            prod %= MOD\n        return prod\n\n    result = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            result += sum_subarray_prod(i, j)\n            result %= MOD\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    \n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    \n    # Calculate prefix sum array\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n    \n    # Initialize sum and product variables\n    sum_prod = 0\n    prod = 1\n    \n    # Calculate sum of products of all possible sublists\n    for i in range(n, -1, -1):\n        sum_prod += prod * prefix_sum[i]\n        prod *= arr[i]\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize a variable to store sum of products of all sublists\n    total_sum = 0\n\n    # loop through each sublist of length k from 1 to n\n    for k in range(1, n + 1):\n        # initialize a variable to store current sublist's sum of products\n        current_sum = 1\n        # loop through each possible starting index i of sublist of length k\n        for i in range(n - k + 1):\n            # loop through each possible ending index j of sublist of length k\n            for j in range(i, i + k):\n                # multiply current element of sublist with the product of all previous elements and add it to the sum of products\n                current_sum *= arr[j]\n            # add the sum of products of sublist to the sum of products of all sublists\n            total_sum += current_sum\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            prod = 1\n            for num in sub_arr:\n                prod *= num\n            total_sum += prod\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    MOD = 1000000007\n\n    # Calculate the cumulative sum of the array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    # Calculate the cumulative product of the array\n    prod = 1\n    for i in range(1, n + 1):\n        prod *= arr[i - 1]\n        prod %= MOD\n        cum_prod[i] = cum_prod[i - 1] * prod\n\n    # Initialize the list of subarray products\n    subarray_products = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Calculate the sum of products of all possible sublists of the array\n    for i in range(n):\n        for j in range(i, n + 1):\n            subarray_products[i][j] = cum_prod[j] - cum_prod[i] * prefix_sum[j]\n\n    # Calculate the sum of products of all possible sublists of the array\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subarray_products[i][j] = (subarray_products[i][j] + subarray_products[i][j - 1]) % MOD\n\n    # Calculate the sum of products of all possible sublists of the array\n    for i in range(n):\n        res = (res + subarray_products[0][i]) % MOD\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    # Initialize the two variables to store the sum and product of subarrays\n    sum = 0\n    prod = 1\n\n    # Iterate over all possible subarrays of length i from 1 to n\n    for i in range(1, n+1):\n        # Initialize two variables to store the sum and product of subarray of length i\n        sub_sum = 0\n        sub_prod = 1\n\n        # Iterate over all possible starting indices of the subarray of length i\n        for j in range(n-i+1):\n            # Calculate the sum and product of the subarray from index j to j+i-1\n            for k in range(j, j+i):\n                sub_sum += arr[k]\n                sub_prod *= arr[k]\n\n            # Update the sum and product of the whole subarray\n            sum += sub_sum\n            prod *= sub_prod\n\n    return sum * prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Calculate the prefix sum array\n    prefix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n    \n    # Calculate the product array\n    product = [1] * n\n    product[0] = 1\n    for i in range(1, n):\n        product[i] = product[i-1] * arr[i]\n    \n    # Calculate the sum of products of subarrays\n    subarray_prod_sum = 0\n    for i in range(n):\n        left = 0\n        right = i\n        while left < right:\n            subarray_prod_sum += prefix_sum[right] - prefix_sum[left] * product[right]\n            left += 1\n            right -= 1\n    \n    return subarray_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod_arr = [1]*n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod_arr[i] *= arr[j-1]\n    sum_prod = 0\n    for i in range(n):\n        sum_prod += prod_arr[i]\n    return sum_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n\n    # Initialize a variable to store the sum of products of all sublists\n    subarray_product_sum = 0\n\n    # Initialize a variable to store the sum of products of the first element of the sublist\n    first_element_product_sum = 1\n\n    # Loop through the list\n    for i in range(len(arr)):\n\n        # Add the current element to the sum of products of the first element of the sublist\n        first_element_product_sum *= arr[i]\n\n        # Subtract the current element from the sum of products of all sublists\n        subarray_product_sum -= arr[i]\n\n        # Add the current element to the sum of products of all sublists\n        subarray_product_sum += arr[i]\n\n        # Subtract the current element from the sum of products of the first element of the sublist\n        first_element_product_sum -= arr[i]\n\n    # Return the sum of products of all sublists\n    return subarray_product_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables\n    count = 0\n    i = 0\n    \n    # Iterate through bits of the number\n    while i < 32:\n        if i!= 0 and i!= 31:\n            # Check if the current bit is 1\n            if n & (1 << i):\n                # Toggle the bit\n                n = n ^ (1 << i)\n                \n        i += 1\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Find the position of the first and last bits\n    first_bit = 1\n    last_bit = n & ~(1 << (n.bit_length() - 1))\n    # Toggle all bits except the first and last bits\n    toggled = n ^ (first_bit | last_bit)\n    # Shift the toggled bits to the right by the positions of the first and last bits\n    shifted = (toggled << (2 * first_bit)) >> (2 * first_bit)\n    # Combine the toggled and shifted bits\n    result = toggled | shifted\n    # Return the final result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the length of the binary number\n    length = len(bin(n)[2:])\n    # Get the middle bit position\n    mid = length // 2\n    # Toggle the middle bit\n    n = n ^ (1 << mid)\n    # Set the last bit to 0\n    n = n & ~(1 << length - 1)\n    # Set the first bit to 0\n    n = n & ~(1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle the middle bits of a number except the first and the last bit.\n    \"\"\"\n    # Get the number of bits in the number\n    num_bits = bin(n).count('1')\n\n    # Calculate the middle bits position\n    middle_bits_pos = num_bits // 2\n\n    # Toggle the middle bits\n    n_toggled = n ^ ((1 << num_bits) - 1)\n\n    # Extract the first and the last bits\n    first_bit = n_toggled & (1 << middle_bits_pos)\n    last_bit = n_toggled & ((1 << middle_bits_pos) - 1)\n\n    # Set the middle bits to 0 or 1\n    n_toggled &= ~(first_bit | last_bit)\n\n    return n_toggled"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # XOR of the first and last bits\n    n = n ^ ((n & 0x55555555) << 1)\n    # XOR of the middle bits with itself (n & n<<1)\n    n = n ^ (n & n<<1)\n    # XOR of the first and middle bits with themselves\n    n = n ^ ((n & 0xAAAAAAAA) << 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize variables\n    count = 0 # Count of bits set to 1\n    middle = 0 # Index of the middle bit\n    result = 0 # Resulting number with middle bits toggled\n\n    # Iterate through bits starting from the second to last bit\n    for bit in bin(n)[2:][::-1]:\n        # If bit is 1, increment the count and set middle bit to the current index\n        if bit == '1':\n            count += 1\n            middle = count\n        # If the count is 3, toggle the middle bit and set the result accordingly\n        if count == 3:\n            result = int(bit) ^ int(bin(n)[2:].count('1')[middle])\n            count = 0\n\n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # initialize variables\n    first_bit = n & 1  # first bit of the number\n    last_bit = n & (2**32 - 1)  # last bit of the number\n    new_number = 0\n\n    # toggle bits of the number except the first and the last bit\n    for i in range(31):\n        if i!= 0 and i!= 31:\n            new_number |= (n & (1 << i)) ^ (n & (1 << i))  # toggle i-th bit\n\n    # add the first and last bits to the new number\n    new_number |= (first_bit << 31) | (last_bit >> 1)\n\n    return new_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # Calculate the first and last bit positions\n    first_bit = 0\n    last_bit = n.bit_length() - 1\n\n    # Calculate the middle bit positions\n    middle_bit1 = (first_bit + last_bit) // 2\n    middle_bit2 = (first_bit + last_bit + 1) // 2\n\n    # Toggle the middle bits\n    n = n ^ ((1 << middle_bit1) ^ (1 << middle_bit2))\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # Finding the index of the middle bit\n    mid_bit = n.bit_length() // 2\n    # To toggle the middle bit, we XOR it with 1\n    n = n ^ (1 << mid_bit)\n    # To toggle all the other bits except the first and last bit, we XOR them with 1\n    n = n ^ ((n ^ (n >> 1)) & (n ^ (n >> 2)) & (n ^ (n >> 3)) & (n ^ (n >> 4)) & (n ^ (n >> 5)) & (n ^ (n >> 6)) & (n ^ (n >> 7)))\n    # To toggle all the other bits, we XOR them with 1\n    n = n ^ ((n ^ (n >> 8)) & (n ^ (n >> 16)) & (n ^ (n >> 24)) & (n ^ (n >> 32)) & (n ^ (n >> 40)) & (n ^ (n >> 48)) & (n ^ (n >> 56)))\n    # To toggle all the other bits except the first and last bit, we XOR them with 1\n    n = n ^ ((n ^ (n >> 8)) & (n ^ (n >> 16)) & (n ^ (n >> 24)) & (n ^ (n >> 32)) & (n ^ (n >> 40)) & (n ^ (n >> 48)) & (n ^ (n >> 56)))\n    # To toggle all the other bits, we XOR them with 1\n    n = n ^ ((n ^ (n >> 8)) & (n ^ (n >> 16)) & (n ^ (n >> 24)) & (n ^ (n >> 32)) & (n ^ (n >> 40)) & (n ^ (n >> 48)) & (n ^ (n >> 56)))\n    # To toggle all the other bits except the first and last bit, we XOR them with 1\n    n = n ^ ((n ^ (n >> 8)) & (n ^ (n >> 16)) & (n ^ (n >> 24)) & (n ^ (n >> 32)) & (n ^ (n >> 40)) & (n ^ (n >> 48)) & (n ^ (n >> 56)))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Initialize the first and last bits to 0\n    first_bit = binary_str[0]\n    last_bit = binary_str[-1]\n    \n    # Remove the first and last bits\n    binary_str = binary_str[1:-1]\n    \n    # Toggle the middle bits\n    middle_bits = [0 for i in range(len(binary_str)//2)]\n    for i in range(len(binary_str)//2):\n        middle_bits[i] = int(binary_str[2*i]) ^ int(binary_str[2*i+1])\n    \n    # Convert the middle bits to binary string and add the first and last bits\n    middle_bits_binary = ''.join(str(bit) for bit in middle_bits)\n    binary_str = middle_bits_binary + first_bit + last_bit\n    \n    # Convert the binary string back to integer\n    return int(binary_str, 2)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        else:\n            return index-1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    # initialize left and right pointers for binary search\n    left, right = 0, len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # if x is equal to a[mid], return mid as the left insertion point\n        if a[mid] == x:\n            return mid\n\n        # if x is greater than a[mid], ignore the left half of the array\n        elif a[mid] < x:\n            left = mid + 1\n\n        # if x is smaller than a[mid], ignore the right half of the array\n        else:\n            right = mid - 1\n\n    # if the value is not found in the array, return -1 as the left insertion point\n    return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # create a list of tuples where each tuple contains the value and its index\n    index_list = [(a[i], i) for i in range(len(a))]\n\n    # find the index of the leftmost element greater than or equal to x\n    index = bisect.bisect_left(index_list, (x, None))\n\n    # return the index of the value if it exists, otherwise return the index of the leftmost element greater than x\n    return index if index < len(index_list) and index_list[index][0] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Initialize left and right pointers\n    left = 0\n    right = len(a) - 1\n\n    # Perform binary search to find the left insertion point\n    while left <= right:\n        mid = (left + right) // 2\n\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            # Return the mid index if the value is already present\n            return mid\n\n    # If the value is not found, return the left insertion point\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif x > a[index]:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Using bisect to find the insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is already present in the list, return the index\n    if index!= len(a) and a[index] == x:\n        return index\n    # If the value is less than the first element, return -1 (indicating that it should be inserted at the beginning of the list)\n    elif index == 0:\n        return -1\n    # If the value is greater than the last element, return the index of the first element\n    elif index == len(a):\n        return index\n    # If the value is between the first and last elements, return the index of the previous element\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.search(regex, string)\n    return match is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    This function takes a string as input and returns True if the string starts with a vowel or False otherwise.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    This function takes a string as input and checks whether it starts with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1 / n) * (geometric_sum(n-1) + (1 - 1/n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * (1 + geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    triangular_numbers.append(1)\n    triangular_numbers.append(2)\n\n    for i in range(2, n+1):\n        triangular_numbers.append(triangular_numbers[i-1] + triangular_numbers[i-2])\n\n    return triangular_numbers.index(math.floor(math.sqrt(triangular_numbers[-1]))) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    max_triangular_num = int(math.pow(10, n))\n    \n    # Initialize the index variable\n    index = 1\n    \n    # Loop through all the triangular numbers\n    while True:\n        triangular_num = index * (index + 1) // 2\n        \n        # If the triangular number is greater than or equal to the maximum triangular number, we have found the index\n        if triangular_num >= max_triangular_num:\n            break\n        \n        # Increment the index\n        index += 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Initialize variables\n    count = 1\n    triangular_num = 0\n    index = 0\n    # Loop through each digit of n\n    for i in range(1, n+1):\n        # Calculate the next triangular number\n        triangular_num = i * (2*i-1)\n        # Check if the triangular number is smaller than the current smallest triangular number\n        if triangular_num < math.factorial(n):\n            # If yes, update the smallest triangular number and its index\n            count += 1\n            triangular_num = math.factorial(n) // count\n            index = i\n        # If not, update the count of triangular numbers with that digit\n        else:\n            triangular_num = 0\n            count = 1\n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    if n == 1:\n        return 1\n    \n    # Initialize the sum of first n digits as the first triangular number\n    first_triangular = int(\"1\" * n)\n\n    # Initialize the minimum index found so far\n    min_index = 0\n\n    # Initialize the counter variable for the current digit\n    count = 0\n\n    # Iterate over the remaining digits of n\n    for i in range(1, n + 1):\n        # Calculate the next triangular number using the formula: triangular(n) = (first_triangular + count) ** (1/n)\n        next_triangular = int((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))) ** (1 / n)) + first_triangular\n\n        # If the next triangular number is smaller than the current minimum, update the minimum index and the counter\n        if next_triangular < first_triangular:\n            min_index = count + 1\n            first_triangular = next_triangular\n\n        # Increment the counter for the current digit\n        count += 1\n\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # The smallest triangular number with n digits is 10^n\n    # Here we have taken n=3 as an example to demonstrate the function\n    min_triangular_num = 10**(n-1)\n\n    # Using binary search to find the index of the smallest triangular number with n digits\n    left = 1\n    right = min_triangular_num - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # Check if mid is a triangular number with n digits\n        triangular_num = mid * (mid + 1) // 2\n        triangular_digits = len(str(triangular_num))\n\n        if triangular_digits == n:\n            return mid\n        elif triangular_digits < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initializing variables\n    triangular_number = 1\n    smallest_triangular_number = 1\n    index = 1\n    \n    # Looping until smallest triangular number has n digits\n    while len(str(smallest_triangular_number)) < n:\n        triangular_number += 1\n        index += 1\n        \n        # Checking if current triangular number is smaller than smallest triangular number\n        if triangular_number < smallest_triangular_number:\n            smallest_triangular_number = triangular_number\n            \n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Initialize the variable to store the smallest triangular number \n    smallest_num = 0 \n\n    # Initialize a variable to store the index of smallest triangular number \n    index = 1 \n\n    # Calculate the value of the smallest triangular number with n digits \n    num = 10**(n-1) + 1 \n\n    # Initialize a variable to store the remainder when dividing the value of the smallest triangular number with n digits by num \n    remainder = 0 \n\n    # Loop until the remainder becomes 0 \n    while remainder!= 0:\n\n        # Calculate the remainder when dividing the value of the smallest triangular number with n digits by num \n        remainder = smallest_num % num \n\n        # If the remainder is 0, then the smallest triangular number with n digits is found \n        if remainder == 0:\n            return index\n\n        # Update the value of the smallest triangular number with n digits by adding 10 to it \n        smallest_num += 10\n\n        # Update the index by incrementing it \n        index += 1\n\n    # If the remainder is not 0, then the smallest triangular number with n digits is not found \n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the number of digits in the smallest triangular number\n    min_n_digits = int(math.log10(5 * n + 5))\n    # Initialize the minimum triangular number with minimum number of digits\n    min_tri = 5 * n + 5\n    # Initialize the index of the smallest triangular number\n    min_index = 0\n\n    # Loop through all possible indices of the smallest triangular number\n    for index in range(min_n_digits):\n        # Calculate the next triangular number with n digits\n        next_tri = min_tri + index\n        # If the next triangular number is smaller than the current minimum, update the minimum and index\n        if next_tri < min_tri:\n            min_tri = next_tri\n            min_index = index\n\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def triangular_number(n): \n        '''\n        Returns the nth triangular number using dynamic programming.\n        '''\n        if n == 1: \n            return 1 \n        elif n == 2: \n            return 2 \n        else: \n            return triangular_number(n-1) + triangular_number(n-2)\n\n    def find_smallest_triangular_number(n): \n        '''\n        Returns the smallest triangular number with n digits.\n        '''\n        tri_nums = [0] * (n+1) \n        tri_nums[1] = 1 \n        for i in range(2, n+1): \n            tri_nums[i] = triangular_number(i) \n        return tri_nums[n]\n\n    return find_smallest_triangular_number(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initializing the first triangular number and the length of the number\n    num = 1\n    length = 1\n    while True:\n        num = int(num * 10**length)\n        if length == n:\n            break\n        length += 1\n    \n    # finding the index of the smallest triangular number with n digits\n    for i in range(length-1, 0, -1):\n        num = int(num / 10**(i-1))\n        if num < 10**(n-i):\n            return i"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Convert the tuple to a dictionary using adjacent elements\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # iterate over the tuple\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize the dictionary\n    test_dict = {}\n    # Loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Assign the current element and next element to the keys and values of the dictionary\n        test_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Use a for loop to iterate through the tuple\n    for i in range(len(test_tup)):\n        # If the current index is not equal to the length of the tuple, add the key-value pair to the dictionary\n        if i!= len(test_tup) - 1:\n            my_dict[test_tup[i]] = test_tup[i+1]\n        # If the current index is equal to the length of the tuple, add the final key-value pair to the dictionary\n        else:\n            my_dict[test_tup[i]] = None\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result = {}\n    # loop through the tuple elements\n    for i in range(len(test_tup)):\n        # if the current element is a tuple, append its elements to the key\n        if isinstance(test_tup[i], tuple):\n            result[test_tup[i]] = test_tup[i+1]\n        # otherwise, append the current element as the key and the next element as the value\n        else:\n            result[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    if len(test_tup) % 2 == 0:\n        result = {}\n        for i in range(0, len(test_tup), 2):\n            result[test_tup[i]] = test_tup[i+1]\n        return result\n    else:\n        print(\"Tuple should have an even number of elements.\")"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and returns True if all characters in the string are same, False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[2:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are the same, else False.\n    \"\"\"\n    # First, check if the length of the string is 1\n    if len(s) == 1:\n        return True\n    \n    # Otherwise, iterate through the string and compare each character to the first character\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    # If we get through the loop without finding any differences, then all the characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # Check if all the values in the dictionary are equal to 1\n    for val in freq.values():\n        if val!= 1:\n            return False\n    \n    # If all values are equal to 1, then all characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Take the first character of the string as the reference character\n    reference_char = s[0]\n    # Loop through the rest of the string\n    for char in s[1:]:\n        # If the current character is not the same as the reference character, return False\n        if char!= reference_char:\n            return False\n    # If the loop completes without finding any unequal characters, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert string to lowercase\n    s = s.lower()\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    # Loop through each character of the string\n    for char in s:\n        # If the current character is not the same as the first character, return False\n        if char.lower()!= first_char:\n            return False\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron given its side length.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/2 * (3 * side ** 2 + math.sqrt(24) * side * math.cos(math.pi/3))\n    area = math.pi * s ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    semi_perimeter = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** (1/2)\n    area = math.sqrt(semi_perimeter * (semi_perimeter - side) * (semi_perimeter - side) * (semi_perimeter - side) * (semi_perimeter - side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1 + math.sqrt(5)) / 2  # side length of one of the sides\n    area = math.sqrt(3 * s * (s - 1))  # formula for the area of a tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3) / 4 * side ** 2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (2 * side ** 2 + 2 * side * math.sqrt(3) + math.sqrt(3) * side) / 3\n    \n    # Calculate the area of the tetrahedron\n    area = (1 / 6) * semi_perimeter ** 3\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # use Heron's formula to calculate the area\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = (s * (s-side) * (s-side-side) * (s-side-side-side)) ** 0.5\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * (side ** 2)\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (3*side**2 + 2*side + 6*math.sqrt(12)) / 6\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(3) * (side**2 + semi_perimeter**2) / 4\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Check if m is less than n\n    if m >= n:\n        print(\"Error: m is greater than or equal to n.\")\n        return\n    \n    # Swap first m elements with last n-m elements\n    for i in range(m):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    \n    # Reverse first n-m elements\n    list[m:n] = list[m:n][::-1]\n    \n    # Reverse the entire list\n    list = list[::-1]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # append the first n elements of the list to the end of the list\n    list = list + list[:m]\n    # remove the first n elements from the list\n    list = list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, n):\n    '''\n    This function takes a list and the number of items to be rotated to the right.\n    The function rotates the list by n items to the right direction.\n    '''\n    n = n % len(lst)  # To rotate the list to the right, we need to check if n is greater than or equal to the length of the list. If yes, we take the modulo of n with the length of the list.\n    lst.reverse()  # We reverse the list to move the last n items to the front of the list.\n    lst[-n:] = lst[:n]  # We copy the last n items to the front of the list.\n    lst[:-n] = []  # We empty the last n items to make space for the rotated items.\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[n - m:] = list[:n - m]\n    list[:n - m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # check if m is greater than or equal to n\n    if m >= n:\n        return list\n    # check if m is negative\n    if m < 0:\n        m = n + m\n    # perform left rotation\n    list.rotate(m)\n    # rotate the list to the left by n-m positions\n    list[:] = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    lst[0:n], lst[n:] = lst[n:], lst[0:n]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0:m] = list[m:n] + list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates the given list by the specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Calculate the number of items to be rotated\n    n = len(list)\n    k = n - m\n\n    # Move all items from the first m items to the end of the list\n    for i in range(m):\n        list[i] = list[i + k]\n\n    # Move all items from the kth item to the end of the list\n    for i in range(k):\n        list[i] = list[i + m]\n\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n\n    n = len(list)\n    m = m % n\n\n    for i in range(m):\n        list.append(list.pop(0))\n\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = False\n    for value in test_tup:\n        if value is None:\n            none_value = True\n            break\n    return none_value"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(int(digit) % int(x % digit) == 0 for digit in str(x))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return sorted(list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum + 1))))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    def is_divisible_by_digit(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit % divisor == 0 for digit in digits for divisor in range(1, 10))\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % i == 0 for i in map(int, str(x))), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = list(map(int, str(startnum)))\n    result = lambda num: all(d in str(num) for d in digits)\n    return [num for num in range(startnum, endnum+1) if result(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Use lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda n: all(d in str(n) for d in str(n))\n\n    # Loop through all numbers in the given range\n    for num in range(startnum, endnum + 1):\n        # Check if the current number is divisible by every digit it contains\n        if is_divisible(num):\n            # If it is, print the number\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        return all(d in str(num) for d in str(num))\n\n    return list(filter(is_divisible, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Lambda function to check if a number is divisible by a digit\n    is_divisible = lambda x, d: d in str(x)\n    # Iterate through the numbers in the range\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by every digit\n        if all(is_divisible(num, i) for i in range(10)):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(map(lambda d: x % d == 0, [int(d) for d in str(x)]))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2\n        area *= math.sin(math.radians(a/2))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Let's implement the above steps in the script."
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, it will return None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * a / 360\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Calculate the lengths of X, Y and Z\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Initialize a 2D array to store the lengths of LCS for every subproblem\n    dp = [[0] * (p+1) for i in range(m+1)]\n    \n    # Fill the dp table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # Backtrack from the dp table to find the LCS\n    i = m\n    j = p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n            \n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a dictionary to store lengths of subsequences\n    dp = {}\n\n    # compute lengths of subsequences for all possible pairs of strings\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                if X[i:j+1] == Y[j:k+1] and Y[j:k+1] == Z[k:]:\n                    length = j + k + 1\n                    if length > dp.get((i, j), 0):\n                        dp[(i, j)] = length\n    \n    # find the longest common subsequence using dynamic programming\n    max_length = max(dp.values())\n    lcs = []\n    for key, value in dp.items():\n        if value == max_length:\n            lcs.append(key)\n\n    # join the substrings of the longest common subsequence\n    return ''.join([Z[s:e+1] for s, e in sorted(lcs)])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[0] * (o + 1) for i in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    return dp[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # function to find longest common subsequence of three strings\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n\n        # creating a 3D table to store lengths of LCS of all possible substrings\n        lcs_table = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n        # filling the table in bottom up manner\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                for k in range(1, o+1):\n                    if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                        lcs_table[i][j][k] = lcs_table[i-1][j-1][k-1] + 1\n                    elif X[i-1] == Y[j-1]:\n                        lcs_table[i][j][k] = lcs_table[i-1][j][k]\n                    elif Z[k-1] == X[i-1]:\n                        lcs_table[i][j][k] = lcs_table[i][j-1][k-1]\n\n        # backtracking to find the actual LCS\n        lcs_seq = []\n        i = m\n        j = n\n        k = o\n        while i!= 0 and j!= 0 and k!= 0:\n            if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                lcs_seq.append(X[i-1])\n                i -= 1\n                j -= 1\n                k -= 1\n            elif X[i-1] == Y[j-1]:\n                i -= 1\n                j -= 1\n            else:\n                k -= 1\n\n        # reverse the sequence to get the correct LCS\n        lcs_seq.reverse()\n\n        # return the LCS\n        return \"\".join(lcs_seq)\n\n    # finding the longest common subsequence of three strings\n    lcs_result = lcs(X, Y, Z)\n\n    # printing the LCS\n    print(\"Longest Common Subsequence of three strings: \", lcs_result)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # create a list of tuples representing the lengths of the longest common subsequences\n    lengths = []\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                if i == 0 or j == 0 or k == 0:\n                    lengths.append((0, 0, 0))\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lengths.append((i, j, k))\n                else:\n                    lengths.append(max(lengths[i-1], lengths[j], lengths[k]))\n\n    # backtrack through the list to find the actual common subsequence\n    i, j, k = len(X), len(Y), len(Z)\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lengths[i-1][1] > lengths[j][1]:\n            i -= 1\n        elif lengths[i][0] > lengths[j][0]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the list to get the common subsequence in the correct order\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # To store lengths of LCS of all prefixes of X, Y and Z\n    l = [[[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] for k in range(len(Z)+1)]\n\n    # To store lengths of LCS of all prefixes of Y, Z and X\n    r = [[[0 for j in range(len(X)+1)] for i in range(len(Y)+1)] for k in range(len(Z)+1)]\n\n    # To store LCS of all prefixes of X, Y, Z\n    c = [[[None for j in range(len(Y)+1)] for i in range(len(X)+1)] for k in range(len(Z)+1)]\n\n    # Fill the matrices\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    l[k][i][j] = l[k-1][i-1][j-1] + 1\n                    r[k-1][i][j] = max(r[k-1][i][j-1], r[k-1][i-1][j])\n                    c[k-1][i][j] = X[i-1]\n                elif X[i-1] == Y[j-1]:\n                    l[k][i][j] = l[k-1][i-1][j]\n                    r[k-1][i][j] = r[k-1][i-1][j]\n                    c[k-1][i][j] = c[k-1][i-1][j]\n                else:\n                    l[k][i][j] = l[k-1][i][j]\n                    r[k-1][i][j] = r[k-1][i][j]\n                    c[k-1][i][j] = None\n\n    # Backtracking to find the LCS\n    def backtrack(i, j, k):\n        if c[k-1][i][j] == X[i-1]:\n            if i == len(X) and j == len(Y) and k == len(Z):\n                print(c[k-1][i][j], end='')\n            else:\n                backtrack(i, j, k-1)\n        elif i == len(X) and j == len(Y) and k == len(Z):\n            print()\n        elif i > 0 and j > 0 and k > 0 and l[k][i][j] == l[k][i-1][j]:\n            backtrack(i-1, j, k)\n        elif i > 0 and j > 0 and k > 0 and l[k][i][j] == r[k-1][i][j]:\n            backtrack(i-1, j, k-1)\n        elif i > 0 and j > 0 and k > 0 and l[k][i][j] == l[k-1][i][j-1]:\n            backtrack(i, j-1, k)\n        elif i > 0 and j > 0 and k > 0 and l[k][i][j] == r[k-1][i][j-1]:\n            backtrack(i, j-1, k-1)\n        elif i > 0 and j > 0 and k > 0 and l[k][i][j] == l[k][i][j-1]:\n            backtrack(i, j-1, k)\n        elif i > 0 and j > 0 and k > 0 and l[k][i][j] == r[k-1][i-1][j]:\n            backtrack(i-1, j-1, k)\n\n    backtrack(len(X), len(Y), len(Z))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    def recursive_lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        p = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if X[i - 1] == Y[j - 1]:\n                    p[i][j] = p[i - 1][j - 1] + 1\n                else:\n                    p[i][j] = max(p[i - 1][j], p[i][j - 1])\n        return p[m][n]\n\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n    lcs = [0] * p[m][n]\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs[p[i][j] - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 3D matrix to store the length of LCS for all prefixes of X, Y, and Z\n    L = [[[0 for j in range(o + 1)] for i in range(m + 1)] for k in range(n + 1)]\n\n    # fill the matrix in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # backtrack to find the longest common subsequence\n    i, j, k = m, n, o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    lcs = \"\"\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store the length of LCS of substring of X[i..j] with Y[0..n-1] and Z[0..p-1]\n    L = [[0 for j in range(p + 1)] for i in range(m + 1)]\n\n    # fill in the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # trace the LCS back to get the actual sequence of characters\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i - 1][j][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the sequence of characters and return it\n    return lcs[::-1]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove any punctuation from the string\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # Split the string into a list of words\n    words = str1.split()\n    # Iterate over the list of words and capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    # Join the list of capitalized words with spaces and return the result\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Loop through each word and capitalize it if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    # Join the words back into a string with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # replace all spaces in the string with a single space\n    str1 = re.sub(r'\\s+','', str1)\n    # split the string into a list of words\n    words = str1.split()\n    # create an empty list to store the capitalized words\n    capitalized_words = []\n    # loop through each word in the list\n    for word in words:\n        # check if the first letter of the word is capitalized\n        if word[0].isupper():\n            # add the word to the capitalized_words list\n            capitalized_words.append(word)\n        # otherwise, add the word with a space in between\n        else:\n            # check if the previous word was capitalized\n            if capitalized_words:\n                # add a space before the word\n                capitalized_words[-1] +='' + word\n            else:\n                # if the first word was not capitalized, add the word to the list\n                capitalized_words.append(word)\n    # join the capitalized words with spaces\n    capitalized_str =''.join(capitalized_words)\n    return capitalized_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n    # Join the words back into a string with spaces between them\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Iterate through the words and capitalize the first letter of each word\n    new_words = []\n    for word in words:\n        first_letter = word[0].upper()\n        rest_of_word = word[1:]\n        new_word = first_letter + rest_of_word\n        new_words.append(new_word)\n    # Join the words with spaces\n    result =''.join(new_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Iterate over the words and capitalize the first letter\n    new_words = []\n    for word in words:\n        if word.istitle():\n            new_words.append(word)\n        else:\n            new_words.append(word[0].upper() + word[1:])\n    # Join the words with spaces\n    result =''.join(new_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match words starting with a capital letter\n    pattern = r'\\b[A-Z]\\w+\\b'\n\n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, str1)\n\n    # Iterate over the matches and replace the capital letter with a space\n    for match in matches:\n        str1 = re.sub(match,'' + match, str1)\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"(?<!\\w)(\\p{Lu})(?!\\w)\"\n    return re.sub(pattern, r\" \\1\", str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with a space\n    str1 = re.sub('[^a-zA-Z0-9\\s]','', str1)\n    # split the string into a list of words\n    words = str1.split()\n    # iterate through each word in the list\n    for i in range(len(words)):\n        # check if the first letter of the word is uppercase\n        if words[i][0].isupper():\n            # add a space before the word\n            words[i] ='' + words[i]\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    \n    #loop through each word and capitalize the first letter\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    \n    #join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            nums.append(num)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # initialize an empty list to store the sorted numeric strings\n    nums_str_sorted = []\n    \n    # loop through each string in the list\n    for num in nums_str:\n        \n        # if the string is numeric, add it to the sorted list\n        if num.isnumeric():\n            nums_str_sorted.append(num)\n    \n    # use the built-in sort function to sort the numeric strings\n    nums_str_sorted.sort()\n    \n    # return the sorted numeric strings\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    # Remove non-numeric characters from the strings\n    nums_str = [s.replace(',', '').replace('.', '').replace(' ', '') for s in nums_str]\n    \n    # Convert the strings to numeric values\n    nums = [int(s) for s in nums_str]\n    \n    # Sort the numeric values\n    nums.sort()\n    \n    # Convert the sorted numeric values back to strings\n    sorted_nums_str = [str(n) for n in nums]\n    \n    # Join the sorted strings back into a single string\n    sorted_nums_str = ''.join(sorted_nums_str)\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list of strings to a list of numeric values\n    nums = [float(s.replace(',', '')) for s in nums_str]\n    # Sort the list of numeric values in ascending order\n    nums.sort()\n    # Convert the sorted list of numeric values back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Split the list into a list of lists, where each inner list contains a single string of numbers\n    nums_list = [list(x) for x in nums_str]\n\n    # Sort each inner list numerically\n    for i in range(len(nums_list)):\n        nums_list[i].sort(key=lambda x: int(x))\n\n    # Join the sorted inner lists into a single list of sorted strings of numbers\n    nums_sorted = [''.join(x) for x in nums_list]\n\n    return nums_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list of strings to a list of numbers\n    nums = [float(num_str) for num_str in nums_str]\n    # Sort the list of numbers\n    nums.sort()\n    # Convert the sorted list of numbers back to a list of strings\n    sorted_nums = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings to float values\n    nums_float = [float(num) for num in nums_str]\n    # Sort the float values numerically\n    nums_float.sort()\n    # Convert the sorted float values back to strings\n    sorted_nums_str = [str(num) for num in nums_float]\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(\"Added tuple to the list.\")\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for num in test_tup:\n        test_list.append(num)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Create a new list that contains the original list and the tuple\n    new_list = test_list + tuple(test_tup)\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    # If left child is smaller than root\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    # If right child is smaller than smallest so far\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    # If smallest element is not root\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        # Recursively check if the heap property is satisfied\n        check_min_heap_helper(arr, smallest)\n        \n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        # Recursively check if the heap property is satisfied\n        check_min_heap_helper(arr, i)\n        \n    # Check if the last element is the root\n    if arr[0] > arr[n-1]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If index is out of bounds, then the array is not a valid min heap\n    if i < 0 or i >= len(arr):\n        return False\n\n    # If the root is smaller than the left child or the root is smaller than the right child, then the array is not a valid min heap\n    if i == 0 or arr[0] > arr[2*i+1]:\n        if i == len(arr)-1 or arr[i] > arr[2*i+2]:\n            return False\n\n    # If the root is greater than both the left child and the right child, then the array is a valid min heap\n    return True\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Helper function to recursively check all the elements of the array\n    for i in range(len(arr)//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    # Helper function to recursively check all the elements of the array\n    for i in range(len(arr)//2, len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    # If all the elements are valid heaps, then the array is a valid min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Given an array of integers, check if it represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    if arr[i] >= arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    if len(arr) % 2!= 0:\n        return False\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(1, n//2):\n        if arr[i] < arr[2*i]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    else:\n        if arr[i] >= arr[(i-1)//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, (i-1)//2)\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the index is out of range, return True because it's impossible to check a min heap with only one element\n    if i < 0:\n        return True\n\n    # If the index is at the end, return True because all elements in the array are greater than the parent and both of them have children\n    if i == len(arr) - 1:\n        return True\n\n    # If the index is not at the end, check if the parent is smaller than the left child or the right child\n    elif arr[i] > arr[2*i+1] or (arr[i] > arr[2*i+2] and 2*i+2 < len(arr)):\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i < len(arr):\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < len(arr) and arr[left] < arr[i]:\n            return False\n\n        if right < len(arr) and arr[right] < arr[i]:\n            return False\n\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap(arr):\n    '''\n    This function checks if a given array represents a min heap or not.\n    '''\n    n = len(arr)\n    if n < 2:\n        return True\n\n    # check if root is minimum element of heap\n    if arr[0] > arr[1]:\n        return False\n\n    # check if rest of elements are minimum elements of heap\n    for i in range(1, n//2):\n        if arr[i] > arr[2*i] or arr[i] > arr[2*i+1]:\n            return False\n\n    # check if left child is minimum element of heap\n    if arr[1] > arr[2]:\n        return False\n\n    # check if right child is minimum element of heap\n    if arr[1] > arr[3]:\n        return False\n\n    # check if left and right children are minimum elements of heap\n    if arr[2] > arr[3]:\n        return False\n\n    # check if left and right children are minimum elements of heap\n    if arr[2*i+1] > arr[2*i]:\n        return False\n\n    # check if left and right children are minimum elements of heap\n    if arr[2*i+1] > arr[2*i+2]:\n        return False\n\n    # if all conditions are true, then array represents a min heap\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num((3*n)//2)\n    else:\n        return 2*jacobsthal_num(n//2) + jacobsthal_num((3*n)//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10925, 21855, 43721, 87471, 174961, 349941, 699901, 1399841, 2799701, 5599421, 11198881, 22397771, 44795571, 89591181, 179182401, 358365021, 716730091, 1433460191, 2866920391, 5733840791, 11467681591, 22935363191, 45870726391, 91741452791, 183482905601, 366965811221, 733931622471, 1467863244961, 2935726489961, 5871452979961, 11742905959961, 23485811919961, 46971623839961, 93943247679961, 187886495359961, 375772990720001, 751545981440021, 1503091962880061, 3006183925760121, 6012367851520261, 12024735703040541, 24049471406081091, 48098942812162201, 96197885624324421, 192395771248648861, 384791542497297741, 769583084994595491, 1539166169989190991, 3078332339978381991, 6156664679956763991, 12313329359913527991, 24626658719827056001, 49253317439654112021, 98506634879308224061, 197013269758"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    jacobsthal_num_list = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87381, 174763, 349525, 699051, 1398103, 2796205, 5592411, 11184823, 22369645, 44739291, 89478582, 178957165, 357914330, 715828661, 1431657322, 2863314644, 5726629289, 11453258578, 22906517157, 45813034314, 91626068629, 183252137258, 366504274517, 733008549033, 1466017098067, 2932034196134, 5864068392269, 11728136784538, 23456273569077, 46912547138154, 93825094276309, 187650188552618, 375300377105237, 750600754210474, 1501201508420949, 3002403016841898, 6004806033683797, 12009612067367594, 24019224134735189, 48038448269470378, 96076896538940757, 192153793077881514, 384307586155763029, 768615172311526058, 1537230344623052117, 3074460689246104234, 6148921378492208469, 12297842756984416938, 24595685513968833877, 49191371027937667754, 98382742055875335509, 196765484111750671018, 393530968223501342037, 787061936447002684074, 1574123872894005368149"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2) + 1\n    else:\n        return jacobsthal_num((n-1)//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function finds the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 43\n    elif n == 8:\n        return 85\n    elif n == 9:\n        return 171\n    elif n == 10:\n        return 341\n    elif n == 11:\n        return 683\n    elif n == 12:\n        return 1365\n    elif n == 13:\n        return 2731\n    elif n == 14:\n        return 5461\n    elif n == 15:\n        return 10925\n    elif n == 16:\n        return 21853\n    elif n == 17:\n        return 43711\n    elif n == 18:\n        return 87425\n    elif n == 19:\n        return 174861\n    elif n == 20:\n        return 349729\n    elif n == 21:\n        return 699469\n    elif n == 22:\n        return 1398949\n    elif n == 23:\n        return 2797909\n    elif n == 24:\n        return 5595831\n    elif n == 25:\n        return 11191673\n    elif n == 26:\n        return 22383361\n    elif n == 27:\n        return 44766745\n    elif n == 28:\n        return 89533511\n    elif n == 29:\n        return 179067143\n    elif n == 30:\n        return 358134405\n    elif n == 31:\n        return 716268931\n    elif n == 32:\n        return 1432537985\n    elif n == 33:\n        return 2865076091\n    elif n == 34:\n        return 5730153307\n    elif n == 35:\n        return 11460306747\n    elif n == 36:\n        return 22920614645\n    elif n == 37:\n        return 45841230529\n    elif n == 38:\n        return 91682462339\n    elif n == 39:\n        return 183364925925\n    elif n == 40:\n        return 366729854129\n    elif n == 41:\n        return 733459719481\n    elif n == 42:\n        return 1466919450459\n    elif n == 43:\n        return 2933838913099\n    elif n == 44:\n        return 5867677849511\n    elif n == 45:\n        return 11735355719425\n    elif n == 46:\n        return 23470711560233\n    elif n == 47:\n        return 46941423243857\n    elif n == 48:\n        return 93882846609697\n    elif n == 49:\n        return 187765693329711\n    elif n == 50:\n        return 375531387902298\n    elif n == 51:\n        return 751062777816667\n    elif n == 52:\n        return 1502125"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num = 0\n    jacobsthal_count = 0\n    while jacobsthal_count < n:\n        jacobsthal_num += 1\n        if jacobsthal_num % 2 == 0:\n            jacobsthal_num += 1\n            jacobsthal_count += 1\n        else:\n            jacobsthal_count += 1\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3) + jacobsthal_num(n-4) + jacobsthal_num(n-5) + jacobsthal_num(n-6) + jacobsthal_num(n-7) + jacobsthal_num(n-8) + jacobsthal_num(n-9) + jacobsthal_num(n-10) + jacobsthal_num(n-11) + jacobsthal_num(n-12) + jacobsthal_num(n-13) + jacobsthal_num(n-14) + jacobsthal_num(n-15) + jacobsthal_num(n-16) + jacobsthal_num(n-17) + jacobsthal_num(n-18) + jacobsthal_num(n-19) + jacobsthal_num(n-20) + jacobsthal_num(n-21) + jacobsthal_num(n-22) + jacobsthal_num(n-23) + jacobsthal_num(n-24) + jacobsthal_num(n-25) + jacobsthal_num(n-26) + jacobsthal_num(n-27) + jacobsthal_num(n-28) + jacobsthal_num(n-29) + jacobsthal_num(n-30) + jacobsthal_num(n-31) + jacobsthal_num(n-32) + jacobsthal_num(n-33) + jacobsthal_num(n-34) + jacobsthal_num(n-35) + jacobsthal_num(n-36) + jacobsthal_num(n-37) + jacobsthal_num(n-38) + jacobsthal_num(n-39) + jacobsthal_num(n-40) + jacobsthal_num(n-41) + jacobsthal_num(n-42) + jacobsthal_num(n-43) + jacobsthal_num(n-44) + jacobsthal_num(n-45) + jacobsthal_num(n-46) + jacobsthal_num(n-47) + jacobsthal_num(n-48) + jacobsthal_num(n-49) + jacobsthal_num(n-50) + jacobsthal_num(n-51) + jacobsthal_num(n-52) + jacobsthal_num(n-53) + jacobsthal_num(n-54) + jacobsthal_num(n-55) + jacobsthal_num(n-56) + jacobsthal_num(n-57) + jacobsthal_num(n-58) + jacobsthal_num(n-59) + jacobsthal_num(n-60) + jacobsthal_num(n-61) + jacobsthal_num(n-62) + jacobsthal_num(n-63) + jacobsthal_num(n-64) + jacobsthal_num(n-65) + jacobsthal_num(n-66) + jacobsthal_num(n-67) + jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + (2 * jacobsthal_num(n-1))\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Jacobsthal number is\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 0\n        while n > 0:\n            j += 1\n            n -= 1\n        return 2 ** j - 1"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Create a dictionary to store count of each unique element in the list\n    count_dict = {}\n    for tup in test_list:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    # Sort the dictionary by key in ascending order\n    sorted_dict = dict(sorted(count_dict.items()))\n\n    # Initialize min_k to the smallest possible value\n    min_k_dict = {k: v for k, v in sorted_dict.items() if v >= K}\n\n    # Find the minimum value in the min_k dictionary\n    min_k_list = list(min_k_dict.keys())\n    min_k_val = min_k_list[0]\n\n    # Return the minimum k value\n    return min_k_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # Sort the test_list based on the first element of each tuple (minimum number)\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Create an empty list to store the K smallest tuples\n    k_smallest = []\n\n    # Iterate through the sorted list and add the smallest K tuples to k_smallest\n    for i in range(K):\n        k_smallest.append(sorted_list[i])\n\n    # Return the k_smallest list\n    return k_smallest"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes in a list of tuples and an integer K and returns the minimum K records from the list.\n\n    Example:\n    test_list = [(1, 2), (3, 4), (1, 5), (2, 6), (3, 7), (4, 8)]\n    K = 2\n    Output: (1, 2)\n\n    Time Complexity: O(n^2), where n is the length of the list.\n    Space Complexity: O(1), since we are not using any extra space.\n    '''\n    min_values = [float('inf')] * K\n    min_index = [0] * K\n    min_index_count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if test_list[i][0] < test_list[j][0] < test_list[k][0]:\n                    min_values[min_index_count] = test_list[i][1]\n                    min_index[min_index_count] = i\n                    min_index_count += 1\n                elif test_list[j][0] < test_list[i][0] < test_list[k][0]:\n                    min_values[min_index_count] = test_list[j][1]\n                    min_index[min_index_count] = j\n                    min_index_count += 1\n                elif test_list[k][0] < test_list[i][0] < test_list[j][0]:\n                    min_values[min_index_count] = test_list[k][1]\n                    min_index[min_index_count] = k\n                    min_index_count += 1\n\n    result = [(test_list[i][0], test_list[min_index[i]][1]) for i in range(min_index_count)]\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i][0] < min_list[0][0]:\n                del min_list[0]\n                min_list.append(test_list[i])\n            elif test_list[i][0] == min_list[0][0]:\n                if test_list[i][1] < min_list[0][1]:\n                    del min_list[0]\n                    min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    # function to find minimum k records from tuple list\n    def min_k_helper(lst, k):\n        min_heap = []\n        for i in range(k):\n            min_heap.append(lst[i])\n            heapq.heapify(min_heap)\n        min_set = set(min_heap)\n        for i in range(k, len(lst)):\n            if lst[i] not in min_set:\n                min_set.add(lst[i])\n                heapq.heappushpop(min_heap, lst[i])\n            elif lst[i] in min_set:\n                min_heap.remove(lst[i])\n                min_set.remove(lst[i])\n                heapq.heappush(min_heap, lst[i])\n                heapq.heappop(min_heap)\n        return min_set\n\n    # test cases\n    test_list1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    test_list2 = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    test_list3 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\n    test_list4 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]\n\n    # test case 1\n    print(\"Test case 1: \", min_k_helper(test_list1, 2))\n    # expected output: {2, 7}\n\n    # test case 2\n    print(\"Test case 2: \", min_k_helper(test_list2, 2))\n    # expected output: {2, 7}\n\n    # test case 3\n    print(\"Test case 3: \", min_k_helper(test_list3, 3))\n    # expected output: {2, 7, 11}\n\n    # test case 4\n    print(\"Test case 4: \", min_k_helper(test_list4, 4))\n    # expected output: {2, 7, 11, 15}"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    # Sort the list in descending order of the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0], reverse=True)\n\n    # Initialize the minimum count as the maximum value of integers\n    min_count = float('inf')\n\n    # Initialize the minimum count as 0\n    count = 0\n\n    # Iterate through the sorted list\n    for i in range(K):\n        # If the minimum count is greater than the current count, update the minimum count and count\n        if min_count > count:\n            min_count = count\n            count = 1\n\n        # Increment the count\n        count += 1\n\n    # Return the minimum count\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum K records from the list.\n\n    Args:\n        test_list: A list of tuples.\n        K: An integer representing the number of records to be returned.\n\n    Returns:\n        A list of tuples representing the minimum K records from the list.\n    \"\"\"\n    # create a set to store unique values from the list\n    unique_values = set(item[1] for item in test_list)\n    min_set = set()\n\n    # iterate through unique values to find the minimum K records\n    for value in unique_values:\n        min_set.add(next(item for item in test_list if item[1] == value))\n\n    # convert the set to a list of tuples and return the result\n    return list(min_set)[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if len(test_list) < K:\n        return \"There are less than K records in the list\"\n\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples based on the second element\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize minimum counter and minimum value\n    min_count = 0\n    min_val = test_list[0][1]\n    \n    # Iterate over the sorted list\n    for i in range(len(test_list)):\n        # If the minimum counter is less than K, increment the counter\n        if min_count < K:\n            min_count += 1\n        else:\n            # If the current element is smaller than the minimum value, update the minimum value and reset the counter\n            if test_list[i][1] < min_val:\n                min_val = test_list[i][1]\n                min_count = 1\n    \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    min_val = test_list[0][1]\n    min_index = 0\n    min_count = 1\n    \n    for i in range(1, len(test_list)):\n        if test_list[i][1] == min_val:\n            min_count += 1\n        else:\n            min_count = 1\n            min_val = test_list[i][1]\n            min_index = i\n            \n        if min_count == K:\n            return min_val\n            \n    return min_val"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create a dictionary to store the common elements\n    common = {}\n    for i in range(len(l1)):\n        # check if the element exists in all lists\n        if l1[i] in l2 and l1[i] in l3:\n            # check if the element already exists in the dictionary\n            if l1[i] not in common:\n                # if not, add it to the dictionary with an empty list\n                common[l1[i]] = []\n            # add the index to the list of common elements\n            common[l1[i]].append(i)\n    # return the dictionary as a list of lists\n    return list(common.values())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i] and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty dictionary to store common elements\n    common = {}\n    # iterate through each element in l1\n    for i in l1:\n        # check if the element is in l2 and l3 at the same index\n        if l2[i] == l3[i]:\n            # if the element is common, add it to the dictionary with its index as the key\n            common[i] = l1[i]\n    # create a list of common elements and return it\n    return list(common.keys())\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    # Iterate over the indices of each list\n    for i in range(len(l1)):\n        # If the element at the current index is present in both lists, add it to the common_elements list\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    This function finds the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least two elements.\")\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest!= float('inf') else None"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List should have at least 2 elements\"\n    elif len(numbers) == 2:\n        return \"List should have at least 2 elements\"\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(?:b)*')\n    result = pattern.match(text)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r'a\\b*\\b*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    return re.match(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*(?=[ab])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=.*b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)+'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    # Helper function to check if a string is a reverse of another string\n    def is_reverse(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        i = j = 0\n        while i < len(str1) and j < len(str2):\n            if str1[i] == str2[j]:\n                i += 1\n                j += 1\n            elif str1[i] < str2[j]:\n                i += 1\n            else:\n                j += 1\n        return i == len(str1) and j == len(str2)\n\n    # Helper function to count the number of reverse pairs in a list of strings\n    def count_reverse_pairs_in_list(lst):\n        count = 0\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if is_reverse(lst[i], lst[j]):\n                    count += 1\n        return count\n\n    # Count the number of reverse pairs in the list\n    return count_reverse_pairs_in_list(test_list)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Create a dictionary to store the count of each string\n    string_count = {}\n\n    # Iterate through the given list of strings\n    for string in test_list:\n        # Reverse the string and check if it exists in the dictionary\n        reverse_string = string[::-1]\n        if reverse_string in string_count:\n            # If it does, increment the count of the original string\n            string_count[string] += 1\n        else:\n            # If it doesn't, add the original string to the dictionary with a count of 1\n            string_count[string] = 1\n\n    # Initialize the count of reverse pairs to 0\n    reverse_pair_count = 0\n\n    # Iterate through the dictionary to count the reverse pairs\n    for count in string_count.values():\n        # If the count is greater than 1, increment the reverse pair count\n        if count > 1:\n            reverse_pair_count += count\n\n    return reverse_pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for string in test_list:\n        if len(string) > 1:\n            for i in range(len(string)):\n                for j in range(i+1, len(string)):\n                    if string[i:j] == string[j:i][::-1]:\n                        count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n\n    # Initialize a dictionary to store the count of reverse strings\n    count_dict = {}\n\n    # Iterate through the list of strings\n    for string in test_list:\n\n        # Reverse the string and check if it is already in the dictionary\n        reverse_string = string[::-1]\n        if reverse_string in count_dict:\n            # If it is, increment the count of the reverse string\n            count_dict[reverse_string] += 1\n        else:\n            # If not, add the reverse string to the dictionary with a count of 1\n            count_dict[reverse_string] = 1\n\n    # Iterate through the dictionary and count the pairs of reverse strings\n    pairs = 0\n    for value in count_dict.values():\n        pairs += value * (value - 1) // 2\n\n    return pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    \n    for sublist in list1:\n        if tuple(sublist) not in sublist_count:\n            sublist_count[tuple(sublist)] = list1.count(sublist)\n    \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        count[sublist_tuple] = count.get(sublist_tuple, 0) + 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the number of occurences of each tuple\n    count_dict = {}\n    # loop through each list in the input list\n    for sublist in list1:\n        # convert the list to a tuple and check if it exists in the count_dict\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            # increment the count by 1\n            count_dict[tuple_sublist] += 1\n        else:\n            # add the tuple and its count to the count_dict\n            count_dict[tuple_sublist] = 1\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple not in sublist_counts:\n            sublist_counts[sublist_tuple] = 0\n        sublist_counts[sublist_tuple] += 1\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_dict:\n                sublist_dict[sublist] = 1\n            else:\n                sublist_dict[sublist] += 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert list to a set to remove duplicates\n    set_list1 = set(list1)\n    # Convert set back to a list\n    list1_unique = list(set_list1)\n    # Create a dictionary to store the count of each list\n    count_dict = {}\n    # Iterate over each list in the original list\n    for lst in list1_unique:\n        # Count the number of occurencies of each list in the original list\n        count = list1.count(lst)\n        # Store the count in the dictionary\n        count_dict[lst] = count\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    sublist_count = {}\n    # Iterate over each element of the list\n    for elem in list1:\n        # Convert the element to a tuple\n        elem_tuple = tuple(elem)\n        # Check if the tuple is already in the dictionary\n        if elem_tuple in sublist_count:\n            # Increment the count for the tuple\n            sublist_count[elem_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            sublist_count[elem_tuple] = 1\n    # Return the dictionary\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of sublists\n    counts = {}\n\n    # Loop through each element in the list\n    for elem in list1:\n        # Convert the element to a tuple\n        tuple_elem = tuple(elem)\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tuple_elem not in counts:\n            counts[tuple_elem] = 1\n        # Otherwise, increment the count of the tuple by 1\n        else:\n            counts[tuple_elem] += 1\n\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    num_parts = num.split('.')\n    if len(num_parts)!= 2:\n        return False\n    int_part, dec_part = num_parts\n    if len(int_part) > 10:\n        return False\n    for digit in int_part:\n        if not digit.isdigit():\n            return False\n    for digit in dec_part:\n        if not digit.isdigit():\n            return False\n    if '.' not in dec_part:\n        return False\n    dec_part = dec_part.split('.')\n    if len(dec_part)!= 2:\n        return False\n    int_part, dec_part = dec_part\n    if len(int_part) > 2:\n        return False\n    for digit in int_part:\n        if not digit.isdigit():\n            return False\n    if len(dec_part) > 2:\n        return False\n    for digit in dec_part:\n        if not digit.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts)!= 2:\n            return False\n        first_part, second_part = parts\n        if len(first_part) > 15 or len(second_part) > 15:\n            return False\n        for digit in first_part:\n            if not digit.isdigit() or int(digit) > 9:\n                return False\n        for digit in second_part:\n            if not digit.isdigit() or int(digit) > 9:\n                return False\n        if int(first_part) > 10**9 or int(second_part) > 10**9:\n            return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer() or abs(num) < 1:\n            return True\n    except ValueError:\n        pass\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer() and num.as_integer_ratio()[1] <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if abs(float_num - round(float_num, 2)) < 0.0001:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_str = str(num)\n    if '.' not in num_str:\n        return False\n    if num_str.split('.')[1].startswith(('0', '0.')):\n        return False\n    if len(num_str.split('.')[1]) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'\\d+\\.\\d+'\n    return bool(re.match(decimal_pattern, num))"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num and num.count('.') <= 1:\n            parts = num.split('.')\n            for part in parts:\n                if len(part) > 2 or not part.isdigit():\n                    return False\n                elif len(part) > 1 and int(part) > 9:\n                    return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # remove any non-numeric characters from the string\n    num = ''.join(filter(str.isdigit, num))\n\n    # check if the string has a precision of 2\n    if len(num) == 2:\n        # check if the string contains any non-numeric characters\n        if not num.isdigit():\n            # if all characters are numeric, return True\n            return True\n\n    # if the string does not meet the precision, return False\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i])!= len(arr) - 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    \n    # iterate over the array and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n    \n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    If the list contains only one distinct element, it returns True, otherwise it returns False.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set of the unique elements in the list\n    unique_set = set(arr)\n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # convert the list to a set to remove duplicates\n    unique_set = set(arr)\n\n    # check if the length of the set is equal to 1, which means there is only one distinct element in the list\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum3, \"has 30 days.\")\n    else:\n        print(monthnum3, \"does not have 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid Month\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the month number is valid\n    if monthnum3 <= 0 or monthnum3 > 12:\n        return False\n\n    # Check if the month number contains 30 days\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 % 2 == 0:\n        return False\n    elif monthnum3 % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13) and monthnum not in [4, 6, 9, 11]:\n        if monthnum == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                days_in_month[1] = 29\n            else:\n                days_in_month[1] = 28\n        return days_in_month[monthnum - 1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function checks whether a given month number has 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if 1 <= monthnum <= 12:\n        if monthnum % 2 == 0:\n            if monthnum % 4 == 0:\n                if monthnum % 100 == 0:\n                    if monthnum % 400 == 0:\n                        return True\n                    else:\n                        return False\n                else:\n                    return True\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check if the month number is valid\n    if monthnum3 > 0 and monthnum3 <= 12:\n        # check if the month number contains 30 days\n        if monthnum3 % 2 == 0:\n            print(monthnum3, 'contains 30 days.')\n        else:\n            print(monthnum3, 'does not contain 30 days.')\n    else:\n        print('Invalid month number. Months are given as number from 1 to 12.')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference found so far\n    min_diff = float('inf')\n\n    # Traverse the sorted array and compute the minimum difference\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in an array and its length n, and returns the minimum difference between any two elements in the array.\n    The function uses a hash table to store the frequency of each element in the array.\n    Then, the function finds the minimum difference between any two elements by iterating over all possible pairs of elements and comparing their frequencies.\n    '''\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff in freq and freq[diff] > 0:\n                min_diff = min(min_diff, diff)\n                freq[diff] -= 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n\n    # Traverse the sorted array\n    for i in range(n-1):\n        # Calculate the difference between current element and next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the calculated difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (list): A list of integers.\n        n (int): The length of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers, one at the beginning and the other at the end of the array\n    left = 0\n    right = n - 1\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Iterate through the array and update the minimum difference\n    while left < right:\n        diff = arr[right] - arr[left]\n\n        if diff < min_diff:\n            min_diff = diff\n\n        # Move the pointers towards the center of the array\n        if diff > 0:\n            left += 1\n        else:\n            right -= 1\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize min_diff to the maximum integer value\n    min_diff = float('inf')\n    \n    # Iterate through the array\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n        \n        # Update min_diff if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n\n    for i in range(2, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n    # Traverse through the sorted array\n    for i in range(n-1):\n        # Calculate the difference between current and next elements\n        diff = arr[i+1] - arr[i]\n        # Update the minimum difference if the current difference is smaller than the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (list): The given array of elements.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n    \"\"\"\n    # Initialize min_diff with infinity\n    min_diff = float('inf')\n    # Initialize swapped to False\n    swapped = False\n    # Traverse through all pairs of elements in the array\n    for i in range(n):\n        # Traverse through all elements after the current element\n        for j in range(i+1, n):\n            # Check if the difference between the current and next elements is less than min_diff\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                # Update min_diff if the difference is smaller\n                min_diff = diff\n                # Swap the current and next elements if the difference is minimum\n                swapped = True\n    # If swapped is True, then the minimum difference was found\n    if swapped:\n        return min_diff\n    else:\n        # If the algorithm hasn't found any minimum difference, then return infinity\n        return float('inf')"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as inputs and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort() # Sort the array in ascending order\n    diff = float('inf') # Initialize the minimum difference variable as infinity\n    for i in range(n-1): # Iterate over the array elements from 0 to n-2\n        diff = min(diff, arr[i+1] - arr[i]) # Update the minimum difference if the current element is greater than the previous element\n    return diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 1:\n        return 1\n    \n    polite = 1\n    for i in range(1, int(math.log(n, 5)) + 1):\n        polite *= 5\n    \n    for i in range(int(math.log(n, 5)) + 1, n):\n        if n % i == 0:\n            polite *= 2\n            \n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    if n % 2 == 0:\n        return \"Invalid input. Please enter an odd number.\"\n    else:\n        i = 1\n        polite = 1\n        while i <= n:\n            polite = 10 * polite + i\n            i += 2\n        return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return is_polite(n-1) + 2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n < 1:\n        return None\n\n    polite_count = 0\n    polite_number = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            polite_count += 1\n            polite_number = i\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return math.ceil(math.log2(n)) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    \"\"\"\n    # function to check if a number is polite\n    def is_polite(n):\n        \"\"\"\n        This function takes an integer n as input and returns True if n is a polite number and False otherwise.\n        \"\"\"\n        # check if the number is odd\n        if n % 2 == 0:\n            return False\n        \n        # check if the number is divisible by 3\n        if n % 3 == 0:\n            return True\n        \n        # check if the number is divisible by 5\n        if n % 5 == 0:\n            return True\n        \n        # check if the number is divisible by 7\n        if n % 7 == 0:\n            return True\n        \n        # check if the number is divisible by 11\n        if n % 11 == 0:\n            return True\n        \n        # check if the number is divisible by 13\n        if n % 13 == 0:\n            return True\n        \n        # check if the number is divisible by 17\n        if n % 17 == 0:\n            return True\n        \n        # check if the number is divisible by 19\n        if n % 19 == 0:\n            return True\n        \n        # check if the number is divisible by 23\n        if n % 23 == 0:\n            return True\n        \n        # check if the number is divisible by 29\n        if n % 29 == 0:\n            return True\n        \n        # check if the number is divisible by 31\n        if n % 31 == 0:\n            return True\n        \n        # check if the number is divisible by 37\n        if n % 37 == 0:\n            return True\n        \n        # check if the number is divisible by 41\n        if n % 41 == 0:\n            return True\n        \n        # check if the number is divisible by 43\n        if n % 43 == 0:\n            return True\n        \n        # check if the number is divisible by 47\n        if n % 47 == 0:\n            return True\n        \n        # check if the number is divisible by 53\n        if n % 53 == 0:\n            return True\n        \n        # check if the number is divisible by 59\n        if n % 59 == 0:\n            return True\n        \n        # check if the number is divisible by 61\n        if n % 61 == 0:\n            return True\n        \n        # check if the number is divisible by 67\n        if n % 67 == 0:\n            return True\n        \n        # check if the number is divisible by 71\n        if n % 71 == 0:\n            return True\n        \n        # check if the number is divisible by 73\n        if n % 73 == 0:\n            return True\n        \n        # check if the number is divisible by 79\n        if n % 79 == 0:\n            return True\n        \n        # check if the number is divisible by 83\n        if n % 83 == 0:\n            return True\n        \n        # check if the number is divisible by 89\n        if n % 89 == 0:\n            return True\n        \n        # check if the number is divisible by 97\n        if n % 97 == 0:\n            return True\n        \n        # check if the number is divisible by 101\n        if n % 101 == 0:\n            return True\n        \n        # check if the number is divisible by 103\n        if n % 103 == 0:\n            return True\n        \n        # check if the number is divisible by 107\n        if n % 107 == 0:\n            return True\n        \n        # check if the number is divisible by 109\n        if n % 109 == 0:\n            return True\n        \n        # check if the number is divisible by 113\n        if n % 113 == 0:\n            return True\n        \n        # check if the number is divisible by 127\n        if n % 127 == 0:\n            return True\n        \n        # check if the number is divisible by 131\n        if n % 131 == 0:\n            return True\n        \n        # check if the number is divisible by 137\n        if n % 137 == 0:\n            return True\n        \n        # check if the number is divisible by 139\n        if n % 139 == 0:\n            return True\n        \n        # check"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns True if the nth polite number exists, and False otherwise.\n    \"\"\"\n    # We use the fact that the nth polite number is the sum of the nth prime and the nth even prime.\n    # We can use the fact that the nth prime is the sum of the first n primes.\n    # Therefore, we first compute the nth prime by summing the first n primes.\n    # Then we compute the nth even prime by summing the first n even primes.\n    # Finally, we return True if the nth polite number is equal to the sum of the nth prime and the nth even prime,\n    # and False otherwise.\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    even_primes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]\n    nth_prime = sum(primes[:n])\n    nth_even_prime = sum(even_primes[:n])\n    return nth_polite == nth_prime + nth_even_prime"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_polite(n):\n    for i in range(1, 10000):\n        digits = list(str(i))\n        digits_sum = sum(int(digit) for digit in digits)\n        if digits_sum < 2 * n:\n            return True\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n and returns the nth polite number.\n    '''\n\n    # if n is already a polite number, return it\n    if n % 2 == 0:\n        return 2 * (2 * n + 1)\n\n    # if n is odd, increment n by 1 and check if it's a polite number\n    n += 1\n    while n % 2 == 0:\n        n += 1\n\n    # if n is still even, return it as it is a polite number\n    if n % 8 == 0:\n        return n\n\n    # if n is still odd, return the next odd polite number\n    while n % 8!= 0:\n        n += 1\n\n    return n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initializing the value of a and b\n    a = 1\n    b = 2\n\n    # Loop to find the nth polite number\n    for i in range(n):\n        # Calculating the next number\n        c = a + b\n\n        # If c is greater than 1000000, return True\n        if c > 1000000:\n            return True\n\n        # Update a and b for the next iteration\n        a = b\n        b = c\n\n    # If the loop completes without finding the nth polite number, return False\n    return False"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the count of pairs whose sum is equal to the target sum.\n    '''\n\n    count = 0\n\n    # Loop through all possible pairs of elements in the list\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n\n            # If the sum of the two elements is equal to the target sum, increment the count\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    n = len(arr)\n    \n    # Sort the list in ascending order\n    arr.sort()\n    \n    # Iterate through the sorted list\n    for i in range(n-1):\n        j = i+1\n        while j < n and arr[j] + arr[i] <= sum:\n            j += 1\n            \n        if j-i == 1: # If there is only one pair that adds up to sum\n            pairs_count += 1\n            \n        if j == n: # If there is no pair that adds up to sum\n            break\n    \n    return pairs_count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference as a new list.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # create an empty list to store the difference\n    diff = []\n    # loop through the lists\n    for i in li1:\n        # check if the element is present in li2\n        if i not in li2:\n            # if it is not, add it to the diff list\n            diff.append(i)\n    # return the diff list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists as inputs and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a set of the elements of list2\n    set2 = set(li2)\n    # create a set of the elements of list1\n    set1 = set(li1)\n    # find the intersection of the two sets\n    diff_set = set1.intersection(set2)\n    # convert the set to a list and return it\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initializing a variable to store the sum of fourth power of odd numbers\n    sum = 0\n    # iterating n times\n    for i in range(1, n+1):\n        # calculating the fourth power of the i-th odd number\n        fourth_power = i**4\n        # adding the fourth power to the sum\n        sum += fourth_power\n    # returning the sum of fourth power of odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(n+1, 2*n+1, 2):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(n):\n        num = i + 1\n        fourth_power = num ** 4\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # create a stack\n    stack = deque()\n\n    # loop through each character in the expression\n    for char in exp:\n\n        # if the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n\n        # if the character is a closing parenthesis, pop from the stack until an opening parenthesis is found, and check if the number of opening parenthesis is equal to the number of closing parenthesis\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    # if the loop completes without finding any unbalanced parenthesis, the expression is balanced\n    return stack == []"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', '[', '{']:\n                if char!= top:\n                    return False\n            elif char not in [')', ']', '}']:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    This function takes an expression as input and checks if it is balanced or not.\n    It uses a stack to keep track of the opening parentheses. If an opening\n    parentheses is encountered, it is pushed onto the stack. If a closing\n    parentheses is encountered, the stack is checked to see if the opening\n    parentheses are present. If they are, then the opening parentheses are\n    popped from the stack. If not, then the expression is not balanced.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char in '()':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    # Traverse through the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, check if its corresponding opening parenthesis is present in the stack\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    # If all characters have been processed and there are no unmatched opening parenthesis, then the expression is balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            if len(stack) == 0:\n                stack.append(char)\n            else:\n                top = stack.pop()\n                if char == ')' and top!= '(':\n                    return False\n        else:\n            stack.append(char)\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char.isspace():\n            continue\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char!= ')' and char!= ']' and char!= '}':\n                return False\n            if char == ')' and top_char!= '(':\n                return False\n            if char == ']' and top_char!= '[':\n                return False\n            if char == '}' and top_char!= '{':\n                return False\n            \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack to store opening parenthesis\n    stack = deque()\n    # loop through each character in the expression\n    for char in exp:\n        # if the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # if the character is a closing parenthesis, check if there is an opening parenthesis on top of the stack\n        elif char == ')':\n            if not stack:  # if the stack is empty, the expression is not balanced\n                return False\n            # if the stack is not empty, pop the top element and check if it matches the closing parenthesis\n            else:\n                stack.pop()\n    # if the loop completes without finding an unbalanced closing parenthesis, the expression is balanced\n    return True if not stack else False"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into words\n    result = []\n    for word in words:\n        if len(word)!= K: # check if the length of the word is not equal to K\n            result.append(word) # if not, append it to the result list\n    return''.join(result) # join the result list into a string with spaces between the words"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create an empty list to store the words without length K\n    result = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, append it to the result list\n        if len(word)!= K:\n            result.append(word)\n    \n    # Join the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            words.pop(i)\n        else:\n            i += 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()  # Split the string into a list of words\n    new_words = []\n    for word in words:\n        if len(word)!= K:  # If the length of the word is not equal to K, add it to the new list of words\n            new_words.append(word)\n    return''.join(new_words)  # Join the new list of words into a string with spaces between them"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with length less than K\n    less_than_K = []\n    # Iterate through the words\n    for word in words:\n        # Check if the length of the word is less than K\n        if len(word) < K:\n            # If it is, append it to the list of words with length less than K\n            less_than_K.append(word)\n        # If the length of the word is greater than or equal to K, remove it from the list of words\n        else:\n            words.remove(word)\n    # Join the list of words with length less than K back into a string and return it\n    return''.join(less_than_K)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create a list to store the words without length K\n    new_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, append it to the new list\n        if len(word)!= K:\n            new_words.append(word)\n    \n    # Join the new list of words into a string\n    new_str =''.join(new_words)\n    \n    # Return the new string with no length K words\n    return new_str"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    \n    if matches:\n        for match in matches:\n            print(\"Occurrence:\", match.start())\n            print(\"Position:\", match.start())\n    else:\n        print(\"No match found!\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except re.error as e:\n        print(e)\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Matches:\", matches)\n        for match in matches:\n            print(\"Substring found at position:\", text.find(match))\n    else:\n        print(\"No matches found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if len(result) == 0:\n        return None\n    else:\n        for i in range(len(result)):\n            print(f\"Substring found at position {i+1}: {result[i]}\")\n        print(f\"Total number of substrings found: {len(result)}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expression to match the pattern in the text\n    result = re.search(pattern, text)\n    # Check if there is a match\n    if result:\n        # Return the match and its position\n        return result.group(), result.start(), result.end()\n    else:\n        # Return None if there is no match\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print(\"The substring '{}' appears {} times at position {}\".format(match.group(), match.span()[0], match.span()[1]))\n        return (match.group(), match.span()[0], match.span()[1])\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            odd_count += 1\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # Loop through the list and check if the index is odd\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            # If the index is odd, check if the number at that index is odd\n            if nums[i] % 2!= 0:\n                # If the number is odd, return True\n                return True\n    \n    # If no odd index was found, return False\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2!= 0:\n            odd_count += 1\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if i % 2 == 1 and nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i] in vowels and test_str[j] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] not in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(test_str)):\n        if i > 0:\n            prev_char = test_str[i-1]\n            if prev_char.lower() in vowels:\n                count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # create a dictionary to store the vowels and their indices\n    vowels = {'a': 0, 'e': 1, 'i': 2, 'o': 3, 'u': 4}\n    \n    # initialize the count variable to 0\n    count = 0\n    \n    # loop through each character in the string\n    for i in range(len(test_str)-1):\n        # if the character is a vowel and its neighbors are also vowels\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            # increment the count\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    prev_char = ''\n    \n    for char in test_str:\n        if char in vowels and char!= prev_char:\n            count += 1\n        prev_char = char\n        \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Convert the set to a list and sum its elements\n    sum_list = list(unique_set)\n    sum_sum = sum(sum_list)\n\n    return sum_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the indices of each element in the array\n    indices = {}\n    \n    # iterate through the array and store the indices of each element in the dictionary\n    for i in range(len(arr)):\n        if arr[i] not in indices:\n            indices[arr[i]] = [i]\n        else:\n            indices[arr[i]].append(i)\n    \n    # iterate through the array and add up the values of non-repeated elements\n    total = 0\n    for num in arr:\n        if num not in indices:\n            total += num\n    \n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    sum_arr = 0\n\n    for num in unique_arr:\n        sum_arr += num\n\n    return sum_arr"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Initialize a sum variable to 0\n    sum_var = 0\n    # Iterate over the unique elements in the set\n    for i in unique_set:\n        # Add the element to the sum variable\n        sum_var += i\n    # Return the sum variable\n    return sum_var"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # convert the list to set to remove duplicates\n    unique_elements = set(arr)\n    # calculate the sum of unique elements\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add unique elements to the set\n    for elem in arr:\n        if elem not in unique_set:\n            unique_set.add(elem)\n\n    # Return the sum of the unique elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    # iterate through the list and update the frequency of each element\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    # find the sum of non-repeated elements\n    non_repeated_sum = 0\n    for i in range(n):\n        if freq[arr[i]] == 1:\n            non_repeated_sum += arr[i]\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # Convert the set to a list and sort it\n    unique_list = sorted(list(unique_set))\n    # Initialize the sum variable to zero\n    sum_var = 0\n    # Iterate through the unique list and add the elements to the sum variable\n    for num in unique_list:\n        sum_var += num\n    # Return the sum variable\n    return sum_var"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # convert the set to a list and calculate the sum of non-repeated elements\n    sum_of_non_repeated_elements = sum(unique_set)\n\n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sum(unique_elements)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Returns a list of sublists, where each sublist contains consecutive duplicates of the original list elements.\n    \"\"\"\n    return [list(group) for key, group in groupby(sorted(lst)) if key == lst[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(sorted(lst), lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item in list1:\n        if item in result:\n            continue\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item, group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = [(k, list(g)) for k, g in groupby(list1) if k]\n    return [list(group) for group in groups]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(map(list, groupby(lst)))\n"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def consecutive_duplicates(iterable):\n        return groupby(iterable, key=lambda x: x)\n\n    result = []\n    for key, group in consecutive_duplicates(list1):\n        if len(list(group)) > 1:\n            result.extend(list(group))\n        else:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists_dict = {}\n    for lst in list1:\n        if isinstance(lst, list):\n            lst = tuple(lst)\n        if lst in sublists_dict:\n            sublists_dict[lst] += 1\n        else:\n            sublists_dict[lst] = 1\n    return sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    # Create a dictionary to store the count of each sublist\n    counts = {}\n    \n    # Loop over each sublist in the input list\n    for sublist in lst:\n        # Convert the sublist to a tuple and add it to the dictionary\n        key = tuple(sublist)\n        counts[key] = counts.get(key, 0) + 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    # Loop through each item in the list\n    for item in list1:\n        # Check if the item is already in the dictionary\n        if item in result:\n            # If it is, increment the count\n            result[item] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            result[item] = 1\n    # Return the dictionary with the count of each unique list\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the list to a tuple and count the occurrences\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n            \n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique sublists in a list of lists.\n    \"\"\"\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist not in count_dict:\n            count_dict[tuple_sublist] = 1\n        else:\n            count_dict[tuple_sublist] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    sublist_count = {}\n    # loop through each element in the list\n    for elem in list1:\n        # check if the element is a list\n        if isinstance(elem, list):\n            # if it is, convert it to a tuple and add it to the dictionary\n            sublist_count[tuple(elem)] = sublist_count.get(tuple(elem), 0) + 1\n    # return the dictionary\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of unique sublists\n    sublist_count = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple and check if it's already in the dictionary\n        if (tuple(element),) in sublist_count:\n            # Increment the count of the tuple\n            sublist_count[(tuple(element),)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            sublist_count[(tuple(element),)] = 1\n    \n    # Return the dictionary of unique sublists and their counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in unique_sublists_dict:\n            unique_sublists_dict[tuple_sublist] += 1\n        else:\n            unique_sublists_dict[tuple_sublist] = 1\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum(test_list)\n    unique_tuples = set(tuple(sorted(t)) for t in test_list)\n    all_combinations = []\n    \n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(unique_tuples, i):\n            sub_sum = sum(comb)\n            if sub_sum == total_sum:\n                all_combinations.append(tuple(comb))\n    \n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            for k in range(j + 1, len(test_list)):\n                if (sum(test_list[i]), sum(test_list[j]), sum(test_list[k])) not in combinations(test_list, 3):\n                    print(test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for combo in combinations(test_list[i], j):\n                if sum(combo) == sum(test_list[j]):\n                    result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def helper(lst, target_sum, index, combinations):\n        if index == len(lst):\n            return\n        current_sum = sum(lst[index:])\n        if current_sum == target_sum:\n            combinations.append(tuple(lst[index:]))\n        elif current_sum < target_sum:\n            helper(lst, target_sum, index+1, combinations)\n\n    combinations = []\n    helper(test_list, sum(test_list), 0, combinations)\n    return combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Function to find the sum of a tuple\n    def sum_of_tuple(t):\n        return sum(t)\n\n    # Filter the given tuple list to only include tuples with 2 or more elements\n    filtered_list = [t for t in test_list if len(t) > 1]\n\n    # Initialize an empty dictionary to store the combinations of sums\n    combinations_dict = {}\n\n    # Loop through all possible combinations of sums\n    for i in range(len(filtered_list)):\n        for j in range(i+1, len(filtered_list)):\n            # Find the sum of the first tuple\n            s1 = sum_of_tuple(filtered_list[i])\n            # Find the sum of the second tuple\n            s2 = sum_of_tuple(filtered_list[j])\n            # Check if the sum is already in the dictionary\n            if (s1, s2) in combinations_dict:\n                # If it is, add the tuples to the existing combination\n                combinations_dict[(s1, s2)].append((filtered_list[i], filtered_list[j]))\n            else:\n                # If it's not, create a new combination with the two tuples\n                combinations_dict[(s1, s2)] = [(filtered_list[i], filtered_list[j])]\n\n    # Return the dictionary of combinations\n    return combinations_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # find the sum of each tuple in the list\n    sum_list = [sum(tuple) for tuple in test_list]\n    # find all possible combinations of sums\n    combinations_list = list(combinations(sum_list, len(sum_list)))\n    # filter out combinations that don't add up to zero\n    valid_combinations_list = [combination for combination in combinations_list if sum(combination) == 0]\n    return valid_combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns all combinations of sums with tuples in the given list.\n    '''\n    comb = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            comb.append(tuple(test_list[i][:j]))\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of tuples with unique elements\n    tuples = list(set([tuple(sorted(set(tuple_))) for tuple_ in test_list]))\n\n    # create a list of tuples with unique elements and their sum\n    sums = [(x, y) for x in tuples for y in tuples if x[0]!= y[0]]\n\n    # find all combinations of tuples with a sum of a given value\n    def find_combinations_helper(sum, current, used_values, result):\n        if sum == 0 and len(result) > 0:\n            return\n\n        if sum == 0:\n            return\n\n        for i, t in enumerate(used_values):\n            if t in current:\n                continue\n\n            if i == len(used_values) - 1:\n                result.append(current[:])\n            else:\n                find_combinations_helper(sum - t[0], current + [t], used_values[:i] + used_values[i+1:], result)\n\n    for s in sums:\n        result = []\n        find_combinations_helper(s[0], [s], tuples, result)\n        print(result)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i:j+1]) == total_sum - sum(test_list[j:k+1]) or sum(test_list[i:k+1]) == total_sum - sum(test_list[j:j+1]):\n                    print(tuple(test_list[i:j+1]))\n                    print(tuple(test_list[j:k+1]))\n                    print(tuple(test_list[i:k+1]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                result.append(tuple(combo))\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return \"Not even\"\n    if count == 1:\n        return \"Even\"\n    else:\n        return \"Not even\"\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Using the math module\n    def sum_of_divisors(n):\n        divisors = []\n        divisor = 1\n        while divisor <= n:\n            if n % divisor == 0:\n                divisors.append(divisor)\n            divisor += 1\n        return divisors\n\n    def count_divisors(n):\n        return len(sum_of_divisors(n))\n\n    # Calculating the sum of divisors\n    sum_of_divisors = count_divisors(n)\n\n    # Checking the count of divisors\n    if sum_of_divisors % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    \n    # Calculate the number of divisors using math.factorial() function\n    count_divisors = math.factorial(n)\n    \n    # Check whether the count of divisors is even or odd\n    if count_divisors % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. \n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even, False otherwise.\n    '''\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        count = 0\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n                if count > 1:\n                    return False\n        return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return False\n    if count == 0 or count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number n. \n    It takes an integer n as input and returns a tuple of two integers (count, divisor).\n    '''\n\n    count = 0\n    divisor = 2\n    \n    while divisor <= n:\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    \n    return (count, divisor)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += arr[j-1] - arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (j-i)%2==1: # check if odd length\n                sum += arr[j] - arr[i] # add the difference between the last element of the subarray and the first element of the subarray\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    max_sum = 0\n    for i in range(n):\n        if i == 0 or arr[i] % 2!= 0:\n            # check for odd length subarray\n            curr_sum = arr[i]\n            count = 1\n            for j in range(i + 1, n):\n                curr_sum += arr[j]\n                count += 1\n                if count == 3:\n                    # check for max sum\n                    if curr_sum > max_sum:\n                        max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    odd_sum = 0\n    for i in range(1, n, 2):\n        odd_sum += arr[i]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Initialize a flag variable to True\n        flag = True\n\n        # Iterate through each subsequent element in the array\n        for j in range(i, len(arr)):\n            # Check if the length of the current subarray is odd\n            if j-i+1 % 2 == 1:\n                # Add the sum of the current subarray to the sum variable\n                sum += sum_subarray(arr, i, j)\n                # Set the flag variable to False to break out of the inner loop\n                flag = False\n                # Exit the inner loop after adding the current subarray to the sum variable\n                break\n\n        # If the flag variable is still True after adding all subarrays to the sum variable, the current subarray is not odd\n        if flag:\n            # Add the sum of the current subarray to the sum variable\n            sum += sum_subarray(arr, i, len(arr)-1)\n\n    # Return the sum of all odd length subarrays\n    return sum\n\ndef sum_subarray(arr, start, end):\n    '''\n    Helper function to calculate the sum of a subarray.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through each element in the subarray\n    for i in range(start, end+1):\n        # Add the current element to the sum\n        sum += arr[i]\n\n    # Return the sum of the subarray\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 % 2!= 0:\n                sum += arr[j]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    sum_odd_len = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            count += 1\n        if count > 0:\n            sum_odd_len += arr[i]\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(1, n):\n        for j in range(i, n, i):\n            sub_sum = sum(arr[j:j+2])\n            total_sum += sub_sum\n            \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    :param arr: list of integers\n    :return: the sum of all odd length subarrays in the input list\n    \"\"\"\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Initialize left and right pointers for the current subarray\n    left = 0\n    right = 0\n\n    # Initialize current subarray length\n    subarray_length = 1\n\n    # Iterate through the input list\n    while right < len(arr):\n\n        # Check if current subarray length is odd\n        if subarray_length % 2 == 1:\n\n            # Add the current subarray to the sum\n            sum += arr[right]\n\n        # Increment the right pointer\n        right += 1\n\n        # Increment the current subarray length\n        subarray_length += 1\n\n    # Return the sum of all odd length subarrays in the input list\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r = r/255\n    g = g/255\n    b = b/255\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = (g - b) / (max_value - min_value)\n    elif max_value == g:\n        h = 2 + (b - r) / (max_value - min_value)\n    else:\n        h = 4 + (r - g) / (max_value - min_value)\n\n    h = h * 60 if max_value > 0 else h * 60\n\n    if h < 0:\n        h += 360\n\n    v = max_value\n\n    if v == 0:\n        s = 0\n    else:\n        s = (max_value - min_value) / max_value\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = s = 0\n    else:\n        s = delta / cmax\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * ((g - b) / delta)\n    elif cmax == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n    h = math.floor(h)\n    if h < 0:\n        h += 360\n    s = delta / (1 - abs(2 * cmax - 1))\n    v = cmax\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    h = 0\n    s = 0\n    v = 0\n    \n    # Calculate the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # If the maximum value is zero\n    if max_val == 0:\n        # Set the hue to 0 and the saturation and value to 0\n        h = 0\n        s = 0\n        v = max_val\n    else:\n        # Calculate the hue\n        if max_val == r:\n            h = 60 * ((g - b) / diff)\n        elif max_val == g:\n            h = 60 * ((b - r) / diff) + 120\n        elif max_val == b:\n            h = 60 * ((r - g) / diff) + 240\n        \n        # If the hue is greater than 360\n        if h >= 360:\n            h -= 360\n        \n        # Calculate the saturation and value\n        s = diff / max_val\n        v = max_val\n    \n    # Convert the values to integers\n    h = int(h)\n    s = int(s * 100)\n    v = int(v * 100)\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert r, g, and b values to floats\n    r, g, b = [float(i) / 255 for i in (r, g, b)]\n\n    # Find the maximum value and minimum value of r, g, and b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the saturation value\n    if max_val == 0:\n        h = 0\n    else:\n        h = diff / max_val\n\n    # Calculate the hue value\n    if max_val == r:\n        h = (g - b) / diff + (h if g < b else 6) / 6\n    elif max_val == g:\n        h = (b - r) / diff + 2 / 6\n    else:\n        h = (r - g) / diff + 4 / 6\n\n    # Convert the hue value to degrees\n    h *= 60\n\n    # Calculate the value value\n    v = max_val\n\n    # Return the hsv values as a tuple\n    return (h, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b values to float and normalize them\n    r, g, b = map(lambda x: x/255.0, (r, g, b))\n    \n    # Find the max and min values of the rgb color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the max and min values\n    diff = max_val - min_val\n    \n    # Calculate the h value\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g-b)/diff\n    elif max_val == g:\n        h = 2+(b-r)/diff\n    else:\n        h = 4+(r-g)/diff\n    \n    # Calculate the s and v values\n    if max_val == 0:\n        s = 0\n    else:\n        s = diff/max_val\n    \n    v = max_val\n    \n    # Convert h, s, and v values to percentage and return\n    h = int(h*100)\n    s = int(s*100)\n    v = int(v*100)\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert RGB to HSV\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n    c_max = max(r_normalized, g_normalized, b_normalized)\n    c_min = min(r_normalized, g_normalized, b_normalized)\n    delta = c_max - c_min\n    \n    # Calculate Hue\n    if delta == 0:\n        hue = 0\n    elif c_max == r_normalized:\n        hue = 60 * ((g_normalized - b_normalized) / delta)\n    elif c_max == g_normalized:\n        hue = 60 * ((b_normalized - r_normalized) / delta) + 120\n    else:\n        hue = 60 * ((r_normalized - g_normalized) / delta) + 240\n    \n    # Calculate Saturation\n    if c_max == 0:\n        saturation = 0\n    else:\n        saturation = delta / c_max\n    \n    # Calculate Value\n    value = c_max\n    \n    # Convert HSV to HSL\n    h, s, v = rgb_to_hsl(r, g, b)\n    \n    return round(hue, 2), round(saturation, 2), round(value, 2)\n\ndef rgb_to_hsl(r, g, b):\n    \"\"\"\n    Convert RGB to HSL color.\n    \"\"\"\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n    \n    # Convert RGB to XYZ\n    x = 0.412453 * r_normalized + 0.357580 * g_normalized + 0.180423 * b_normalized\n    y = 0.212671 * r_normalized + 0.715160 * g_normalized + 0.072169 * b_normalized\n    z = 0.019334 * r_normalized + 0.119193 * g_normalized + 0.950227 * b_normalized\n    \n    # Convert XYZ to Lab\n    epsilon = 216.0 / 24389.0\n    kappa = 24389.0 / 27.0\n    lab = (116.0 * y) - 16.0\n    \n    if y == 0:\n        lightness = 0\n    else:\n        lightness = (116.0 * y) / (Kappa * lightness)\n    \n    if x == 0:\n        chroma = 0\n    else:\n        chroma = lightness + 16.0 / Kappa * (1.0 + Kappa / 5.0 * (x - y) ** 2.0)\n    \n    if y == 0:\n        hue = 0\n    else:\n        hue = 60.0 * (((x - y) / chroma) % 6.0)\n    \n    # Convert HSL to HSV\n    hue_normalized = hue / 60.0\n    if hue_normalized < 0:\n        hue_normalized += 1\n    \n    if chroma == 0:\n        saturation = 0\n    else:\n        saturation = chroma / lightness\n    \n    if lightness == 0:\n        value = 0\n    else:\n        value = lightness\n    \n    return round(hue, 2), round(saturation, 2), round(value, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV\n    h = None\n    s = None\n    v = None\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if cmax == r:\n            h = ((g - b) / delta) % 6\n        elif cmax == g:\n            h = (b - r) / delta + 2\n        elif cmax == b:\n            h = (r - g) / delta + 4\n        h = h / 6\n        if h < 0:\n            h = h + 1\n        s = delta / cmax\n        v = cmax\n    # Convert HSV to RGB\n    r_hsv = None\n    g_hsv = None\n    b_hsv = None\n    if h is not None:\n        if s is not None:\n            if v is not None:\n                r_hsv = None\n                g_hsv = None\n                b_hsv = None\n                if h == 0:\n                    r_hsv = v\n                    g_hsv = v\n                    b_hsv = v\n                elif h == 1:\n                    r_hsv = v - (v - cmin) * (1 - s)\n                    g_hsv = v\n                    b_hsv = cmin\n                elif h == 2:\n                    r_hsv = cmin\n                    g_hsv = v\n                    b_hsv = (cmin - v) * (1 - s)\n                elif h == 3:\n                    r_hsv = cmin\n                    g_hsv = (cmin - v) * (1 - s)\n                    b_hsv = v\n                elif h == 4:\n                    r_hsv = (cmin - v) * (1 - s)\n                    g_hsv = cmin\n                    b_hsv = (v - cmin) * (1 - s)\n                elif h == 5:\n                    r_hsv = v\n                    g_hsv = cmin\n                    b_hsv = (cmin - v) * (1 - s)\n    return (r_hsv, g_hsv, b_hsv)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == min_value:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h / 6\n    if h < 0:\n        h += 1\n    v = max_value\n    s = delta / max_value\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert R, G, and B to floating point numbers\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the value of the hue (between 0 and 1)\n    if max_val == min_val:\n        hue = 0\n    else:\n        if r == max_val:\n            hue = (g - b) / (max_val - min_val)\n        elif g == max_val:\n            hue = 2 + (b - r) / (max_val - min_val)\n        else:\n            hue = 4 + (r - g) / (max_val - min_val)\n        hue = hue % 6\n\n    # Calculate the value of the saturation (between 0 and 1)\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n\n    # Calculate the value of the value (between 0 and 1)\n    value = max_val\n\n    # Convert the values to lists\n    hsv = [hue, saturation, value]\n\n    return hsv"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= 2\n            even_count = 0\n            odd_count = 0\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    product = 1\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            break\n            \n        product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        product *= num\n\n    if even_count == 0:\n        return None\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count!= 0 and odd_count!= 0:\n        return list1[0] * list1[-1]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            even_count = 0\n            odd_count = 0\n            \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by the comma delimiter\n    str_list = test_str.split(',')\n\n    # Convert each string to integer and append to the result list\n    result_list = [int(x) for x in str_list]\n\n    # Convert the result list to tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    tup_list = test_str.split(';')\n    # Convert the tuples to integer tuples\n    int_tup_list = [(int(tup[0]), int(tup[1])) for tup in tup_list]\n    # Convert the integer tuples to a list\n    int_list = [tup for tup in int_tup_list]\n    # Return the integer list\n    return int_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for i in range(len(str_list)):\n        int_list.append(int(str_list[i]))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Create an empty list to hold the integers\n    int_list = []\n    \n    # Loop through each string in the list\n    for string in str_list:\n        # Try to convert the string to an integer\n        try:\n            int_list.append(int(string.strip()))\n        except ValueError:\n            continue\n    \n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Initialize empty list to store the converted integers\n    converted_ints = []\n    # Split the string into a list of individual strings\n    str_list = test_str.split(',')\n    # Loop through each string in the list\n    for string in str_list:\n        # Convert the string to an integer and append it to the converted_ints list\n        converted_ints.append(int(string))\n    # Return the converted_ints list as an integer tuple\n    return tuple(converted_ints)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    list_of_tuples = test_str.split('(')\n\n    # Iterate through the list of tuples\n    for i in range(len(list_of_tuples)):\n        # Extract the integer value from the tuple\n        integer_value = int(list_of_tuples[i].split(',')[0])\n\n        # Convert the integer value to a tuple\n        tuple_value = (integer_value,)\n\n        # Replace the original tuple in the list with the new tuple\n        list_of_tuples[i] = tuple_value\n\n    # Join the list of tuples back into a string\n    final_str = ', '.join(str(t) for t in list_of_tuples)\n\n    return final_str"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    for word in test_str:\n        if word.isdigit():\n            int_list.append(int(word))\n        else:\n            raise ValueError(f\"{word} is not a digit\")\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a regular expression pattern to match the tuple string\n    pattern = re.compile('\\((\\d+),(\\d+)\\)')\n\n    # Find all occurrences of the pattern in the input string\n    matches = re.findall(pattern, test_str)\n\n    # Convert the matches to integer tuples\n    result = tuple(tuple(map(int, match.split(','))) for match in matches)\n\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    :param test_str: tuple string to convert\n    :type test_str: str\n    :return: integer tuple\n    :rtype: tuple\n    \"\"\"\n    int_tuple = ()\n    for elem in test_str:\n        if elem.isdigit():\n            int_tuple += (int(elem),)\n        else:\n            raise ValueError(\"Invalid element in tuple string\")\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string to an integer and add to a new list\n    int_list = []\n    for string in str_list:\n        try:\n            int_list.append(int(string.strip()))\n        except ValueError:\n            print(\"Error: Invalid input for tuple_str_int function.\")\n            return None\n    \n    # Convert the integer list into a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0:\n        return 0\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_right() function to find the insertion point\n    index = bisect.bisect_right(a, x)\n    # Return the index where the value x should be inserted\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        return None\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The pattern is found in the text.\")\n    else:\n        print(\"The pattern is not found in the text.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a{3}b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{3}b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=bb{2})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'\\ba\\bb{3}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the list and string\n    new_tuple_str = test_str + str(test_list)\n    # Convert the concatenated string to a tuple\n    new_tuple = tuple(new_tuple_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the two lists\n    new_list = test_list + test_str.split()\n    # Convert the concatenated list to a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the list and string using the '+' operator\n    new_tuple_str = str(test_list) + test_str\n    # Convert the string back to a tuple using the tuple() function\n    new_tuple = tuple(new_tuple_str)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple((test_str, test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a string\n    test_str =''.join(map(str, test_list))\n    \n    # split the string into a list of words\n    words = test_str.split()\n    \n    # create a new tuple with the words and the given string\n    return tuple(words + [test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = [x.upper() for x in test_list]\n    new_str = ''.join(new_list)\n    return (test_str, new_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list\n    for i in test_str:\n        new_list.append(i)\n    return tuple(new_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count = 0\n            for j in range(len(nums)):\n                if nums[j] % 2 == 0:\n                    count += 1\n                if j == i:\n                    continue\n                if nums[j] == nums[i]:\n                    return False\n            if count % 2 == 0:\n                return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    # Count the number of even numbers in every even index\n    even_nums = [0] * len(nums)\n    for i in range(0, len(nums), 2):\n        even_nums[i] += 1\n\n    # Check whether the number of even numbers in every even index is equal to the length of the list\n    if all(num == len(nums) // 2 for num in even_nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if any(x % 2 == 0 for x in nums[i:]):\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 0]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2]))!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Check if every even index contains an even number of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every even index contains an even number of nums, False otherwise.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:  # odd index\n            if nums[i] % 2 == 0:  # even number at odd index\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Define an empty list to store the non-nested tuples\n    non_nested_list = []\n    # Loop through the tuple and append non-nested tuples to the list\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                non_nested_list.append(sub_item)\n        else:\n            non_nested_list.append(item)\n    # Return the non-nested list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for x in test_tup if isinstance(x, tuple) is False]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for sub_item in item:\n                flat_list.append(sub_item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(x for tup in test_tup for x in tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = [item for sublist in test_tup for item in sublist]\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    for item in test_tup:\n        if type(item) == tuple:\n            remove_nested(item)\n        else:\n            print(item)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid+1 < len(arr) and arr[mid+1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid+1\n        else:\n            right = mid-1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    while i < n and arr[i]!= x:\n        i += 1\n    if i == n:\n        return -1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters, an array and an element to find the last position of.\n    It returns the last position of the element in the array or -1 if it is not found in the array.\n    '''\n    if x in arr:\n        return arr.index(x)\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right if arr[right] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and a target element as input and returns the last position of the element in the array if it exists, otherwise it returns -1.\n    \"\"\"\n    # Find the last index of the target element in the array using binary search\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If the target element is found, return the last index\n    if arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: an array and an element to find.\n    It returns the index of the last occurrence of the element in the array.\n\n    Args:\n        arr: list, the sorted array to search in\n        x: any, the element to search for\n\n    Returns:\n        int, the index of the last occurrence of x in arr, or -1 if x is not found\n    \"\"\"\n    n = len(arr)\n    low = 0\n    high = n - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x and returns the index of the last occurrence of x in the array.\n    If the element is not present in the array, the function returns -1.\n    \"\"\"\n    n = len(arr)\n    if x not in arr:\n        return -1\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found.\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b')\n    result = pattern.match(text)\n    return result is not None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers\n    within the range 0 to n - 1.\n    \"\"\"\n    # Initialize a variable to keep track of the sum of odd numbers\n    sum_of_odds = 0\n    \n    # Loop through all numbers from 0 to n - 1\n    for i in range(n):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # Add it to the sum of odd numbers\n            sum_of_odds += i\n    \n    # Return the sum of odd numbers\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    print(\"The sum of odd natural numbers between\", l, \"and\", r, \"is:\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    \"\"\"\n    This function takes in an integer n and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return sum_odd(n-2) + n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # take input for the range\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n\n    # initialize variables\n    sum = 0\n\n    # loop through the range of numbers\n    for i in range(l, r+1):\n\n        # check if the number is odd\n        if i % 2!= 0:\n\n            # add the number to the sum\n            sum += i\n\n    # print the sum\n    print(\"The sum of all odd natural numbers within the range\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if l > r: \n        return None \n    sum = 0\n    for i in range(l, r+1): \n        if i % 2!= 0: \n            sum += i \n    return sum "
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum = 0\n    \n    for i in range(l, r+1, 2):\n        sum += i\n        \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Take input from the user for the range\n    l, r = map(int, input(\"Enter the range of natural numbers: \").split())\n    \n    # Initialize the sum of odd natural numbers to 0\n    sum_of_odds = 0\n    \n    # Use a for loop to iterate over the range of natural numbers\n    for i in range(l, r+1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # If the number is odd, add it to the sum\n            sum_of_odds += i\n    \n    # Print the sum of odd natural numbers\n    print(\"The sum of odd natural numbers within the range\", l, \"to\", r, \"is:\", sum_of_odds)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    if l < 0 or r < 0:\n        print(\"Both limits must be non-negative.\")\n        return\n    if l > r:\n        l, r = r, l\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is:\", sum)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for i in range(len(arr)):  \n        total += arr[i]  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize sum variable to 0\n    total = 0\n    # Loop through the array and add each element to the sum\n    for i in arr:\n        total += i\n    # Return the total sum\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if d == 0:\n        return n\n    else:\n        d = d % 32\n        mask = (1 << d) - 1\n        shifted_n = n << d\n        return shifted_n | n & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate a number left by d bits.\n    \"\"\"\n    # Calculate the number of bits to rotate\n    num_bits = len(bin(n)[2:])\n\n    # Calculate the number of bits to shift\n    shift = d % num_bits\n\n    # Shift the bits to the left\n    result = (n << shift) | (n >> (num_bits - shift))\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert number to binary string\n    bin_num = bin(n)[2:]\n\n    # Append zeros to make the binary string d bits long\n    for i in range(d - len(bin_num)):\n        bin_num = '0' + bin_num\n\n    # Extract the last d bits of the binary string\n    new_num = bin_num[-d:]\n\n    # Convert new_num to an integer\n    new_num = int(new_num, 2)\n\n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to be rotated\n    num_bits = 32\n    rotation = d % num_bits\n\n    # Mask the bits that will be rotated out\n    mask = (1 << rotation) - 1\n\n    # Shift the bits to the left by the rotation amount\n    rotated_bits = (n << rotation) & mask\n\n    # Shift the bits to the right by the number of bits in the original number minus the rotation amount\n    shifted_bits = (n >> (num_bits - rotation)) & ((1 << num_bits) - 1)\n\n    # Combine the shifted and rotated bits\n    combined_bits = shifted_bits | rotated_bits\n\n    return combined_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number.\n    '''\n    # Convert the given number to binary\n    binary_str = bin(n)[2:]\n    # Pad the binary string with zeros to make d length\n    padded_str = '0' * d + binary_str\n    # Convert the padded string back to decimal\n    rotated_num = int(padded_str, 2)\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d >= 32:\n        return left_rotate(n >> (d-32), d % 32)\n    else:\n        return (n << d) | (n >> (32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF  # Mask to get the 4 least significant bits\n    d = d % 32  # Make sure d is within the range of 0 to 31\n    n = n & mask  # Mask out the most significant bits\n    n = (n << d) | (n >> (32 - d))  # Rotate left\n    n = n & mask  # Mask out the most significant bits again\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to rotate\n    bits_to_rotate = 32 - d\n\n    # Calculate the mask to rotate left the required number of bits\n    mask = (1 << bits_to_rotate) - 1\n\n    # Rotate the number using the mask and XOR\n    rotated_number = ((n & mask) << d) | ((n & ~mask) >> bits_to_rotate)\n\n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Check if the rotation is within the bounds of the number\n    if d >= 32:\n        # Return the number itself if the rotation is more than 31 bits\n        return n\n    \n    # Calculate the number of bits to rotate\n    num_bits = 32 - d\n    \n    # Extract the least significant d bits of n\n    least_significant_bits = (n & ((1 << d) - 1))\n    \n    # Extract the most significant bits of n\n    most_significant_bits = (n >> d)\n    \n    # Shift the most significant bits to the left by d bits\n    rotated_most_significant_bits = most_significant_bits << d\n    \n    # Combine the rotated bits with the least significant bits\n    rotated_bits = least_significant_bits | rotated_most_significant_bits\n    \n    # Return the final result\n    return rotated_bits"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # replace all whitespace characters with empty string\n    text = re.sub('\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n        elif num == y:\n            count += 1\n        elif num == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(10):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(1, 5):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, return 0 rotations\n    if arr == sorted(arr):\n        return 0\n    # If the array has only one element, return 0 rotations\n    elif n == 1:\n        return 0\n    # Find the pivot element\n    pivot = arr[n // 2]\n    # Count the number of times the pivot occurs in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == pivot:\n            count += 1\n    # Count the number of rotations required to sort the array\n    left = 0\n    right = n - 1\n    while left <= right:\n        # If the pivot occurs in the left half of the array, move the left pointer to the right\n        if arr[left] == pivot:\n            left += 1\n        # If the pivot occurs in the right half of the array, move the right pointer to the left\n        elif arr[right] == pivot:\n            right -= 1\n        # If both pointers meet, we have counted a rotation\n        elif left <= right:\n            break\n    # Return the number of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i-1] > arr[i]:\n            return i\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is already sorted\n    if n <= 1 or arr == sorted(arr):\n        return 0\n\n    # find the first and last element of the array\n    first = arr[0]\n    last = arr[n-1]\n\n    # if the first element is greater than or equal to the last element, we can rotate the array to form a sorted array\n    if first >= last:\n        # find the number of rotations required to form the sorted array\n        i = 0\n        while arr[i] < first:\n            i += 1\n        j = n-1\n        while arr[j] > last:\n            j -= 1\n        return j - i\n\n    # if the first element is less than the last element, we cannot rotate the array to form a sorted array\n    else:\n        # initialize the count variable to 0\n        count = 0\n\n        # loop through the array and count the number of elements that are greater than the first element\n        for i in range(n-1):\n            if arr[i] > first:\n                count += 1\n\n        # if there are no elements greater than the first element, there is no need to rotate the array\n        if count == 0:\n            return 0\n\n        # if there are elements greater than the first element, we can rotate the array to form a sorted array\n        else:\n            # loop through the array and count the number of elements that are less than the last element\n            for i in range(n-1):\n                if arr[i] < last:\n                    count += 1\n\n            # if there are no elements less than the last element, the array is already sorted\n            if count == 0:\n                return 0\n\n            # if there are elements less than the last element, we cannot rotate the array to form a sorted array\n            else:\n                # loop through the array and count the number of elements that are equal to the first element\n                for i in range(n-1):\n                    if arr[i] == first:\n                        count += 1\n\n                # if there are no elements equal to the first element, the array is already sorted\n                if count == 0:\n                    return 0\n\n                # if there are elements equal to the first element, we cannot rotate the array to form a sorted array\n                else:\n                    # initialize the count variable to 0\n                    count = 0\n\n                    # loop through the array and count the number of elements that are greater than the first element\n                    for i in range(n-1):\n                        if arr[i] > first:\n                            count += 1\n\n                    # loop through the array and count the number of elements that are less than the last element\n                    for i in range(n-1):\n                        if arr[i] < last:\n                            count += 1\n\n                    # return the minimum of the count variables\n                    return min(count, n-count)"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # Find the median of the array\n    arr.sort()\n    n = len(arr)\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n\n    # Find the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            count += 1\n        else:\n            break\n\n    # If the median is greater than the last element, perform a rotation\n    if median > arr[n-1]:\n        count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    # Find the smallest element in the array\n    min_el = min(arr)\n    # Initialize the count of rotations to 0\n    count = 0\n    # Loop through the array and count the number of rotations required\n    for i in range(len(arr)):\n        if arr[i] < min_el:\n            # If the element at the i-th index is less than the minimum element, then there are at least two rotations required to sort the array\n            count += 2\n            # Since we've counted the first rotation, we can skip the second rotation\n            i += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Sort the array\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    # Check if the array is sorted in ascending order\n    if arr == sorted(arr):\n        return count\n    \n    # Check if the array is sorted in descending order\n    if arr == sorted(arr, reverse=True):\n        return count\n    \n    # If the array is not sorted, find the minimum and maximum elements\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Check if the array contains the minimum and maximum elements\n    if arr.count(min_val) > 1 and arr.count(max_val) > 1:\n        return count\n    \n    # Check if the array contains the minimum element\n    if arr.count(min_val) > 0 and max_val in arr:\n        return count\n    \n    # Check if the array contains the maximum element\n    if arr.count(max_val) > 0 and min_val in arr:\n        return count\n    \n    # If the array is not sorted or contains the minimum and maximum elements, \n    # find the elements that will be swapped in the next rotation\n    if arr.count(min_val) > 1:\n        next_element = min_val\n    else:\n        next_element = max_val\n    \n    # Check if the next element is greater than the current maximum element\n    if next_element < max_val:\n        return count\n    \n    # Increment the count and repeat the process\n    count += 1\n    arr = [x if x!= next_element else max_val for x in arr]\n    \n    # Check if the array is sorted after the next rotation\n    if arr == sorted(arr):\n        return count\n    \n    # If the array is not sorted, find the minimum and maximum elements\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Check if the array contains the minimum and maximum elements\n    if arr.count(min_val) > 1 and arr.count(max_val) > 1:\n        return count\n    \n    # Check if the array contains the minimum element\n    if arr.count(min_val) > 0 and max_val in arr:\n        return count\n    \n    # Check if the array contains the maximum element\n    if arr.count(max_val) > 0 and min_val in arr:\n        return count\n    \n    # If the array is not sorted or contains the minimum and maximum elements, \n    # find the elements that will be swapped in the next rotation\n    if arr.count(min_val) > 1:\n        next_element = min_val\n    else:\n        next_element = max_val\n    \n    # Check if the next element is greater than the current maximum element\n    if next_element < max_val:\n        return count\n    \n    # Increment the count and repeat the process\n    count += 1\n    arr = [x if x!= next_element else max_val for x in arr]\n    \n    # Check if the array is sorted after the next rotation\n    if arr == sorted(arr):\n        return count\n    \n    # If the array is not sorted, find the minimum and maximum elements\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Check if the array contains the minimum and maximum elements\n    if arr.count(min_val) > 1 and arr.count(max_val) > 1:\n        return count\n    \n    # Check if the array contains the minimum element\n    if arr.count(min_val) > 0 and max_val in arr:\n        return count\n    \n    # Check if the array contains the maximum element\n    if arr.count(max_val) > 0 and min_val in arr:\n        return count\n    \n    # If the array is not sorted or contains the minimum and maximum elements, \n    # find the elements that will be swapped in the next rotation\n    if arr.count(min_val) > 1:\n        next_element = min_val\n    else:\n        next_element = max_val\n    \n    # Check if the next element is greater than the current maximum element\n    if next_element < max_val:\n        return count\n    \n    # Increment the count and repeat the process\n    count += 1\n    arr = [x if x!= next_element else max_val for x in arr]\n    \n    # Check if the array is sorted after the next rotation\n    if arr == sorted(arr):\n        return count\n    \n    # If the array is not sorted, find the minimum and maximum elements\n    min_val = min(arr)\n    max_"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # check if the array is already sorted\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 0\n\n    # count the number of rotations required to sort the array\n    count = 0\n    for i in range(n - 1):\n        if arr[i] > arr[n - 1]:\n            count += 1\n            arr[i], arr[n - 1] = arr[n - 1], arr[i]\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n\n    # Counting number of rotations\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    count = 0\n    \n    # Check if array is already sorted or not\n    if arr == sorted(arr):\n        return count\n    \n    # Check if first element is greater than last element\n    if arr[0] > arr[-1]:\n        count += 1\n    \n    # Check if array is rotated or not\n    for i in range(1, n-1):\n        if arr[i] < arr[i-1] and arr[i] < arr[i+1]:\n            count += 1\n    \n    # If array is not rotated, it has only one rotation\n    return count + 1"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if n is negative or 0\n    if n < 0 or n == 0:\n        return False\n\n    # check if n is a perfect square\n    a = 0\n    b = n\n    while a * a <= b:\n        a += 1\n        b -= 1\n\n    # return True if n is a perfect square, False otherwise\n    if a * a == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        square = 0\n        while square * square < n:\n            square += 1\n        return square * square == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # check if n is less than 0\n    if n < 0:\n        return False\n\n    # check if n is already a perfect square\n    if n == int(n**0.5 + 0.5)**2:\n        return True\n\n    # check if n is less than 2\n    if n < 2:\n        return False\n\n    # check if n is divisible by any number between 2 and sqrt(n)\n    for i in range(2, int(n**0.5 + 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # Calculate the square root of the number\n    root = math.sqrt(n)\n\n    # Check if the root is an integer\n    if math.floor(root)!= root:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and i*i == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    a = 0\n    b = n\n    while b >= a:\n        mid = (a + b) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid > n:\n            b = mid - 1\n        else:\n            a = mid + 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # if the given number is less than 1, it is not a perfect square\n    if n < 1:\n        return False\n\n    # if the given number is equal to 1, it is a perfect square\n    if n == 1:\n        return True\n\n    # use the square root function to calculate the square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # if the square root of the given number is an integer, it is a perfect square\n    if sqrt_n ** 2 == n:\n        return True\n\n    # if the square root of the given number is not an integer, it is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # find the square root of n\n    sqrt_n = int(n ** 0.5)\n    # if the square root is an integer, then n is a perfect square\n    if sqrt_n ** 2 == n:\n        return True\n    # if the square root is not an integer, then n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    \n    # check if the number is a perfect square\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    \n    # if the loop is not broken, it means the number is not a perfect square\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    product = 1\n    even_count = 0\n    \n    for num in arr:\n        product *= num\n        if product % 2 == 0:\n            even_count += 1\n    \n    return even_count == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    This function takes a list of numbers as input and returns True if the product of the numbers is even, otherwise False.\n    \"\"\"\n\n    # Find the product of the numbers in the list\n    product = 1\n    for num in arr:\n        product *= num\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers is even.\")\n    else:\n        print(\"The product of the numbers is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers is even.\")\n    else:\n        print(\"The product of the numbers is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_lists = []\n    \n    # Iterate over each list in the input list of lists\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n        \n        # If the sum is greater than the current maximum sum, update max_sum and max_lists\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_lists = [lst]\n        elif sum_lst == max_sum:\n            max_lists.append(lst)\n    \n    # Return the list in max_lists\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        for j in i:\n            max_sum = max(max_sum, j)\n        if max_sum > max_sum:\n            max_list = i\n            max_sum = max_sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        sum = sum(lst)\n        if sum > max_sum:\n            max_sum = sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = sublist\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = None\n    for list in lists:\n        total = sum(list)\n        if total > max_sum:\n            max_sum = total\n            result = list\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n\n    # Loop through each list in the list of lists\n    for l in lists:\n        # Calculate the sum of the elements in the list\n        total_sum = sum(l)\n\n        # If the sum is greater than the current max_sum, update max_sum and max_list\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = l\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 and j == 0:\n                continue\n            current_sum = lists[i][j] + lists[i][j-1] + lists[i-1][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j], lists[i][j-1], lists[i-1][j]]\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n\n    # Initialize variables to keep track of the current run of uppercase characters and the maximum run so far\n    current_run = 0\n    max_run = 0\n\n    # Iterate over the string and count the number of uppercase characters in each run\n    for i in range(len(test_str)):\n        if test_str[i] =='':\n            continue\n        if test_str[i] == test_str[i].upper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    # If the last run has uppercase characters, update the max_run value\n    if current_run > max_run:\n        max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of maximum run and current run\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the current character is uppercase and the previous character was not uppercase, update the current run\n        if char.isupper() and not test_str[current_run - 1].isupper():\n            current_run += 1\n        else:\n            # If the current run is greater than the maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run to 1 if it is not a uppercase character\n            current_run = 1\n    \n    # Return the maximum run found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = None\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the current character is uppercase and it's a new uppercase character, start a new run\n        if char.isupper() and current_char is None:\n            current_run = 1\n            current_char = char\n            continue\n        \n        # If the current character is lowercase and it's not the same as the previous character, start a new run\n        if not char.isupper() and current_char is not None and char!= current_char:\n            current_run = 1\n            current_char = char\n            continue\n        \n        # If the current character is lowercase and it's the same as the previous character, increment the run\n        if not char.isupper() and current_char is not None and char == current_char:\n            current_run += 1\n        \n        # If the current run is greater than the maximum run, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n        \n        # Reset the current run and current character for the next iteration\n        current_run = 0\n        current_char = None\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 0\n    current_run = 0\n    start_index = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start_index = i - max_run + 1\n            \n    return test_str[start_index:start_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    prev_char = None\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if prev_char is not None and prev_char.isupper():\n                curr_run += 1\n            else:\n                max_run = max(max_run, curr_run)\n                curr_run = 1\n        prev_char = test_str[i]\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    run_length = 0\n    current_char = \"\"\n    \n    for char in test_str:\n        if char.isupper():\n            if current_char!= char:\n                if run_length > max_run:\n                    max_run = run_length\n                run_length = 1\n                current_char = char\n            else:\n                run_length += 1\n        else:\n            current_char = \"\"\n            run_length = 0\n    \n    if run_length > max_run:\n        max_run = run_length\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    run_count = 1\n    # loop through the string and count uppercase characters\n    for char in test_str:\n        if char.isupper():\n            run_count += 1\n            if run_count > max_run:\n                max_run = run_count\n        else:\n            run_count = 1\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables to keep track of the current run of uppercase characters and the maximum run seen so far\n    run_start = 0\n    max_run = 0\n\n    # Iterate through the string and update the variables accordingly\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            # The current character is uppercase and the previous one was not\n            run_start = i\n        elif not test_str[i].isupper() and test_str[i-1].isupper():\n            # The current character is not uppercase and the previous one was uppercase\n            # Update the maximum run if the current run is longer than the maximum run seen so far\n            current_run = i - run_start + 1\n            if current_run > max_run:\n                max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    prev_char = None\n    for char in test_str:\n        if char.isupper():\n            if prev_char is not None and prev_char.islower():\n                current_run += 1\n            else:\n                max_run = max(max_run, current_run)\n                current_run = 0\n        prev_char = char\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found in the list, it returns None.\n    '''\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_in_tup = False\n    for tup in test_tup:\n        if tup == K:\n            k_in_tup = True\n            break\n    return k_in_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    # check if the length of the tuple is greater than or equal to k\n    if len(test_tup) >= K:\n        # check if all the elements in the tuple are unique\n        if len(set(test_tup)) == len(test_tup):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple as input and a number K as input. It checks if the given tuple contains the K or not. If the tuple contains K, it returns True, else it returns False.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(\"K is present in the tuple\")\n    else:\n        print(\"K is not present in the tuple\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if t[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if K == test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same number of elements.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"The element in the first tuple is greater than its corresponding element in the second tuple.\"\n            \n    return \"The two tuples are sorted in ascending order.\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The first tuple is smaller.\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup1[i] < test_tup2[i] for i in range(len(test_tup1)))"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]