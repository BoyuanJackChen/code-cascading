[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the two tuples to sets to remove duplicates and get only unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection between the two sets\n    shared_elements = set1.intersection(set2)\n    # convert the intersection to a list and return it\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                shared_elements.append(elem1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return tuple(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    A function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is 2 or 3\n    if n == 2 or n == 3:\n        return False\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return True\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return True\n\n    # Use a loop to check if the number is divisible by any odd number up to the square root of the number\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return True\n    # check if the number is equal to 2 or 3\n    elif n == 2 or n == 3:\n        return False\n    # check if the number is divisible by 2\n    elif n % 2 == 0:\n        return True\n    # check odd numbers from 3 to n-1\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert the list to a heap of size n\n    hq.heapify(nums)\n    # extract the n largest elements from the heap and return them as a list in descending order\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build max heap from nums\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n\n    # Pop n largest numbers from max_heap\n    result = []\n    while n > 0:\n        result.append(hq.heappop(max_heap))\n        n -= 1\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max heap and push the first n elements into the heap\n    max_heap = []\n    for num in nums[:n]:\n        heapq.heappush(max_heap, num)\n\n    # Pop the maximum n-1 elements from the max heap and add the last element to the max heap\n    for _ in range(n - 1):\n        max_heap_largest = heapq.heappop(max_heap)\n        heapq.heappush(max_heap, max_heap_largest)\n\n    # Return the max heap as a list of integers\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # initialize the max-heap with the first n elements\n    heap = nums[:n]\n    heapq.heapify(heap)\n\n    # remove the smallest element from the heap, and add the next element (if any)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            # if the next element is larger than the smallest element, update the heap\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums[i])\n\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the first n elements of the input list\n    max_heap = []\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n\n    # Extract the largest n elements from the heap and append them to the result list\n    result = []\n    while max_heap:\n        result.append(hq.heappop(max_heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = hq.nlargest(n, nums, key=lambda x:x)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap with the first n elements of the list\n    hq.heapify(nums[:n])\n    # find the remaining elements in the list and add them to the heap\n    for i in range(n, len(nums)):\n        if nums[i] > hq.heappop(nums[:n]):\n            hq.heappush(nums[:n], nums[i])\n    # return the n largest elements in descending order\n    return nums[:n][::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap using the list of numbers\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n\n    # Remove the largest element from the heap\n    largest = hq.heappop(min_heap)\n\n    # Iterate through the remaining numbers and add them to the heap\n    for num in nums[n:]:\n        # If the number is larger than the largest element in the heap, replace it\n        if num > largest:\n            hq.heappush(min_heap, num)\n        else:\n            # If the number is smaller or equal to the largest element in the heap, add it to the heap\n            hq.heappush(min_heap, largest)\n\n    # Return the heap as a list\n    return list(min_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the given list to a max heap\n    heap = hq.nlargest(n, nums)\n    # Convert the heap to a list and return it\n    return list(heap)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x as input and returns a boolean value indicating whether\n    the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the two numbers to binary strings\n    binary_str1 = bin(x)[2:]\n    binary_str2 = bin(x)[2:]\n    \n    # Check if both binary strings have only one different bit position\n    if len(set(binary_str1) ^ set(binary_str2)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 0:\n        if x % 2 == 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power_of_two = 1\n    while power_of_two < x:\n        power_of_two <<= 1\n    return power_of_two >> 1 == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the given numbers to binary strings\n    x_binary = bin(x)[2:]\n    y_binary = bin(y)[2:]\n    \n    # Compare the length of the binary strings\n    if len(x_binary)!= len(y_binary):\n        return False\n    \n    # Compare the bits at each position of the binary strings\n    for i in range(len(x_binary)):\n        if x_binary[i]!= y_binary[i]:\n            return False\n    \n    # If no bit difference is found, return True\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if the two numbers differ at one bit position only and False otherwise.\n    '''\n    if x == 0 or x == 1:\n        return True\n    elif (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Initialize a boolean variable to True\n    result = True\n\n    # Iterate through all bits of the first number\n    for i in range(32):\n        # Calculate the value of the i-th bit of the second number\n        second_bit = (x >> i) & 1\n\n        # If the i-th bit of the first number is different from the i-th bit of the second number, return False\n        if (x >> i)!= (y >> i):\n            result = False\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the given number to binary string\n    binary_string = bin(x)[2:]\n    \n    # Count the number of occurrences of '1' in the binary string\n    count = binary_string.count('1')\n    \n    # Check if the difference between the count of '1' and the binary string length is 1\n    if count!= len(binary_string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    filtered_words = [word for word in words if len(word) >= 4]\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the string into words using whitespace as the separator\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter out words that are less than 4 characters long\n    long_words = filter(lambda x: len(x) >= 4, words)\n    # return the list of long words\n    return list(long_words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n\n    Args:\n        text (str): a string containing words\n\n    Returns:\n        list: a list of words that are at least 4 characters long\n    \"\"\"\n    # define a regular expression pattern for finding words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # extract the words from the matches and return them as a list\n    return [match.group() for match in matches]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # loop through each element in the list\n    for i in range(len(nums)):\n        # square the current element and assign the result to the same index\n        nums[i] = nums[i] ** 2"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through the list of numbers\n    for num in nums:\n        # Square the current number and add it to a new list\n        square_list.append(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Initialize variables\n    minRotations = float('inf')\n    currRotations = 0\n\n    # Iterate over all possible rotations\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            # Find the string after rotating\n            rotatedStr = str[i:j] + str[:i] + str[j:]\n\n            # Check if the rotated string is the same as the original string\n            if rotatedStr == str:\n                # Update the minimum number of rotations\n                if currRotations < minRotations:\n                    minRotations = currRotations\n                currRotations = 0\n            else:\n                # Otherwise, increment the number of rotations\n                currRotations += 1\n\n    # Return the minimum number of rotations\n    return minRotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    rotations = 0 \n    for i in range(n): \n        if str[i]!= str[(i+rotations) % n]: \n            rotations += 1 \n            if rotations > 1: \n                break \n    return rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                return 0\n    return n - 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Create a list of tuples, where each tuple contains a character and its frequency\n    freq_list = [(char, freq[char]) for char in freq]\n    \n    # Sort the list by the frequency of each character in descending order\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # Initialize a counter for the number of rotations\n    count = 0\n    \n    # Iterate through the sorted list of tuples\n    for i in range(len(freq_list)):\n        # If the character at the current index has a frequency of 1, the string has already been rotated\n        if freq_list[i][1] == 1:\n            break\n        \n        # For each character with a frequency greater than 1, rotate the string and check if it's equal to the original string\n        for j in range(freq_list[i][1]):\n            temp = freq_list[i][0]\n            temp += 'a'\n            if temp == str:\n                break\n        else:\n            # If the rotated string is not equal to the original string, increment the counter for the number of rotations\n            count += 1\n    \n    # Return the minimum number of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Convert string to lowercase\n    str = str.lower()\n\n    # Create a list of unique characters\n    unique_chars = sorted(list(set(str)))\n\n    # Initialize minimum number of rotations\n    min_rotations = 0\n\n    # Iterate through the list of unique characters\n    for i in range(len(unique_chars)):\n        # Create a new string with all characters rotated by 1 position\n        rotated_str = str[i:] + str[:i]\n\n        # Check if the rotated string is equal to the original string\n        if rotated_str == str:\n            # If it is, increment the minimum number of rotations\n            min_rotations += 1\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    # check if the string has only one character\n    if n == 1:\n        return 0\n    # initialize variables for length of string\n    len_str = len(str)\n    # initialize variables for number of rotations\n    rot_num = 0\n    # initialize variables for current substring\n    curr_str = str[0]\n    # initialize variables for substring to be rotated\n    to_be_rotated = str[1:]\n    # loop until the current substring is the same as the original string\n    while curr_str!= str:\n        rot_num += 1\n        # update the current substring and the substring to be rotated\n        curr_str = to_be_rotated[-len_str:]\n        to_be_rotated = to_be_rotated[:-len_str]\n    # return the minimum number of rotations required\n    return rot_num"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    rotations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create all possible rotations of the string\n    rotations = [str[::-1]]\n    for i in range(n-1):\n        # combine the current string with the previous one and add it to the list of rotations\n        rotations.append(str[i] + str[n-i-1])\n    # count the number of rotations that are equal to the original string\n    count = 0\n    for i in range(n):\n        if str[i] == rotations[i]:\n            count += 1\n    # return the minimum number of rotations required to get the same string\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the maximum frequency among the characters in the string\n    max_freq = max(freq.values())\n\n    # Initialize a variable to store the number of rotations required\n    count = 0\n\n    # Check for the rotations required\n    while True:\n        # Find the minimum frequency among the characters in the string after the current rotation\n        min_freq = min(freq.values())\n\n        # Check if the minimum frequency is equal to the maximum frequency\n        if min_freq == max_freq:\n            # If yes, break the loop and return the count of rotations\n            break\n\n        # If not, increment the count of rotations\n        count += 1\n\n        # Update the frequency of each character in the string by 1\n        for char in freq:\n            freq[char] -= 1\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Check if the input string is empty or has only one character\n    if len(str) <= 1:\n        return 0\n    \n    # Initialize variables to store the minimum number of rotations required and the current character in the string\n    min_rotations = 0\n    current_char = str[0]\n    \n    # Iterate through the string starting from the second character\n    for i in range(1, len(str)):\n        # Check if the current character is same as the previous one\n        if str[i] == current_char:\n            # If yes, then increment the minimum number of rotations required\n            min_rotations += 1\n        else:\n            # If not, then set the current character to the previous one and reset the minimum number of rotations required\n            current_char = str[i]\n            min_rotations = 1\n            \n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Remove first and last occurrence of a given character from the string.\n    '''\n    # initialize the length of the string\n    length = len(s)\n\n    # initialize pointers for first and last occurrence of the character\n    i = 0\n    j = length - 1\n\n    # loop through the string until the pointers meet\n    while i < j:\n        # check if the character at the current pointer is equal to the given character\n        if s[i] == ch:\n            # increment the pointer for the first occurrence of the character\n            i += 1\n        elif s[j] == ch:\n            # decrement the pointer for the last occurrence of the character\n            j -= 1\n        # move the pointer to the next character\n        else:\n            i += 1\n            j -= 1\n\n    # return the string without the first and last occurrence of the character\n    return s[:i] + s[j+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch): \n    # Remove the first occurrence of the character from the string\n    first_occ = s.find(ch)\n    if first_occ!= -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    # Remove the last occurrence of the character from the string\n    last_occ = s.rfind(ch)\n    if last_occ!= -1:\n        s = s[:last_occ] + s[last_occ+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character to be removed is present in the string\n    if ch in s:\n        # split the string into two parts: before and after the character\n        parts = s.split(ch)\n        # remove the first part\n        if len(parts) > 1:\n            parts = parts[1:]\n        else:\n            parts = []\n        # remove the last part\n        if len(parts) > 1:\n            parts = parts[:-1]\n        else:\n            parts = []\n        # join the two parts and return the result\n        return ''.join(parts)\n    else:\n        # if the character to be removed is not present, return the original string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string s.\n    \"\"\"\n    # Check if the string contains the character we want to remove\n    if ch in s:\n        # Split the string into two parts: before and after the character we want to remove\n        parts = s.split(ch)\n        # Check if there is only one occurrence of the character we want to remove\n        if len(parts) == 1:\n            return \"\"\n        # Check if the character we want to remove is the first or last occurrence\n        elif len(parts) == 2:\n            return parts[0]\n        else:\n            # If there are more than one occurrence of the character we want to remove,\n            # remove it from the second part (after the first occurrence)\n            return parts[0] + parts[1][1:]\n    else:\n        # If the character we want to remove is not in the string, return the original string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        return s.replace(ch, '')\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        # remove first occurrence\n        first_index = s.index(ch)\n        s = s[:first_index] + s[first_index+1:]\n\n        # remove last occurrence\n        last_index = s.rindex(ch)\n        s = s[:last_index-1] + s[last_index:]\n\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    # remove first occurrence of ch\n    s = s.replace(ch, '', 1)\n    # remove last occurrence of ch\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # check if character exists in string\n    if ch not in s:\n        return \"Character does not exist in string\"\n    # initialize first and last index of character\n    fi = -1\n    li = -1\n    # loop through string and find first and last occurrence of character\n    for i in range(len(s)):\n        if s[i] == ch:\n            if fi == -1:\n                fi = i\n            li = i\n    # check if first and last occurrence are same, if not, remove first occurrence\n    if fi!= -1 and li!= -1 and fi!= li:\n        s = s[:fi] + s[fi+1:]\n    # check if last occurrence exists in string\n    if li!= -1:\n        s = s[:li] + s[li+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if len(s) > 1:\n        # Check if the first character is the given character to be removed\n        if s[0] == ch:\n            # Remove the first occurrence of the given character\n            s = s[1:]\n        else:\n            # If the first character is not the given character, remove all occurrences of the given character\n            s = ''.join([c for c in s if c!= ch])\n        # Check if the last character is the given character to be removed\n        if s[-1] == ch:\n            # Remove the last occurrence of the given character\n            s = s[:-1]\n        else:\n            # If the last character is not the given character, remove all occurrences of the given character\n            s = ''.join([c for c in s if c!= ch])\n    else:\n        # If the string has only one character, remove all occurrences of the given character\n        s = ''.join([c for c in s if c!= ch])\n\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if M[i][j] < M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M\n\nM = [[5, 3, 1], [1, 4, 2], [3, 2, 1]]\nprint(\"Original matrix: \")\nfor row in M:\n    print(row)\nprint(\"Sorted matrix: \")\nsorted_matrix = sort_matrix(M)\nfor row in sorted_matrix:\n    print(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M[i])):\n            if M[i][j] < M[i][i]:\n                M[i][j], M[i][i] = M[i][i], M[i][j]\n                for k in range(len(M)):\n                    M[k][j], M[k][i] = M[k][i], M[k][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n\n    # Initialize a list to store the sum of each row\n    row_sums = []\n\n    # Calculate the sum of each row\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n\n    # Sort the rows based on their sums\n    row_sums.sort()\n\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n\n    # Iterate through the sorted rows and add them to the sorted matrix\n    for i in range(len(row_sums)):\n        sorted_row = []\n        for j in range(len(M[0])):\n            sorted_row.append(M[i][j])\n        sorted_M.append(sorted_row)\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i, n):\n            if M[i][j] < M[j][i]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for row in M:\n        # sort the row in ascending order based on the sum of its elements\n        row.sort()\n    \n    # sort the entire matrix in ascending order based on the sum of its rows\n    M.sort()\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the result matrix\n    result = [[0 for j in range(len(M[0]))] for i in range(len(M))]\n    # Sort each row of the matrix\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        M[i].sort()\n        # Set the sorted row in the result matrix\n        for j in range(len(M[i])):\n            result[i][j] = M[i][j]\n    # Return the sorted result matrix\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    This function takes a matrix as input and returns the sorted matrix in ascending order based on the sum of its rows.\n    \"\"\"\n    # Initialize an empty list to store the sorted matrix\n    sorted_matrix = []\n\n    # Loop through each row in the matrix\n    for row in M:\n        # Initialize an empty list to store the current row's sorted columns\n        sorted_row = []\n\n        # Loop through each column in the row\n        for column in row:\n            # Initialize a variable to store the sum of the current column and its adjacent columns\n            temp = 0\n\n            # Loop through each adjacent column in the same row\n            for i in range(len(row)-1):\n                temp += row[i+1]\n\n            # Add the current column's sum to the sorted row list\n            sorted_row.append(temp)\n\n        # Sort the current row's sorted columns in ascending order\n        sorted_row.sort()\n\n        # Add the sorted columns to the sorted matrix list\n        sorted_matrix.append(sorted_row)\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    # Find the sum of each row\n    sums = [sum(row) for row in M]\n    # Sort the rows in ascending order\n    sorted_rows = sorted(M, key=lambda row: row[0])\n    # Use the sorted rows to reconstruct the original matrix\n    result = [[0] * len(M[0]) for _ in range(len(M))]\n    for i, row in enumerate(sorted_rows):\n        for j, value in enumerate(row):\n            result[i][j] = value\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    # sort the matrix based on the row sums\n    sorted_matrix = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    # calculate the area of the triangle\n    area = 0.5 * l * b\n    # calculate the volume of the prism\n    volume = area * h\n    # return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3*l*b*h\n    print(\"The volume of the triangular prism is:\",V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h # formula to find the volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculating the volume of the prism\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n    "
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a pattern to match lowercase letters followed by an underscore\n    pattern = re.compile(r'^[a-z]+_[a-z]+$')\n    \n    # Check if the pattern matches the input string\n    if pattern.match(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]+(_[a-z]+)*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'([a-z])(_[a-z])+'\n\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z]+_'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!\\w)(\\w+)(?!\\w)'\n    matches = re.findall(pattern, text.lower())\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = re.compile(r'([a-z])_([a-z])')\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z][a-z_]*[a-z]\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for char in string:\n        if char in char_list:\n            char_list.remove(char)\n    result = \"\".join(char_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize a new string to store the result\n    result = \"\"\n    # Loop through the characters in the second string\n    for char in string:\n        # Check if the character is not present in the first string\n        if char not in string[:NO_OF_CHARS]:\n            # If it is not, add it to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # convert string1 to list of characters\n    lst1 = list(string1)\n\n    # iterate through each character of string2 and remove it from string1\n    for char in string2:\n        if char in lst1:\n            lst1.remove(char)\n\n    # convert list of characters back to string\n    string1 = ''.join(lst1)\n\n    return string1"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(string)\n    # Remove characters from the first string which are present in the second string\n    for char in chars:\n        if char in string:\n            chars.remove(char)\n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Remove characters from the list which are present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of all possible characters\n    all_chars = list(range(NO_OF_CHARS))\n    # create a list to store the characters from the first string\n    str1_chars = []\n    # loop through each character in the string\n    for char in string:\n        # check if the character is in the list of all possible characters\n        if char in all_chars:\n            # if the character is not present in the second string, add it to the list of characters from the first string\n            if char not in str(string)[1:-1]:\n                str1_chars.append(char)\n            # remove the character from the list of all possible characters\n            all_chars.remove(char)\n    # return the list of characters from the first string\n    return str1_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    for i in range(NO_OF_CHARS):\n        if i not in list_of_chars:\n            list_of_chars.append(chr(i))\n    return ''.join(list_of_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    new_string = ''\n    for char in string:\n        if char not in char_set:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    for char in list_of_chars:\n        if char in string:\n            list_of_chars.remove(char)\n    result = ''.join(list_of_chars)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each number in the array\n    freq = {}\n\n    # Iterate through each number in the array\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # If the number is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary to find whether any number has a frequency greater than 1\n    for num, freq in freq.items():\n        if freq > 1:\n            # If a number has a frequency greater than 1, return True\n            return True\n\n    # If no duplicate numbers are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = []\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return len(unique_nums)!= len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Use a set to store unique elements\n    unique_set = set(arraynums)\n    \n    # Check if the set has more than one element\n    return len(unique_set)!= len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    This function will check if the given number is woodall or not.\n    '''\n    # Check if the given number is a multiple of 3\n    if x % 3 == 0:\n        return 'Woodall'\n    else:\n        return 'Not a Woodall'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if x is divisible by 5\n    if x % 5 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1000:\n        return False\n    elif x < 10000:\n        return True\n    elif x < 100000:\n        return True\n    elif x < 1000000:\n        return True\n    elif x < 10000000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0 and (x % 3 == 0 or x % 5 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x == 1 or x == 3:\n        return True\n    else:\n        return is_woodall(x-1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 100:\n        return \"Not a woodball\"\n    elif x < 1000:\n        return \"Woodball\"\n    else:\n        return \"Wooden ball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 10 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    \n    if num == rev_num:\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num > 0:\n        rev_num = 0\n        while num > 0:\n            rem = num % 10\n            rev_num = rev_num * 10 + rem\n            num //= 10\n        if rev_num < (2 * num):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n    if num == reverse:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp = temp // 10\n    if rev_num == num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    return (num+1) ** 2 == rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Find the reverse of the given number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    \n    # Check if the reverse is one less than twice the original number\n    if reverse < (2 * num) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # Reverse the number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n        \n    # Check if the reversed number is one less than twice the original number\n    if rev_num - num == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    \n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    \n    return (rev_num % 2 == 0)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # Calculate the reverse of the number\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse*10 + temp%10\n        temp //= 10\n    # Check if the reverse is one less than twice the original number\n    if reverse - num == 2*num - reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    \n    # loop through all possible numbers\n    for i in range(1, 10**n):\n        # check if the current number can be formed with the given digits\n        num = i\n        for j in range(n-1, -1, -1):\n            if num % 10 == arr[j]:\n                num /= 10\n            else:\n                break\n        else:\n            # if the number is formed with the digits, update max_num\n            if num > max_num:\n                max_num = num\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    max_num = 0\n    for i in range(1, len(arr)+1):\n        max_num = max(max_num, int(''.join(map(str, arr[:i]))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n    \"\"\"\n    # Sorting the list of digits in ascending order\n    arr.sort()\n    # Initializing the maximum number to 0\n    max_num = 0\n    # Looping through the digits in the sorted list\n    for digit in arr:\n        # Adding the current digit to the maximum number\n        max_num += digit\n        # Updating the maximum number if it becomes greater than the previous maximum number\n        if max_num > max_num_prev:\n            max_num_prev = max_num\n    # Returning the final maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 0 : \n        return 0 \n    if n == 1 : \n        return arr[0]\n    if arr[0] > arr[1] : \n        return arr[0] + 9*find_Max_Num(arr[1:]) \n    else : \n        return arr[1] + 9*find_Max_Num(arr[:-1]) "
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Create a set to store unique digits in the given list\n    digits_set = set(arr)\n    # Sort the set in descending order\n    digits_set = sorted(digits_set, reverse=True)\n    # Initialize the largest number as 0\n    largest_num = 0\n    # Initialize a variable to keep track of the current number formed\n    current_num = 0\n    # Loop through each digit in the sorted set\n    for digit in digits_set:\n        # Multiply the current number by 10 and add the digit to get the next number\n        next_num = current_num * 10 + digit\n        # Check if the next number is greater than the current largest number\n        if next_num > largest_num:\n            # Update the largest number if necessary\n            largest_num = next_num\n        # Update the current number with the next number\n        current_num = next_num\n    # Return the largest number\n    return largest_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n    # Sorting the list of digits in non-decreasing order\n    arr.sort(reverse=True)\n    # Initializing the maximum number to 0\n    max_num = 0\n    # Initializing the carry value to 0\n    carry = 0\n    # Looping through each digit of the list\n    for digit in arr:\n        # Updating the maximum number\n        max_num = max_num*10 + digit + carry\n        # Updating the carry value\n        carry = 0 if digit < 5 else 1\n    # If there is still a carry left, adding it to the maximum number\n    if carry == 1:\n        max_num += 5\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sorting the given list in ascending order\n    arr.sort()\n\n    # Initialize the maximum number formed with the digits as 0\n    max_num = 0\n\n    # Initialize the current number formed with the digits as 0\n    curr_num = 0\n\n    # Loop through the sorted list of digits\n    for digit in arr:\n        # Multiply the current number with 10 to get the next number formed with the digit\n        next_num = curr_num * 10\n\n        # Check if the next number formed with the digit is greater than the maximum number formed so far\n        if next_num > max_num:\n            # Update the maximum number formed so far\n            max_num = next_num\n\n        # Update the current number formed with the digit\n        curr_num = digit\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            num = int(\"\".join(sorted(arr[i:j+1])))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    def find_Max_Num_helper(arr, remaining, res):\n        if remaining == 0:\n            res.append(int(''.join(str(x) for x in arr)))\n            return\n        for i in range(10):\n            if i not in arr and remaining - i >= 0:\n                arr.append(i)\n                find_Max_Num_helper(arr, remaining - i, res)\n                arr.pop()\n\n    arr = sorted(set(arr), reverse=True)\n    return find_Max_Num_helper(arr, sum(arr), [])\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = arr[0]\n    for i in range(1, n):\n        max_num = max(max_num, arr[i] + max_num)\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        return \"The two integers have opposite signs.\"\n    elif x < 0 and y < 0: \n        return \"The two integers have opposite signs.\"\n    elif x < 0 and y > 0: \n        return \"The first integer has negative sign and the second integer has positive sign.\"\n    else: \n        return \"The first integer has positive sign and the second integer has negative sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0:\n        return \"The two numbers have the same sign.\"\n    elif x < 0 and y < 0:\n        return \"The two numbers have the same sign.\"\n    else:\n        return \"The two numbers have opposite signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if both numbers are of the same type (integer or float)\n    if isinstance(x, int) and isinstance(y, int):\n        # Check if the sign of x and y are opposite\n        if (x * y) < 0:\n            return True\n        else:\n            return False\n    else:\n        raise TypeError('Both inputs must be integers')"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function takes two integers as input and returns True if the sign of the difference between the two integers is odd, and False otherwise.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0: # if x is positive and y is negative\n        return True\n    elif x < 0 and y > 0: # if x is negative and y is positive\n        return True\n    else: # if x and y are of same sign\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs.\"\n    elif x > 0 and y < 0:\n        return \"The first number has a positive sign and the second number has a negative sign.\"\n    elif x < 0 and y > 0:\n        return \"The first number has a negative sign and the second number has a positive sign.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    # check if x and y have the same sign\n    if x == 0 or y == 0:\n        return \"The signs are the same\"\n    elif x < 0 and y < 0 or x > 0 and y > 0:\n        return \"The signs are the same\"\n    elif x < 0 and y > 0 or x > 0 and y < 0:\n        return \"The signs are opposite\"\n    else:\n        return \"The signs are not the same\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, n//i+1):\n            if j**2 + i**2 == 16:\n                return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"The value of n should be greater than or equal to 1.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n - 1)) // 2 + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a)\n        a = a + b\n        b = b + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the formula for the nth octagonal number\n    formula = n * (3**0.5)\n    return formula"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    for i in range(1, n+1):\n        octagonal += i*(3*i-1)/2\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_n = 0\n    for i in range(1, n + 1):\n        oct_n += 2*i**2\n    return oct_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * (n ** 3) + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_pentagonal(m): \n        '''\n        Write a function to find the nth pentagonal number.\n        '''\n        return (5 * (m ** 2) + 5 * m) / 10\n    return is_pentagonal(n // 2) + is_pentagonal(n // 2 + 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define a function to check if a number is an octagonal number\n    def is_octagonal_helper(num):\n        return (num**2 + num) % 12 == 0\n\n    # Iterate through the numbers from 1 to n and check if each one is an octagonal number\n    for i in range(1, n+1):\n        if is_octagonal_helper(i):\n            return i"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2) + is_octagonal(n-3)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    digit_sum = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        if i == n-1:\n            digit_sum[0] += 1\n        else:\n            digit_sum[s[i]] += 1\n            digit_sum[s[i+1]] -= 1\n        for j in range(i, n-i):\n            if digit_sum[s[j]] == j+1:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n\n        # Initialize a variable to keep track of the current substring\n        substring = ''\n\n        # Loop through each character after the current one\n        for j in range(i+1, len(s)+1):\n\n            # Add the current character to the substring\n            substring += s[j-1]\n\n            # If the substring has the sum of digits equal to its length, increment the count in the dictionary\n            if sum(int(digit) for digit in substring) == len(substring):\n                count_dict[substring] += 1\n\n    # Return the dictionary with the count of substrings with the sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    prev_sum = defaultdict(int)\n    \n    for i in range(n):\n        prefix_sum = sum(int(digit) for digit in s[:i+1])\n        prev_sum[prefix_sum] += 1\n        \n        suffix_sum = sum(int(digit) for digit in s[i:])\n        prev_sum[suffix_sum] -= 1\n        \n        if prev_sum[prefix_sum] >= 0:\n            count += prev_sum[prefix_sum]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            \n            # If the substring sum is equal to the length of the substring, increment the count in the dictionary\n            if substring_sum == j-i:\n                count_dict[substring_sum] += 1\n    \n    # Return the dictionary with the count of substrings\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Loop through all possible lengths of substrings\n    for i in range(1, len(s)+1):\n\n        # Loop through all possible starting positions\n        for j in range(len(s)-i+1):\n\n            # Extract the substring and convert it to a list of digits\n            substring = s[j:j+i]\n            digit_list = [int(d) for d in substring]\n\n            # Calculate the sum of digits and store the count in the dictionary\n            count_dict[sum(digit_list)] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[i] = 1\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(s[k]) for k in range(i, j)) == j-i:\n                count[j-1] += 1\n    return count[len(s)-1]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    # create a dictionary to store the sum of digits for each index in the string\n    digit_sums = defaultdict(int)\n    for i, digit in enumerate(s):\n        digit_sums[i] = digit_sums[i-1] + int(digit)\n        if digit_sums[i] == len(digit):\n            count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    # Create a dictionary to store the count of substrings with digits as keys\n    digit_count = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Get the substring starting from index i\n        substring = s[i:]\n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in substring)\n        # If the sum is equal to the length of the substring, increment the count in the dictionary\n        if substring_sum == len(substring):\n            digit_count[len(substring)] += 1\n            count += 1\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with the given sum\n    count_dict = defaultdict(int)\n\n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum([int(digit) for digit in s[i:j]])\n            # If the sum is equal to the length of the substring, add 1 to the count of substrings with the given sum\n            if substring_sum == len(s[i:j]):\n                count_dict[substring_sum] += 1\n\n    # Return the count of substrings with the given sum\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count[substring] += 1\n    return sum(count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # initialize smallest variable to the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for x in xs[1:]:\n        # if the current element is smaller than the smallest so far, update the smallest\n        if x < smallest:\n            smallest = x\n    # return the smallest element\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = smallest_num(xs[1:])\n        if smallest is None:\n            return None\n        elif xs[0] < smallest:\n            return xs[0]\n        else:\n            return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        raise ValueError(\"List is empty\")\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Returns the smallest number in the list `xs`.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        raise ValueError('List is empty')\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    max_diff = 0\n\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i][0], test_list[j][0]))\n\n    for pair in pairs:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize the maximum difference variable\n    max_diff = 0\n    \n    # Loop through each pair of tuples in the sorted list\n    for i in range(len(sorted_list) - 1):\n        # Calculate the difference between the second elements of the current pair and the next pair\n        diff = sorted_list[i+1][1] - sorted_list[i][1]\n        \n        # Update the maximum difference if the current difference is greater than the current maximum difference\n        max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize the minimum difference and the maximum difference variables to negative infinity\n    min_diff = float('-inf')\n    max_diff = float('-inf')\n\n    # Loop through the tuple list\n    for pair in test_list:\n\n        # Calculate the difference between the first element and the second element of the current pair\n        diff = pair[0] - pair[1]\n\n        # Update the minimum difference and maximum difference if the current difference is greater\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the maximum difference to be the smallest possible value\n    max_diff = float('-inf')\n\n    # Loop through each pair in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the pairs\n            diff = abs(test_list[i][1] - test_list[j][1])\n\n            # Update the maximum difference if necessary\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize variables to store the maximum difference and the pair of elements\n    max_diff = test_list[1] - test_list[0]\n    pair = (test_list[0], test_list[1])\n\n    # Loop through the list and compare adjacent elements to find the maximum difference\n    for i in range(2, len(test_list)):\n        curr_diff = test_list[i] - test_list[i-1]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n            pair = (test_list[i-1], test_list[i])\n\n    return pair"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    min_val = test_list[0][0]\n    max_diff = 0\n    \n    for pair in test_list:\n        if pair[0] < min_val:\n            min_val = pair[0]\n        elif pair[0] > min_val:\n            max_diff = max(max_diff, pair[1] - min_val)\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = None\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][0], test_list[j][0]) - min(test_list[i][0], test_list[j][0])\n            if max_diff is None or diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function sorts a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Printing the sorted list of tuples\n    print(subjectmarks)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    def sum_list(flat_list):\n        if not flat_list:\n            return 0\n        return flat_list.pop() + sum_list(flat_list)\n\n    flat_list = flatten_list(data_list)\n    return sum_list(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # Base case: If the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: Add the first element and call the function again with the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the head of the list to the sum of the flattened tail of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(item) for item in data_list])\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if list is empty or contains only one element, return it\n    if len(data_list) == 0 or len(data_list) == 1:\n        return data_list\n    \n    # Recursive case: remove the first element and add the result to the rest of the list\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list.extend(flatten(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    \n    # Recursively call the function on the remaining elements of the list\n    remaining_sum = recursive_list_sum(data_list[1:])\n    \n    # Add the first element of the list to the sum of the remaining elements\n    return data_list[0] + remaining_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the number of positive integers in the list.\n    \"\"\"\n    pos_count = 0\n    for num in lst:\n        if num > 0:\n            pos_count += 1\n    return pos_count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(n+1):\n        for j in range(n+1):\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of ways to partition a set of Bell numbers with n elements.\n\n    :param n: an integer representing the number of elements in the set of Bell numbers\n    :return: the number of ways to partition the set of Bell numbers with n elements\n    \"\"\"\n    # Base case: if n is 0 or 1, there is only one way to partition the set\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all possible partitionings of the set of Bell numbers\n    for i in range(n + 1):\n        for j in range(1, n + 1):\n            # If the i-th element is in the i-th column, and the j-th element is in the j-th row, increment the count by 1\n            if i == j:\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2*(bell_number(n-1) + bell_number(n-2))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize variables\n    ways = 0\n    bell_numbers = []\n\n    # Create a list of Bell numbers up to n\n    for i in range(1, n+1):\n        bell_numbers.append(bell_numbers[-1] + bell_numbers[-2])\n\n    # Loop through each element in the list and count the number of ways to partition it into two subsets\n    for num in bell_numbers:\n        if num <= n:\n            ways += 1\n\n    # Return the number of ways to partition the set of Bell numbers into two subsets\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # If n is less than or equal to 1, there is only one way to partition the set\n    if n <= 1:\n        return 1\n\n    # Initialize a dictionary to store the number of ways to partition the set\n    ways = {}\n\n    # Initialize the first two Bell numbers\n    for i in range(2, n+1):\n        ways[i] = 0\n\n    # Fill in the rest of the dictionary using dynamic programming\n    for k in range(2, n+1):\n        for i in range(1, n+1):\n            if i >= k:\n                ways[i] += ways[i-k]\n\n    # Return the number of ways to partition the set\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: If n is 0, there is only one way to partition the set\n    if n == 0:\n        return 1\n    # Base case: If n is 1, there is only one way to partition the set\n    if n == 1:\n        return 1\n    # Base case: If n is 2, there are two ways to partition the set:\n    # 1) with two empty sets\n    # 2) with one empty set and one non-empty set\n    if n == 2:\n        return 2\n    # Recursive case: If n is greater than 2, there are n+1 ways to partition the set\n    # If we take the first element and partition the set into two smaller sets, there are n ways\n    # to do this, and we can add the second set to the larger set. This gives us n+1 ways.\n    return bell_number(n-1) + bell_number(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize variables\n    p = [1] * (n+1)\n    count = 0\n\n    # Fill p array using recurrence relation\n    for i in range(1, n+1):\n        p[i] = (p[i-1] * (n-i+1)) // i\n\n    # Count number of partitions\n    for i in range(1, n+1):\n        count += p[i]\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n\n    count = 0\n    for i in range(3, n+1):\n        count += bell_number(i-1) * bell_number(n-i)\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        # initialize the result array\n        result = [1, 1]\n        # loop over the remaining bell numbers\n        for i in range(2, n):\n            # loop over the previous bell numbers\n            for j in range(i):\n                # add the results of the previous calculations\n                result[i] += result[j]\n        return result[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    \n    # Check if all the elements in the array are the same\n    if A[0] == A[-1]: \n        return True\n    \n    # Check if the array is monotonic in terms of increasing or decreasing\n    if A[0] <= A[1] and A[-1] >= A[-2]: \n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) <= 1:\n        return True\n\n    if A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    elif A[0] > A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    elif A[0] < A[1]:\n        return all(A[i] < A[i+1] for i in range(len(A)-1))\n    elif A[0] > A[1]:\n        return all(A[i] > A[i+1] for i in range(len(A)-1))\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n): \n        if A[i] < A[i-1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    A is the given array.\n    '''\n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return False\n    if A[0] == A[-1]:\n        return True\n    if A[0] < A[-1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A and returns True if the array is monotonic or False otherwise.\n\n    A monotonic array is an array where each element is either increasing or decreasing.\n\n    For example, [1, 2, 3, 4, 5] is increasing and [5, 4, 3, 2, 1] is decreasing.\n\n    Args:\n        A: A list of integers.\n\n    Returns:\n        True if the array is monotonic, otherwise False.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    increasing = (A[1] > A[0])\n    decreasing = (A[1] < A[0])\n    \n    for i in range(1, len(A)):\n        if increasing and (A[i] < A[i-1]):\n            return False\n        elif decreasing and (A[i] > A[i-1]):\n            return False\n            \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 0 or n == 1:\n        return True\n    elif A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if is_sublist(l[i+1:], s[1:]):\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if s is a sublist of l\n    for i in range(len(l)):\n        if l[i:] == s:\n            return True\n    \n    # If s is not a sublist of l, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sub in s:\n        if sub not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l)-len(s)+1):\n        if all(l[j] == s[j] for j in range(len(s))):\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # List to store all tuples in the list\n    all_tuples = []\n    \n    # Loop through the input list of tuples\n    for i in Input:\n        all_tuples.append(i)\n        \n    # Check if all tuples have equal length or not\n    for i in all_tuples:\n        if len(i)!= len(all_tuples[0]):\n            return False\n        \n    # If all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # iterate through the list of tuples\n    for i in Input:\n        # check if the length of the tuple is equal to the length of the first tuple\n        if len(i)!= len(Input[0]):\n            # if the length is not equal, return False\n            return False\n    # if all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(Input) == len(set(map(tuple, Input))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Using tuple unpacking to access each element of the input list\n    for x in Input:\n        # If the length of the tuple is equal to 0, then return False\n        if len(x) == 0:\n            return False\n        # If the length of the tuple is not equal to 0, then break out of the loop\n        else:\n            break\n    \n    # If the loop completes without returning False, then return True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    count = 0\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            gap = gap // 1.3\n        else:\n            gap = max(1, int(gap / 1.3))\n        count += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        swapped = False\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Define the maximum number of iterations and the gap size\n    max_iter = 100\n    gap = 1\n\n    # While the gap is greater than 1 and the maximum number of iterations has not been reached\n    while gap > 1 and max_iter > 0:\n        # Set the gap size to half the current gap size\n        gap = int(gap / 1.3)\n\n        # Set the maximum number of iterations to the minimum of the current gap size and the maximum gap size\n        max_iter = min(gap, max_iter)\n\n        # Iterate over the list with the gap size and swap elements that are out of order\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    # initialize variables for iteration count and direction\n    n = len(nums)\n    direction = 1\n    count = 0\n    \n    # initialize swap function\n    def swap(nums, a, b):\n        nums[a], nums[b] = nums[b], nums[a]\n    \n    # while the direction is not stable, iterate\n    while direction == 1:\n        # initialize swapped to False\n        swapped = False\n        \n        # iterate over the list\n        for i in range(n-1):\n            # if the current element is greater than the next element, swap them\n            if nums[i] > nums[i+1]:\n                swap(nums, i, i+1)\n                swapped = True\n        \n        # if no swaps were made, the list is sorted\n        if not swapped:\n            break\n        \n        # update the direction\n        direction = -1\n        \n        # update the iteration count\n        count += 1\n        \n        # if the iteration count exceeds the maximum number of iterations, stop\n        if count == 100:\n            break\n    \n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    max_iter = 10000\n    \n    while True:\n        swapped = False\n        for i in range(1, n):\n            if nums[i-1] > nums[i]:\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n                swapped = True\n        \n        if not swapped:\n            break\n        \n        if n <= 1:\n            break\n        \n        n -= 1\n        \n        if max_iter == 0:\n            break\n        \n        max_iter //= 2\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # define the maximum number of iterations\n    max_iter = len(nums) * 2\n\n    # define the gap increment\n    gap = len(nums)\n\n    while gap > 1:\n        # calculate the new gap\n        gap = int(gap / 1.3)\n\n        # reset the flag\n        swapped = False\n\n        # compare adjacent elements and swap if they are out of order\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        # break out of the loop if no swaps were made in this iteration\n        if not swapped:\n            break\n\n        # update the maximum number of iterations\n        max_iter -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    sorted = False\n    gap = n\n\n    while not sorted:\n        gap = int(gap / 1.3)\n        sorted = True\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted = False\n\n        if gap < 1:\n            break\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # create a list of numbers from 1 to n\n    nums = list(range(1, n+1))\n    \n    # loop through each number and check if it can be represented as the difference of two squares\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if nums[i] + nums[j] == n:\n                return True\n    \n    # if no pair of squares can be found, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5)):\n        if i*i == n or (n-i*i) % i == 0:\n            return True\n    return False\n\nprint(dif_Square(27)) # True\nprint(dif_Square(49)) # False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n\n    # Find the square of the number\n    s = n*n\n\n    # Check if the square is a difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        if s == i*i + i**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check for even number of digits in n\n    if len(str(n)) % 2 == 0:\n        return False\n    # check for all digits in n are in range [0, 9]\n    for digit in str(n):\n        if int(digit) < 0 or int(digit) > 9:\n            return False\n    # check if n can be represented as the difference of two squares\n    a, b = 0, n\n    while b!= 0:\n        a, b = b, a % b\n    return a == 0"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Initialize two variables to store the squares of each digit of the given number\n    square1 = 0\n    square2 = 0\n    \n    # Get the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n    \n    # Find the squares of each digit\n    for digit in digits:\n        square1 += digit*digit\n        square2 += digit*digit\n    \n    # Check if the given number can be represented as the difference of two squares\n    if square1**2 == square2**2 + n:\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if n can be represented as a sum of squares\n    for i in range(1, int(n**0.5) + 1):\n        if (n - i**2) % i == 0:\n            return True\n        if (n - i**2) % (i + 1) == 0:\n            return True\n\n    # Check if n can be represented as a difference of squares\n    for i in range(1, int(n**0.5) + 1):\n        if (n - i**2) % (i + 1) == 0:\n            return True\n\n    # If none of the above conditions are met, n cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # To check whether a number can be represented as the difference of two squares or not, we first need to find its squares.\n    sqrt_n = int(n**0.5)\n    sqrt_n_square = sqrt_n**2\n    # Now we need to check whether the given number can be represented as the difference of two squares or not.\n    if sqrt_n_square - n < n and sqrt_n_square + n > n:\n        print(\"The given number can be represented as the difference of two squares.\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    # check if the number is already a square or not\n    if n * n == n:\n        return True\n    # check if the number is divisible by 4\n    if n % 4 == 0:\n        return False\n    # check if the number is divisible by 9\n    if n % 9 == 0:\n        return False\n    # check if the number is divisible by 16\n    if n % 16 == 0:\n        return False\n    # check if the number is divisible by 25\n    if n % 25 == 0:\n        return False\n    # check if the number is divisible by 36\n    if n % 36 == 0:\n        return False\n    # check if the number is divisible by 49\n    if n % 49 == 0:\n        return False\n    # check if the number is divisible by 64\n    if n % 64 == 0:\n        return False\n    # check if the number is divisible by 81\n    if n % 81 == 0:\n        return False\n    # check if the number is divisible by 100\n    if n % 100 == 0:\n        return False\n    # check if the number is divisible by 121\n    if n % 121 == 0:\n        return False\n    # check if the number is divisible by 144\n    if n % 144 == 0:\n        return False\n    # check if the number is divisible by 169\n    if n % 169 == 0:\n        return False\n    # check if the number is divisible by 196\n    if n % 196 == 0:\n        return False\n    # check if the number is divisible by 225\n    if n % 225 == 0:\n        return False\n    # check if the number is divisible by 256\n    if n % 256 == 0:\n        return False\n    # check if the number is divisible by 289\n    if n % 289 == 0:\n        return False\n    # check if the number is divisible by 324\n    if n % 324 == 0:\n        return False\n    # check if the number is divisible by 361\n    if n % 361 == 0:\n        return False\n    # check if the number is divisible by 400\n    if n % 400 == 0:\n        return False\n    # check if the number is divisible by 441\n    if n % 441 == 0:\n        return False\n    # check if the number is divisible by 484\n    if n % 484 == 0:\n        return False\n    # check if the number is divisible by 529\n    if n % 529 == 0:\n        return False\n    # check if the number is divisible by 576\n    if n % 576 == 0:\n        return False\n    # check if the number is divisible by 625\n    if n % 625 == 0:\n        return False\n    # check if the number is divisible by 676\n    if n % 676 == 0:\n        return False\n    # check if the number is divisible by 729\n    if n % 729 == 0:\n        return False\n    # check if the number is divisible by 784\n    if n % 784 == 0:\n        return False\n    # check if the number is divisible by 841\n    if n % 841 == 0:\n        return False\n    # check if the number is divisible by 900\n    if n % 900 == 0:\n        return False\n    # check if the number is divisible by 961\n    if n % 961 == 0:\n        return False\n    # check if the number is divisible by 1024\n    if n % 1024 == 0:\n        return False\n    # check if the number is divisible by 1089\n    if n % 1089 == 0:\n        return False\n    # check if the number is divisible by 1156\n    if n % 1156 == 0:\n        return False\n    # check if the number is divisible by 1225\n    if n % 12"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # initialize variables\n    min_val = 1\n    max_val = n\n    ans = []\n\n    # find the minimum and maximum values that can be represented as the difference of two squares\n    while max_val - min_val > 1:\n        mid_val = (max_val + min_val) // 2\n        if mid_val * mid_val == n:\n            max_val = mid_val\n        elif mid_val * mid_val < n:\n            min_val = mid_val\n        else:\n            max_val = mid_val - 1\n\n    # check if the difference of the minimum and maximum values can be represented as a square\n    if (max_val * max_val) - n < min_val:\n        print(\"Yes\")\n        return True\n    else:\n        print(\"No\")\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Convert the number to a string\n    s = str(n)\n\n    # Iterate over the string and check whether the difference of squares can be formed\n    for i in range(len(s)):\n        if i == 0:\n            if int(s[i:i+2])**2!= int(s[i+2:])**2:\n                return False\n        elif i == len(s)-1:\n            if int(s[:i+2])**2!= int(s[i:])**2:\n                return False\n        else:\n            if int(s[:i+2])**2!= int(s[i:i+2])**2:\n                return False\n\n    # If no difference can be formed, then the number can be represented as the difference of two squares\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Create an empty dictionary to store the count of each color in the patterns\n    color_count = {}\n    \n    # Loop through each pattern and count the number of occurrences of each color in it\n    for pattern in patterns:\n        for color in pattern:\n            if color in color_count:\n                color_count[color] += 1\n            else:\n                color_count[color] = 1\n    \n    # Loop through each color in the colors array and check if the count of that color in the patterns is same as the count in the colors array\n    for color in colors:\n        if color_count[color]!= colors.count(color):\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for i in range(len(patterns)):\n        if patterns[i] == colors[i]:\n            count += 1\n        else:\n            count = 0\n            if i == len(patterns) - 1:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    length = len(colors)\n\n    if length!= len(patterns):\n        return False\n\n    current_pattern = patterns[0]\n    count = 1\n\n    for color in colors:\n        if color == current_pattern:\n            count += 1\n        else:\n            if current_pattern == \"W\":\n                if count == 1:\n                    continue\n                else:\n                    return False\n            else:\n                if count % 2 == 0:\n                    return False\n            current_pattern = color\n            count = 1\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    count = 0\n    for i in range(n-2):\n        if patterns[i] == patterns[i+2]:\n            count += 1\n            if count == 2:\n                return True\n        else:\n            count = 0\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    pattern_count = 0\n    color_count = 0\n\n    # Iterate through the colors list\n    for color in colors:\n        # Check if the color is present in the pattern\n        if patterns[pattern_count] == color:\n            color_count += 1\n            # If all colors are present, move to the next pattern\n            if color_count == len(patterns[pattern_count]):\n                color_count = 0\n                pattern_count += 1\n                # If all patterns have been processed, return True\n                if pattern_count == len(patterns):\n                    return True\n                else:\n                    continue\n        # If the color is not present in the pattern, return False\n        else:\n            return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists, colors and patterns, as input.\n    colors is a list of colors for which the patterns are given.\n    patterns is a list of patterns in the given order.\n\n    The function should return True if the colors are in the same order as the patterns.\n    False otherwise.\n    '''\n\n    # Check if the lengths of the two lists are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check if the colors are in the same order as the patterns\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    # If we get here, the colors are in the same order as the patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    Parameters:\n    colors: list of strings, representing the colors of the pebbles.\n    patterns: list of lists of strings, representing the pattern of the pebbles.\n\n    Returns:\n    True if the pebbles follow the sequence given in the patterns array, False otherwise.\n    \"\"\"\n\n    # Check if the lengths of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Define a function to check if a pattern is valid for a given color\n    def check_pattern(color, pattern):\n        \"\"\"\n        Check if a pattern is valid for a given color.\n\n        Parameters:\n        color: string, representing the color of the pebble.\n        pattern: list of strings, representing the pattern of the pebble.\n\n        Returns:\n        True if the pattern is valid for the given color, False otherwise.\n        \"\"\"\n\n        # Define a function to check if a pebble is present in a given pattern\n        def check_pebble(color, pebble):\n            \"\"\"\n            Check if a pebble is present in a given pattern.\n\n            Parameters:\n            color: string, representing the color of the pebble.\n            pebble: string, representing the pebble.\n\n            Returns:\n            True if the pebble is present in the pattern, False otherwise.\n            \"\"\"\n            return pebble == color\n\n        # Check if the pebbles are present in the pattern\n        for pebble in pattern:\n            if not check_pebble(color, pebble):\n                return False\n\n        return True\n\n    # Check if each pattern is valid for the corresponding color in the patterns list\n    for i in range(len(patterns)):\n        if not check_pattern(colors[i], patterns[i]):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    sequence = [colors[0]]\n    current_pattern = patterns[0]\n    count = 1\n    \n    # Loop through the colors\n    for i in range(1, len(colors)):\n        # If the colors are the same as the previous color and the current pattern is the same as the next pattern,\n        # add the count to the sequence and reset the count\n        if colors[i] == sequence[-1] and current_pattern == patterns[i]:\n            count += 1\n            if count == 3:\n                sequence.append(colors[i])\n                count = 1\n        # If the current color is different than the previous color and the current pattern is different from the next pattern,\n        # reset the count and the sequence\n        elif colors[i]!= sequence[-1] and current_pattern!= patterns[i]:\n            sequence = [colors[i]]\n            count = 1\n    \n    # Check if the count is 3\n    if count == 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for tup in test_list:\n        flag = True\n        for num in tup:\n            if num % K!= 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        if all(num % K == 0 for num in tuple_):\n            result.append(tuple_)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            divisible_tuples.append(test_list[i])\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples\n    result = []\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if all elements of the tuple are divisible by k\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by k, add the tuple to the result list\n            result.append(tup)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the result\n    result = []\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # check if all elements in the tuple are divisible by k\n        if all(x % K == 0 for x in test_list[i]):\n            # if they are, add the tuple to the result list\n            result.append(test_list[i])\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer k as inputs and returns a list of tuples which have all elements divisible by k from the input list of tuples.\n    '''\n    result = []\n    \n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in test_list:\n        if all(elem % K == 0 for elem in i):\n            divisible_tuples.append(i)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    # Function to check if all elements in a tuple are divisible by k\n    def is_divisible(t):\n        for num in t:\n            if num % K!= 0:\n                return False\n        return True\n\n    # Filter the list of tuples to include only those with all elements divisible by k\n    result = [t for t in test_list if is_divisible(t)]\n\n    # Return the filtered list of tuples\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer n as input and returns True if it is divisible by 11,\n    and False otherwise.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a single argument 'n' and returns True if it is divisible by 11, and False otherwise.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 1: # Check if the length of the word is odd\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split()\n    for i in range(len(s)):\n        if len(s[i]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return \"The length of the word is even\"\n        else:\n            return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    if len(word[0])%2==0:\n        print(\"The length of the first word is even\")\n    else:\n        print(\"The length of the first word is odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return \"The length of the word is even.\"\n        else:\n            return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    '''\n    word = s.split()\n    if len(word) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 0:\n            print(f\"{word} is even\")\n        else:\n            print(f\"{word} is odd\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) / 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 8\n    elif n == 3: \n        return 24\n    else:\n        for i in range(4, n+1):\n            if i*(3*i-1)//2 == n:\n                return i*(3*i-1)//2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Find the sum of the cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Find the sum of the cubes of the natural numbers from 1 to n\n    sum_cubes_from_one_to_n = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the nth tetrahedral number\n    nth_tetrahedral_number = sum_cubes - sum_cubes_from_one_to_n\n    \n    return nth_tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the constants\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n\n    # Initialize the sum\n    sum = 0\n\n    # Calculate the nth tetrahedral number\n    for i in range(1, n+1):\n        sum += ((a+b+c+d)**i - (a+b+c)**i - (a+b+d)**i - (a+b+c)**i + a**i + b**i + c**i + d**i - (a+b+c+d)**(i-1)) // (4 * (a+b+c+d))\n\n    return sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 4\n        else:\n            return 4 * (n - 1) + 4\n    \n    return (f(n + 1) - f(n)) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n\n    The nth tetrahedral number is defined as the number of triangles \n    with vertices of length 1, 2, 3, and 4.\n\n    There are n! possible tetrahedral numbers, and this function \n    returns the nth tetrahedral number.\n\n    To calculate the nth tetrahedral number, we use the formula:\n\n    t(n) = (n^2/2) * (3*n^2/2 - 1)\n\n    where n is the input value of the function.\n\n    The formula works because each tetrahedral number is the sum of \n    three other tetrahedral numbers. The sum of three other tetrahedral \n    numbers is given by the formula:\n\n    (a+b+c+d) = (a^2+b^2+c^2+d^2)/2 - (a+b+c+d)/2^2\n    t(n) = t(n-1) + t(n-2) + t(n-3)\n\n    where t(n-1), t(n-2), and t(n-3) are the nth tetrahedral numbers.\n    '''\n    # Check if n is an integer and between 1 and 10000\n    if not isinstance(n, int) or n < 1 or n > 10000:\n        raise ValueError(\"n must be an integer between 1 and 10000\")\n\n    # If n is 1, return 1\n    if n == 1:\n        return 1\n\n    # Calculate the formula t(n)\n    t_n = (n**2/2) * (3*n**2/2 - 1)\n\n    # Calculate the sum of the three other tetrahedral numbers\n    t_n_1 = tetrahedral_number(n-1)\n    t_n_2 = tetrahedral_number(n-2)\n    t_n_3 = tetrahedral_number(n-3)\n\n    # Return the sum of the three other tetrahedral numbers\n    return t_n - (t_n_1 + t_n_2 + t_n_3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first three numbers\n    a, b, c = 1, 2, 4\n\n    # Compute the nth tetrahedral number\n    for i in range(1, n + 1):\n        # Compute the next number\n        next_num = a + b + c\n\n        # If the number is greater than the current number, update the values\n        if next_num > a:\n            a, b, c = next_num, a, b\n        else:\n            b, c = next_num, c\n\n        # Increase the number of steps by 1\n        print(f'{i}th tetrahedral number: {next_num}')"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 4\n    for i in range(1, n+1):\n        temp = a\n        a = (a**2 + b**2 + c**2 + d**2)/2\n        b = (c**2 - d**2)/2\n        c = (a**2 - b**2 + d**2)/2\n        d = 4\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (4 * n - 1) // 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    V = (4/3)*pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and returns the volume of a sphere.\n    '''\n    pi = math.pi\n    vol = (4/3)*pi*(r**3)\n    return vol\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3  # Formula for volume of sphere\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the volume of the sphere\n    volume = (4/3) * math.pi * r**3\n    \n    # return the volume\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the character\n    char = \"\"\n    \n    # Iterate over each character of the string\n    for c in strr:\n        # Convert the character to ASCII value\n        ascii_val = ord(c)\n        \n        # Add the ASCII value to the character string\n        char += str(ascii_val % 26)\n    \n    # Return the character string\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # initialize an empty string to store the character\n    char = \"\"\n    # iterate over each character in the given string\n    for char in strr:\n        # add the ASCII value of the current character modulo 26 to the character string\n        char = char.upper()\n        char_value = ord(char)\n        char_value = (char_value + 96) % 26\n        char = chr(char_value) + char\n        # update the character string with the modified character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    # initialize an empty list to store ASCII values of characters\n    ASCII_val = []\n\n    # loop through each character in the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ASCII_val.append(ord(char))\n\n    # calculate the sum of the ASCII values\n    sum_val = sum(ASCII_val)\n\n    # calculate the remainder of the sum divided by 26\n    remainder = sum_val % 26\n\n    # convert the remainder to the corresponding character\n    char = chr(65 + remainder)\n\n    # return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val + 10) % 26)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 97) # adding 97 to convert to lowercase letter\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the character variable\n    char = \"\"\n    # loop through each character of the string\n    for i in range(len(strr)):\n        # add the ASCII value of the character to the character variable\n        char += chr(ord(strr[i])+1)\n    # return the character variable\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the characters\n    result = \"\"\n    \n    # Iterate over each character in the input string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        \n        # Add the ASCII value to the result string\n        result += chr((ascii_value + 26) % 26 + 65)\n    \n    return result"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n+1):\n        next_number = sum(sequence[-(2*i):-i])\n        if next_number > n:\n            next_number = 1\n        sequence.append(next_number)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(n - 1):\n        new_seq = []\n        for j in range(len(sequence) - 1):\n            new_seq.append(sequence[j] + sequence[j + 1])\n        new_seq.append(2)\n        sequence = new_seq\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    count = 2\n    while count < n:\n        temp = [0] * len(sequence)\n        for i in range(len(sequence)):\n            temp[i] = sequence[i] + sequence[i-1]\n        sequence = temp\n        count += 1\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    # initialize variables\n    i = 1\n    num = 1\n\n    # loop until the nth number is found\n    while i < n:\n        # check if the current number is odd or even\n        if num % 2 == 0:\n            num += 2  # add 2 to even numbers\n        else:\n            num += 1  # add 1 to odd numbers\n\n        # update the counter\n        i += 1\n\n    # return the nth number in the sequence\n    return num"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n+1):\n        if sequence[i-1] % 2 == 0:\n            sequence.append(sequence[i-1] * 3 + 1)\n        else:\n            sequence.append(sequence[i-1] * 3 + 1)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    next_sequence = [2, 3, 1]\n    while len(sequence) < n:\n        new_sequence = []\n        for i in range(len(sequence)):\n            if sequence[i] == 1:\n                new_sequence.extend(next_sequence)\n            else:\n                new_sequence.append(sequence[i])\n        sequence = new_sequence\n        next_sequence = [3] + [2 * i + 3 for i in range(len(next_sequence) - 1)]\n        next_sequence = [1] + next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    conway = [1, 1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            conway.append(conway[-1]+conway[-2])\n        else:\n            conway.append(conway[-1]*2)\n    return conway[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n-1):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (2*n+1)**n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*r**3\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # convert radius to meters\n    r_meters = r * 1000\n    \n    # calculate surface area using formula A = 4 * \u03c0 * r^2\n    surface_area = 4 * math.pi * (r_meters ** 2)\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for the surface area of a sphere\n    surface_area = 4 * math.pi * r ** 2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r * r\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        print((a + b) * (2 * i + 1) // 3)\n        a, b = b, (a + b) * (2 * i + 1) // 3"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    elif n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * n + centered_hexagonal_number(n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    # Define a function to check if a number is centered hexagonal\n    def is_centered_hexagonal(num):\n        # Check if the number is a centered hexagonal number\n        hex_num = 5 * (num // 6) - 3\n        return num == hex_num\n    \n    # Initialize the variables for the centered hexagonal number\n    num = 0\n    first_centered_hexagonal = 0\n    \n    # Iterate through the numbers from 0 to n\n    for i in range(1, n+1):\n        # Check if the current number is centered hexagonal\n        if is_centered_hexagonal(num):\n            # If it is, update the first centered hexagonal number\n            if i == 1:\n                first_centered_hexagonal = num\n            # Return the current centered hexagonal number\n            return num\n        \n        # If the current number is not centered hexagonal, increment it\n        num += 1\n    \n    # If there is no centered hexagonal number greater than n, return the first centered hexagonal number\n    return first_centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function calculates the nth centered hexagonal number.\n    \"\"\"\n    # define the values of n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 42\n    elif n == 6:\n        return 132\n    elif n == 7:\n        return 429\n    elif n == 8:\n        return 1377\n    elif n == 9:\n        return 4862\n    elif n == 10:\n        return 16796\n    elif n == 11:\n        return 62049\n    elif n == 12:\n        return 220030\n    elif n == 13:\n        return 777771\n    elif n == 14:\n        return 2952385\n    elif n == 15:\n        return 10905143\n    elif n == 16:\n        return 40329177\n    elif n == 17:\n        return 135912499\n    elif n == 18:\n        return 475912324\n    elif n == 19:\n        return 1638400000\n    elif n == 20:\n        return 6146799997\n    else:\n        # calculate the centered hexagonal number using a loop\n        num = 1\n        for i in range(2, n+1):\n            num += (i-1) * i\n        return num // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    n = n - 1  # subtract 1 to get the index of the hexagonal number\n    # Check if n is an integer\n    if not n.is_integer():\n        print(\"Error: n must be an integer.\")\n        return None\n    # Initialize variables\n    hexagonal_num = 0\n    count = 0\n    # Iterate through the hexagonal numbers\n    for i in range(1, n+1):\n        count += 1\n        hexagonal_num += 2*i*count\n        # If the index is odd, then add 2*i*count to the hexagonal number\n        if i % 2 == 1:\n            hexagonal_num += 2*i*count\n    return hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n\n    Args:\n    n (int): The index of the centered hexagonal number to be found.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    a = n\n    b = (3*n**2 + 1) // 2\n    return b"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n    g = 1\n    h = 1\n    i = 1\n    \n    for _ in range(1, n+1):\n        a, b, c, d, e, f, g, h, i = (g * a + h * b + i * c) + (f * d + i * e + a * h) + (d * g + b * i + c * f)\n        a, b, c, d, e, f, g, h, i = (g * a + h * b + i * c) + (f * d + i * e + a * h) + (d * g + b * i + c * f)\n        a, b, c, d, e, f, g, h, i = (g * a + h * b + i * c) + (f * d + i * e + a * h) + (d * g + b * i + c * f)\n        a, b, c, d, e, f, g, h, i = (g * a + h * b + i * c) + (f * d + i * e + a * h) + (d * g + b * i + c * f)\n        a, b, c, d, e, f, g, h, i = (g * a + h * b + i * c) + (f * d + i * e + a * h) + (d * g + b * i + c * f)\n    \n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # 3 is the number of sides of a centered hexagon\n    # 2 is the number of sides of a hexagon\n    return (n + 1) * (3 ** 2 - 1) // 2 + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initialize variables\n    current_hexagonal_number = 1\n    previous_centered_hexagonal_number = 1\n    centered_hexagonal_numbers = [1]\n\n    # Calculate centered hexagonal numbers\n    for i in range(2, n + 1):\n        centered_hexagonal_number = (current_hexagonal_number * 3) - 1\n        centered_hexagonal_numbers.append(centered_hexagonal_number)\n        current_hexagonal_number = centered_hexagonal_number - previous_centered_hexagonal_number\n        previous_centered_hexagonal_number = centered_hexagonal_number\n\n    # Return centered hexagonal numbers\n    return centered_hexagonal_numbers"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    Parameters:\n        dict1: A dictionary.\n        dict2: A dictionary.\n        dict3: A dictionary.\n\n    Returns:\n        A single dictionary containing all the key-value pairs from the three input dictionaries.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Convert the dictionaries to sets for faster merging\n    set1 = set(dict1.items())\n    set2 = set(dict2.items())\n    set3 = set(dict3.items())\n\n    # Merge the sets using the | (union) operator\n    merged_set = set1 | set2 | set3\n\n    # Convert the merged set back to a dictionary\n    merged_dict = dict(merged_set)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Args:\n    dict1: dictionary\n    dict2: dictionary\n    dict3: dictionary\n\n    Returns:\n    single_dict: dictionary\n    \"\"\"\n\n    single_dict = {}\n    single_dict.update(dict1)\n    single_dict.update(dict2)\n    single_dict.update(dict3)\n\n    return single_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged values\n    merged_dict = {}\n    \n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # If the key exists in the second dictionary and the value is a list, then merge the lists\n        if key in dict2 and isinstance(dict1[key], list):\n            merged_dict[key] = ct.ChainMap(dict1[key], dict2[key])\n        # If the key exists in the second dictionary and the value is a dictionary, then merge the dictionaries\n        elif key in dict2 and isinstance(dict1[key], dict):\n            merged_dict[key] = ct.ChainMap(dict1[key], dict2[key])\n        # If the key exists in the third dictionary and the value is a list, then merge the lists\n        elif key in dict3 and isinstance(dict1[key], list):\n            merged_dict[key] = ct.ChainMap(dict1[key], dict3[key])\n        # If the key exists in the third dictionary and the value is a dictionary, then merge the dictionaries\n        elif key in dict3 and isinstance(dict1[key], dict):\n            merged_dict[key] = ct.ChainMap(dict1[key], dict3[key])\n        # If the key exists in both dictionaries and the value is a list, then merge the lists\n        elif key in dict2 and key in dict3 and isinstance(dict1[key], list):\n            merged_dict[key] = ct.ChainMap(dict1[key], dict2[key], dict3[key])\n        # If the key exists in both dictionaries and the value is a dictionary, then merge the dictionaries\n        elif key in dict2 and key in dict3 and isinstance(dict1[key], dict):\n            merged_dict[key] = ct.ChainMap(dict1[key], dict2[key], dict3[key])\n        # If the key exists in either dictionary and the value is a list, then merge the lists\n        elif key in dict2 or key in dict3 and isinstance(dict1[key], list):\n            merged_dict[key] = ct.ChainMap(dict1[key], dict2.get(key, []), dict3.get(key, []))\n        # If the key exists in either dictionary and the value is a dictionary, then merge the dictionaries\n        elif key in dict2 or key in dict3 and isinstance(dict1[key], dict):\n            merged_dict[key] = ct.ChainMap(dict1[key], dict2.get(key, {}), dict3.get(key, {}))\n        # If the key exists only in the first dictionary, then add the value\n        else:\n            merged_dict[key] = dict1[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a new dictionary\n    containing the merged contents of the input dictionaries.\n    '''\n\n    # Initialize an empty dictionary to hold the merged contents\n    merged_dict = {}\n\n    # Loop through the keys in each dictionary and add their values to the merged dictionary\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # combine dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of each element in the list.\n    '''\n    freq_dict = collections.defaultdict(int) # using defaultdict to create a dictionary with initial value as 0\n    \n    for elem in lst:\n        freq_dict[elem] += 1\n    \n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    # Iterate over each element in the list and update its frequency in the dictionary\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    # Return the dictionary containing the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Count the frequency of each element in the list using a dictionary\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Convert the list to a dictionary with integer keys\n    freq_dict = collections.Counter(list1)\n    # Return the dictionary as a dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Using a dictionary to store the frequency of each element\n    freq_dict = collections.defaultdict(int)\n    # Iterate through the list and update the frequency dictionary\n    for num in list1:\n        freq_dict[num] += 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary of the frequency of all elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    # function to find the closest smaller number than n\n    num_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n    closest_num = None\n    \n    for num in num_list:\n        if abs(num - N) < abs(closest_num - N):\n            closest_num = num\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n    diff = float('inf')\n\n    # iterate through the numbers from 1 to n\n    for num in range(1, N+1):\n        # calculate the difference between n and num\n        diff = abs(N - num)\n\n        # check if the difference is smaller than smallest or closest\n        if diff < smallest:\n            closest = smallest\n            smallest = diff\n        elif diff < closest:\n            closest = diff\n\n    return smallest + closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = N - 1\n    bigger_num = N + 1\n    closest_num = abs(bigger_num - N)\n    while abs(bigger_num - smaller_num) > 1:\n        middle_num = (smaller_num + bigger_num) // 2\n        if middle_num < smaller_num:\n            smaller_num = middle_num\n        else:\n            bigger_num = middle_num\n        closest_num = abs(bigger_num - N)\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_num = N\n    min_diff = abs(N - min_num)\n    for i in range(N, -1, -1):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_num = i\n            min_diff = diff\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    closest_num = float('inf')\n    for i in range(1, N):\n        if abs(N-i) < closest_num:\n            min_num = i\n            closest_num = abs(N-i)\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    This function takes an integer N as input and returns the closest smaller number than N.\n    '''\n    diff = float('inf')\n    closest = float('-inf')\n\n    for num in range(1, N):\n        if abs(N - num) < diff:\n            diff = abs(N - num)\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(1, N):\n        if abs(i - N) < abs(closest - N):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    smallest_diff = abs(N)\n    closest = N\n    for num in range(N+1, 1000):\n        diff = abs(num - N)\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest = num\n        elif diff == smallest_diff and num < smallest:\n            smallest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    min_diff = float('inf')\n    closest_num = None\n    \n    # Iterate through numbers from 1 to n-1\n    for num in range(1, N):\n        # Calculate the difference between the current number and n\n        diff = abs(num - N)\n        \n        # If the difference is less than the minimum difference or the current number is closer to n than the closest number found so far, update the variables\n        if diff < min_diff or (diff == min_diff and num < closest_num):\n            min_diff = diff\n            closest_num = num\n    \n    # Return the closest smaller number than n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Given a number N, return the closest smaller number than N.\n\n    Parameters:\n    N (int): the number to find the closest smaller number for\n\n    Returns:\n    int: the closest smaller number to N\n    \"\"\"\n    min_num = 1\n    max_num = N\n\n    while min_num <= max_num:\n        mid = (min_num + max_num) // 2\n\n        if mid * mid <= N and (mid + 1) * (mid + 1) > N:\n            return mid\n\n        if mid * mid > N:\n            max_num = mid - 1\n        else:\n            min_num = mid + 1\n\n    return min_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n    \"\"\"\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    longest_word = ''\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    max_word = \"\"\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    word_lengths = []\n    for word in list1:\n        word_lengths.append(len(word))\n    return max(word_lengths)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # Initialize variables to store the length of the longest word and the longest word itself\n    longest_word_len = 0\n    longest_word = \"\"\n\n    # Loop through each word in the list\n    for word in list1:\n\n        # If the length of the word is greater than the current longest word length, update the variables\n        if len(word) > longest_word_len:\n            longest_word_len = len(word)\n            longest_word = word\n\n    # Return the length of the longest word\n    return longest_word_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(lst, sub_str):\n    \"\"\"\n    This function takes a list of string values and a substring as input. It checks if the substring is present as a substring in any of the strings in the list.\n    \"\"\"\n    for string in lst:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is even and undulating.\"\n    else:\n        return \"The number is odd and not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return False\n    elif n == 10:\n        return True\n    else:\n        return is_undulating(n-10)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n%2 == 0:\n        return False\n    else:\n        for i in range(3, int(n/2) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n//2 + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    if n == 0:\n        return \"The given number is zero.\"\n    elif n < 0:\n        return \"The given number is negative.\"\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                return \"The given number is not undulating.\"\n        return \"The given number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return is_undulating(n-1) or is_undulating(n-2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n\n    Args:\n        a (int): The base number.\n        b (int): The exponent.\n\n    Returns:\n        (int): The value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments, 'a' and 'b'.\n    It calculates the value of 'a' to the power of 'b' using the exponentiation algorithm and returns the result.\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        half_power = power(a, b // 2)\n        return half_power * half_power\n    else:\n        return a * power(a, b - 1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_index = 0\n    \n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    \n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = None\n    minimum_value = None\n    for i, tup in enumerate(test_list):\n        if minimum_index is None or tup[1] < minimum_value:\n            minimum_index = i\n            minimum_value = tup[1]\n    return minimum_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_len:  \n            min_len = len(sublist)  \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    min_length = None  \n    for sublist in lst:  \n        if min_length is None or len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = None\n    for i in lst:\n        if min_len is None or len(i) < min_len:\n            min_len = len(i)\n\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    \n    # loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # if n is divisible by i, add 1 to the list of divisors\n        if n % i == 0:\n            divisors += 1\n    \n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i!= n // i:\n                count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of its divisors.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return -1\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n            i += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is a list, recursively call the function to find the frequency of each element in the sub-list\n        if isinstance(element, list):\n            sub_freq = frequency_lists(element)\n            # Merge the sub-frequency dictionary into the main frequency dictionary\n            freq = {**freq, **sub_freq}\n        # If the element is not a list, add it to the dictionary with a frequency of 1\n        else:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    # Return the final dictionary with the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Convert the list of lists to a flattened list\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through the flattened list and count the frequency of each element\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq_dict:\n                freq_dict[list1[i][j]] += 1\n            else:\n                freq_dict[list1[i][j]] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency counts\n    frequency_dict = {}\n\n    # Loop through each element in the flattened list\n    for element in list1:\n        # If the element is not in the dictionary yet, add it with a frequency count of 1\n        if element not in frequency_dict:\n            frequency_dict[element] = 1\n        # If the element is already in the dictionary, increment its frequency count\n        else:\n            frequency_dict[element] += 1\n\n    # Return the frequency dictionary\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element in the flattened list\n    freq = {}\n    # loop through each element in the flattened list\n    for elem in list1:\n        # if the element is not in the dictionary, add it with a frequency of 1\n        if elem not in freq:\n            freq[elem] = 1\n        # otherwise, increment the frequency by 1\n        else:\n            freq[elem] += 1\n    # return the dictionary with the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    \n    # Iterate over each element in the flattened list of lists\n    for item in list1:\n        # If the item is a list, recursively call the function\n        if isinstance(item, list):\n            sub_dict = frequency_lists(item)\n            # Update the frequency count of the current item in the top-level dictionary\n            freq_dict[item] = freq_dict.get(item, 0) + sub_dict.get(item, 0)\n        # If the item is not a list, add it to the top-level dictionary with a frequency count of 1\n        else:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store frequency\n    freq_dict = {}\n    # Flatten the given list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Iterate through the flattened list and update frequency dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the updated frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in freq_dict:\n            # if it is, increment its frequency by 1\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    \n    # return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element in list1\n    freq_dict = {}\n    # iterate over each element in list1\n    for item in list1:\n        # if the element is not already in the dictionary, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[item] += 1\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    product /= len(numbers)\n    return product"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return 'Not supported for negative numbers'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # convert decimal number to binary recursively\n    def decimal_to_binary_helper(n, binary_str=\"\"):\n        if n == 0:\n            return binary_str\n        else:\n            remainder = n % 2\n            binary_str = str(remainder) + binary_str\n            n //= 2\n            return decimal_to_binary_helper(n, binary_str)\n\n    # convert decimal number to binary recursively\n    binary_num = decimal_to_binary_helper(n)\n\n    # remove leading zeros from binary number\n    while len(binary_num) > 1 and binary_num[0] == '0':\n        binary_num = binary_num[1:]\n\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        binary_representation = \"\"\n        while n > 0:\n            remainder = n % 2\n            binary_representation = str(remainder) + binary_representation\n            n //= 2\n        return binary_representation"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary using bitwise operators\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    # Initialize the result string with an empty string\n    result = ''\n    # Convert the decimal number to binary and add each digit to the result string\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        result = str(remainder) + result\n    # Return the final result string with no leading zeros\n    return result.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        binary = decimal_to_binary(n//2)\n        return binary[-1] + str(n%2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0: \n        binary_str = str(n % 2) + binary_str \n        n //= 2 \n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        rem = n % 2\n        binary = str(rem) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    i = 10**(num-1)\n    j = 10**num\n    \n    while True:\n        if is_palindrome(i):\n            if is_palindrome(j):\n                return j\n            else:\n                return i\n        i += 1\n        j -= 1\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    str_num = str(num)\n    return str_num == str_num[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome\n    '''\n    if num < 0:\n        return False\n    reversed_num = 0\n    temp = num\n    while temp > 0:\n        reversed_num = reversed_num * 10 + temp % 10\n        temp //= 10\n    return reversed_num == num\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n    \n    # If the number is not a palindrome, find the largest palindrome less than or equal to the original number\n    largest_palindrome = num\n    while not is_palindrome(largest_palindrome):\n        largest_palindrome += 1\n    \n    # Find the next smallest palindrome greater than the largest palindrome\n    next_smallest_palindrome = largest_palindrome + 1\n    \n    # Return the next smallest palindrome\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest_palindrome = num\n    for i in range(1, 10000):\n        new_palindrome = i * 1000 + num\n        if is_palindrome(new_palindrome) and new_palindrome < smallest_palindrome:\n            smallest_palindrome = new_palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 10**5:\n        raise ValueError(\"Input number is too large.\")\n\n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string to an integer\n    reversed_num = int(reversed_str)\n    # Find the next smallest palindrome\n    next_palindrome = reversed_num + 1\n    # Check if the next palindrome is within the range of the original number\n    if next_palindrome >= num and next_palindrome < 10**9:\n        return next_palindrome\n    # If not, return the original number\n    else:\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    min_palindrome = 10**(num-1)\n    max_palindrome = 10**num - 1\n    \n    if max_palindrome < 10**(num-1) + 9:\n        max_palindrome = 10**num - 10**(num-1) - 1\n    \n    while True:\n        if is_palindrome(min_palindrome) and is_palindrome(max_palindrome):\n            return min_palindrome\n        elif is_palindrome(min_palindrome) and not is_palindrome(max_palindrome):\n            min_palindrome -= 1\n        else:\n            max_palindrome += 1\n            \ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a given number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        # If the input number is already a palindrome, return the next integer\n        return num + 1\n    else:\n        # Otherwise, find the smallest palindrome greater than the input number\n        for i in range(num, sys.maxsize, -1):\n            if is_palindrome(i):\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    num_str = num_str[::-1]\n    # Add a '1' to the end of the string to make it a palindrome\n    num_str = '1' + num_str\n    # Convert the string back to an integer\n    num_str = int(num_str)\n    # Check if the next smallest palindrome is greater than or equal to the input integer\n    if num_str >= num:\n        # If it is, return the next smallest palindrome\n        return num_str\n    else:\n        # If it is not, return the input integer\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    max_int = int(num) * 10000\n    for i in range(max_int, 0, -1):\n        temp = i\n        temp_str = str(temp)\n        is_palindrome = True\n        for j in range(len(temp_str) // 2):\n            if temp_str[j]!= temp_str[-1 - j]:\n                is_palindrome = False\n                break\n        if is_palindrome:\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 10\n    elif num < 100:\n        return 100\n    elif num < 1000:\n        return 1000\n    elif num < 10000:\n        return 10000\n    else:\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left = kth_element(arr[:mid], k)\n        right = kth_element(arr[mid:], k - mid)\n        if left is None:\n            return right\n        elif right is None:\n            return left\n        else:\n            return arr[mid - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return None\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Get the length of the array\n    n = len(arr)\n    # Check if k is within range\n    if k < 1 or k > n:\n        return None\n    # Find the index of k-1\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid-1] == k:\n            return arr[mid-1]\n        elif arr[mid-1] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return \"Invalid input!\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Invalid index\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    left = 1\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    # convert snake case to camel case\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    word (str): The input word in snake case.\n\n    Returns:\n    str: The converted camel case word.\n    \"\"\"\n\n    # Convert snake case to camel case\n    result = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].lower()\n        elif word[i].isupper():\n            result += \"_\"\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Args:\n    word (str): A string in snake case format.\n\n    Returns:\n    str: A camel case string.\n    \"\"\"\n\n    # Split the word into words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    camel_case_words = [words[0].capitalize()]\n    for i in range(1, len(words)):\n        camel_case_words.append(words[i])\n\n    # Join the capitalized words\n    camel_case_string = ''.join(camel_case_words)\n\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the given word to lower case\n    word = word.lower()\n    # Initialize the camel case string\n    camel_case_word = \"\"\n    # Loop through each character in the word\n    for i in range(len(word)):\n        # If the character is a snake case character, convert it to camel case\n        if i == 0 and word[i].isupper():\n            camel_case_word += word[i]\n        elif word[i].isupper():\n            camel_case_word += \"_\" + word[i].lower()\n        else:\n            camel_case_word += word[i]\n    # Return the camel case string\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the snake case to a list of words\n    snake_words = word.split('_')\n    \n    # Capitalize the first letter of each word and join them with camel case\n    camel_case = ''.join([word.capitalize() for word in snake_words])\n    \n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        elif letter.isupper():\n            camel_case += \"_\" + letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_word += char.lower()\n        elif char.isupper():\n            camel_word += '_' + char.lower()\n        else:\n            camel_word += char\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Initialize variables\n    camel_case = \"\"\n    snake_case = word.lower()\n\n    # Iterate through each character in the snake case string\n    for char in snake_case:\n        # If the character is a separator, skip it\n        if char.isupper():\n            camel_case += char\n        else:\n            # If the character is not a separator, add an underscore and the character after it\n            camel_case += \"_\" + char.lower()\n\n    # Return the camel case string\n    return camel_case.title()"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the Eulerian number array\n    a = [[0] * (n+1) for _ in range(m+1)]\n\n    # Iterate over all possible pairs of indices (i, j)\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            # Set the value of a(i, j) to the sum of the values of a(i, k) * a(k, j) for all k between 1 and i-1\n            for k in range(1, i+1):\n                a[i][j] += a[k][i-k] * a[k][j]\n\n    # Return the value of the final element of the array a[m][n]\n    return a[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def euler_phi(n):\n        '''\n        Helper function to calculate Euler's totient function phi(n).\n        '''\n        if n == 1:\n            return n\n        else:\n            return n * euler_phi(n-1)\n\n    def euler_k(n, m):\n        '''\n        Helper function to calculate the number of elements in the k-th prime factorization of n.\n        '''\n        if n == 1:\n            return 0\n        elif euler_phi(n) % 2 == 0:\n            return 0\n        else:\n            return euler_k(n // euler_phi(n), m) + 1\n\n    # Calculate the number of elements in the k-th prime factorization of n.\n    k = euler_k(n, m)\n\n    # Calculate the value of a(n, m) using the formula: a(n, m) = n^m / (k * phi(n)^m).\n    a = (n**m) / (k * euler_phi(n)**m)\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the value of a(n, m)\n    a = (n + 1) * (m + 1) // 2\n\n    # Return the value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    else:\n        return eulerian_num(n - 1, m - 2 * n)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        a = n * (n + 1) // 2\n        b = 0\n    else:\n        a = 0\n        b = n * (n + 1) // 2\n\n    return a + b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    edges = []\n    for i in range(n):\n        for j in range(i+1, n):\n            edges.append((i, j))\n    edges.extend([(i, j) for i in range(n) for j in range(i+1, n)])\n    edges = sorted(edges)\n    cycles = 0\n    for i in range(len(edges)):\n        for j in range(i+1, len(edges)):\n            if edges[i][0] == edges[j][1] or edges[i][1] == edges[j][0]:\n                cycles += 1\n    return cycles * m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += (i * i - m * (m - i) * (m - i) // 2) // 2\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if the input is valid\n    if n <= 0 or m <= 0:\n        return None\n    \n    # Calculate the Eulerian number using the formula a(n, m) = 2(m+1) - n\n    return 2 * (m + 1) - n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n and m are integers and positive\n    if not (isinstance(n, int) and isinstance(m, int) and n > 0 and m > 0):\n        raise ValueError(\"n and m must be positive integers\")\n    \n    # Initialize a(1, 1) to 1 and fill the rest of the matrix\n    a = [[1, 0], [0, 1]]\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            a.append([a[i - 1][j] + a[i][j - 1], a[i - 1][j] - a[i][j - 1]])\n    \n    # Find the Eulerian number a(n, m)\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            if a[i][j] == [0, 0]:\n                return i * m - j * (i - 1)\n    \n    # If no solution is found, return -1\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == 1 or i == n or j == 1 or j == m:\n                print(i * j, end=' ')\n            else:\n                print(' ', end=' ')\n        print()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if type(elem) == bool and elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i is True:\n                count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the lists to tuples\n    test_tup = tuple(test_list)\n    # append the list to the tuple\n    test_tup += tuple(test_list)\n    # convert the tuple back to a list\n    test_list = list(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup += (test_list[i],)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    \n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert the list to a tuple\n    new_tup = tuple(test_list)\n    # add the list to the tuple\n    test_tup = test_tup + new_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the given lists to tuples for comparison\n    test_list_tup = tuple(test_list)\n    test_tup_list = list(test_tup)\n    \n    # Check if the given lists and tuples are equal\n    if test_list_tup == test_tup_list:\n        # Append the given list to the given tuples\n        test_tup_list.extend(test_list)\n        \n        # Convert the modified list back to a tuple\n        modified_tup_list = tuple(test_tup_list)\n        \n        # Print the modified tuples\n        print(\"Modified Tuples:\", modified_tup_list)\n    else:\n        # If the lists and tuples are not equal, print a message\n        print(\"The lists and tuples are not equal.\")"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Using list comprehension to concatenate the two lists\n    final_list = test_list + list(test_tup)\n    print(final_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Step 1: Merge the three sorted lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Step 2: Remove duplicates from the merged list\n    unique_list = []\n    for num in merged_list:\n        if num not in unique_list:\n            unique_list.append(num)\n\n    # Step 3: Return the unique list\n    return unique_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Use heapq to sort the list in ascending order\n    heapq.heapify(merged_list)\n    \n    # Extract the elements from the heap\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n        \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two smallest lists\n    merged_list = heapq.merge(num1, num2)\n    # Merge the merged list with the third list\n    return heapq.merge(merged_list, num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list in ascending order\n    merged_list.sort()\n\n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # merge two lists\n    merged = num1 + num2\n    # sort the merged list\n    heapq.heapify(merged)\n    # return the sorted list\n    return heapq.nsmallest(len(num1)+len(num2), merged)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three sorted lists into one sorted list using heapq.merge() function\n    merged_list = heapq.merge(heapq.merge(num1, num2), num3)\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two sorted lists into one sorted list\n    merged_list = heapq.merge(heapq.merge(num1,num2),num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Combine the three lists\n    combined_list = num1 + num2 + num3\n\n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the lists in ascending order\n    sorted_list = sorted(num1 + num2 + num3)\n    # Create a min heap to store the elements of the combined list\n    heap = []\n    # Convert the sorted list into a heap\n    for num in sorted_list:\n        heapq.heappush(heap, num)\n    # Extract the elements of the heap in sorted order and return them as a list\n    return [heapq.heappop(heap) for _ in range(len(sorted_list))]"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # Define a function to rotate a binary string\n    def rotate(s):\n        return s[::-1]\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate n times to rotate the binary string\n    for i in range(n):\n        # Rotate the binary string\n        new_string = rotate(s)\n\n        # Iterate through the new string\n        for j in range(len(new_string)):\n            # Check if the current character is odd\n            if new_string[j] == '1':\n                # If it is odd, add it to the result\n                result.append(int(new_string[j]))\n\n    # Return the length of the result list\n    return len(result)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Find the length of the binary string\n    length = len(s)\n\n    # Initialize variables\n    counter = 0\n    count = 0\n    temp = \"\"\n\n    # Iterate through the string and count odd numbers\n    for i in range(length):\n        temp += s[i]\n        count += 1\n\n        if count == 3:\n            counter += 1\n            count = 0\n            temp = \"\"\n\n    # Check if the binary string has an odd number of bits\n    if (length % 2 == 1):\n        counter += 1\n\n    # Count the number of numbers with odd values\n    for i in range(counter):\n        count = 0\n        temp = \"\"\n        for j in range(length):\n            temp += s[j]\n            count += 1\n\n            if count == 3:\n                if (int(temp, 2) % 2 == 1):\n                    counter += 1\n                count = 0\n                temp = \"\"\n\n    return counter"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert binary string to list of bits\n    bits = [int(bit) for bit in s]\n\n    # Loop over n rotations and calculate the number of odd numbers\n    count = 0\n    for _ in range(n):\n        # Reverse the bits\n        bits.reverse()\n        # Count the number of odd numbers\n        count += sum(bit for bit in bits if bit % 2 == 1)\n        # Reverse the bits back\n        bits.reverse()\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s (str): a binary string representing a number\n    n (int): the number of times to rotate the string\n\n    Returns:\n    int: the number of odd values in the rotated string\n    \"\"\"\n\n    # convert the input string to a binary number\n    num = int(s, 2)\n\n    # initialize the count of odd values to 0\n    odd_count = 0\n\n    # loop n times to rotate the number\n    for _ in range(n):\n        # rotate the binary number to the right by one bit (move the most significant bit to the left)\n        num = (num >> 1) | ((num & 1) << 31)\n\n        # check if the rotated number is odd\n        if num & 1:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a Python function to find the number of odd numbers in a binary string after rotating it the given number of times.\n\n    :param s: binary string\n    :type s: str\n    :param n: number of rotations\n    :type n: int\n    :return: number of odd numbers in the rotated binary string\n    :rtype: int\n    \"\"\"\n    \n    # convert binary string to list of integers\n    s = list(map(int, list(s)))\n    \n    # rotate the list by n elements\n    for i in range(n):\n        s = s[-1:] + s[:-1]\n        \n    # count the number of odd numbers\n    count = 0\n    for i in s:\n        if i % 2 == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    s = bin(int(s, 2))[2:] # convert binary string to decimal\n    for i in range(n):\n        s = (s[::-1]+s)[::-1] # rotate binary string n times\n    count = 0\n    for i in s:\n        if int(i) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_str = bin(int(s))[2:]\n    binary_str = binary_str * n\n    count = 0\n    for i in binary_str:\n        if int(i) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if s.count('0') % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if int(s[i]) % 2 == 1:\n            count += 1\n        i += 1\n        if i == n:\n            i = 0\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert the binary string to a list of bits\n    bits = list(s)\n    # rotate the bits the specified number of times\n    for i in range(n):\n        bits.append(bits.pop(0))\n    # count the number of odd bits in the rotated list\n    odd_count = 0\n    for bit in bits:\n        if bit == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set(nestedlist[0])\n    set2 = set(nestedlist[1])\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty dictionary to store common elements\n    common_elements = {}\n\n    # Iterate through the nested lists\n    for sublist in nestedlist:\n        # Iterate through the elements of the sublist\n        for element in sublist:\n            # If the element is not already present in the dictionary, add it with its count of 1\n            if element in common_elements:\n                common_elements[element] += 1\n            else:\n                common_elements[element] = 1\n\n    # Convert the dictionary to a list of tuples and sort the list based on the second element of the tuple (count)\n    common_elements_list = sorted(common_elements.items(), key=lambda x: x[1], reverse=True)\n\n    # Return the list of common elements\n    return [element[0] for element in common_elements_list]"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a dictionary to store common elements\n    common = {}\n\n    # loop through all elements in the list\n    for element in nestedlist:\n        # loop through all elements in the list\n        for element2 in nestedlist:\n            # check if the elements are equal\n            if element == element2:\n                # if they are, check if they are already in the dictionary\n                if element in common:\n                    # if they are, add the second element to the list\n                    common[element].append(element2)\n                else:\n                    # if they are not, add the first element to the dictionary with the list of second elements\n                    common[element] = [element2]\n\n    # return the dictionary with common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common_elements:\n                    continue\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a nested list as an input and returns a list of common elements in that list.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Check if the element is already in the common set\n            if element in common:\n                # If it is, add it to the result set and remove it from the nested list to avoid duplicates\n                common.remove(element)\n                sublist.remove(element)\n\n    # Return the result set as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in nestedlist[j][:i]:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common_elements.append(i)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        common.update(set(sublist))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common.append(i)\n    return common\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n\n    Parameters:\n    text (str): A string to be checked for integer representation.\n\n    Returns:\n    bool: True if the string represents an integer, otherwise False.\n    \"\"\"\n\n    # Check if the string starts with a digit or a minus sign\n    if not text.startswith(('0', '-')):\n        return False\n\n    # Check if the string consists of only digits and a minus sign\n    for i in range(1, len(text)):\n        if not text[i].isdigit():\n            return False\n\n    return True"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function takes a string as input and checks if it represents an integer or not.\n    \"\"\"\n    # Remove any non-numeric characters from the string\n    text = ''.join(e for e in text if e.isdigit())\n\n    # Check if the string is empty or contains only whitespace\n    if not text or text.isspace():\n        return False\n\n    # Check if the string can be converted to an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the result to 0\n    result = 0\n    # Loop through each element in the list\n    for num in nums_list:\n        # Add the element to the result\n        result += num\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through the list and add each element to the result variable\n    for num in nums_list:\n        result += num\n\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list of integers\n    nums = list(nums)\n    # Initialize the sum to 0\n    total = 0\n    # Iterate through the list and add each integer to the sum\n    for num in nums:\n        total += num\n    # Return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                return None  # If any element is not a convertible float, return None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for row in test_list:\n        for elem in row:\n            try:\n                float(elem)\n            except ValueError:\n                raise ValueError(f\"The element {elem} cannot be converted to a float.\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                element = float(element)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                item = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float(test_list[i][j])\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, (int, float, complex)):\n                row[row.index(element)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                continue\n    return float_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two variables to keep track of the first and last indices of the subarray that contains the only element\n    first_index = 0\n    last_index = len(arr) - 1\n    \n    # Iterate through the array and find the first occurrence of the only element\n    for i in range(len(arr)):\n        if arr[i] == arr[first_index]:\n            first_index = i\n        \n        # Move the first_index to the next index if the element at the current index is not the only element\n        if i!= last_index and arr[i]!= arr[i+1]:\n            first_index += 1\n            last_index = i\n    \n    # Return the element at the first_index\n    return arr[first_index]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Iterate through the dictionary to find the element that appears only once\n    for key in freq:\n        if freq[key] == 1:\n            return key\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Check if the array is sorted in ascending order\n    if arr[0] > arr[1]:\n        for i in range(len(arr)):\n            if i > 0 and arr[i] == arr[i-1]:\n                continue  # ignore duplicates\n            if i == len(arr)-1:\n                return arr[i]  # if the last element is unique, return it\n            if arr[i] > arr[i+1]:\n                return arr[i+1]  # if the next element is larger, return it\n    else:\n        for i in range(len(arr)-1, -1, -1):\n            if i < len(arr)-2 and arr[i] == arr[i+1]:\n                continue  # ignore duplicates\n            if i == 0:\n                return arr[i]  # if the first element is unique, return it\n            if arr[i] < arr[i-1]:\n                return arr[i-1]  # if the previous element is larger, return it\n    return None  # if no unique element found"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    # Check if the array is sorted\n    if arr[0] > arr[1]:\n        # If the array is not sorted, iterate through the array\n        for i in range(1, len(arr)):\n            # Check if the current element is equal to the previous element\n            if arr[i] == arr[i-1]:\n                # If it is, return the current element\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Use a hash table to keep track of the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the element that appears only once in the array\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize a boolean array to mark visited elements\n    visited = [False] * n\n\n    # Traverse through the array and mark all visited elements as True\n    for i in range(n):\n        if not visited[arr[i] - 1]:\n            visited[arr[i] - 1] = True\n\n    # Traverse through the array again and find the element that appears only once\n    for i in range(n):\n        if not visited[i]:\n            return i + 1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return arr[left]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two pointers: left and right.\n    left = 0\n    right = len(arr) - 1\n    # Initialize the count of occurrences of the element.\n    count = 1\n\n    # Traverse the array from both left and right ends.\n    while left < right:\n        # If the element at the left end is equal to the current element, increment the count.\n        if arr[left] == arr[left + 1]:\n            count += 1\n            # If the count becomes equal to 2, we have found the element that appears only once.\n            if count == 2:\n                return arr[left]\n            # Move the left pointer to the right.\n            left += 1\n        # If the element at the right end is equal to the current element, decrement the count.\n        elif arr[right] == arr[right - 1]:\n            count -= 1\n            # If the count becomes equal to 1, we have found the element that appears only once.\n            if count == 1:\n                return arr[right]\n            # Move the right pointer to the left.\n            right -= 1\n        # If the element at the left end is greater than the current element, increment the left pointer.\n        elif arr[left] > arr[left + 1]:\n            left += 1\n        # If the element at the right end is greater than the current element, decrement the right pointer.\n        elif arr[right] > arr[right - 1]:\n            right -= 1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    count = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            count += 1\n        else:\n            unique_element = arr[i]\n            count = 1\n\n    return unique_element\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the count of each element\n    count_dict = {}\n    # loop through the array\n    for num in arr:\n        # check if the element is already in the dictionary\n        if num in count_dict:\n            # if it is, increment its count by 1\n            count_dict[num] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[num] = 1\n    # loop through the dictionary and find the element that appears only once\n    for num in count_dict:\n        if count_dict[num] == 1:\n            return num\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0] * list1[j][1])\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables\n    max_product = float('-inf')\n    max_product_pair = None\n    \n    # Iterate through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the two numbers\n            product = abs(list1[i] * list1[j])\n            \n            # Update the maximum absolute product and its corresponding pair\n            if product > max_product:\n                max_product = product\n                max_product_pair = (list1[i], list1[j])\n    \n    # Return the maximum absolute product and its corresponding pair\n    return max_product, max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf') # initialize max_product to negative infinity\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1]) # calculate product of tuples\n            if product > max_product: # update max_product if current product is greater than previous max\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_product_pair = None\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n                max_product_pair = (list1[i], list1[j])\n\n    return max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each tuple in the list again\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current pair of tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            # Check if the product is greater than the current maximum product\n            if abs(product) > abs(max_product):\n                # Update the maximum product\n                max_product = product\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Helper function to check if a number is amicable\n    def is_amicable(num):\n        # Check if the number is divisible by any number in the range [1, limit]\n        for i in range(1, limit + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Initialize a counter to keep track of the number of times we have processed an amicable number\n    count = 0\n    \n    # Loop through the range [1, limit]\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Increment the counter and add the number to the sum\n            count += 1\n            amicable_sum += num\n    \n    # Return the sum of all amicable numbers found\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Helper function to check if a number is amicable to another number.\n    \"\"\"\n    sum_of_squares = sum(int(i)**2 for i in range(1, int(n**0.5)+1))\n    return n == sum_of_squares\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Calculate the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    result = 0\n    for i in range(1, limit+1):\n        if i == 1 or is_amicable(i):\n            continue\n        elif is_amicable(limit-i):\n            result += i\n    return result"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_amicable_numbers(limit):\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num!= 1:\n            if num in amicable_numbers:\n                continue\n            if num % 2 == 0:\n                if num // 2 in amicable_numbers:\n                    continue\n            if num == sum(set(map(int, str(num)))):\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # create a dictionary to store amicable numbers and their sum\n    amicable_numbers_dict = {}\n    # loop through all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # check if the number is a prime number\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                # if the number is prime, add it to the amicable_numbers_dict\n                amicable_numbers_dict[num] = num\n    \n    # sum up all the amicable numbers in the dictionary\n    total_sum = sum(amicable_numbers_dict.values())\n    \n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_amicable_numbers(limit):\n    sum = 0\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(sum_of_primes(i)):\n            sum += i\n    return sum\n\ndef sum_of_primes(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if i!= 1:\n            # check if i is divisible by any number between 2 and i-1\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                # if no number between 2 and i-1 is divisible by i, then i and its square are amicable numbers\n                sum_of_amicable_numbers += i + i**2\n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable = 0\n    for i in range(2, limit):\n        if i == 1:\n            continue\n        if i == 2:\n            continue\n        if i % 2 == 0:\n            j = 3\n        else:\n            j = 5\n        while j <= limit:\n            if i + j == j:\n                sum_of_amicable += j\n                if j == i:\n                    break\n            j += 6\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize a list to store amicable numbers\n    amicable_numbers = []\n    # Loop through numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    # Calculate the sum of all amicable numbers\n    amicable_sum = sum(amicable_numbers)\n    return amicable_sum\n\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable by checking if the sum of its proper divisors is equal to the number itself.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    # Loop through numbers from 1 to the square root of the number\n    for i in range(1, int(num ** 0.5) + 1):\n        # Check if the number is divisible by any of the numbers in the loop\n        if num % i == 0:\n            # Check if the sum of the divisors is equal to the number itself\n            if i ** 2 + num ** 2 == num:\n                return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == sum_of_squares(i) and i!= 1:\n            amicable_sum += i\n    return amicable_sum\n\ndef sum_of_squares(n):\n    '''\n    Write a function to calculate the sum of squares of all numbers from 1 to n.\n    '''\n    square_sum = 0\n    for i in range(1, n + 1):\n        square_sum += i ** 2\n    return square_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            sum_amicable += num\n\n    return sum_amicable\n\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    limit = int(num**0.5) + 1\n    for i in range(1, limit):\n        if num % i == 0 and is_perfect_square(num // i):\n            return False\n    return True\n\n\ndef is_perfect_square(num):\n    \"\"\"\n    Check if a number is a perfect square or not.\n    \"\"\"\n    if num < 2:\n        return False\n    sqrt_num = int(num**0.5)\n    return sqrt_num*sqrt_num == num"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Calculate the modulus and phase of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    phase = cmath.phase(complex(a, b))\n\n    # Return the angle in degrees\n    return round(phase * 180 / cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Calculate the complex conjugate of a and b\n    conjugate = cmath.conjugate(a+b)\n    # Calculate the angle between the real and imaginary parts of the conjugate\n    angle = cmath.phase(conjugate)\n    # Convert the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the magnitude and phase of the complex number\n    mag = abs(cmath.sqrt(a**2 + b**2))\n    phase = cmath.phase(a + b*1j)\n    # return the angle in degrees\n    return (180 * phase) / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    Args:\n    a (complex): The real part of the complex number.\n    b (complex): The imaginary part of the complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n\n    # Calculate the magnitude of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n\n    # Calculate the angle of the complex number in radians\n    angle = cmath.phase(mag + a*b)\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # calculate the modulus of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n\n    # calculate the angle of the complex number using the arg() method of the cmath module\n    angle = cmath.arg(a + b*1j)\n\n    # convert the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0 \n    n = len(string) \n    for i in range(n): \n        for j in range(i+1, n+1): \n            diff = 0 \n            for k in range(j): \n                if string[k] == '0': \n                    diff += 1 \n                else: \n                    diff -= 1 \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n            diff = max(abs(zero_count - one_count), max_diff)\n            max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_count = 0\n    curr_count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_count += 1\n        else:\n            curr_count = 1\n        diff = curr_count - prev_count\n        if diff > max_diff:\n            max_diff = diff\n        prev_count = curr_count\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # initialize variables\n    max_diff = 0\n    current_diff = 0\n    count_zeroes = 0\n    count_ones = 0\n\n    # iterate over the characters in the string\n    for char in string:\n        # if the current character is a 0, increment the count of zeros\n        if char == '0':\n            count_zeroes += 1\n        # if the current character is a 1, increment the count of ones\n        elif char == '1':\n            count_ones += 1\n        # otherwise, the current character is a gap, so we increment the difference and reset the counts\n        else:\n            current_diff = max(current_diff, count_zeroes - count_ones)\n            count_zeroes = 0\n            count_ones = 0\n\n    # add the last segment to the difference calculation\n    current_diff = max(current_diff, count_zeroes - count_ones)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for i in range(length):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n        max_diff = max(max_diff, count_0 - count_1)\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        if i > 0 and string[i] == string[i-1]:\n            if string[i-1] == '0':\n                max_diff = max(max_diff, count)\n            else:\n                max_diff = max(max_diff, count - 1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    prev_zero_count = 0\n    prev_one_count = 0\n    \n    for char in string:\n        if char == '0':\n            prev_zero_count += 1\n        else:\n            prev_one_count += 1\n        \n        diff = abs(prev_zero_count - prev_one_count)\n        max_diff = max(max_diff, diff)\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    prev_count = 0\n    current_count = 0\n    for char in string:\n        if char == '0':\n            current_count += 1\n        else:\n            current_count = 0\n        diff = abs(prev_count - current_count)\n        max_diff = max(max_diff, diff)\n        prev_count = current_count\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Convert the given binary string to a list of digits\n    binary_list = [int(digit) for digit in string]\n    \n    # Initialize variables to keep track of the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    \n    # Loop through each pair of adjacent digits in the binary list\n    for i in range(1, len(binary_list)):\n        # Calculate the difference between the number of 0s and number of 1s in the current sub-string\n        diff = binary_list[i] - binary_list[i-1]\n        \n        # Update the maximum difference and the current difference if this difference is greater than the current maximum\n        if diff > curr_diff:\n            max_diff = curr_diff\n            curr_diff = diff\n    \n    # Return the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    dp = [[0] * 2 for _ in range(n)]\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            dp[i][0] = 1\n        else:\n            dp[i][0] = 0\n        dp[i][1] = dp[i - 1][0]\n        if i > 0:\n            dp[i][1] += dp[i - 1][1]\n        if i > 1:\n            dp[i][1] = max(dp[i - 1][0] + dp[i - 2][1], dp[i][1])\n        if i > 2:\n            dp[i][1] = max(dp[i - 1][0] + dp[i - 2][1], dp[i][1])\n        if i > 3:\n            dp[i][1] = max(dp[i - 1][0] + dp[i - 2][1], dp[i][1])\n        if i > 4:\n            dp[i][1] = max(dp[i - 1][0] + dp[i - 2][1], dp[i][1])\n        if i > 5:\n            dp[i][1] = max(dp[i - 1][0] + dp[i - 2][1], dp[i][1])\n        if i > 6:\n            dp[i][1] = max(dp[i - 1][0] + dp[i - 2][1], dp[i][1])\n        if i > 7:\n            dp[i][1] = max(dp[i - 1][0] + dp[i - 2][1], dp[i][1])\n        max_diff = max(max_diff, dp[i][0] - dp[i][1])\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a < b:\n        a, b = b, a  # swapping the values of a and b if a is greater than b\n        \n    # finding all the common divisors of a and b\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n            \n    # summing all the common divisors\n    result = sum(divisors)\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    divisor = 1\n    while divisor <= max(a, b):\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisors.append(divisor)\n        divisor += 1\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # function to find common divisors of two numbers\n    def gcd(a, b):\n        \"\"\"\n        This function finds the greatest common divisor of two numbers using the Euclidean algorithm.\n        \"\"\"\n        while b!= 0:\n            temp = a % b\n            a = b\n            b = temp\n        return a\n\n    # calculate sum of common divisors of two numbers\n    c = gcd(a, b)\n    sum_of_common_divisors = a + b - c\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_of_common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # find the common divisors of a and b\n    common_divisors = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # find the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # calculate the GCD of the two numbers\n    gcd = gcd(a, b)\n\n    # calculate the sum of all common divisors of the two numbers\n    divisors_sum = sum(range(gcd+1))\n\n    # calculate the sum of the common divisors of the two numbers\n    return (a * b) // gcd + divisors_sum - a - b\n\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of two numbers using the Euclidean algorithm.\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1,b+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\nprint(sum(12,24))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    divisor = 1\n    \n    while divisor <= a and divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisors.append(divisor)\n        divisor += 1\n    \n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Create a set of common divisors of a and b\n    common_divisors = set(range(1, min(a, b) + 1)) & set(range(1, max(a, b) + 1))\n\n    # Calculate the sum of common divisors\n    total = 0\n    for divisor in common_divisors:\n        if divisor <= a and divisor <= b:\n            total += divisor\n        elif divisor <= a and divisor > b:\n            total += a\n        elif divisor > a and divisor <= b:\n            total += b\n\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_divisors(num1, num2):\n    \"\"\"\n    Find the common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, num1 + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_a = common_divisors(a, b)\n    divisors_b = common_divisors(b, a)\n    common_divisors = set(divisors_a) & set(divisors_b)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Finding the GCD of two numbers\n    def gcd(a, b):\n        \"\"\"\n        This function finds the greatest common divisor of two given numbers.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Finding the list of common divisors of two numbers\n    def common_divisors(a, b):\n        \"\"\"\n        This function finds the common divisors of two given numbers.\n        \"\"\"\n        divisors = []\n        for i in range(1, max(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # Calculating the sum of common divisors of two numbers\n    def sum_of_common_divisors_helper(a, b, divisors):\n        \"\"\"\n        This function is a helper function for calculating the sum of common divisors of two numbers.\n        \"\"\"\n        if a == b:\n            return a\n        for divisor in divisors:\n            if a % divisor == 0 and b % divisor == 0:\n                return a + b - divisor\n        return a + b\n\n    # Calculating the sum of common divisors of two numbers\n    def sum_of_common_divisors_recursive(a, b):\n        \"\"\"\n        This function calculates the sum of common divisors of two numbers using a recursive approach.\n        \"\"\"\n        divisors_a = common_divisors(a, b)\n        divisors_b = common_divisors(b, a)\n        return sum_of_common_divisors_helper(a, b, divisors_a + divisors_b)\n\n    # Finding the sum of common divisors of two numbers\n    gcd_a = gcd(a, b)\n    gcd_b = gcd(b, a)\n    if gcd_a == 1 or gcd_b == 1:\n        return sum(a, b)\n    else:\n        return sum_of_common_divisors_recursive(a, b)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"The product of\", x, \"and\", y, \"is\", result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # split the string into a list of words\n    words = str.split()\n\n    # create an empty list to store the words that are longer than n characters\n    longer_words = []\n\n    # loop through each word in the list of words\n    for word in words:\n        # if the length of the word is greater than n, append it to the longer_words list\n        if len(word) > n:\n            longer_words.append(word)\n\n    # return the longer_words list\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    :param n: integer, the maximum number of characters that a word can have\n    :param words: list, a list of words to check\n    :return: list, a list of words that are longer than n characters\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the list of words to a set to remove duplicates\n    words = set(words)\n    \n    # Initialize an empty list to store the longer words\n    longer_words = []\n    \n    # Iterate through each word in the set of words\n    for word in words:\n        # If the length of the word is longer than n characters, add it to the longer_words list\n        if len(word) > n:\n            longer_words.append(word)\n    \n    # Return the list of longer words\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # split the string into words\n    words = str.split()\n\n    # create an empty list to store words longer than n characters\n    long_words_list = []\n\n    # iterate through each word in the list\n    for word in words:\n\n        # if the length of the word is greater than n characters, add it to the list\n        if len(word) > n:\n            long_words_list.append(word)\n\n    # return the list of words longer than n characters\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if all rows have the same number of elements\n    for i in range(rows):\n        if len(my_matrix[i])!= cols:\n            return False\n\n    # Check if all columns have the same number of elements\n    for i in range(cols):\n        col = []\n        for j in range(rows):\n            col.append(my_matrix[j][i])\n        if len(set(col))!= 1:\n            return False\n\n    # Check if there are elements in the matrix that are the sum of two other elements\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in col:\n                col.remove(my_matrix[i][j])\n            elif my_matrix[j][i] in col:\n                col.remove(my_matrix[j][i])\n            else:\n                row_sum = 0\n                col_sum = 0\n                for k in range(rows):\n                    if my_matrix[i][k] + my_matrix[k][j] == my_matrix[i][j]:\n                        row_sum += my_matrix[i][k]\n                        col_sum += my_matrix[k][j]\n                if row_sum == my_matrix[i][j] or col_sum == my_matrix[i][j]:\n                    return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    diagonal_sum = 0\n    antidiagonal_sum = 0\n    \n    # Check rows\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                diagonal_sum += my_matrix[i][j]\n            elif i == rows - j - 1:\n                antidiagonal_sum += my_matrix[i][j]\n    \n    # Check columns\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                diagonal_sum -= my_matrix[i][j]\n            elif i == rows - j - 1:\n                antidiagonal_sum -= my_matrix[i][j]\n    \n    # Check main diagonal\n    for i in range(rows):\n        diagonal_sum -= my_matrix[i][i]\n        \n    # Check anti-diagonal\n    for i in range(rows):\n        antidiagonal_sum -= my_matrix[i][rows - i - 1]\n    \n    # Check if sums are equal\n    if diagonal_sum == antidiagonal_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has a perfect square number of rows and columns\n    if (len(my_matrix)!= int(len(my_matrix)**0.5)) or (len(my_matrix[0])!= int(len(my_matrix[0])**0.5)):\n        return False\n    \n    # Check if all elements in the matrix are distinct\n    unique_elements = set(sum(my_matrix, []))\n    if len(unique_elements)!= len(my_matrix) * len(my_matrix[0]):\n        return False\n    \n    # Check if each element appears exactly once in the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] not in unique_elements:\n                return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is of a square size\n    if n**0.5!= int(n**0.5):\n        return False\n    # Check if the sum of any row, column, or diagonal is zero\n    for i in range(n):\n        if sum(my_matrix[i])!= 0 or sum(my_matrix[j][i] for j in range(n))!= 0:\n            return False\n    # Check if the matrix can form a magic square\n    for i in range(n):\n        for j in range(n):\n            if abs(my_matrix[i][j] - (i+j+1))!= n:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the matrix\n    matrix_sum = sum(sum(row) for row in my_matrix)\n\n    # Calculate the magic square sum\n    magic_square_sum = (8 * (len(my_matrix) ** 2)) + (3 * (len(my_matrix) ** 2) - 6)\n\n    # Check if the matrix sum and magic square sum are equal\n    if matrix_sum == magic_square_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    \n    # check if all rows and columns have the same sum\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= col_sum:\n            return False\n    \n    # check if the diagonal elements are all positive or all negative\n    for i in range(n):\n        if my_matrix[i][i] < 0 or my_matrix[i][i] > n * (n - 1):\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    # Calculate the sum of the elements in the matrix\n    total = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the diagonals is equal to the sum of the elements in the matrix\n    if total == sum(row[i] for i in range(len(my_matrix))) or total == sum(row[len(my_matrix)-1-i] for i in range(len(my_matrix))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    sum_rows = sum(sum(row) for row in my_matrix)\n    sum_cols = sum(sum(my_matrix[i][j] for j in range(size)) for i in range(size))\n    sum_diag1 = sum(my_matrix[i][i] for i in range(size))\n    sum_diag2 = sum(my_matrix[i][size-i-1] for i in range(size))\n\n    return sum_rows == size**2*size + size*size + size*size/2 and \\\n           sum_cols == size**2*size + size*size + size*size/2 and \\\n           sum_diag1 == size**2*size + size*size + size*size/2 and \\\n           sum_diag2 == size**2*size + size*size + size*size/2"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    sum_row = sum(my_matrix[i]) for i in range(n)\n    sum_col = sum(my_matrix[j] for j in range(n))\n    sum_diag = sum(my_matrix[i][j] for i in range(n) for j in range(n))\n    if sum_row == n * (n + 1) // 2 and sum_col == n * (n + 1) // 2 and sum_diag == n * (n + 1) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix has distinct elements\n    if len(set(sum(row, []) for row in my_matrix))!= n**2:\n        return False\n    \n    # Check if the matrix is a magic square\n    row_sum = col_sum = 0\n    for i in range(n):\n        row_sum += my_matrix[i][i]\n        col_sum += my_matrix[i][n-i-1]\n    if row_sum == col_sum == n*(n**2):\n        return True\n    return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of numbers and returns the item with the maximum frequency.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_freq_item = [key for key, value in freq_dict.items() if value == max_freq][0]\n\n    return max_freq_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with the maximum frequency.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    # Count frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n    \n    # Find maximum count and corresponding item\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency\n    max_freq = max(freq.values())\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item\n    \n    # If no item has maximum frequency, return None\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        count[num] += 1\n\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_count:\n            max_count = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n            break\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    str_list = list(str1)\n\n    for i in range(len(str_list)):\n        if str_list[i] in vowels_list:\n            str_list.insert(i, str_list.pop(i))\n\n    return \"\".join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_str += char.lower()\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    result = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in vowels:\n            vowel_count += 1\n            result += str1[i]\n    return result + str1[0:vowel_count]\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_set = set(vowels)\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowel_set:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for char in str1:\n        if char in vowels and char!= \"y\":\n            str2 = char + str2\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    result = []\n    for char in str1:\n        if char.upper() in vowels:\n            result.append(char)\n    return ''.join(result)[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    result = ''.join(result)\n    result = result[::-1]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = []\n    for char in string:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string\n    string_value = str(tup1)\n    # return the string value\n    return string_value"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string\n    str1 = str(tup1)\n    # return the string\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return \", \".join([str(x) for x in tup1])"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize the sum to zero\n    total = 0\n    \n    # iterate over the list of numbers\n    for num in nums:\n        # check if the number is negative\n        if num < 0:\n            # add it to the total\n            total += num\n    \n    # return the total\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 28\n    elif n == 5:\n        return 45\n    elif n == 6:\n        return 66\n    elif n == 7:\n        return 91\n    elif n == 8:\n        return 120\n    elif n == 9:\n        return 153\n    elif n == 10:\n        return 190\n    else:\n        return -1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return ((2 * n * n) + 1) // 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n + 1)**2 + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    b = 6\n    while n > 0:\n        print(b)\n        a, b = b, 2*a + b\n        n -= 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Initialize a variable to store the hexagonal number\n    hex_num = 0\n\n    # Start with the first hexagon\n    hex_num = 1\n\n    # Add n-1 more hexagons to get to the nth hexagon\n    for i in range(2, n):\n        # Add a new hexagon to the total number\n        hex_num += 2 * (i - 1)\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Initialize variables\n    num = 1\n    total = 1\n\n    # Loop through n times\n    for i in range(1, n+1):\n\n        # Find the number of hexagons that can be formed in the previous row\n        hexagons = (i * (i-1)) // 2\n\n        # Calculate the nth hexagon\n        nth_hexagon = num * hexagons\n\n        # Add the nth hexagon to the total\n        total += nth_hexagon\n\n        # Update the number of rows in the previous row\n        num += 1\n\n    # Return the total number of hexagons\n    return total"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize hexagonal number\n    hex_num = 0\n    \n    # Loop through each row\n    for i in range(1, n+1):\n        # Calculate the number of columns in the row\n        num_cols = (2*i)+1\n        \n        # Loop through each column\n        for j in range(1, num_cols):\n            # Add the number of rows to the hexagonal number\n            hex_num += i*num_cols + j\n    \n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n * (3 * n - 1)) // 2) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] = 1\n    \n    non_zeros = array('i', [0]*len(nums))\n    for i in range(len(nums)):\n        non_zeros[i] = nums[i] - zeros[i]\n    \n    ratio = sum(non_zeros) / len(non_zeros)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the input array to an array of bytes\n    nums_bytes = array('B', nums)\n\n    # Count the number of zeroes and non-zeroes in the array\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums_bytes:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    zero_ratio = zero_count / non_zero_count\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert array to list\n    nums_list = nums.tolist()\n    # Count zeroes and non-zeroes\n    zero_count = sum(1 for num in nums_list if num == 0)\n    non_zero_count = len(nums_list)\n    # Calculate the ratio\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i', [0] * len(nums))\n    non_zeroes = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeroes[zeroes.index(0)] += 1\n        else:\n            non_zeroes[non_zeroes.index(num)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    total_non_zeroes = sum(non_zeroes)\n    if total_non_zeroes == 0:\n        ratio = 0\n    else:\n        ratio = sum(zeroes) / total_non_zeroes\n\n    # Return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    ones = array('i')\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            ones.append(1)\n    if len(zeros) == 0:\n        return 0.0\n    else:\n        return ones.count(0) / len(zeros)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * (max(nums) + 1))\n    for num in nums:\n        count[num] += 1\n    total_count = sum(count[1:])\n    return float(sum(count[1:])) / total_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    if non_zeros == 0:\n        return 0\n    else:\n        return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        count[num] += 1\n    zero_count = 0\n    non_zero_count = 0\n    for i in range(len(count)):\n        if count[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        ratio = 0.0\n    else:\n        ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n <= 0: # Check for negative numbers\n        return False\n\n    power = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n            power += 1\n        else:\n            n = n // 2 + n\n\n    if power % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n            if count > 32: \n                return False\n            n >>= 1\n        else: \n            n >>= 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the given number is 1\n    if n == 1: \n        return True\n\n    # check if the given number is even\n    if n % 2 == 0: \n        return False\n\n    # initialize a variable to store the sum of powers of 2\n    sum_of_powers_of_2 = 0\n\n    # loop until the given number is less than 2\n    while n > 1: \n        # check if the remainder of dividing the given number by 2 is zero\n        if n % 2 == 0: \n            # add 1 to the sum of powers of 2\n            sum_of_powers_of_2 += 1\n            # divide the given number by 2\n            n /= 2\n        else: \n            # add the given number to the sum of powers of 2\n            sum_of_powers_of_2 += n\n            # break the loop\n            break\n\n    # check if the sum of powers of 2 is equal to the given number\n    if sum_of_powers_of_2 == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a boolean variable to check if n can be represented as sum of non-zero powers of 2 or not\n    can_be_sum_of_powers_of_two = True\n\n    # Iterate through the digits of n\n    for digit in str(n):\n        # Convert the digit to integer\n        digit = int(digit)\n\n        # Check if the digit is a power of 2\n        if digit & (digit - 1) == 0:\n            # If yes, continue to the next digit\n            continue\n\n        # If the digit is not a power of 2, then the number cannot be represented as sum of non-zero powers of 2\n        can_be_sum_of_powers_of_two = False\n        break\n\n    # Return the boolean value of can_be_sum_of_powers_of_two\n    return can_be_sum_of_powers_of_two"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(0, 32): # iterate over all bits in the number\n        if n & (1 << i): # if the i-th bit is 1\n            remainders = []\n            for j in range(i): # find all remainders of n divided by 2^i\n                remainders.append(n % (2**i))\n                n = n // (2**i) # remove the i-th power of 2 from n\n            remainders.append(n) # add the last remainder to the list\n            for k in range(1, len(remainders)): # check if the remainders have at least one non-zero power of 2\n                if remainders[k] == 0:\n                    return False\n            break\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if n is a power of 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n % 2 == 0:\n        return False\n    \n    # Find the number of times 2 appears in n\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n //= 2\n    \n    # Check if the sum of powers of 2 is a power of 2\n    for i in range(count):\n        if n % 2 == 0:\n            return False\n        n //= 2\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n    \n    # Keep dividing the number by 2 and adding powers of 2 to the sum\n    while n > 1:\n        if n % 2 == 0:\n            sum_of_powers += 2\n        n //= 2\n    \n    # Check if the sum of powers of 2 is equal to the number\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    \n    # Initialize two variables\n    power = 0\n    sum = 0\n    \n    # Loop through the number of bits in the number\n    for i in range(int(log2(n)) + 1):\n        # Check if the ith bit is set to 1\n        if n & (1 << i):\n            # Check if the sum of powers of 2 to the power of i can be represented in the remaining bits of n\n            if (power + 1) ** i <= n:\n                return False\n            \n            # Update the sum of powers of 2\n            sum += 1 << i\n            # Update the power\n            power += 1\n    \n    # If the loop completes without returning False, then the number can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if n is a power of 2 or not\n    if n & (n-1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n        count += 1\n    return True if count > 1 else False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # pi is a mathematical constant, 2 is the diameter of a circle, and r is the radius\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    # Calculate the circumference using the formula:\n    # C = 2*pi*r\n    pi = 3.14159265359\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r  # pi is a mathematical constant, so we can use it as a float\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        flattened_list.extend(sub_list)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Initialize an empty set to hold the flattened numbers\n    flattened_set = set()\n\n    # Iterate through each item in the list\n    for item in test_list:\n        # If the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            flattened_set |= extract_singly(item)\n        # If the item is a number, add it to the set\n        elif isinstance(item, (int, float)):\n            flattened_set.add(item)\n\n    # Return the flattened set\n    return flattened_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = []\n    for sublist in test_list:\n        singly.extend(sublist)\n    return set(singly)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    # initialize a new empty set\n    result = set()\n\n    # iterate over each list in the input list of lists\n    for lst in test_list:\n        # iterate over each element in the list\n        for elem in lst:\n            # add the element to the result set\n            result.add(elem)\n\n    # convert the result set back to a list and return it\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [item for sublist in test_list for item in sublist]\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Define an empty set to store the numbers\n    numbers = set()\n    \n    # Iterate over each element in the list of lists\n    for sublist in test_list:\n        # Iterate over each element in the sublist\n        for number in sublist:\n            # Add the number to the set if it's not already there\n            if number not in numbers:\n                numbers.add(number)\n                \n    # Convert the set to a list and return it\n    return list(numbers)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(nested_list):\n        flattened = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flattened.extend(flatten(item))\n            else:\n                flattened.append(item)\n        return flattened\n\n    flattened_list = flatten(test_list)\n    flattened_set = set(flattened_list)\n    return list(flattened_set)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    # Helper function to reverse the order of a given list\n    def reverse_list(lst):\n        return lst[::-1]\n\n    # Helper function to reverse the order of a list of lists\n    def reverse_matrix(matrix):\n        return [[reverse_list(row) for row in inner] for inner in matrix[::-1]]\n\n    # Create a copy of the input list\n    nums = nums.copy()\n\n    # Calculate the length of the longest increasing subsequence\n    longest_increasing = max(len(subseq) for subseq in itertools.chain.from_iterable(zip(nums[1:], nums[:-1])))\n\n    # Repeat the process until the longest increasing subsequence is no longer decreasing\n    while longest_increasing > 1:\n        # Find the longest increasing subsequence in the current list\n        subseq = max(subseq for subseq in itertools.chain.from_iterable(zip(nums[1:], nums[:-1])))\n\n        # Reverse the order of the subsequence\n        subseq = reverse_list(subseq)\n\n        # Remove the subsequence from the list and add it to the result list\n        nums = [num for num in nums if num not in subseq]\n        result = result + subseq\n\n        # Update the longest increasing subsequence\n        longest_increasing = max(len(subseq) for subseq in itertools.chain.from_iterable(zip(nums[1:], nums[:-1])))\n\n    # Return the result list\n    return result"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function takes a list of integers as input and sorts them in ascending order using the pancake sort algorithm.\n\n    The pancake sort algorithm is an in-place variation of the bubble sort algorithm that works by repeatedly sorting pairs of adjacent elements in reverse order.\n\n    The pancake sort algorithm can be implemented in Python as follows:\n\n    def pancake_sort(nums):\n        n = len(nums)\n\n        # Initialize the largest and second largest indices\n        largest = second_largest = n - 1\n\n        # Perform a pancake iteration\n        for i in range(n - 1, 0, -1):\n            # Find the index of the next largest element\n            j = i\n            while j < largest:\n                if nums[j] > nums[largest]:\n                    largest = j\n                j += 1\n            # Swap the elements at indices i and largest\n            nums[i], nums[largest] = nums[largest], nums[i]\n\n            # Find the index of the next second largest element\n            j = i\n            while j < second_largest:\n                if nums[j] > nums[second_largest]:\n                    second_largest = j\n                j += 1\n            # Swap the elements at indices i and second_largest\n            nums[i], nums[second_largest] = nums[second_largest], nums[i]\n\n        # The pancake sort is complete, return the sorted list\n        return nums\n\n    Here's how the function works:\n\n    - The function first initializes the largest and second largest indices to the last index of the list.\n    - It then performs a pancake iteration, where it finds the index of the next largest element, swaps it with the current largest element, and finds the index of the next second largest element.\n    - This process continues until the largest element is at its correct position, and the second largest element is at its correct position.\n    - Finally, the function returns the sorted list.\n\n    Note that the time complexity of the pancake sort algorithm is O(n^2) in the worst case, but it can be optimized further to O(n log n) by using the counting sort algorithm in the inner loop. This is a more advanced algorithm that is not covered in this exercise.\n    \"\"\"\n    n = len(nums)\n\n    # Initialize the largest and second largest indices\n    largest = second_largest = n - 1\n\n    # Perform a pancake iteration\n    for i in range(n - 1, 0, -1):\n        # Find the index of the next largest element\n        j = i\n        while j < largest:\n            if nums[j] > nums[largest]:\n                largest = j\n            j += 1\n        # Swap the elements at indices i and largest\n        nums[i], nums[largest] = nums[largest], nums[i]\n\n        # Find the index of the next second largest element\n        j = i\n        while j < second_largest:\n            if nums[j] > nums[second_largest]:\n                second_largest = j\n            j += 1\n        # Swap the elements at indices i and second_largest\n        nums[i], nums[second_largest] = nums[second_largest], nums[i]\n\n    # The pancake sort is complete, return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # initialize a list of indices of the pancakes to their initial positions\n    pancake_indices = [i for i in range(n)]\n    # loop through each pancake index\n    for pancake_index in range(n):\n        # find the maximum element in the pancake from the remaining elements\n        max_element_index = pancake_index\n        for i in range(pancake_index + 1, n):\n            if nums[i] > nums[max_element_index]:\n                max_element_index = i\n        # swap the maximum element with the first element of the pancake\n        nums[pancake_index], nums[max_element_index] = nums[max_element_index], nums[pancake_index]\n        # reverse the pancake indices in the list after the current pancake\n        pancake_indices[pancake_index], pancake_indices[max_element_index] = pancake_indices[max_element_index], pancake_indices[pancake_index]\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n\n    Args:\n        nums (list): The list of elements to be sorted.\n\n    Returns:\n        list: The sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    # start from the largest element\n    for i in range(n - 1, 0, -1):\n        # find the index of the largest element in the range [0, i]\n        max_idx = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the largest element with the element at index i\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the largest element\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the largest element with the current element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # print the sorted array\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes in a list of numbers and sorts them in ascending order using the pancake sort algorithm.\n    The function has an O(n^2) time complexity and an O(1) space complexity.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        # Find the largest number in the unsorted part of the array\n        largest = nums[i]\n        for j in range(i+1, n):\n            if nums[j] > largest:\n                largest = nums[j]\n\n        # If the largest number is not at the end of the array, swap it with the rightmost element\n        if largest!= nums[i]:\n            nums[i], nums[largest] = nums[largest], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n\n    # Loop through each element in the list\n    for i in range(n):\n        # Initialize the maximum index as i\n        max_index = i\n\n        # Loop through the remaining elements\n        for j in range(i+1, n):\n            # If the element at index j is greater than the element at the maximum index, update the maximum index\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the element at index i with the element at the maximum index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n\n    # Start with a pancake that is sorted from largest to smallest\n    for i in range(n):\n        # Find the index of the largest element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the largest element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    # Reverse the sorted part of the list\n    nums = nums[:n//2] + nums[n//2:][::-1]\n\n    # Reverse the entire list\n    return nums[::-1]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Move the largest element to the end\n    # of the list\n    for i in range(n - 1, 0, -1):\n        max_idx = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    # Print the sorted list\n    print(\"Sorted list is:\", nums)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through the three lists\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as an input and returns the number of lists in the tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for element in Input: \n        if type(element) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = float('-inf')\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least two elements.\"\n    \n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables to hold the maximum absolute difference and the index of the first element\n    max_diff = 0\n    first_index = 0\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Calculate the absolute difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n        \n        # Update the maximum absolute difference and the index of the first element if necessary\n        if diff > max_diff:\n            max_diff = diff\n            first_index = i\n            \n    # Return the maximum absolute difference and the index of the first element\n    return max_diff, first_index"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')  # initialize max_diff to negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            \n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array of integers as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_solution(a, b, c):\n    if a == 0:\n        return None\n    \n    d = b**2 - 4*a*c\n    \n    if d < 0:\n        return None\n    \n    x1 = (-b + math.sqrt(d)) / (2*a)\n    x2 = (-b - math.sqrt(d)) / (2*a)\n    \n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Create a set of pairs (x, y) such that ax + by = n for all valid values of x and y\n    pairs = set()\n    for x in range(-b//a, b//a + 1):\n        y = n - a*x\n        if y in pairs:\n            continue\n        pairs.add((x, y))\n\n    # If there are no pairs satisfying the given condition, return None\n    if len(pairs) == 0:\n        return None\n\n    # Return the first pair in the set\n    return next(iter(pairs))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables\n    x = None\n    y = None\n    \n    # loop until a valid solution is found\n    while x == None or y == None:\n        # generate a random x value\n        x = random.randint(-10000, 10000)\n        \n        # check if x satisfies the given equation\n        if a * x + b * y == n:\n            # generate a random y value\n            y = random.randint(-10000, 10000)\n            \n        # if no valid solution is found, break the loop\n    return (x, y) if x!= None and y!= None else None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    x = (-n + b**0.5) / a\n    y = (-n - b**0.5) / a\n    return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Define a function to check if a linear equation has a solution\n    def has_solution(a, b, c):\n        discriminant = b**2 - 4*a*c\n        if discriminant > 0:\n            x1 = (-b + discriminant**0.5)/(2*a)\n            x2 = (-b - discriminant**0.5)/(2*a)\n            return True, x1, x2\n        elif discriminant == 0:\n            x1 = -b/(2*a)\n            return True, x1\n        else:\n            return False, None\n\n    # Check if the given equation has a solution\n    is_solvable, x1, x2 = has_solution(a, b, n)\n    if not is_solvable:\n        return None\n\n    # Return the solution\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize two variables to 0\n    x = 0\n    y = 0\n\n    # iterate until the value of y is greater than n\n    while y <= n:\n        # calculate the next value of x and y\n        x = y // b\n        y = a * x + b\n\n        # check if the next value satisfies the equation\n        if y == n:\n            return (x, y)\n\n    # if no solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    if b == 0:\n        return None\n\n    x0 = -n / b\n    y0 = a * x0\n\n    if x0 >= 0 and x0 <= n:\n        return (int(x0), int(y0 / b))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find the discriminant\n    disc = b ** 2 - 4 * a * n\n    # if disc is negative, there is no solution\n    if disc < 0:\n        return None\n    # if disc is zero, there is one solution\n    elif disc == 0:\n        return (int((-b) / (2 * a)), int((-b) / (2 * a)))\n    # if disc is positive, there are two solutions\n    else:\n        x1 = (-b + disc) / (2 * a)\n        x2 = (-b - disc) / (2 * a)\n        return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple (x, y) such that ax + by = n, or None if no such solution exists.\n    \"\"\"\n    if b == 0:\n        return None  # No solution if b is zero\n    \n    x = int((-n + (b ** 2) ** 0.5) / (2 * a))\n    y = int((-n - (b ** 2) ** 0.5) / (2 * a))\n    \n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative, which means there is no solution\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two roots of the discriminant\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if the roots are integers\n    if int(root1)!= root1 or int(root2)!= root2:\n        return None\n    \n    # Convert the roots to integers and return the tuple\n    return (int(root1), int(root2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1[:] = [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create an empty list to store the remaining elements in list1\n    remaining_list = []\n\n    # loop through each element in list1\n    for element in list1:\n        # if the element is not present in list2, add it to the remaining list\n        if element not in list2:\n            remaining_list.append(element)\n\n    # return the remaining list\n    return remaining_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_copy = list1.copy() # to avoid modifying original list\n    for element in list2:\n        if element in list1_copy:\n            list1_copy.remove(element)\n    return list1_copy"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from `list1` present in `list2`.\n\n    Args:\n        list1 (list): list to modify\n        list2 (list): list of elements to remove from `list1`\n\n    Returns:\n        list: the modified list `list1`\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Set a variable to keep track of the elements that have been removed\n    removed_elements = []\n    \n    # Loop through the first list\n    for element in list1:\n        # If the element is not present in the second list, add it to the list of removed elements\n        if element not in list2:\n            removed_elements.append(element)\n    \n    # Return the original list with the elements that have been removed\n    return list1 + removed_elements"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += n - 2*i\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2 + 1):\n        s += (n - 2 * i)\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n // 2) + n\n    else:\n        sum_list = []\n        for i in range(n // 2):\n            sum_list.append((n - 2 * i))\n        return sum(sum_list)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += (n - 2*i)\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    i = 0\n    while i <= n // 2:\n        total_sum += (n - 2 * i)\n        i += 1\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        sum_list = []\n        for i in range(n // 2 + 1):\n            sum_list.append(n - 2 * i)\n        return sum(sum_list)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    sum = 0\n    i = 0\n    while n - i >= 0:\n        sum += (n - i)\n        i += 2\n\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    sum_series = 0\n\n    if n % 2 == 0:\n        for i in range(n // 2):\n            sum_series += (n - 2*i)\n    else:\n        for i in range(n // 2):\n            sum_series += (n - 2*i) + (n - 2*i - 2)\n\n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the perimeter of the polygon\n    perimeter = l * s\n    # Calculate the area of the polygon using Heron's formula\n    area = (l ** 2 * s ** 3) / (4 * tan(pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon using Heron's formula\n    area = (s * l * (s - l) / 2) ** 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon using the formula: area = (pi * r^2) / (4 * tan(30\u00b0/n))\n    # where r is the length of one side of the polygon and n is the number of sides\n    r = s / l\n    area = (pi * r**2) / (4 * tan(pi/l))\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s/2) * tan((360/l)*pi/180)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon\n    area = (s * l) / (2 * tan(pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    sp = (s/2) * l\n\n    # Calculate the area of the polygon using Heron's formula\n    area = (sp * (tan((pi/l) * sp) + tan((pi/l) * s))) / 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pi = 3.14159265359\n    area = 0\n    for i in range(l):\n        angle = 2 * pi * i / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * pi)\n    return area\n\nprint(area_polygon(5, 5)) # Output: 75.0\nprint(area_polygon(10, 6)) # Output: 31.888888888888886"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_polygon(s, n):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(n):\n        angle = i * 2 * math.pi / n\n        area += s * math.tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(pi/l)) ** (i)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # list of divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n\n    # sort the list of divisors in ascending order\n    divisors.sort()\n\n    # check if the sum of the first n elements of the sorted list is equal to n\n    return sum(divisors[:n]) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div1 = 0\n    div2 = 0\n    \n    # Calculate the sum of the divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1 += i\n        if i!= n/i:\n            div2 += i\n            \n    # Check if the sum of the divisors is the same\n    if div1 + div2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = 0\n    div2 = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div1 += i \n            if n // i!= i: \n                div2 += n // i \n    if div1 == div2: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisor_sum += i \n            if i!= n//i: \n                divisor_sum += n//i \n    if divisor_sum == n: \n        print(\"The sum of the divisors is equal to the input number.\") \n    else: \n        print(\"The sum of the divisors is not equal to the input number.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n are the same as n and False otherwise.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return (sum(divisors) == n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as the original number, \n    False otherwise.\n    '''\n\n    # find the sum of the divisors of n\n    div_sum = sum(divisor for divisor in range(1, n+1) if n % divisor == 0)\n    \n    # check if the sum of the divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2: \n        return False\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    divisors_sum = sum(range(1, int(math.sqrt(n)) + 1))\n    # Calculate the sum of the divisors of n-1\n    divisors_sum += sum(range(1, int(math.sqrt(n - 1)) + 1))\n    # Check if the sum of the two sums is the same\n    if divisors_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = sum(divisors(n))\n    return divisor_sum == n \n\ndef divisors(n): \n    '''\n    Write a function to generate all the divisors of a given integer n.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i)\n            if i!= n // i: \n                divisors.append(n // i)\n    if n > 1: \n        divisors.append(n)\n    return divisors"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Define a dictionary to store the frequency of characters in the English alphabet\n    freq = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n        # If the character is in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n    \n    # Return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a lowercase English letter\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            # If it is, increment the count\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = 0\n    for i in range(26):\n        count = 0\n        for char in str1:\n            if char.lower() == alphabet[i].lower():\n                count += 1\n        result += count\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Initialize the count dictionary\n    count_dict = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the count dictionary\n        if char.isalpha():\n            count_dict[char] = count_dict.get(char, 0) + 1\n    # Loop through the English alphabet and count the characters that occur at the same position in the string\n    count = 0\n    for i in range(26):\n        if i + 1 in count_dict:\n            count += count_dict[str(i + 1)]\n    # Return the final count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if str1.lower().count(alphabet[i].lower()) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # create a set to store the English alphabet\n    english_alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    # initialize a counter to keep track of the number of occurrences of each character in the string\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is in the English alphabet (case insensitive), add it to the set of counted characters\n        if char.lower() in english_alphabet:\n            # if the character is already in the set of counted characters, increment its count by 1\n            if char.lower() in char_count:\n                char_count[char.lower()] += 1\n            # otherwise, add the character to the set of counted characters with a count of 1\n            else:\n                char_count[char.lower()] = 1\n    # return the count of each character in the English alphabet that occurs at the same position in the string\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha_count = [0]*26 # initialize the count array with zeros\n    for char in str1: # iterate over each character in the string\n        if char.isalpha(): # check if the character is a letter (case insensitive)\n            char = char.lower() # convert the character to lowercase\n            index = ord(char)-ord('a') # get the index of the character in the alphabet (a=0, b=1, c=2, etc.)\n            alpha_count[index] += 1 # increment the count for the character's index in the array\n    return sum(alpha_count) # return the sum of the count array\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize an empty dictionary to store the counts of each character\n    char_count = {}\n    \n    # Loop through the string and count the occurrences of each character\n    for char in str1:\n        char = char.lower() # convert to lowercase to ignore case\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the English alphabet and count the occurrences of each character\n    for i in range(ord('a'), ord('z')+1):\n        char = chr(i) # convert to character\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Print the final result\n    print(char_count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[j] ^ A[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2!= 0 and A[j] % 2!= 0:\n                if (A[i] ^ A[j]) % 2 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize the variable to 2\n    power = 2\n\n    # loop until we find a power of 2 greater than or equal to n\n    while power < n:\n        # increment the power by 1\n        power = power << 1\n    \n    # return the power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 0\n    while (1 << count) < n: \n        count += 1\n    return (1 << count)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n\n    return 2**(n+1)\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0: # check if n is a power of 2 \n        n //= 2 # divide n by 2 to get the next power of 2\n    if n!= 0: # check if n is still greater than 1 \n        n += 1 # add 1 to get the next power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Binary representation of n\n    bin_rep = bin(n)[2:]\n\n    # If binary representation is all 1's, return 2^32\n    if bin_rep == '1' * 32:\n        return 2**32\n\n    # Find the position of the leftmost 1 in binary representation\n    left_most_1_pos = bin_rep.index('1')\n\n    # Calculate the base 2 exponent of the leftmost 1\n    base_2_exp = 31 - left_most_1_pos\n\n    # Return 2^base_2_exp\n    return 2**base_2_exp"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return math.ceil(math.log2(n))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function returns the smallest power of 2 greater than or equal to a given integer.\n\n    Parameters:\n    n (int): A positive integer.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n\n    Example:\n    next_power_of_2(8)  # Output: 16\n    next_power_of_2(1)  # Output: 2\n    next_power_of_2(0)  # Output: 1\n    \"\"\"\n    # Initialize variables\n    power = 1\n    result = 2\n\n    # Loop until the result is greater than or equal to the given number\n    while result >= n:\n        # Increase the power by 1\n        power += 1\n        # Update the result by multiplying it by 2\n        result *= 2\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    # Find the smallest power of 2 greater than or equal to n\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    # Return the result\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Set the initial value of power\n    power = 1\n    \n    # Iterate until power is greater than n\n    while power < n:\n        # Increment power\n        power *= 2\n    \n    # Return the power\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if list is empty\n    if not list1:\n        return None\n    \n    # Check if m or n are out of range\n    if m < 0 or n > len(list1) - 1:\n        return None\n    \n    # Calculate sum of numbers in the specified range\n    sum_range = sum(list1[m:n+1])\n    \n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    total_sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return None\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through the list from the mth index to the nth index\n    for i in range(m, n+1):\n        # Check if the current index is within the range of indices\n        if i >= len(list1):\n            break\n        # Add the current element to the sum variable\n        sum += list1[i]\n\n    # Return the sum of numbers in the range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    \n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # use the formula for the area of a regular pentagon to find the perimeter\n    perimeter = 5 * a * math.sqrt(3)\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    words = s.split()\n    for word in words:\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    std_count = 0\n    for char in s:\n        if char =='s' and std_count == 0:\n            std_count += 1\n            count += 1\n        elif std_count == 1:\n            std_count += 1\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    count_std = s.count('std')\n    count += count_std\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if tuple is empty\n    if len(test_tuple) == 0:\n        return False\n    \n    # get the first element in the tuple\n    first_elem = type(test_tuple[0])\n    \n    # loop through all the elements in the tuple and check if their type is same as the first element\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # Get the type of the first element in the tuple\n    first_type = type(test_tuple[0])\n\n    # Loop through the rest of the tuple and compare their data types with the first element\n    for element in test_tuple[1:]:\n        if type(element)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_elem = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n    \n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = {}\n    for item in test_tuple:\n        if isinstance(item, (int, float, str)):\n            if item not in types:\n                types[item] = 1\n            else:\n                types[item] += 1\n        elif isinstance(item, list):\n            for subitem in item:\n                if isinstance(subitem, (int, float, str)):\n                    if subitem not in types:\n                        types[subitem] = 1\n                    else:\n                        types[subitem] += 1\n                else:\n                    print(\"Error: list contains non-scalar type\")\n                    return False\n        else:\n            print(\"Error: tuple contains non-scalar type\")\n            return False\n\n    for key, value in types.items():\n        if value > 1:\n            print(\"Error: tuple contains multiple instances of the same type\")\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # initialize a variable to keep track of the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    \n    # loop through the rest of the tuple and check if all elements have the same data type\n    for element in test_tuple[1:]:\n        if type(element)!= data_type:\n            return False\n    \n    # if the loop completes without returning False, all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the length of the tuple is greater than 1\n    if len(test_tuple) > 1:\n        # get the first element of the tuple\n        first_element = test_tuple[0]\n        # iterate through the remaining elements of the tuple\n        for element in test_tuple[1:]:\n            # check if the data type of the current element is same as that of the first element\n            if type(element)!= type(first_element):\n                # return False if any element has different data type\n                return False\n    # if all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return True\n    \n    first_element_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element_type:\n            return False\n    \n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    # Initialize variables to keep track of the count and count of x\n    count = 0\n    count_x = 0\n    \n    # Iterate through the array, starting from the second element\n    for i in range(1, n):\n        # If the current element is equal to x, increment the count of x\n        if arr[i] == x:\n            count_x += 1\n        \n        # If the count of x reaches n/2, return True because x is the majority element\n        if count_x == n//2:\n            return True\n        \n        # If the count of x reaches the total count of x, reset the count of x to 0\n        if i == n-1:\n            count_x = 0\n    \n    # If the loop completes without finding x as the majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # initialize count and frequency variables\n    count = 0\n    frequency = 0\n\n    # loop through array\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif arr[i] > x:\n            frequency += 1\n\n    # if count is greater than n/2, return True\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count >= n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count of x to 0\n    count = 0\n\n    # Traverse the array and count the number of occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # If the count is greater than n/2, return True\n    if count > n // 2:\n        return True\n\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count >= n // 2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    This function takes a positive integer n as input and returns the count of set bits in it. \n    A set bit is a binary digit with a value of 1. \n    The count of set bits is the number of binary digits in n that have a value of 1.\n    \"\"\"\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(string):\n    odd_string = \"\"\n    for i, char in enumerate(string):\n        if i % 2!= 0:\n            odd_string += char\n    return odd_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a new string with all odd-indexed characters removed.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the modified string\n    modified_str = ''\n    # loop through each character in the original string\n    for i in range(len(str)):\n        # check if the index value is odd\n        if i % 2 == 1:\n            # if it is, append it to the modified string\n            modified_str += str[i]\n    # return the modified string\n    return modified_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty list to store the odd values\n    odd_list = []\n    # loop through each character in the string\n    for char in str:\n        # check if the index of the character is odd\n        if len(odd_list) % 2 == 1:\n            # if it is, add it to the list\n            odd_list.append(char)\n    # convert the list to a string and return it\n    return ''.join(odd_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Create a list to store the new string without odd indices\n    new_str = []\n\n    # Loop through each character in the string\n    for char in str:\n        # Check if the index of the character is odd\n        if len(new_str) % 2 == 0:\n            # If it is, add it to the new list\n            new_str.append(char)\n\n    # Convert the new list to a string and return it\n    return ''.join(new_str)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    # Using if-else statement to find the minimum of three numbers\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters n, l, and r which are integers and represent the number, start and end range of the bits.\n    The function returns True if all the bits are set in the given range else False.\n    \"\"\"\n\n    # Initialize a variable to store the bitwise AND result of n with all the bits in the range from l to r\n    bitwise_and_result = n & (2 ** (r + 1) - 1)\n\n    # If the bitwise AND result is equal to n, it means all the bits are set in the given range, so return True\n    if bitwise_and_result == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check if the first bit of the binary representation of n is 1 or not\n    if n & (1 << l - 1):\n        return False\n    # check if all the bits are unset in the remaining bits of the binary representation of n\n    for i in range(l, r + 1):\n        if n & (1 << i - 1):\n            return False\n    # if all the bits are unset, then all the bits are set in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if the lower bound is greater than or equal to the upper bound\n    if l >= r:\n        return True\n    \n    # Check if the least significant bit of n is set\n    if n & 1 == 0:\n        return False\n    \n    # Remove the least significant bit of n\n    n >>= 1\n    \n    # Recursively check the remaining bits of n\n    return all_Bits_Set_In_The_Given_Range(n, l + 1, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the binary representation of n to a list of bits\n    binary_list = bin(n)[2:].zfill(32)\n\n    # Convert the start and end bits to binary representation\n    start_binary = bin(l)[2:].zfill(32)\n    end_binary = bin(r)[2:].zfill(32)\n\n    # Find the intersection of the two binary lists\n    intersection = [bit for bit in start_binary if bit in end_binary]\n\n    # Check if the intersection is empty or not\n    if intersection:\n        # If the intersection is empty, then all the bits are unset in the given range\n        return True\n    else:\n        # If the intersection is not empty, then all the bits are set in the given range\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the given range to a binary string\n    binary_str = bin(r - l + 1)[2:].zfill(l + r - n)[::-1]\n\n    # Check whether all the bits are set in the binary string\n    all_set = True\n    for bit in binary_str:\n        if bit == '0':\n            all_set = False\n            break\n\n    # Return the result\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the number of unset bits\n    unset_bits = 0\n    # Loop through each bit of the given range\n    for i in range(l, r+1):\n        # Check if the i-th bit is set or not\n        if n & (1 << (i-1)):\n            # If it's set, increment the unset_bits counter\n            unset_bits += 1\n            # Break out of the loop since we found an unset bit\n            break\n    # Check if all the unset bits are set to 0\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count of unset bits\n    count = 0\n    \n    # Iterate through the bits from right to left\n    while n > 0:\n        # Check if the rightmost bit of n is set or not\n        if n % 2 == 1:\n            # Increment the count of unset bits\n            count += 1\n        # Move to the left by shifting the number by 1 bit\n        n = n >> 1\n        \n    # Check if the count of unset bits in the range (l to r) is equal to the length of the range\n    if count == r-l+1:\n        # Return True if all the bits are unset in the range\n        return True\n    else:\n        # Return False if not all the bits are unset in the range\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Calculate the number of bits set\n    num_bits = len(bin(n)[2:])\n\n    # Check if all bits are set in the given range\n    is_all_set = True\n    for i in range(l, r+1):\n        # If any bit is not set in the given range, return False\n        if not (i & (1 << (num_bits - 1))):\n            is_all_set = False\n            break\n\n    return is_all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    # Convert n to binary string\n    binary_str = bin(n)[2:]\n    # Find length of binary string\n    length = len(binary_str)\n    # Initialize count variable\n    count = 0\n    # Iterate through each binary digit in binary string\n    for i in range(length):\n        # Check if binary digit is set or unset\n        if binary_str[i] == '1':\n            count += 1\n        # Check if count reaches l or r\n        if count == l or count == r:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function will check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        return True\n    if n & (1 << l) == 0:\n        return all_Bits_Set_In_The_Given_Range(n, l+1, r)\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # first, find the indices of all negative and positive elements\n    negative_indices = []\n    positive_indices = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_indices.append(i)\n        else:\n            positive_indices.append(i)\n    \n    # then, re-arrange the array\n    for i in range(len(negative_indices)):\n        if i < len(positive_indices) and negative_indices[i] > positive_indices[i]:\n            # swap negative and positive elements\n            arr[negative_indices[i]], arr[positive_indices[i]] = arr[positive_indices[i]], arr[negative_indices[i]]\n    \n    # copy the first n elements into a new array\n    new_arr = arr[:n]\n    \n    # reverse the new array\n    new_arr.reverse()\n    \n    # concatenate the two arrays\n    result = negative_indices + new_arr + positive_indices\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a new array to store the positive elements\n    positive_arr = []\n    # create a new array to store the negative elements\n    negative_arr = []\n    # loop through the array and add positive elements to positive_arr and negative elements to negative_arr\n    for i in arr:\n        if i >= 0:\n            positive_arr.append(i)\n        else:\n            negative_arr.append(i)\n    # concatenate the two new arrays and sort it in ascending order\n    arr = negative_arr + positive_arr + sorted(arr[n:])\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for the first n elements and the other for the last n elements\n    i = 0\n    j = n - 1\n    # Iterate through the array from the first element to the last n-1 element\n    while i <= j:\n        # If the current element is negative\n        if arr[i] < 0:\n            # Move the pointer for the positive elements to the right\n            while arr[j] >= 0 and j > i:\n                j -= 1\n            # Swap the current element and the element at the right pointer\n            arr[i], arr[j] = arr[j], arr[i]\n            # Move the pointer for the positive elements to the left\n            while arr[i] >= 0 and i < j:\n                i += 1\n        # If the current element is positive\n        else:\n            # Move the pointer for the negative elements to the left\n            while arr[i] < 0 and i < j:\n                i += 1\n            # Swap the current element and the element at the left pointer\n            arr[i], arr[j] = arr[j], arr[i]\n            # Move the pointer for the negative elements to the right\n            while arr[j] < 0 and j > i:\n                j -= 1\n        # Move the pointer for the first n elements to the right\n        i += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize variables to keep track of negative and positive elements\n    negative = []\n    positive = []\n    \n    # Iterate through the array and add elements to negative and positive lists\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # Iterate through the negative list and add elements to the beginning of the positive list\n    for i in range(n):\n        positive.append(negative.pop(0))\n    \n    # Return the re-arranged array\n    return positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    positive = []\n    negative = []\n    for i in range(n):\n        if arr[i] >= 0:\n            positive.append(arr[i])\n        else:\n            negative.append(arr[i])\n    for i in range(n):\n        if positive and negative:\n            arr[i] = negative.pop(0)\n        elif positive:\n            arr[i] = positive.pop(0)\n        elif negative:\n            arr[i] = negative.pop(0)\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a dictionary to store the elements with their corresponding index\n    index_dict = {}\n    # loop through the array and store each element in the dictionary\n    for i in range(len(arr)):\n        index_dict[arr[i]] = i\n\n    # sort the dictionary by the absolute value of the key (the negative elements)\n    sorted_dict = dict(sorted(index_dict.items(), key=lambda item: abs(item[0])))\n\n    # loop through the sorted dictionary and re-arrange the elements of the array\n    i = 0\n    while i < n:\n        arr[i] = sorted_dict[arr[i]]\n        i += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos_arr = []\n    neg_arr = []\n\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n\n    arr = neg_arr + pos_arr\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Helper function to swap two elements in the given array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    # Helper function to partition the given array around a pivot element\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        \n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                swap(arr, i, j)\n        \n        swap(arr, i+1, high)\n        return i+1\n    \n    # Helper function to re-arrange the elements in the given array\n    def rearrange_elements(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            rearrange_elements(arr, low, pi-1)\n            rearrange_elements(arr, pi+1, high)\n    \n    # Helper function to print the elements of the given array\n    def print_array(arr):\n        for i in range(len(arr)):\n            print(arr[i], end=\" \")\n    \n    # Rearrange the first n elements of the array\n    rearrange_elements(arr, 0, n-1)\n    print()\n    \n    # Print the original array\n    print(\"Original Array:\")\n    print_array(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Remove all negative elements from the array\n    neg_elements = [x for x in arr if x < 0]\n    pos_elements = [x for x in arr if x >= 0]\n    neg_elements.sort(reverse=True)\n    \n    # Combine the negative and positive elements in the same order\n    result = neg_elements + pos_elements\n    \n    # Remove any duplicates from the result array\n    result = list(set(result))\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # initialize variables for negative and positive counts\n    neg_count = 0\n    pos_count = 0\n    # loop through the array and count the number of negative and positive elements\n    for x in arr:\n        if x < 0:\n            neg_count += 1\n        elif x > 0:\n            pos_count += 1\n    # if n is greater than the number of negative elements, return the array as is\n    if n > neg_count:\n        return arr\n    # if n is less than or equal to zero, return an empty array\n    if n <= 0:\n        return []\n    # initialize two empty arrays to hold the negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    # loop through the array and move the appropriate elements to their respective arrays\n    for x in arr:\n        if x < 0:\n            neg_arr.append(x)\n        else:\n            pos_arr.append(x)\n    # append the remaining elements to the first n positions of the negative array\n    for i in range(neg_count - n):\n        neg_arr.append(0)\n    # append the remaining elements to the first n positions of the positive array\n    for i in range(pos_count - n):\n        pos_arr.append(0)\n    # concatenate the negative and positive arrays and return the result\n    return neg_arr + pos_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a blank space, replace it with the specified character\n        if str1[i] =='':\n            str1 = str1[:i] + char + str1[i+1:]\n    # Return the modified string\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Use a loop to iterate over each character in the string\n    for i in range(len(str1)):\n        # If the current character is a space, replace it with the given character\n        if str1[i] == \" \":\n            str1 = str1[:i] + char + str1[i+1:]\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # split the string into words using space as the delimiter\n    words = str1.split()\n\n    # loop through each word and replace any blank spaces with the character\n    for i in range(len(words)):\n        if words[i] == \"\":\n            words[i] = char\n\n    # join the words back into a string using space as the delimiter\n    result = \" \".join(words)\n\n    # return the modified string\n    return result"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    # replace all spaces with the given character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Returns a list containing the n largest items from the list.\n    '''\n    # Using heapq module to find the largest n numbers in the list\n    return [heapq.nlargest(n, lst)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # initialize an empty list to store the n largest numbers\n    nlargest = []\n    # initialize a variable to store the total number of elements in the list\n    total_num = len(list1)\n\n    # use heapq to add the n smallest elements from the list to the nlargest list\n    heapq.nlargest(n, list1, nlargest)\n\n    # return the nlargest list\n    return nlargest"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, lst)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap to store n largest elements\n    max_heap = []\n    for i in range(n):\n        max_heapq.heappush(max_heap, list1[i])\n    \n    # Extract the n largest elements from the heap and add them to the final result list\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a set to remove duplicates and sort in descending order\n    list1 = sorted(list(set(list1)), reverse=True)\n    # return the first n largest items from the sorted list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to store the n largest items from the list\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return a list containing the n largest items from the list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    \n    # Use a min heap to get the n largest numbers\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -list1[i])\n\n    # Add the remaining numbers to the heap\n    for num in list1[n:]:\n        heapq.heappush(min_heap, -num)\n\n    # Return the n largest numbers from the heap\n    return [-heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using formula for cylinder surface area\n    lateral_surface_area = 2 * (3 * r * r + r * h + h * h)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*r*h + 2*h*r\n    print(\"The lateral surface area of a cylinder is:\", area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * (r * h)\n    print(\"Lateral surface area of the cylinder is:\", lateral_surface_area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n\n    Parameters:\n        r (float): radius of the cylinder.\n        h (float): height of the cylinder.\n\n    Returns:\n        float: lateral surface area of the cylinder.\n    '''\n\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Args:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    pi = 3.14159\n    return (2*pi*r*h) + (2*pi*r*r)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # The volume of a cube is the cube of its side length"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3 #Volume formula: V = l^3\n    return v #Return the volume of the cube."
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits\n    even_bits = []\n    # loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, add it to the list\n        if int(bit) % 2 == 0:\n            even_bits.append(int(bit))\n    # convert the list of even bits back to an integer and return it\n    return int(''.join(map(str, even_bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(16):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate through each bit of the number\n    for bit in bin(n)[2:]:\n        # Set the result to 1 if the current bit is even\n        if int(bit) % 2 == 0:\n            result += int(bit)\n        \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the number with even bits set\n    result = 0\n    # Loop through each bit of the input number\n    for i in range(32): \n        # Check if the ith bit of the input number is even\n        if n & (1 << i): \n            # Set the corresponding bit of the result to 1\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the number of set bits\n    count = 0\n    \n    # Loop through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) == 0:\n            n = n & ~int(2**(count))\n        else:\n            n = n | int(2**(count))\n            count += 1\n            \n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the modified number\n    modified_num = 0\n\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # Check if the current bit is even\n        if int(bit) % 2 == 0:\n            # Set the corresponding bit in the modified number to 1\n            modified_num += int(bit)\n\n    # Return the modified number\n    return modified_num"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a variable to store the result\n    result = 0\n\n    # loop through each bit of the number\n    for i in range(32):\n        # if the current bit is even, set it in the result\n        if (n & (1 << i))!= 0:\n            result |= (1 << i)\n\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits of the number\n    even_bits = 0\n    \n    # Loop through each bit of the binary representation of the number\n    for i in range(len(bin(n)[2:])):\n        # If the current bit is even, set the corresponding bit in the even_bits variable\n        if bin(n)[2:].count('1')[i] % 2 == 0:\n            even_bits |= 1 << i\n    \n    # Return the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate over each bit of the number\n    for i in range(len(bin(n)[2:])):\n        # If the current bit is even, set the result to 1\n        if i % 2 == 0:\n            result |= 1 << i\n\n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    result = dict(counter)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a set of tuples from the input list\n    unique_tuples = set(tuple(x) for x in test_list)\n    \n    # Create a dictionary to store the count of each unique tuple\n    count_dict = Counter(unique_tuples)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count\n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Creating a dictionary to store the occurrence count of each unique tuple\n    count_dict = {}\n    # Looping through the list of tuples\n    for tup in test_list:\n        # Checking if the current tuple is already present in the dictionary\n        if tup in count_dict:\n            # If it is, updating the count\n            count_dict[tup] += 1\n        else:\n            # If it isn't, adding it to the dictionary with a count of 1\n            count_dict[tup] = 1\n    # Returning the dictionary with the unique tuple as key and the count as value\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    counts = {}\n\n    # Loop through the list of tuples and update the count in the dictionary\n    for tup in test_list:\n        if tup not in counts:\n            counts[tup] = 1\n        else:\n            counts[tup] += 1\n\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter() # initializing a Counter object to keep track of the count of each unique tuple\n    for item in test_list:\n        counter[item] += 1 # incrementing the count for each unique tuple in the list\n    \n    return dict(counter) # converting the Counter object to a dictionary and returning it"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n\n    # initialize count variable to 0\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n\n        # loop through each possible starting position of the substring\n        for j in range(i+1, len(str)+1):\n\n            # check if the substring is non-empty and not a substring of any previous substring\n            if (str[i:j]!= '' and str[i:j] not in str[0:i]):\n\n                # increment the count variable by 1\n                count += 1\n\n    # return the count variable\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize a count variable to keep track of the number of non-empty substrings\n    count = 0\n\n    # Iterate through the string\n    for i in range(len(str)):\n        # Check if the current character is a letter\n        if str[i].isalpha():\n            # Initialize a variable to keep track of the starting index of the substring\n            start_index = i\n            # Iterate through the remaining characters of the substring\n            while i < len(str) and str[i].isalpha():\n                i += 1\n            # If the substring is not empty, increment the count\n            if i > start_index:\n                count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    def helper(i, prev):\n        if i == 0:\n            return 1\n        if i == n:\n            return 0\n        if i == m:\n            return 0\n        \n        return helper(i+1, prev+1) + helper(i+1, prev)\n    \n    return helper(0, 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 1 or n < 1:\n        return 0\n    \n    # Helper function to check if a number is valid for the sequence\n    def is_valid_sequence(sequence):\n        for i in range(1, len(sequence)):\n            if sequence[i] < 2 * sequence[i-1] or sequence[i] > m:\n                return False\n        return True\n    \n    # Initialize the number of valid sequences to 0\n    total_sequences = 0\n    \n    # Generate all possible sequences of length n\n    for i in range(m, 2*m+1):\n        if is_valid_sequence([i]):\n            total_sequences += 1\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n):\n    total = 0\n    for i in range(m//2):\n        if n % 2 == 0:\n            # if n is even, take every even number\n            total += i * (m-i)\n        else:\n            # if n is odd, take every odd number\n            total += i * (m-i) + 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(1, m+1):\n        if (2*i <= m) and (i >= 2*i-1):\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(1, m+1):\n        if i >= 2*n:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through all possible sequences of length n\n    for i in range(n):\n        # Initialize the previous element to -1\n        prev = -1\n        \n        # Iterate through all possible elements for the sequence\n        for j in range(i+1,n+1):\n            # Check if the element is within the range of possible values\n            if j >= 2*prev and j <= m:\n                # If it is, increment the count\n                count += 1\n            \n            # Set the previous element to the current element\n            prev = j\n    \n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n\n    for i in range(2, n+1):\n        current_element = i\n        current_sequence_length = 1\n\n        while current_sequence_length < n:\n            next_element = current_element + 2\n            if next_element > m:\n                break\n            current_sequence_length += 1\n            current_element = next_element\n\n        total_sequences += current_sequence_length\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through the values of i between 1 and m\n    for i in range(1,m+1):\n\n        # Initialize the sequence count variable to 0\n        seq_count = 0\n\n        # Loop through the values of j between i and m\n        for j in range(i,m+1):\n\n            # If the current element is greater than or equal to twice the previous element and less than or equal to m, increment the sequence count\n            if j >= 2*i and j <= m:\n                seq_count += 1\n\n        # If the sequence count is equal to n, increment the count\n        if seq_count == n:\n            count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # initialize the count to 0\n    count = 0\n\n    # loop through all possible sequences of length n\n    for i in range(1, m + 1):\n        # check if the first element of the sequence is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2 * (n - 1) and i <= m:\n            # if the first element of the sequence is valid, increment the count\n            count += 1\n\n    # return the count of valid sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    def count_sequences(seq, length):\n        if length == 0:\n            return 1\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] + 2 * seq[i - 1] <= m and seq[i] + 2 * seq[i - 1] >= 2 * seq[i - 2]:\n                count += count_sequences(seq[:i] + seq[i + 1:], length - 1)\n        return count\n\n    sequences = []\n    for i in range(m, n + 1):\n        sequences.append(list(range(i)))\n    return count_sequences(sequences[1], n)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == len(list2):\n        for i in range(len(list1)-1):\n            list1[i] = list2[i]\n        list1[len(list1)-1] = list2[-1]\n    else:\n        print(\"The two lists must have the same length.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # create a new list to hold the elements of list1\n    new_list = list1.copy()\n    # remove the last element of list1\n    new_list.pop()\n    # append the elements of list2 to the end of list1\n    new_list.extend(list2)\n    # return the new list\n    return new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list2) > len(list1):\n        raise ValueError(\"Second list cannot be longer than first list.\")\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    \n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N*sqrt_N == N:\n        return sqrt_N*sqrt_N + 1\n    \n    while sqrt_N*sqrt_N <= N:\n        sqrt_N += 1\n    \n    return sqrt_N*sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number N.\n    \"\"\"\n\n    def isPerfectSquare(num):\n        \"\"\"\n        This function checks if a given number is a perfect square or not.\n        \"\"\"\n        return int(math.sqrt(num))**2 == num\n\n    def getNextPerfectSquare(N):\n        \"\"\"\n        This function calculates the next perfect square greater than a given number N.\n        \"\"\"\n        sqrt_N = int(math.sqrt(N))\n        if isPerfectSquare(N):\n            return sqrt_N + 1\n        else:\n            return sqrt_N + 1 + math.ceil(math.log2(N + sqrt_N**2))\n\n    return getNextPerfectSquare(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number N.\n    \"\"\"\n\n    def is_perfect_square(num):\n        \"\"\"\n        This function checks whether a given number is a perfect square or not.\n        \"\"\"\n        return num == int(num ** 0.5 + 0.5) ** 2\n\n    def next_square(num):\n        \"\"\"\n        This function calculates the next perfect square greater than a given number.\n        \"\"\"\n        while True:\n            square = num ** 2\n            if is_perfect_square(square):\n                return square\n\n    if not is_perfect_square(N):\n        N = next_square(N)\n\n    while not is_perfect_square(N):\n        N += 1\n\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find the square root of N\n    sqrtN = int(math.sqrt(N))\n    \n    # if sqrtN is an odd number, increment it and take its square root\n    if sqrtN % 2 == 1:\n        sqrtN += 1\n        sqrtN = int(math.sqrt(sqrtN))\n    \n    # if sqrtN is even, find the largest prime factor of sqrtN that is less than sqrtN\n    else:\n        sqrtN -= 1\n        sqrtN = int(math.sqrt(sqrtN))\n        while sqrtN % 2 == 0:\n            sqrtN -= 1\n        \n        sqrtN += 1\n    \n    # return sqrtN * sqrtN\n    return sqrtN * sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # If the given number is already a perfect square\n    if math.isqrt(N) ** 2 == N:\n        # Calculate the next perfect square\n        next_num = math.isqrt(N) + 1\n        # Check if the next perfect square is greater than the given number\n        while next_num ** 2 <= N:\n            next_num += 1\n        return next_num - 1\n\n    # If the given number is not a perfect square\n    else:\n        # Calculate the closest perfect square\n        closest_num = int(math.sqrt(N))\n        # Calculate the next perfect square greater than the closest perfect square\n        next_num = closest_num + 1\n        while next_num ** 2 <= N:\n            next_num += 1\n        return next_num - 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        i = n\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def is_square(n):\n        return int(math.sqrt(n)) ** 2 == n\n\n    def next_square(n):\n        i = n\n        while not is_square(i):\n            i += 1\n        return i\n\n    next_num = N + 1\n    while not is_prime(next_num):\n        next_num = next_prime(next_num)\n\n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    root_int = int(root)\n    next_root = root_int + 1\n    if next_root**2 > N:\n        next_root = next_root - 1\n    return next_root"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        return \"Please enter a positive number\"\n\n    # Find the square root of N\n    root = math.sqrt(N)\n\n    # If the square root is an integer, return the next integer greater than the square root\n    if int(root) ** 2 == N:\n        return int(root) + 1\n    \n    # Otherwise, return the square root of the closest integer to N\n    else:\n        return int(root + 1) ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if the given number is prime\n    if is_prime(N):\n        # Check if the given number is already a perfect square\n        if N**2 == N:\n            return N + 1\n        # Find the next perfect square greater than the given number\n        else:\n            N = N + 1\n            while True:\n                if is_prime(N):\n                    return N\n                N += 1\n    else:\n        # Find the next prime number greater than the given number\n        N = N + 1\n        while True:\n            if is_prime(N):\n                return N\n            N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        x = N + 1\n        y = int(math.sqrt(x)) ** 2\n        if y > N:\n            return y\n        else:\n            x += 1\n            y = int(math.sqrt(x)) ** 2"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return 0\n\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    max_sum_left = arr[left]\n    max_sum_right = arr[right]\n    max_sum_total = max(arr[left], arr[right])\n\n    # Iterate through the array\n    for i in range(1, len(arr) - 1):\n        # Check if the left subsequence is increasing and the right subsequence is decreasing\n        if arr[left] < arr[i] and arr[i] > arr[right]:\n            # Update max_sum_left and max_sum_right\n            max_sum_left = max(max_sum_left, arr[i])\n            max_sum_right = max(max_sum_right, arr[right])\n\n        # Check if the right subsequence is increasing and the left subsequence is decreasing\n        if arr[right] < arr[i] and arr[i] > arr[left]:\n            # Update max_sum_left and max_sum_right\n            max_sum_left = max(max_sum_left, arr[left])\n            max_sum_right = max(max_sum_right, arr[i])\n\n        # Update max_sum_total\n        max_sum_total = max(max_sum_left, max_sum_right)\n\n    return max_sum_total"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    temp_sum = 0\n    temp_index = 0\n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            if temp_sum < 0:\n                temp_sum = arr[i]\n                temp_index = i\n            else:\n                temp_sum += arr[i]\n        else:\n            if temp_sum >= 0:\n                temp_sum = max(temp_sum + arr[i], arr[i])\n                temp_index = i\n            else:\n                temp_sum = arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables to store the maximum sum and the maximum increasing subsequence sum\n    max_sum = arr[0]\n    max_increasing_sum = arr[0]\n\n    # Loop through the array, checking for increasing and decreasing subsequences\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]: # Check if the current element is greater than the previous element\n            if arr[i] > max_increasing_sum: # Check if the current element is greater than the maximum increasing subsequence sum\n                max_increasing_sum = arr[i] # Update the maximum increasing subsequence sum\n        elif arr[i] < arr[i-1]: # Check if the current element is less than the previous element\n            if arr[i] + max_increasing_sum > max_sum: # Check if adding the current element and the maximum increasing subsequence sum is greater than the maximum sum\n                max_sum = arr[i] + max_increasing_sum # Update the maximum sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    max_sum_inc = 0\n    max_sum_dec = 0\n    max_sum_inc_dec = 0\n    prev_sum = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > prev_sum:\n            max_sum_inc = max(max_sum_inc, prev_sum + arr[i])\n        else:\n            max_sum_dec = max(max_sum_dec, prev_sum - arr[i])\n        max_sum_inc_dec = max(max_sum_inc_dec, max_sum_inc, max_sum_dec)\n        prev_sum = arr[i]\n    \n    return max_sum_inc_dec"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3: # If array has less than 3 elements, return 0\n        return 0\n\n    left_sum = 0 # Initialize left sum to 0\n    right_sum = 0 # Initialize right sum to 0\n\n    for num in arr: # Iterate through the array\n        if num < arr[0]: # If number is less than first element, update left sum\n            left_sum = num\n        else: # If number is greater than or equal to first element, update right sum\n            right_sum = num\n\n        if left_sum < right_sum: # If left sum is greater than right sum, swap them\n            temp = left_sum\n            left_sum = right_sum\n            right_sum = temp\n\n    return left_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Check if the array is bitonic\n    if arr[0] < arr[1] and arr[-1] < arr[-2]:\n        return max_sum_bitonic(arr)\n    # Check if the array is monotonic increasing\n    elif arr[0] < arr[1]:\n        return max_sum_monotonic(arr, increasing=True)\n    # Check if the array is monotonic decreasing\n    elif arr[-1] > arr[-2]:\n        return max_sum_monotonic(arr, increasing=False)\n    # If the array is neither monotonic increasing nor decreasing, return 0\n    else:\n        return 0\n\ndef max_sum_bitonic(arr):\n    \"\"\"\n    Helper function to find the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables\n    left_sum = 0\n    right_sum = 0\n    max_sum = float('-inf')\n    # Iterate through the array\n    for i in range(n):\n        # Update the sum of the subsequence on the left\n        if i % 2 == 0:\n            left_sum += arr[i]\n        else:\n            left_sum -= arr[i]\n        # Update the maximum sum\n        if left_sum > max_sum:\n            max_sum = left_sum\n        # Update the sum of the subsequence on the right\n        if i < n - 1:\n            if i % 2 == 0:\n                right_sum += arr[i+1]\n            else:\n                right_sum -= arr[i+1]\n        # Update the maximum sum\n        if right_sum > max_sum:\n            max_sum = right_sum\n    return max_sum\n\ndef max_sum_monotonic(arr, increasing):\n    \"\"\"\n    Helper function to find the maximum sum of a monotonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables\n    max_sum = float('-inf')\n    # Iterate through the array\n    for i in range(n):\n        if increasing:\n            # Check if the current element is greater than the previous element\n            if i > 0 and arr[i] > arr[i-1]:\n                max_sum = max(max_sum, arr[i])\n        else:\n            # Check if the current element is less than the previous element\n            if i > 0 and arr[i] < arr[i-1]:\n                max_sum = max(max_sum, arr[i])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    # Initialize variables\n    max_sum_left = 0\n    max_sum_right = 0\n    current_sum_left = 0\n    current_sum_right = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is increasing and the next element is decreasing, add the current element to the sum\n        if arr[i] < arr[i+1] and arr[i] > arr[i+2]:\n            current_sum_left += arr[i]\n\n        # If the current element is decreasing and the next element is increasing, add the current element to the sum\n        elif arr[i] > arr[i+1] and arr[i] < arr[i+2]:\n            current_sum_right += arr[i]\n\n        # If the current element is increasing and the next element is increasing, add the current element to the sum\n        elif arr[i] < arr[i+1] and arr[i] < arr[i+2]:\n            current_sum_left += arr[i]\n\n        # If the current element is decreasing and the next element is decreasing, add the current element to the sum\n        else:\n            current_sum_right += arr[i]\n\n        # Update the maximum sum of the left side of the array\n        max_sum_left = max(max_sum_left, current_sum_left)\n\n        # Update the maximum sum of the right side of the array\n        max_sum_right = max(max_sum_right, current_sum_right)\n\n    # Return the maximum sum of the left and right sides of the array\n    return max(max_sum_left, max_sum_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # check if array is increasing or decreasing\n    if arr[0] < arr[n-1]:\n        increasing = True\n    else:\n        increasing = False\n        \n    # check if array is bitonic\n    for i in range(n-2):\n        if arr[i] > arr[i+1] and arr[i+2] < arr[i+3]:\n            bitonic = True\n        else:\n            bitonic = False\n        \n        if increasing and not bitonic:\n            increasing = False\n        elif not increasing and bitonic:\n            increasing = True\n    \n    # calculate maximum sum\n    max_sum = arr[0]\n    for i in range(1, n):\n        if increasing:\n            if arr[i] > arr[i-1]:\n                max_sum = max(max_sum, arr[i])\n        else:\n            if arr[i] < arr[i-1]:\n                max_sum = max(max_sum, arr[i])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 2:\n        return max(arr)\n\n    # create a list of differences between adjacent elements\n    diff_arr = []\n    for i in range(len(arr) - 1):\n        diff_arr.append(arr[i + 1] - arr[i])\n\n    # find the maximum sum for each subsequence of the array\n    max_sum_subseq = [max_sum_bitonic(diff_arr[i:]) for i in range(len(diff_arr))]\n\n    # find the maximum sum of the entire array\n    max_sum_arr = max(max_sum_subseq)\n\n    return max_sum_arr\n\n\ndef max_sum_bitonic(arr):\n    '''\n    Write a function that finds the maximum sum of a bitonic subsequence for the given array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n\n    # initialize variables for the maximum sum for each subsequence\n    max_sum_inc = 0\n    max_sum_dec = 0\n\n    # find the maximum sum for each subsequence of the array\n    for num in arr:\n        if num > 0:\n            max_sum_inc = max(max_sum_inc + num, num)\n        else:\n            max_sum_dec = max(max_sum_dec + num, num)\n\n    # find the maximum sum of the entire array\n    max_sum = max(max_sum_inc, max_sum_dec)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_sum_increase = max_sum_decrease = arr[0]\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_sum_increase = max(max_sum_increase, arr[i])\n        else:\n            max_sum_decrease = max(max_sum_decrease, arr[i])\n    return max(max_sum_increase, max_sum_decrease)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x1 = 1\n    x2 = 0\n    x0 = (x1 + x2) / 2\n\n    while abs(x1 - x2) > 0.000001:\n        x3 = (x1 * x1 - number) / (2 * x1)\n        x0 = x1\n        x1 = x2\n        x2 = x3\n\n    return x2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while abs(x*x - number) > 0.001:\n        x = (x + number/x)/2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2.0\n    y = x\n    while abs(x*x - number) > 0.00001:\n        x = (x + number/x)/2.0\n        y = x\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(guess - new_guess) < 0.00001:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Error: number must be non-negative\")\n        return None\n    elif number == 0:\n        print(\"0 is a square root of 0\")\n        return 0\n    elif number == 1:\n        print(\"1 is a square root of 1\")\n        return 1\n\n    # Calculate the initial guess\n    guess = number / 2.0\n\n    # Calculate the first and second orders of the series\n    f = (guess + number / guess) / 2.0\n    second_order = guess * (guess + 1)\n\n    # Iterate until the difference between the current guess and the second order is small enough\n    while abs(guess * guess - second_order) > 0.00001:\n        guess = (second_order + number / second_order) / 2.0\n        f = (guess + number / guess) / 2.0\n        second_order = guess * (guess + 1)\n\n    # Return the square root\n    print(\"The square root of\", number, \"is\", round(guess, 5))\n    return round(guess, 5)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Error: Square roots cannot be calculated for negative numbers.\")\n        return None\n    \n    x = number\n    y = x / 2\n    z = math.sqrt(x)\n    \n    while abs(z - y) > 0.0001:\n        x = y\n        y = x / 2\n        z = math.sqrt(x)\n    \n    return z"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number, tolerance=0.001):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    \n    Args:\n        number (float): the number whose square root is to be computed\n        tolerance (float, optional): the tolerance for stopping the iterations. Defaults to 0.001.\n        \n    Returns:\n        float: the square root of the number.\n    '''\n    # initialize the guess to the number itself\n    guess = number\n    \n    # initialize the maximum number of iterations\n    max_iterations = 100\n    \n    # loop until the difference between the square of the guess and the actual square of the number is less than the tolerance\n    for i in range(max_iterations):\n        # calculate the square of the guess\n        guess_squared = guess**2\n        \n        # calculate the difference between the square of the guess and the actual square of the number\n        difference = abs(guess_squared - number)\n        \n        # update the guess by adding the difference divided by 2 to the guess\n        guess = (guess_squared + number) / 2\n        \n        # check if the difference between the square of the guess and the actual square of the number is less than the tolerance\n        if difference < tolerance:\n            return guess\n        \n    # if the loop finishes without finding the square root, return None\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize the variable for the number of iterations\n    count = 0\n\n    # Initialize the variable for the current approximation\n    x = number / 2\n\n    # Loop until the difference between the old and new approximations is less than 0.0001\n    while abs(x * x - number) > 0.0001:\n        count += 1\n        x = (x + number / x) / 2\n\n    return count, x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-10\n    guess = number / 2\n    while abs(guess**2 - number) >= epsilon:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Use the Newton-Raphson method to find the square root of number\n    x = number\n    y = (x + number / x) / 2\n    while abs(y - x) > 1e-10:\n        x = y\n        y = (x + number / x) / 2\n    return y"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    n = len(s)\n    # create a 2D array to store the length of palindromic subsequences\n    # for each position i in the string\n    table = [[0] * n for _ in range(n)]\n\n    # fill the table in bottom-up manner\n    # consider odd length palindromes\n    for i in range(n):\n        if i == 0 or s[i] == s[i-1]:\n            table[i][i] = 1\n\n    # consider even length palindromes\n    for i in range(n-1, -1, -1):\n        if i == n-1 or s[i] == s[i+1]:\n            table[i][i] = 1\n        else:\n            table[i][i] = 2\n\n    # find the length of the longest palindromic subsequence for\n    # odd length palindromes\n    for i in range(n-2, -1, -1):\n        for j in range(i+2, n):\n            if s[i] == s[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\n\ndef longest_palindromic_subsequence(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a 2D table to store the lengths of subsequences\n    table = [[0 for _ in range(len(s) + 1)] for _ in range(len(s) + 1)]\n\n    # Fill the table\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(s) + 1):\n            if s[i - 1] == s[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[len(s)][len(s)]\n\n\ndef lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    s = list(s)\n\n    # Initialize the result and the length of the longest palindromic subsequence\n    result = 0\n    current_length = 0\n\n    # Find the length of the longest palindromic subsequence for each substring\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the substring is a palindrome\n            if is_palindrome(s[i:j + 1]):\n                # Update the result and the length of the longest palindromic subsequence\n                if j - i + 1 > current_length:\n                    current_length = j - i + 1\n                    result = s[i:j + 1]\n\n    return result"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(string):\n    '''\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n\n    Time Complexity: O(n^2 * m), where n is the length of the string and m is the maximum length of a substring.\n\n    The above time complexity comes from the fact that we need to consider all possible substrings of the string.\n    Therefore, the number of substrings is n^2, and the maximum length of a substring is m.\n\n    This can be improved by using dynamic programming. We will create a 2D table to store the length of the longest palindromic subsequence for all possible substrings of the given string. We will initialize the first row and first column of the table with 1.\n\n    We will then iterate over the remaining rows and columns of the table, and for each position (i, j), we will calculate the length of the longest palindromic subsequence for the substring of the string from index i to index j. We will use a helper function to check if a given substring is a palindrome.\n\n    Finally, we will return the length of the longest palindromic subsequence.\n\n    '''\n\n    n = len(string)\n    m = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if string[i] == string[j]:\n                m = max(m, 2)\n            else:\n                m = 1\n\n            if m > 1:\n                for k in range(2, m + 1):\n                    if i + k <= j:\n                        if string[i + k - 1] == string[j - k]:\n                            m = max(m, k + 2)\n                            break\n\n    return m\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D array to store the length of the longest palindromic subsequence ending at each position in the string\n    lps_table = [[0] * n for _ in range(n)]\n\n    # base case: all characters are palindromes\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # fill in the LPS table\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i + 1][j - 1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i + 1][j], lps_table[i][j - 1])\n\n    return lps_table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    # Initialize two variables to keep track of the length of the longest palindromic subsequence and the index of the longest palindromic subsequence\n    max_length = 1\n    max_start = 0\n\n    # Iterate through each character in the string\n    for i in range(1, len(str)):\n        # Initialize two variables to keep track of the length of the current palindromic subsequence and its starting index\n        temp_length = 1\n        temp_start = i - 1\n\n        # Iterate through the substring starting from the current index\n        for j in range(i, len(str)):\n            # If the characters at the current index and the previous index are the same, update the length of the current palindromic subsequence\n            if str[i] == str[j]:\n                temp_length += 2\n            else:\n                # If the characters are different, update the length of the current palindromic subsequence\n                temp_length = 1\n                temp_start = j\n\n            # Update the length of the longest palindromic subsequence if necessary\n            if temp_length > max_length:\n                max_length = temp_length\n                max_start = temp_start\n\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    # creating a table to store lengths of substrings\n    table = [[0] * n for i in range(n)]\n    # initializing the values of first row and first column\n    for i in range(n):\n        table[i][i] = 1\n    # filling the table using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                table[i][j] = table[j][k] + 1\n            else:\n                table[i][j] = max(table[i][j], table[j][k])\n            k = i - j - 1\n    # finding the length of the longest palindromic subsequence\n    max_len = 0\n    for i in range(n):\n        max_len = max(max_len, table[i][i])\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of LPS for all prefixes of string\n    table = [[0 for j in range(n+1)] for i in range(n+1)]\n    # Initialize LPS length as 0 for all prefixes\n    for i in range(n+1):\n        table[i][0] = 0\n    # Fill the table in bottom-up manner\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    # Return the maximum length of LPS as result\n    return table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    if len(s) <= 1:\n        return len(s)\n    elif s[0] == s[-1]:\n        return 2 + lps(s[1:-1])\n    else:\n        return max(lps(s[1:]), lps(s[:-1]))"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_length = 1\n    start = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[j][i-1] + 2\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n                    start = i - dp[i][j] + 1\n            else:\n                dp[i][j] = max(dp[j][i-1], dp[i-1][j-1])\n\n    return max_length, str[start:start+max_length]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store length of longest palindromic subsequence ending at each index\n    table = [[0] * n for i in range(n)]\n\n    # Base case: all characters are same\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check for subsequence of length 2\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            table[i][i+1] = 2\n\n    # Check for subsequences of length 3\n    for i in range(n-2):\n        if s[i] == s[i+2]:\n            table[i][i+2] = 3\n\n    # Fill the table for lengths greater than 3\n    for length in range(4, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                table[start][end] = table[start+1][end-1] + 2\n            else:\n                table[start][end] = max(table[start+1][end], table[start][end-1])\n\n    return table[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 'Invalid input. Please enter a positive integer.'\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n):\n            sum += 1/i\n        return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*n - n)/2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n*(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return 1/n + (1/n**2)*sum(range(2,n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 2 * harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/2*harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0.0\n    for i in range(1, n):\n        harmonic_sum += (1 / i)\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n\n    Args:\n    array_nums1: list of integers.\n    array_nums2: list of integers.\n\n    Returns:\n    list of integers: A list of integers that are common to both arrays.\n    \"\"\"\n\n    # Convert arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find intersection\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert intersection to list and return\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two sets to store the unique elements of both arrays\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the two sets and convert it to a list\n    intersection = list(set_nums1.intersection(set_nums2))\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the arrays to sets to remove duplicates and make the search more efficient\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list\n    intersection_list = list(intersection)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection_set = set1.intersection(set2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to remove duplicates\n    array_set1 = set(array_nums1)\n    array_set2 = set(array_nums2)\n\n    # Find the intersection between the sets\n    intersection_set = array_set1.intersection(array_set2)\n\n    # Convert the intersection set back to a list and return\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    hash_table = {}\n\n    # Create a hash table with the elements of the first array\n    for num in array_nums1:\n        hash_table[num] = True\n\n    # Loop through the second array and add the elements that are in the hash table\n    for num in array_nums2:\n        if num in hash_table and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize two pointers to the beginning of both arrays\n    i = j = 0\n    \n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through both arrays until one of them has been exhausted\n    while i < len(array_nums1) and j < len(array_nums2):\n        # Compare the current elements of both arrays\n        if array_nums1[i] == array_nums2[j]:\n            # If they are equal, append it to the common_elements list and move both pointers\n            common_elements.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            # If the current element of array_nums1 is smaller, move the pointer to the right\n            i += 1\n        else:\n            # If the current element of array_nums2 is smaller, move the pointer to the right\n            j += 1\n    \n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element as input and returns the number of occurrences of that element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list.\n    \"\"\"\n    new_list = []\n    for i in lst:\n        new_list.append(elem)\n        new_list.append(i)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    # create a new empty list to store the resulting list\n    result = []\n    \n    # loop through each element in the list\n    for item in list:\n        # add the element to the new list\n        result.append(item)\n        # add the element to the new list\n        result.append(element)\n    \n    # return the resulting list\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        arg = cmath.phase(num)\n        polar_num = f\"({real:.2f}, {imag:.2f}, {arg:.2f})\"\n        print(polar_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        arg = cmath.phase(num)\n        polar_num = (mag, arg)\n        polar.append(polar_num)\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num\n        # Convert real and imaginary parts to polar form\n        r = abs(real) + abs(imag)\n        theta = cmath.phase(complex(real, imag))\n        # Output polar coordinates\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # extract the real and imaginary parts of the number\n        real = number.real\n        imag = number.imag\n        \n        # calculate the magnitude and angle of the number using cmath functions\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        \n        # create a new tuple with the polar coordinates and append it to the result list\n        polar = (magnitude, angle)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        polar = cmath.polar(number)\n        \n        # Extract the polar angle and magnitude\n        angle = polar[0]\n        magnitude = polar[1]\n        \n        # Create a dictionary with the angle and magnitude\n        polar_dict = {'angle': angle,'magnitude': magnitude}\n        \n        # Append the dictionary to the result list\n        result.append(polar_dict)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their corresponding polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        if isinstance(number, complex):\n            r = abs(number)\n            theta = cmath.phase(number)\n            polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for num in numbers:\n        complex_numbers.append(cmath.rect(num))\n    return complex_numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        if isinstance(number, complex):\n            r = abs(number)\n            theta = cmath.phase(number)\n            result.append((r, theta))\n        else:\n            print(\"Invalid input\")\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print(f\"({real:.3f}, {imag:.3f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n\n        # Print the polar coordinates\n        print(f\"{num} is represented as ({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create a set to store the unique colors and their frequency\n    colors = set()\n    for i in range(len(l)):\n        colors.add(l[i])\n    \n    # generate all combinations with repetition using itertools.combinations_with_replacement\n    combinations = list(combinations_with_replacement(colors, n))\n    \n    # create a list to store the combination tuples\n    result = []\n    \n    # loop through the combinations and create a tuple for each combination\n    for combination in combinations:\n        result.append(tuple(combination))\n        \n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # check if length n is greater than length of list l\n    if n > len(l):\n        return []\n    # create a list of all possible combinations of length n\n    comb_list = list(combinations_with_replacement(l, n))\n    # initialize an empty list to store the final combinations\n    result = []\n    # iterate over each combination and add it to the result list as a tuple\n    for c in comb_list:\n        result.append(tuple(c))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            comb_list.append(tuple(j))\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n-1):\n            combinations.append((l[i],) + tuple(j))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l) + 1):\n            if j == i + n:\n                combinations.append((l[i], l[j - 1]))\n            elif j > i + n:\n                combinations.append((l[i], l[j - 1]))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l[i:], n):\n            result.append((l[i],) + comb)\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # initialize a variable to keep track of the number of prime numbers\n    count = 0\n\n    # loop through all numbers from 2 to n\n    for i in range(2, n):\n\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if i is prime, increment the count\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            if count == 10001:\n                return count\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n+1):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    \n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    \n    for i in range(2, n):\n        is_prime = True\n        \n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n            \n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    max_value = max(test_tup1)\n    if max_value == test_tup1[0]:\n        return test_tup1\n    elif max_value == test_tup2[0]:\n        return test_tup2\n    else:\n        raise ValueError(\"The maximum value in both tuples should be different.\")"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = max(test_tup1)\n    if test_tup1[max_num] < test_tup2[max_num]:\n        max_num = max(test_tup2)\n    return max_num"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # defining the two lists\n    list1 = test_tup1[0]\n    list2 = test_tup2[0]\n    # comparing the lists\n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            # returning the maximized list\n            return (list1, list2)\n        elif list2[i] > list1[i]:\n            # returning the maximized list\n            return (list2, list1)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the maximum element from each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    # Return the tuple containing the maximum element from both tuples\n    return (max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup2[0] > test_tup1[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup2[1] > test_tup1[1]:\n            return test_tup2\n        else:\n            return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    if max_tup < test_tup2:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # first, check if the first tuple is smaller than the second tuple\n    if test_tup1 < test_tup2:\n        # if so, swap the two tuples\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    # then, compare the elements of the two tuples\n    max_element = 0\n    for elem in test_tup1:\n        if elem > max_element:\n            max_element = elem\n    for elem in test_tup2:\n        if elem > max_element:\n            max_element = elem\n    return max_element"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num1 = max(test_tup1[0], test_tup1[1])\n    max_num2 = max(test_tup2[0], test_tup2[1])\n\n    if max_num1 > max_num2:\n        return test_tup1\n    elif max_num1 == max_num2:\n        return (max_num1, max_num2)\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the maximum element from each tuple\n    max_elem1 = max(test_tup1)\n    max_elem2 = max(test_tup2)\n    \n    # Maximize the elements by comparing their indices\n    if max_elem1 > max_elem2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    count = 0\n    for prime in primes:\n        count += 1\n        if count == n:\n            return prime\n\nn = 100\nprime = newman_prime(n)\nprint(\"The\", n, \"th newman-shanks-williams prime number is:\", prime)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    prime_num = 2\n    count = 0\n\n    # Loop until n prime numbers are found\n    while count < n:\n        # Check if current prime number is prime\n        is_prime = True\n        for i in range(2, int(prime_num**0.5)+1):\n            if prime_num % i == 0:\n                is_prime = False\n                break\n        # If prime, increment count and move on to next number\n        if is_prime:\n            count += 1\n            prime_num += 1\n        # If not prime, increment current prime number and move on to next number\n        else:\n            prime_num += 1\n\n    # Return the nth prime number\n    return prime_num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize variables to keep track of the count and the value of the next prime number\n    count = 0\n    next_prime = 1\n\n    # Loop until we have found n primes\n    while count < n: \n        # Check if the next prime number is prime\n        is_prime = True\n        for i in range(2, next_prime): \n            if next_prime % i == 0: \n                is_prime = False\n                break\n        if is_prime: \n            # If it is prime, print it and increment the count\n            print(next_prime)\n            count += 1\n            # Update the value of the next prime number\n            next_prime += 1\n        else: \n            # If it is not prime, increment the value of the next prime number\n            next_prime += 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    primes = [2]\n    current_prime = 3\n    count = 0\n\n    # Generate primes until we reach n\n    while count < n:\n        # Check if current_prime is prime\n        is_prime = True\n        for i in range(2, int(current_prime**0.5)+1):\n            if current_prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(current_prime)\n            count += 1\n        # Increment current_prime\n        current_prime += 2\n\n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        i = 5\n        while i**2 <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n\ndef is_prime(num):\n    \"\"\"\n    Write a function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False \n        return True \n\n    def find_nth_prime(n): \n        i = 1 \n        while i <= n: \n            if is_prime(i): \n                i += 1 \n            else: \n                i += 2 \n        return i - 2 \n\n    return find_nth_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize the first newman prime\n    prev_prime = 1\n    \n    # check if the input is valid\n    if n < 1:\n        return \"Invalid input\"\n    \n    # iterate through the sequence of newman primes\n    for i in range(2, n+1):\n        # check if the number is a newman prime\n        if (is_newman_prime(i)):\n            # if it is, check if it is greater than the current prime\n            if (i > prev_prime):\n                # if it is, update the current prime\n                prev_prime = i\n                # if the current prime meets the nth newman prime condition, return it\n                if i == 1:\n                    return 1\n                elif i == 2:\n                    return 17\n                elif i == 3:\n                    return 41\n                elif i == 4:\n                    return 73\n                elif i == 5:\n                    return 127\n                elif i == 6:\n                    return 223\n                elif i == 7:\n                    return 351\n                elif i == 8:\n                    return 511\n                elif i == 9:\n                    return 729\n                elif i == 10:\n                    return 1031\n                elif i == 11:\n                    return 1407\n                elif i == 12:\n                    return 1861\n                elif i == 13:\n                    return 2423\n                elif i == 14:\n                    return 3077\n                elif i == 15:\n                    return 3851\n                elif i == 16:\n                    return 4769\n                elif i == 17:\n                    return 5867\n                elif i == 18:\n                    return 7191\n                elif i == 19:\n                    return 8779\n                elif i == 20:\n                    return 10671\n                elif i == 21:\n                    return 12917\n                elif i == 22:\n                    return 15561\n                elif i == 23:\n                    return 18651\n                elif i == 24:\n                    return 22251\n                elif i == 25:\n                    return 26427\n                elif i == 26:\n                    return 31241\n                elif i == 27:\n                    return 36771\n                elif i == 28:\n                    return 43101\n                elif i == 29:\n                    return 50321\n                elif i == 30:\n                    return 58541\n                elif i == 31:\n                    return 67887\n                elif i == 32:\n                    return 78491\n                elif i == 33:\n                    return 90411\n                elif i == 34:\n                    return 103711\n                elif i == 35:\n                    return 118563\n                elif i == 36:\n                    return 135041\n                elif i == 37:\n                    return 153231\n                elif i == 38:\n                    return 173231\n                elif i == 39:\n                    return 195151\n                elif i == 40:\n                    return 219111\n                elif i == 41:\n                    return 245231\n                elif i == 42:\n                    return 273641\n                elif i == 43:\n                    return 304481\n                elif i == 44:\n                    return 337891\n                elif i == 45:\n                    return 374001\n                elif i == 46:\n                    return 412951\n                elif i == 47:\n                    return 454901\n                elif i == 48:\n                    return 499991\n                elif i == 49:\n                    return 548371\n                elif i == 50:\n                    return 599201\n                elif i == 51:\n                    return 652641\n                elif i == 52:\n                    return 708861\n                elif i == 53:\n                    return 768041\n                elif i == 54:"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def sieve_of_eratosthenes(n):\n        '''\n        Returns a list of primes up to n using the Sieve of Eratosthenes algorithm.\n        '''\n        primes = [True] * (n + 1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                for j in range(i * i, n + 1, i):\n                    primes[j] = False\n        return [i for i in range(n + 1) if primes[i]]\n\n    def find_nth_newman_prime(n):\n        '''\n        Returns the nth newman\u2013shanks\u2013williams prime number using the Sieve of Eratosthenes algorithm.\n        '''\n        primes = sieve_of_eratosthenes(n)\n        return primes[n - 1]\n\n    return find_nth_newman_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 3\n    prime = 1\n    count = 0\n    \n    while count < n:\n        if is_prime(i):\n            prime = i\n            count += 1\n            \n        i += 2\n        \n    return prime\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return None\n    # perform element-wise division\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # loop through the elements of each tuple and perform division operation element-wise\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same length.\")\n        return\n\n    # Divide the elements element-wise and store in a new tuple\n    result_tup = tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples must be equal.\")\n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = (test_tup1[0] // test_tup2[0], test_tup1[1] // test_tup2[1])\n    # Perform the element-wise division across the result tuple\n    for i in range(len(result_tup)):\n        result_tup[i] = test_tup1[i] // test_tup2[i]\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: The divisor cannot be zero.\")\n            return None\n        try:\n            result = test_tup1[i] / test_tup2[i]\n            result_tup += (result,)\n        except:\n            print(\"Error: An error occurred while performing the division.\")\n            return None\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples must have the same length.\")\n        return\n    \n    # Perform element-wise division of the two tuples\n    result_tup = [a / b for a, b in zip(test_tup1, test_tup2)]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]/test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same number of elements.\")\n    \n    # Perform element-wise division operation\n    result_tup = tuple(a/b for a,b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return None\n\n    # Perform element-wise division\n    division_result = [num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)]\n\n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n        return\n    \n    # Perform element-wise division of the two tuples\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if the length of the list is at least L\n    if len(list1) < L:\n        raise ValueError(\"The length of the list is less than L\")\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # first part of the list\n    first_part = list1[:L]\n    \n    # second part of the list\n    second_part = list1[L:]\n    \n    # return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is an integer\n    if not isinstance(L, int):\n        raise TypeError(\"L must be an integer\")\n    \n    # check if L is within the range of the list\n    if L > len(list1):\n        raise ValueError(\"L cannot be greater than the length of the list\")\n    \n    # create the two parts of the list\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # initialize the first part of the list\n    part1 = []\n    # initialize the second part of the list\n    part2 = []\n    # iterate over the list\n    for i in range(len(list1)):\n        # if the length of the first part is equal to L, add the current element to the second part\n        if len(part1) == L:\n            part2.append(list1[i])\n        # otherwise, add the current element to the first part\n        else:\n            part1.append(list1[i])\n    # return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Ensure the length of the list is at least L\n    if len(list1) < L:\n        raise ValueError(\"The length of the list must be at least L.\")\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        mid = L\n    else:\n        mid = L - 1\n\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if L <= 0 or not isinstance(L, int):\n        return None\n    \n    # Find the length of the first part of the list\n    first_part_length = len(list1) - L\n    \n    # Create the two parts of the list\n    part1 = list1[:first_part_length]\n    part2 = list1[first_part_length:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create an empty list to store the first part\n    part1 = []\n\n    # loop through the list and add each element to the first part until the length of the first part is equal to L\n    for i in range(L):\n        part1.append(list1[i])\n\n    # create an empty list to store the second part\n    part2 = []\n\n    # loop through the list and add each element to the second part until the length of the second part is equal to the difference between the original length of the list and L\n    for i in range(len(list1) - L):\n        part2.append(list1[i + L])\n\n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # convert hours to years\n    dog_years = h_age / 7\n    \n    # convert years to months\n    dog_months = dog_years * 12\n    \n    # return the number of months the dog has been living\n    return int(dog_months)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dogs_age = 7 + 3 * (h_age - 20)\n    return dogs_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Converting height in inches to centimeters\n    cm_height = h_age * 2.54\n    \n    # Calculating dog's years based on height\n    dog_years = cm_height / 10\n    \n    # Returning the dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert height in inches to centimeters\n    h_cm = h_age * 2.54\n    # Calculate dog's age in years\n    age_years = h_cm / 70\n    # Return the dog's age in years\n    return age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age to dog years\n    dog_years = 7 * h_age\n    # Return the calculated dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = 7 * h_age\n    return dog_age_in_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Use a for loop to split the list into n-sized chunks\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Check if n is a positive integer\n    if step <= 0:\n        raise ValueError(\"The step must be a positive integer.\")\n    # Split the list into chunks of size n\n    S = [S[i:i+step] for i in range(0, len(S), step)]\n    # Return the resulting list of lists\n    return S"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize empty list to store the resulting lists\n    result = []\n    # loop through the input list\n    for i in range(0, len(S), step):\n        # create a new list that contains only the i-th to (i+1)-th elements of the input list\n        result.append(S[i:i+step])\n    # return the resulting list of lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Iterate over each element in the input list\n    for i in range(0, len(S), step):\n        # Slice the input list to get a sublist containing only the nth element\n        sublist = S[i:i+step]\n        # Add the sublist to the result list\n        result.append(sublist)\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to store the resulting lists\n    result = []\n    # loop through the list and split it for every nth element\n    for i in range(0, len(S), step):\n        # create a new list with the current element and the remaining elements from the original list\n        result.append(S[i:i+step])\n    # return the list of resulting lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize empty list to store resulting lists\n    result = []\n    # loop through each element in the input list\n    for i in range(0, len(S), step):\n        # append a slice of the input list starting from the current index up to the end\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError(\"step must be a positive integer\")\n    \n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(S, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check if the step is a positive integer\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError(\"Step must be a positive integer\")\n\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Iterate over the input list and split it for every nth element\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = (6 * l**2) / (5)\n    return surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Cube's surface area is 6 * (l^2)\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate lateral surface area of cube\n    lateral_surface_area = 6 * l * l\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l ** 2  # formula to find lateral surface area of cube\n    return area\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n\n    sum_squares = 0\n    current_num = 1\n    count = 0\n\n    while count < n:\n        if current_num % 2 == 1:\n            sum_squares += current_num ** 2\n            count += 1\n        current_num += 1\n\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The value of n should be non-negative.\")\n    if n == 0:\n        return 0\n    else:\n        return sum(i**2 for i in range(1, n+1, 2))"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a positive integer.\")\n    if n % 2 == 0:\n        raise ValueError(\"n must be an odd integer.\")\n\n    # initialize variables\n    sum_of_squares = 0\n    counter = 1\n    current_number = 1\n\n    # loop through the odd numbers up to n\n    while counter <= n:\n        sum_of_squares += current_number**2  # add the square of the current number to the sum\n        current_number += 2  # increment the current number by 2\n        counter += 1  # increment the counter\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum_of_squares = 0\n    count = 0\n    num = 1\n\n    while count < n:\n        sum_of_squares += num ** 2\n        count += 1\n        num += 2\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum_of_squares = 0\n    i = 1\n    \n    while i <= n:\n        if i % 2 == 1:\n            sum_of_squares += i**2\n        i += 1\n        \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(n, 0, -1):  \n        sum += i * i  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # Initialize sum variable to 0\n    total = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd natural number to the sum variable\n        total += i ** 2\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first two stars\n    first_star = \"*\"\n    second_star = \" \"\n\n    # loop through the numbers from 1 to n\n    for i in range(1, n + 1): \n        # multiply the number by 2 and add 1 to get the next star\n        next_star = (2 * i) + 1\n\n        # print the current and next star\n        print(first_star * i + second_star * (next_star - 2 * i))\n\n        # update the values of the stars\n        first_star = second_star\n        second_star = \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return 'Please enter a positive integer greater than or equal to 1.'\n    elif n == 1:\n        return '1'\n    else:\n        star_num = 1\n        for i in range(2, n+1):\n            star_num = 2*i - 1\n        return str(star_num)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # first line of the first row\n    row = \"\"\n    # loop to create the first row\n    for i in range(1, n+1):\n        row += str(i) + \" \"\n    print(row)\n    \n    # creating the remaining rows\n    for i in range(n-1):\n        # loop to create the first part of each row\n        part1 = \"\"\n        for j in range(1, n-i):\n            part1 += \" \"\n        # loop to create the second part of each row\n        part2 = \"\"\n        for j in range(1, 2*i+1):\n            part2 += \"*\"\n        # adding the row to the output\n        print(part1 + part2 + part1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize variables\n    prev_star = 0\n    star_num = 1\n\n    # calculate the nth star number\n    for i in range(n):\n        # update the star number\n        star_num = prev_star + star_num\n        # update the previous star number\n        prev_star = star_num - 1\n\n    # return the nth star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th star number.\n    \"\"\"\n    # initialize a string to store the stars\n    stars = \"*\"\n    # use string multiplication to add n-1 stars to the string\n    for i in range(1, n):\n        stars += \"*\" * (n - i)\n    # print the final string\n    print(stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the result variable with 0\n    result = 0\n    \n    # Loop from 1 to n\n    for i in range(1, n+1):\n        # Calculate the value of the nth star number\n        value = (i * (i+1)) // 2\n        \n        # Add the value to the result variable\n        result += value\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    num = n + 1\n    result = \"\"\n    while num > 0:\n        result += \"*\"\n        num -= 1\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the star number to 1\n    star_num = 1\n    \n    # loop n-1 times to add stars to the number\n    for i in range(n-1): \n        # add the number of stars to the current number\n        star_num += (i+1)\n    \n    # return the final star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    # Initialize variables\n    count = 1\n    num = 1\n\n    # Calculate and print the nth star number\n    while count <= n:\n        print('*' * num)\n        num += 1\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1): \n        print('*' * i)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower()\n    if len(k) == 1:\n        return ord(k)\n    else:\n        raise ValueError('Input string must be one character long')"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    if k in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return ord(k)\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val\n"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is str:\n        return ord(k)\n    else:\n        return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            sum_even_index += 1\n    return sum_even, sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0  \n    for i in range(len(arr)):  \n        if i % 2 == 0:  \n            if arr[i] % 2 == 0:  \n                sum += arr[i]  \n    return sum  "
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            even_index += 1\n\n    return sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            even_count += 1\n            if even_count == 2:\n                break\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count_even = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n                count_even += 1\n\n    if count_even > 0:\n        return sum_even\n    else:\n        return None"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index_sum += arr[i]\n    return even_sum + even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    count = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            count += 1\n            sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    sum = 0\n\n    for i in range(2, 2*n, 2):\n        sum += i ** 5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    # initialize the sum variable to 0\n    power_sum = 0\n    \n    # loop through the first n even numbers\n    for i in range(2, n+1, 2):\n        # add the i raised to the fifth power to the power_sum\n        power_sum += i**5\n        \n    # return the power_sum\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_natural_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    sum_of_even_power = 0\n    \n    for i in even_natural_numbers[:n]:\n        sum_of_even_power += i**5\n    \n    return sum_of_even_power\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        if len(i) == 2:\n            result.append(i[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple_item[1] for tuple_item in test_list[::-1]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        rear = tup[1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # initialize an empty list to hold the rear elements\n    rear_elements = []\n\n    # iterate over the tuples in the list\n    for tuple in test_list:\n        # append the rear element of the tuple to the rear_elements list\n        rear_elements.append(tuple[1])\n\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # create an empty list to store the rear elements\n    rear_elements = []\n    # iterate through the list of tuples\n    for tuple_obj in test_list:\n        # extract the rear element from the tuple and append it to the rear_elements list\n        rear_elements.append(tuple_obj[-1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding elements from the second tuple\n        result_list.append(test_tup1[i] - test_tup2[i])\n    # Return the result list\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # Initialize a new tuple with the same length as the input tuples\n    result_tup = []\n    \n    # Loop through the tuples and subtract the corresponding elements from each other\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    \n    # Create a new tuple with the subtraction of the elements\n    new_tup = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    \n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Loop through both tuples and compare their elements at the same index\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the first tuple and the second tuple with the same index\n        test_tup1[i] -= test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize an empty list to store the result\n    result_lst = []\n    # Loop through the tuples\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the first tuple from the elements of the second tuple with the same index\n        result_lst.append(test_tup1[i] - test_tup2[i])\n    # Return the result list\n    return result_lst"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    # create a new tuple with the subtraction of the elements\n    result_tup = tuple(abs(test_tup1[i] - test_tup2[i]) for i in range(len(test_tup1)))\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    sum_even = 0\n    numerator = 1\n    denominator = 1\n\n    # Loop through all even indices\n    for i in range(2, n+1, 2):\n        # Calculate the numerator and denominator for the i-th even index binomial coefficient\n        numerator *= i\n        denominator *= n - i\n\n        # Add the even index binomial coefficient to the sum\n        sum_even += numerator / denominator\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_sum = 0\n    # calculate the first even binomial coefficient\n    even_binomial_sum += n\n    # calculate the even binomial coefficients starting from the second term\n    for i in range(2, n+1, 2):\n        even_binomial_sum += math.comb(n, i)\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_of_coeffs = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            if i % 2 == 0 and j % 2 == 0:\n                sum_of_coeffs += math.comb(n, j)\n    return sum_of_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize variables\n    sum_even = 0\n    index = 0\n\n    # iterate through the values of index from 0 to n\n    for i in range(n + 1):\n\n        # calculate the binomial coefficient for the given index\n        coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n - i))\n\n        # if the index is even, add the coefficient to the sum\n        if index % 2 == 0:\n            sum_even += coeff\n\n        # increment the index by 1\n        index += 1\n\n    # return the sum of even binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Calculate the sum of even index binomial coefficients using the formula:\n    # C(n, 2*i) = C(n, i) * (n-i+1) / i\n    # where i is an integer from 0 to n\n    sum_even_coeffs = 0\n    for i in range(n):\n        sum_even_coeffs += math.comb(n, 2*i)\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n): \n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(2, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        sum_even_coeffs += binomial_coeff\n    \n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum_even = 0\n        for i in range(1, n+1):\n            for j in range(0, i, 2):\n                sum_even += math.comb(i, j)\n        return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        numerator = 1\n        denominator = 1\n        for j in range(i//2+1):\n            numerator *= j\n            denominator *= (n-j)\n        if i % 2 == 0:\n            sum += numerator // denominator\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize sum to zero\n    sum = 0\n\n    # Iterate through all pairs of indices\n    for i in range(0, n+1):\n        for j in range(i+1, n+1):\n            # Check if both indices are even\n            if i % 2 == 0 and j % 2 == 0:\n                # Compute the binomial coefficient and add it to the sum\n                sum += math.comb(n, i) * math.comb(n, j)\n\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Loop through the indices from 0 to n-1\n    for i in range(n):\n        # Compute the i-th even binomial coefficient using math.comb() function\n        even_coeff = math.comb(n, i)\n        \n        # Check if the coefficient is even\n        if even_coeff % 2 == 0:\n            # Add the even coefficient to the sum\n            sum += even_coeff\n    \n    # Return the sum of even binomial coefficients\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume using the formula V = 1/3 * pi * r^2 * h\n    V = 1/3 * 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14 * r**2 # Formula for area of a cylinder\n    volume = area * h # Formula for volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * pi * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    \"\"\"\n    # calculate the volume of the cylinder\n    volume = (1/3) * (3.14159 * r ** 2 * h)\n    \n    # return the volume\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2*3.14159*r*h\n    volume = area*h/3.0\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (1/3) * (3.14 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * pi * (r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Compute the volume of a cylinder with the given radius and height.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the volume of the cylinder\n\n    \"\"\"\n    return 3.14 * r**2 * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k:v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if i == 0:\n            break\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] in test_tup[:i]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n            if count == 1:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    num = 1\n    for i in range(2, n+1):\n        num += (i * (i+1))\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the number of rows and columns of a square grid\n    rows = int((n ** 0.5) + 1)\n    cols = int(rows * 0.5)\n\n    # Calculate the starting position for each row and column\n    start = 1\n    pos = start\n    row = 1\n    col = 1\n\n    # Check if the number is a decagonal number\n    while col <= cols and row <= rows:\n        if pos == n:\n            return True\n        pos += 1\n        col += 1\n        row += 1\n\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal = 0\n    n_rows = 1\n    n_cols = 1\n\n    # Calculate the decagonal number\n    while n_rows <= n:\n        while n_cols <= n:\n            decagonal += n_rows + n_cols\n            n_rows += 1\n            n_cols += 1\n\n        n_rows -= 1\n        n_cols -= 1\n\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return ((2*n**2)+1)//2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n < 1:\n        return False\n    \n    # Helper function to generate decagonal numbers\n    def generate_decagonal(n):\n        dec_list = []\n        for i in range(1, n+1):\n            dec_list.append(i*i)\n        return dec_list\n    \n    # Get the list of decagonal numbers up to n\n    dec_list = generate_decagonal(n)\n    \n    # Check if the nth decagonal number is in the list\n    if n in dec_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the sum variable\n    sum = 1\n    \n    # Loop from 1 to n\n    for i in range(1, n+1):\n        \n        # Check if i is a decagonal number\n        if i == 1 or i == n or i % 2 == 0:\n            continue\n        else:\n            sum += i\n            \n    # Return the sum\n    return sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_num = 1\n    num_of_digits = 0\n    \n    # Count the number of digits in n\n    while n > 0:\n        n //= 10\n        num_of_digits += 1\n    \n    # Initialize the decagonal sequence\n    decagonal_seq = [1]\n    \n    # Calculate the decagonal sequence using formula\n    for i in range(1, num_of_digits+1):\n        decagonal_seq.append(decagonal_seq[i-1] * 2 * (2*i-1))\n        \n    # Return the nth decagonal number\n    return decagonal_seq[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_num = 1\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        print(\"Please enter a valid integer.\")\n        return None\n    # Check if the input is greater than 0\n    elif n <= 0:\n        print(\"Please enter a positive integer.\")\n        return None\n    # Calculate the nth decagonal number\n    for i in range(1, n+1):\n        decagonal_num += i\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes a positive integer n and returns True if the number is a decagonal number,\n    False otherwise. A decagonal number is defined as the sum of the squares of its three digits.\n    '''\n    if n < 10:\n        return False\n    else:\n        # convert n to a string and split it into three parts\n        digits = [int(x) for x in str(n)]\n        # compute the sum of the squares of the three digits\n        sum_of_squares = sum([x*x for x in digits])\n        # check if the sum is equal to the original number\n        if n == sum_of_squares:\n            return True\n        else:\n            return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num = 4*i*(i+1)\n        print(decagonal_num)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    # Loop through the array until the item is found or the end of the array is reached\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    # If the item is not found, return False and -1 as the index position\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    for i, x in enumerate(dlist):\n        if x == item:\n            found = True\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates\n    test_set = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Using a set to remove duplicates from the list and check if the length of the set is equal to the original length of the list\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove any duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n    # iterate over each element in the list\n    for element in test_list:\n        # check if the element is already present in the set\n        if element in unique_set:\n            # if the element is already present in the set, return False\n            return False\n        # if the element is not present in the set, add it to the set\n        else:\n            unique_set.add(element)\n    # if we make it through the loop without finding any duplicates, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    # create an empty list to store the result\n    result = []\n    # loop through the lists and subtract the corresponding elements\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise and returns the result.\n    '''\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [num1 - num2 for num1, num2 in zip(nums1,nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Get the frequency of each digit in the integer\n    freq = [n // (10 ** i) % 10 for i in range(len(str(n)))]\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    for digit in str(n):\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    \n    for digit in count:\n        if count[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # split the integer into digits\n    digits = [int(d) for d in str(n)]\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        freq = digits.count(digit)\n        if freq > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # create a dictionary to store the frequency of digits\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize frequency array with zeros\n    \n    # count frequency of each digit in the integer\n    for i in str(n):\n        freq[int(i)] += 1\n    \n    # check if frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    digit_freq = {}\n\n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for d in str(n):\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n\n    for d in freq:\n        if freq[d] > d:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    # initialize dictionary to store frequency of digits\n    freq = {}\n    \n    # count frequency of digits in n\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # check if frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # all digits have frequency less than or equal to the digit itself\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # Initialize a list of 10 zeros\n    \n    # Loop through each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # Loop through the list of frequencies and check if each digit is less than or equal to its frequency\n    for i in range(10):\n        if freq[i] > freq[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]  # Convert the integer to a list of digits\n    freq = [0]*10  # Initialize a frequency list with 10 zeros\n\n    # Count the frequency of each digit in the list\n    for d in digits:\n        freq[d] += 1\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # create an empty list to store the result\n    result = []\n    # iterate over each item in the list\n    for item in list:\n        # if the item is equal to the given element, add it to the result list\n        if item == element:\n            result.append(item)\n    # return the result list\n    return result"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    else:\n        return check_element(list[1:], element) and list[0] == element"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if len(list) == 0:\n        return True\n\n    elif list[0] == element:\n        return check_element(list[1:],element)\n\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All elements in the list are equal to the given element.\")\n    else:\n        print(\"One or more elements in the list are not equal to the given element.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab(?:b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(ab){2,3}a')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b){2,3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a\\w*[b]{2,3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(ab){2,3}a')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[bB]{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'\\ba\\w{2,3}\\b')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    max_sum_repeated = float('-inf')\n\n    # Iterate through the array\n    for i in range(n):\n        # Update the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Check if the current sum is greater than the maximum sum repeated so far\n        if current_sum > max_sum_repeated:\n            max_sum_repeated = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    # Calculate and return the result\n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if k == 1:\n        return max(a)\n\n    result = max_sub_array_sum_repeated(a, n, k-1)\n\n    # Since we are repeating the array, the max sum can be obtained by taking the maximum of the following three cases:\n    # - the current element and the result obtained by taking the maximum sum of the current element and the rest of the array\n    # - the current element and the result obtained by taking the maximum sum of the rest of the array\n    # - the current element and the result obtained by taking the maximum sum of the current element and the result obtained by taking the maximum sum of the rest of the array\n    result = max(result, a[n-1] + max_sub_array_sum_repeated(a[1:n], n-1, k-1))\n    result = max(result, a[0] + max_sub_array_sum_repeated(a[1:], n-1, k-1))\n    result = max(result, a[0] + a[n-1] + max_sub_array_sum_repeated(a[2:n], n-2, k-1))\n\n    return result"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Store the sum of the first k elements\n    max_sum = sum(a[:k])\n    # Initialize the sum of the last k elements\n    current_sum = max_sum\n    \n    # Loop through the array and update the current sum\n    for i in range(k, n):\n        current_sum += a[i] - a[i-k]\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    This function takes an array a, its size n and a number k.\n    It returns the maximum sum of a contiguous array in the modified array formed by repeating the given array k times.\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    repeated_array = a * k\n\n    # Find the maximum sum of the repeated array\n    for i in range(n):\n        temp_sum = 0\n        for j in range(k):\n            temp_sum += a[i]\n        max_sum = max(max_sum, temp_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # find the length of the array\n    length = len(a)\n\n    # initialize the maximum sum with the first element\n    max_sum = a[0]\n\n    # initialize the current sum with the first element\n    current_sum = a[0]\n\n    # loop through the array and calculate the current sum\n    for i in range(1, length):\n        current_sum += a[i]\n\n        # check if the current sum exceeds the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # check if the current sum is equal to the maximum sum and k is reached\n        if current_sum == max_sum and i >= k:\n            return max_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize maximum subarray sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array k times\n    for i in range(k):\n        # Add the element to the current sum\n        curr_sum += a[i]\n\n        # If the current sum is greater than the maximum subarray sum, update the maximum subarray sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # Remove the last element from the current sum\n        curr_sum -= a[i - k]\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the largest sum and the current sum as 0\n    max_sum = 0\n    current_sum = 0\n    # Loop through the array\n    for i in range(n):\n        # If the current element is less than or equal to k, add it to the current sum\n        if a[i] <= k:\n            current_sum += a[i]\n        else:\n            # If the current element is greater than k, subtract the first element from the current sum and add the element at the next index\n            current_sum -= a[i - k]\n            current_sum += a[i]\n        # Update the maximum sum if the current sum is greater than the current maximum sum\n        max_sum = max(max_sum, current_sum)\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    # Iterate through the array\n    for i in range(n):\n        # Add the current element to the current sum\n        curr_sum += a[i]\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        # If the current sum is less than 0, reset the current sum to 0\n        elif curr_sum < 0:\n            curr_sum = 0\n        # If the current sum is equal to 0, reset the current sum to 0\n        else:\n            curr_sum = 0\n    # Find the largest sum of a contiguous array in the modified array\n    for i in range(k-1, n):\n        curr_sum = 0\n        # Iterate through the modified array\n        for j in range(i-k+1, i+1):\n            # Add the current element to the current sum\n            curr_sum += a[j]\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize max_sum to 0 and max_index to -1\n    max_sum = 0\n    max_index = -1\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the array n times\n    for i in range(n):\n        # Add the current element to the sum\n        sum += a[i]\n        # If the sum exceeds the max_sum or the sum is greater than the max_sum and the index is greater than the current index, update max_sum and max_index\n        if sum > max_sum or (sum == max_sum and i > max_index):\n            max_sum = sum\n            max_index = i\n    # Initialize max_sum_repeated to the first element of the modified array\n    max_sum_repeated = a[0]\n    # Loop through the array k times\n    for i in range(1, k):\n        # Add the current element to the modified array\n        max_sum_repeated += a[i]\n        # If the sum exceeds the max_sum_repeated, update max_sum_repeated\n        if max_sum_repeated > max_sum:\n            max_sum_repeated = max_sum\n    # Return the max_sum_repeated\n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_array = [0]*k\n    \n    # Loop through the array\n    for i in range(n):\n        # Calculate the current sum\n        current_sum = current_sum + a[i]\n        \n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n        # Calculate the sum of the first k elements of the array\n        repeated_array[i%k] = current_sum\n        \n    # Return the maximum sum of the repeated array\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_squares = 0\n    for i in range(2, n+1, 2):\n        even_squares += i*i\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n+1, 2*n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_of_squares = 0\n    current_num = 2\n    square_of_num = 0\n\n    # Calculate the sum of squares of first n even natural numbers\n    while current_num <= n:\n        square_of_num = current_num ** 2\n        sum_of_squares += square_of_num\n        current_num += 2\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total_sum = 0\n    num = 2\n    while num <= n:\n        total_sum += num ** 2\n        num += 2\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n\n    while i < n:\n        sum += i * i\n        i += 2\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for item in list1:\n        if len(item) > max(max_lengths):\n            max_lengths = [len(item)]\n        elif len(item) == max(max_lengths):\n            max_lengths.append(len(item))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > len(max_lengths) or len(lst) == len(max_lengths) and lst[0] < max_lengths[0]:\n            max_lengths = lst\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(max(len(sublist), len(max_lengths) and max(max_lengths))))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list of maximum length in the list.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        max_length = max(len(lst), key=len)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for item in list1:\n        if len(item) > len(max_list):\n            max_list = item\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for i in range(len(list1)):\n        lengths = [len(sublist) for sublist in list1[i]]\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "The time complexity of this algorithm is O(nk), where n and k are the number of posts and colors respectively. The space complexity is also O(nk), as we are storing the `dp` array."
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a dictionary to store the number of ways of painting the fence for each number of colors\n    ways = {1: 1}\n    # Loop through all possible values of k\n    for i in range(2, k+1):\n        # Initialize a list to store the number of ways of painting the fence for each possible value of n\n        possible_ways = []\n        # Loop through all possible values of n\n        for j in range(i, n+1):\n            # Calculate the number of ways of painting the fence for each possible value of n and k\n            num_ways = 0\n            # Loop through all possible pairs of colors for adjacent posts\n            for p in range(j):\n                # If both adjacent posts have the same color, increment the count of ways for the current pair\n                if p < j-1 and fence[p] == fence[p+1]:\n                    num_ways += ways[j-p]\n            # Add the number of ways of painting the fence for each possible value of n to the list of possible ways\n            possible_ways.append(num_ways)\n        # Update the dictionary with the number of ways of painting the fence for each value of k\n        ways[i] = sum(possible_ways)\n    # Return the number of ways of painting the fence for n, k\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # initialize the count of ways to 0\n    count = 0\n\n    # loop through all possible arrangements of k colors\n    for i in range(2**k):\n\n        # convert the binary number to a list of colors\n        colors = [0]*k\n        for j in range(k):\n            if i & (1<<j):\n                colors[j] = 1\n\n        # check if the number of adjacent colors is at most 2\n        if colors.count(colors[1:]) <= 2:\n            count += 1\n\n    # return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def backtrack(start, end, color, count, ways):\n        if start == end and color in visited:\n            if (end-start+1) <= k and visited[color] <= 1:\n                ways[count] += 1\n            return\n\n        for i in range(start, end+1):\n            visited[color] += 1\n            backtrack(i+1, end, color, count+1, ways)\n            visited[color] -= 1\n\n    if k > n:\n        return 0\n\n    visited = [0] * (k+1)\n    ways = [0] * (n+1)\n    ways[0] = 1\n\n    backtrack(0, n-1, 0, 0, ways)\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Check if the number of colors is greater than the number of posts\n    if k > n:\n        return 0\n    \n    # Initialize a boolean array to keep track of colors assigned to each post\n    color_count = [False] * k\n    \n    # Initialize the count variable to 1\n    count = 1\n    \n    # Loop through each post and check if there are at most 2 adjacent posts with the same color\n    for i in range(n):\n        # Check if the current post has already been assigned a color\n        if color_count[i]:\n            # If it has, then there are no more ways to assign it to a different color\n            count = 0\n            break\n        \n        # Mark the current post as assigned to its current color\n        color_count[i] = True\n        \n        # Check if there are at most 2 adjacent posts with the same color\n        for j in range(i+1, min(n, i+3)):\n            # If there are, then there is a different way to assign the current post to a different color\n            if color_count[j]:\n                # Mark the color assigned to the adjacent post as not used\n                color_count[j] = False\n                # Increment the count and break out of the loop\n                count += 1\n                break\n        \n        # Mark the color assigned to the current post as not used\n        color_count[i] = False\n        \n        # If there are still no adjacent posts with the same color, then increment the count\n        count += 1\n        \n        # If the count becomes greater than 2^k, then there are no more ways to assign colors to the fence\n        if count > (2**k)-1:\n            break\n    \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    if k == 1:\n        return n\n    dp = [0] * (k + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, k + 1):\n        dp[i] = dp[i-1] + dp[i]\n    for i in range(k, n + 1):\n        for j in range(k - 1, 0, -1):\n            if i - j >= 0 and dp[j] > dp[j-1]:\n                dp[i] += dp[j]\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            ways[i] += ways[i - 1] * ways[j - 1]\n    \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the count variable\n    count = 0\n    # Generate all possible combinations of colors for the first two posts\n    colors = set()\n    colors.add((0, 0))\n    colors.add((0, 1))\n    colors.add((1, 0))\n    colors.add((1, 1))\n    # Iterate through the remaining posts\n    for i in range(2, n):\n        # Create a new set of possible colors\n        new_colors = set()\n        # Iterate through the current set of colors\n        for color in colors:\n            # For each pair of colors, check if the adjacent two posts have the same color\n            if i >= 4:\n                if color[1] == color[3] and color[2] == color[0]:\n                    new_colors.add((color[0], color[2]))\n                elif color[1] == color[2] and color[0] == color[3]:\n                    new_colors.add((color[1], color[3]))\n            else:\n                new_colors.add(color)\n        # Update the count variable\n        count += len(new_colors)\n        # Update the colors set\n        colors = new_colors\n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a dictionary to store the number of ways of painting the fence\n    ways = {0: 1}\n\n    # Iterate over all the possible values for the fence size\n    for i in range(1, n+1):\n\n        # Initialize the number of ways for this size\n        num_ways = 0\n\n        # Iterate over all the possible values for the number of adjacent posts\n        for j in range(1, min(i, k)+1):\n\n            # Add the number of ways for the current number of adjacent posts and k colors\n            num_ways += ways[i-j] * ways[k-j]\n\n        # Add the number of ways for the current fence size and k colors\n        ways[i] = num_ways\n\n    # Return the number of ways for the fence with n posts and k colors\n    return ways[n]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient and remainder using integer division\n    quotient = n // m\n    remainder = n % m\n    # Calculate the minimum number of digits needed to represent the quotient\n    min_digits = len(str(quotient))\n    # Calculate the minimum number of digits needed to represent the remainder\n    max_digits = len(str(remainder))\n    # Determine if the quotient should be rounded down or up\n    if remainder >= (m // 2):\n        quotient += 1\n    # Determine the final quotient value\n    if remainder < m:\n        quotient -= 1\n    # Determine the final quotient value (rounded down)\n    if remainder >= (m // 2) and remainder < m:\n        quotient += 1\n    # Return the final quotient value\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = int(n/m)\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    # Calculate quotient\n    quotient = n // m\n\n    # Return quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if quotient * m!= n:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Using the formula for the square root of a number, we can find the length of the third side.\n    s = math.sqrt((w ** 2) + (h ** 2))\n    \n    # The third side is equal to the square root of the sum of the squares of the lengths of the other two sides.\n    return math.sqrt(w ** 2 + h ** 2 - s ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the lengths of the two sides of a right angled triangle (w and h) as input and returns the third side of the triangle.\n    '''\n    # Using Heron's formula to calculate the semi-perimeter\n    semi_perimeter = (w + h + math.sqrt(w*w + h*h)) / 2\n    \n    # Using the law of cosines to find the angle between the two sides\n    angle = math.acos((w**2 + h**2 - semi_perimeter**2) / (2*w*h))\n    \n    # Using trigonometry to find the length of the third side\n    third_side = math.sqrt(semi_perimeter**2 - w*math.sin(angle) + h*math.sin(angle)**2)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = math.degrees(math.acos((w**2+h**2-1)/(2*w*h)))\n    return h*math.sin(math.radians(angle))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w**2 + h**2)**0.5\n    return round(c, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    print(\"The third side of the right angled triangle is:\", c)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Using the formula to find the square root\n    third_side = math.sqrt((w**2) + (h**2))\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(w**2 + h**2)\n    return side3"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    third_side = math.sqrt(w**2 + (s/2)**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Find the length of the third side\n    third_side = math.sqrt(w**2 + h**2)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using Heron's formula\n    s = (w**2 + h**2)**0.5\n    return s"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # get the maximum value in the list\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # iterate through the list and find the maximum value\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval[1:]:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for val in listval:\n        if max_num is None:\n            max_num = val\n        elif val > max_num:\n            max_num = val\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to None\n    max_val = None\n    # loop through each value in the list\n    for value in listval:\n        # check if the value is greater than the current maximum value\n        if value > max_val:\n            # update the maximum value\n            max_val = value\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the maximum value to the first element of the list\n    max_val = listval[0]\n\n    # Loop through the rest of the list and compare each element with the max_val\n    for val in listval[1:]:\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, (list, tuple, set)):\n        return None\n\n    if isinstance(listval, list):\n        max_val = listval[0]\n        for val in listval:\n            if val > max_val:\n                max_val = val\n        return max_val\n    elif isinstance(listval, tuple):\n        max_val = listval[0]\n        for val in listval:\n            if val > max_val:\n                max_val = val\n        return max_val\n    elif isinstance(listval, set):\n        max_val = None\n        for val in listval:\n            if val is not None and (max_val is None or val > max_val):\n                max_val = val\n        return max_val\n    else:\n        return None"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise ValueError(\"Input is not a list\")\n    max_val = float('-inf')\n    for val in listval:\n        if isinstance(val, int):\n            max_val = max(max_val, val)\n        elif isinstance(val, float):\n            max_val = max(max_val, val)\n        elif isinstance(val, str):\n            max_val = max(max_val, len(val))\n        else:\n            max_val = max(max_val, type(val).__name__)\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n\n    Args:\n    number: an integer\n\n    Returns:\n    sum_div: an integer representing the sum of all divisors of the input number\n    \"\"\"\n    # Initialize the sum of divisors to zero\n    sum_div = 0\n\n    # Loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number ** 0.5) + 1):\n        # Check if the input number is divisible by the current number\n        if number % i == 0:\n            # If it is, add it to the sum of divisors\n            sum_div += i\n\n    # Return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors_list = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_list.append(i)\n    return sum(divisors_list)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n\n    # sorting the array in ascending order\n    arr = sorted(arr)\n\n    # initializing variables for counting inversions\n    i = 1\n    inv_count = 0\n\n    # traversing the sorted array and counting inversions\n    for j in range(1, len(arr)):\n        if arr[j] < arr[i - 1]:\n            inv_count += i - 1\n            i = j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion count is the number of pairs of elements in the array that are in the wrong order.\n    '''\n    # initialize variables for the inversion count and two lists to store the left and right indices\n    inv_count = 0\n    left = []\n    right = []\n\n    # iterate over the array, adding elements to the left and right lists\n    for num in arr:\n        left.append(num)\n\n    # sort the left list in ascending order\n    left.sort()\n\n    # iterate over the right list, comparing each element to the left list\n    for num in arr:\n        # check if the right element is less than or equal to the left list element\n        if num <= left[-1]:\n            # if it is, add one to the inversion count and append the right element to the left list\n            inv_count += 1\n            left.append(num)\n        else:\n            # otherwise, append the right element to the right list\n            right.append(num)\n\n    # iterate over the left list and subtract the right list element from each element\n    # to find the indices of the original elements in the original array\n    result = []\n    for i, num in enumerate(left):\n        result.append(arr.index(num))\n\n    # add the inversion count to the result\n    result.insert(0, inv_count)\n\n    # return the result\n    return result"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Count inversions in an array using merge sort.\n\n    Parameters:\n    arr -- list of integers\n\n    Returns:\n    int -- the number of inversions in the array\n    \"\"\"\n\n    def merge(left, right):\n        \"\"\"\n        Merge two sorted lists of integers.\n\n        Parameters:\n        left -- list of integers\n        right -- list of integers\n\n        Returns:\n        list -- merged sorted list of integers\n        \"\"\"\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def merge_sort(arr):\n        \"\"\"\n        Sort an array of integers using merge sort.\n\n        Parameters:\n        arr -- list of integers\n\n        Returns:\n        list -- sorted list of integers\n        \"\"\"\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge_sort_inv(arr):\n        \"\"\"\n        Count inversions in an array using merge sort.\n\n        Parameters:\n        arr -- list of integers\n\n        Returns:\n        int -- the number of inversions in the array\n        \"\"\"\n        inv_count = 0\n        sorted_arr = merge_sort(arr)\n        for i in range(1, len(sorted_arr)):\n            for j in range(0, i):\n                if sorted_arr[i] < sorted_arr[j]:\n                    inv_count += (i - j)\n        return inv_count\n\n    inv_count = merge_sort_inv(arr)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n  \n    # Sort the array \n    arr.sort() \n  \n    # Count inversions \n    for i in range(n-1): \n        j = i + 1 \n  \n        while j < n and arr[j] < arr[i]: \n            j += 1 \n  \n            # Update inversion count \n            inv_count += n - j \n  \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Count the inversions using two pointers\n    left, right = 0, n-1\n    inv_count = 0\n    while left < right:\n        if arr[left] > arr[right]:\n            left += 1\n        elif arr[left] < arr[right]:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n            inv_count += right - left + 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Count the number of inversions\n    inv_count = 0\n    n = len(arr)\n    for i in range(n-1):\n        # Sort the i-th subarray\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i - 1)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0 \n    for i in range(1, n): \n        left, right = 0, i-1 \n        while left < right: \n            if arr[left] < arr[right]: \n                count += right - left \n                left += 1 \n            else: \n                right -= 1 \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Divide the array into two halves\n    mid = n // 2\n\n    # Recursively count inversions in each half\n    left_inv_count = get_Inv_Count(arr[:mid])\n    right_inv_count = get_Inv_Count(arr[mid:])\n\n    # Count inversions using merge sort algorithm\n    inv_count = left_inv_count + right_inv_count + merge_sort(arr, 0, n-1)\n\n    return inv_count\n\n\ndef merge_sort(arr, left, right):\n    '''\n    Write a python function to merge sort an array.\n    '''\n    n = right - left + 1\n\n    # Base case: If array has only one element or less, it is already sorted\n    if n <= 1:\n        return 0\n\n    # Divide the array into two halves\n    mid = left + (right // 2)\n\n    # Sort the two halves\n    merge_sort(arr, left, mid)\n    merge_sort(arr, mid+1, right)\n\n    # Merge the sorted halves\n    i = left\n    j = mid + 1\n    k = 0\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            j += 1\n            inv_count += mid - i + 1\n        k += 1\n\n    # Copy the remaining elements of the left half into the array\n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of the right half into the array\n    while j <= right:\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in non-decreasing order\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += (j-i)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n\n    # Iterating through all pairs of elements in the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Check if the current pair of elements are in the correct order\n            if arr[i] > arr[j]:\n                inv_count += len(arr) - j - 1\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if isinstance(item, list):\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    # create an empty list to store the flattened list\n    flattened_list = []\n\n    # loop through each element in the list1\n    for element in list1:\n\n        # if the element is a list, recursively call the function on that list\n        if type(element) == list:\n            flattened_list += flatten_list(element)\n\n        # otherwise, append the element to the flattened list\n        else:\n            flattened_list.append(element)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and returns a flattened version of the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples and calculates the maximum aggregate from it.\n    '''\n    # create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for item in stdata:\n        freq[item[0]] += 1\n    \n    # calculate the maximum aggregate\n    max_agg = 0\n    for freq_item in freq.values():\n        max_agg += freq_item * item\n    \n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    # Create a defaultdict to store the count of each item\n    item_count = defaultdict(int)\n    for item, price in stdata:\n        item_count[item] += 1\n    \n    # Calculate the maximum aggregate value\n    max_agg = 0\n    for item, count in item_count.items():\n        max_agg += price * count\n        \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(float)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and calculates the maximum aggregate using a defaultdict.\n\n    Args:\n    stdata (list): A list of tuples containing the following information:\n    (student_id, course_id, grade)\n\n    Returns:\n    (int): The maximum aggregate from the list of tuples.\n\n    '''\n\n    # Create a defaultdict to store the count of each grade\n    grades = defaultdict(int)\n\n    # Iterate through each tuple in the list\n    for student_id, course_id, grade in stdata:\n\n        # Update the count of the grade in the defaultdict\n        grades[grade] += 1\n\n    # Find the maximum count in the defaultdict\n    max_count = max(grades.values())\n\n    # Find the maximum grade from the defaultdict\n    max_grade = max(grades, key=grades.get)\n\n    # Calculate the maximum aggregate and return it\n    return max_count * max_grade"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n    # Iterate over each tuple in the list of tuples\n    for item in stdata:\n        # Get the customer ID and the item price\n        customer_id = item[0]\n        item_price = item[1]\n        # Calculate the maximum aggregate for the customer\n        max_aggr[customer_id] = max(max_aggr[customer_id], item_price)\n    # Iterate over the keys in the max_aggr dictionary and get the maximum value\n    max_aggr_val = max(max_aggr.values())\n    # Return the maximum value\n    return max_aggr_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each item\n    max_agg_dict = defaultdict(int)\n\n    # Loop through the list of tuples\n    for item in stdata:\n        # Calculate the maximum aggregate\n        max_agg = max(item[1:])\n\n        # Update the maximum aggregate for the item in the defaultdict\n        max_agg_dict[item[0]] = max_agg\n\n    # Return the maximum aggregate from the defaultdict\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)  # dictionary to store the maximum aggregate for each item\n\n    # iterate through the list of tuples\n    for item, price in stdata:\n        # add the price to the maximum aggregate for the item\n        max_agg[item] += price\n\n    # find the maximum aggregate from the dictionary\n    max_agg_list = list(max_agg.items())\n    max_agg_list.sort(key=lambda x: x[1], reverse=True)\n    max_agg_list = [item for item, _ in max_agg_list]\n    max_agg_dict = {item: price for item, price in max_agg_list}\n    max_agg = max_agg_dict.get(max_agg_list[0])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value from it.\n    '''\n    max_agg = 0\n    for t in stdata:\n        agg = sum(t[1:])\n        if agg > max_agg:\n            max_agg = agg\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Convert the input data into a dictionary using defaultdict\n    data = defaultdict(int)\n    for item in stdata:\n        data[item[0]] += item[1]\n\n    # Calculate the maximum aggregate by iterating through the dictionary and keeping track of the maximum value\n    max_agg = 0\n    for val in data.values():\n        if val > max_agg:\n            max_agg = val\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each student\n    max_aggs = defaultdict(int)\n\n    # Loop through each tuple in the list and update the maximum aggregate for each student\n    for student, grade in stdata:\n        max_aggs[student] = max(max_aggs[student], grade)\n\n    # Find the maximum aggregate from the defaultdict and return it as the output\n    return max(max_aggs.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        if i % 2 == 0:\n            binary_seq = bin(i)[2:].zfill(n)\n            if int(binary_seq[:n]) == int(binary_seq[-n:]):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:].zfill(n)\n        first_sum = int(num[:n])\n        last_sum = int(num[n:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    # Initialize the count variable\n    count = 0\n    \n    # Loop through all possible binary sequences\n    for i in range(2**n, 2**(n+1)):\n        # Extract the first n bits and the last n bits\n        first = i & ((1 << n) - 1)\n        last = i >> n\n        \n        # If the sum of the first n bits is same as the sum of the last n bits, increment the count\n        if sum(bin(first)[2:].zfill(n)) == sum(bin(last)[2:].zfill(n)):\n            count += 1\n            \n    # Return the count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2 ** n):\n        binary_str = bin(i)[2:].zfill(n)\n        first_half = binary_str[:n]\n        second_half = binary_str[n:]\n        if sum(int(digit) for digit in first_half) == sum(int(digit) for digit in second_half):\n            count += 1\n    return count\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum_first_n = sum(int(x) for x in str(i))\n        sum_last_n = sum(int(x) for x in str(i)[::-1])\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**(2*n)):\n        first_sum = sum([int(digit) for digit in str(i)])\n        last_sum = sum([int(digit) for digit in str(i-2**n)])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        a = bin(i)[2:].zfill(2*n)\n        b = bin(i+2**(2*n)-1)[2:].zfill(2*n)\n        if sum(int(a[i:i+n]) for i in range(n)) == sum(int(b[i:i+n]) for i in range(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    total_count = 0\n    for i in range(1, 2**n):\n        first_half = bin(i)[2:]\n        last_half = bin(i)[-n:][::-1]\n        if first_half == last_half:\n            total_count += 1\n    return total_count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in seq) == sum(int(bit) for bit in bin(i)[-n:])*2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_half = bin(i)[2:].zfill(n)\n        second_half = bin(i)[-n:].zfill(n)\n        if first_half == second_half:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            new_depth = dict_depth(d[key])\n            if new_depth > max_depth:\n                max_depth = new_depth + 1\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    elif isinstance(d, list):\n        return max(dict_depth(i) for i in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = 1 + dict_depth(d[key])\n        else:\n            current_depth = 0\n        if current_depth > max_depth:\n            max_depth = current_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    \n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value)\n            current_depth += new_depth\n            if new_depth > max_depth:\n                max_depth = new_depth\n        else:\n            current_depth += 1\n    \n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Create a list to store the depth of each dictionary\n    depths = []\n    # Recursively traverse each dictionary and update its depth in the list\n    for key, value in d.items():\n        if isinstance(value, dict):\n            # If the value is a dictionary, recursively call the function with the dictionary\n            depths.append(dict_depth(value) + 1)\n        else:\n            # If the value is not a dictionary, simply add 1 to its depth in the list\n            depths.append(1)\n    # Return the maximum depth in the list\n    return max(depths)"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n        if isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth\n    depth = 0\n    # Recursively iterate over the dictionary to find the depth\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n    return depth + 1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize the result variable\n    result = None\n    # iterate over the number of rotations\n    for i in range(rotations):\n        # initialize the current index\n        curr_index = index\n        # iterate over the number of ranges\n        for j in range(ranges):\n            # find the next index after the current index\n            next_index = (curr_index + j) % len(arr)\n            # if the next index is the index we are looking for, return the element\n            if next_index == index:\n                result = arr[next_index]\n                break\n        # if we have found the element, break out of the inner loop\n        if result is not None:\n            break\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of range pairs, and the number of rotations to apply to the array, and returns the element at the given index after rotating the array.\n\n    The ranges list is a list of tuples, where each tuple contains two integers representing the range of valid indexes in the array. For example, [(0,5), (8,10)] indicates that the array has a valid range from index 0 to 5 (inclusive) and a valid range from index 8 to 10 (inclusive).\n\n    The rotations argument is an integer representing the number of times the array should be rotated.\n\n    The index argument is an integer representing the index of the element in the array to find after rotating it.\n\n    Returns the element at the given index after rotating the array.\n    \"\"\"\n\n    # Initialize the element variable to None\n    element = None\n\n    # Iterate through the range pairs\n    for range_pair in ranges:\n\n        # Get the minimum and maximum index of the range\n        min_index = range_pair[0]\n        max_index = range_pair[1]\n\n        # Check if the index is within the valid range\n        if index >= min_index and index <= max_index:\n\n            # Calculate the new index after rotating the array\n            new_index = (index - min_index + rotations) % (max_index - min_index + 1) + min_index\n\n            # Check if the new index is within the valid range\n            if new_index >= min_index and new_index <= max_index:\n\n                # Set the element variable to the element at the new index\n                element = arr[new_index]\n\n    # Return the element at the given index after rotating the array\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    # Initialize the index of the element to be found\n    element_index = 0\n    \n    # Find the rotation count to reach the index\n    for i in range(len(arr)):\n        if element_index == index:\n            break\n        element_index += rotations[i]\n        \n    # Find the final element after rotations\n    final_element = arr[(element_index + rotations[element_index % len(rotations)]) % len(arr)]\n    \n    # Check if the final element is in the range of the given ranges\n    if final_element in ranges:\n        return final_element\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, and the number of rotations.\n    It then calculates the index of the element that needs to be found after rotations.\n    \"\"\"\n    # find the starting index of the range that contains the index we want to find\n    start_index = 0\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index < ranges[i][1]:\n            start_index = i\n            break\n    \n    # calculate the length of the range that contains the index we want to find\n    length = ranges[start_index][1] - ranges[start_index][0]\n    \n    # calculate the final index of the element that needs to be found after rotations\n    final_index = (index + rotations) % length + ranges[start_index][0]\n    \n    # return the final index\n    return final_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the number of rotations required to get to the given index\n    rotations_required = index\n    for i in range(len(ranges)):\n        if rotations_required >= ranges[i][1]:\n            rotations_required -= ranges[i][1]\n        else:\n            rotations_required = rotations_required - ranges[i][0]\n\n    # Perform the rotations required to get to the given index\n    for i in range(rotations_required):\n        arr = arr[1:] + [arr[0]]\n\n    # Return the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges for each rotation, and the number of rotations.\n    It returns the element at the given index after the specified number of rotations.\n    '''\n    \n    # Sort the array based on the ranges of the rotations\n    sorted_arr = sorted(arr, key=lambda x: ranges[x])\n\n    # Iterate through the sorted array to find the element at the given index\n    for i in range(rotations):\n        sorted_arr = sorted(sorted_arr, key=lambda x: ranges[x])\n        if index < len(sorted_arr):\n            return sorted_arr[index]\n        index -= len(sorted_arr)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # check if the given index is valid or not\n    if index < 0 or index >= len(arr):\n        return -1\n    \n    # initialize variables for tracking current element\n    current_element = arr[index]\n    current_index = index\n    \n    # perform rotations for the given index\n    for i in range(rotations):\n        # find the smallest range that includes the current element\n        smallest_range = -1\n        for j in range(len(ranges)):\n            if arr[index] >= ranges[j][0] and arr[index] <= ranges[j][1]:\n                smallest_range = j\n                break\n        \n        # if there is no range that includes the current element, return -1\n        if smallest_range == -1:\n            return -1\n        \n        # find the element that belongs to the smallest range\n        for j in range(ranges[smallest_range][1] - ranges[smallest_range][0] + 1):\n            if arr[index - j] == current_element:\n                current_index -= j\n                break\n        \n        # if the element is not found in the range, return -1\n        if current_index < index - rotations * (ranges[smallest_range][1] - ranges[smallest_range][0] + 1):\n            return -1\n        \n        # update the current element and index\n        current_element = arr[current_index]\n    \n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in the following parameters:\n        arr: A list of integers.\n        ranges: A list of tuples representing ranges of integers.\n        rotations: An integer representing the number of rotations.\n        index: An integer representing the index of the element to be found.\n\n    This function returns the element at the given index after rotations.\n\n    The function works as follows:\n        - First, we find the index of the first element that falls within the given ranges.\n        - Then, we rotate the list of integers by the given number of rotations.\n        - Finally, we find the index of the element at the given index after the rotations.\n\n    \"\"\"\n    first_index = find_first_index(arr, ranges)\n    arr = rotate_list(arr, rotations)\n    final_index = find_final_index(arr, ranges, index)\n    return arr[final_index]\n\n\ndef find_first_index(arr, ranges):\n    \"\"\"\n    This function takes in the following parameters:\n        arr: A list of integers.\n        ranges: A list of tuples representing ranges of integers.\n\n    This function finds the index of the first element that falls within the given ranges.\n\n    The function works as follows:\n        - We loop through the array, starting from the beginning.\n        - If an element is within the ranges, we return its index.\n        - If we reach the end of the array and haven't found a match, we return -1.\n\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(ranges)):\n            if arr[i] >= ranges[j][0] and arr[i] <= ranges[j][1]:\n                return i\n    return -1\n\n\ndef rotate_list(arr, rotations):\n    \"\"\"\n    This function takes in the following parameters:\n        arr: A list of integers.\n        rotations: An integer representing the number of rotations.\n\n    This function rotates the list of integers by the given number of rotations.\n\n    The function works as follows:\n        - We create a new list that contains all the elements of the original array.\n        - We loop through the original array and append each element to the new list.\n        - We then loop through the new list and remove the first rotations elements.\n        - We return the new list.\n\n    \"\"\"\n    new_list = arr[:]\n    for i in range(rotations):\n        new_list.append(arr.pop(0))\n    return new_list\n\n\ndef find_final_index(arr, ranges, index):\n    \"\"\"\n    This function takes in the following parameters:\n        arr: A list of integers.\n        ranges: A list of tuples representing ranges of integers.\n        index: An integer representing the index of the element to be found.\n\n    This function finds the index of the element at the given index after the rotations.\n\n    The function works as follows:\n        - We loop through the array, starting from the end.\n        - If an element is within the ranges, we return its index.\n        - If we reach the beginning of the array and haven't found a match, we return -1.\n\n    \"\"\"\n    for i in range(len(arr) - 1, -1, -1):\n        for j in range(len(ranges)):\n            if arr[i] >= ranges[j][0] and arr[i] <= ranges[j][1]:\n                return i\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize the current element and the number of rotations\n    curr_element = arr[0]\n    rot_count = 0\n\n    # Perform rotations and find the element at the desired index\n    for i in range(len(arr)):\n        if i == index:\n            break\n        elif rot_count == rotations:\n            rot_count = 0\n            # Increment the current element and decrement the rotations\n            curr_element = (curr_element + 1) % len(arr)\n        else:\n            rot_count += 1\n\n    return curr_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the given array arr, the given ranges of indices ranges, the number of rotations rotations, and the index of the element to be found. It then finds the element at the given index after rotations by using the modulo operator (%).\n\n    Args:\n    arr (list): A list of integers representing the array to be rotated.\n    ranges (list): A list of tuples representing the range of indices for each rotation.\n    rotations (int): The number of rotations to perform on the array.\n    index (int): The index of the element to be found after rotations.\n\n    Returns:\n    The element at the given index after rotations.\n    \"\"\"\n    # Check if the index is within the range of rotations\n    if index < rotations:\n        # Check if the index is within the range of indices for the first rotation\n        if index < ranges[0][0]:\n            # Return the element at the first index of the first rotation\n            return arr[ranges[0][0]]\n        # Check if the index is within the range of indices for the second rotation\n        elif index >= ranges[0][0] and index < ranges[1][0]:\n            # Return the element at the first index of the second rotation\n            return arr[ranges[1][0]]\n        # Check if the index is within the range of indices for the third rotation\n        elif index >= ranges[1][0] and index < ranges[2][0]:\n            # Return the element at the first index of the third rotation\n            return arr[ranges[2][0]]\n        # Check if the index is within the range of indices for the fourth rotation\n        elif index >= ranges[2][0]:\n            # Return the element at the first index of the fourth rotation\n            return arr[ranges[3][0]]\n    # If the index is greater than or equal to the rotations, we need to perform additional rotations to find the element at the given index\n    else:\n        # Calculate the number of rotations to perform for the remaining elements\n        remaining_rotations = index - rotations\n        # Perform the additional rotations on the array\n        for i in range(remaining_rotations):\n            # Calculate the range of indices for this rotation\n            current_range = ranges[i+1]\n            # Calculate the range of indices for the next rotation\n            next_range = ranges[i+2]\n            # Calculate the shift amount for each rotation\n            shift = next_range[0] - current_range[1]\n            # Shift the array by the shift amount for this rotation\n            arr = arr[shift:] + arr[:shift]\n        # Return the element at the given index after rotations\n        return arr[index - ranges[0][0]]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Check if the first word in the list starts with letter 'p'\n    if re.match(\"^p\", words[0]):\n        # Check if the second word in the list starts with letter 'p'\n        if re.match(\"^p\", words[1]):\n            # Return the two words starting with letter 'p'\n            return words[0], words[1]\n        else:\n            # Return the first word starting with letter 'p'\n            return words[0]\n    else:\n        # Return the second word starting with letter 'p'\n        return words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    matches = re.findall(pattern, words)\n    return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p.*'\n    matches = re.findall(pattern, words)\n    return matches\n\nwords = [\"apple\", \"banana\", \"pear\", \"pineapple\", \"grape\", \"peach\", \"pineapple\"]\nresult = start_withp(words)\nprint(result)"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the regular expression pattern for matching words starting with letter 'p'\n    pattern = re.compile('^p\\w+')\n    \n    # Iterate through the list of words and find the ones starting with 'p'\n    for word in words:\n        # Check if the word starts with 'p' using the regular expression pattern\n        if pattern.match(word):\n            # If the word starts with 'p', return it along with the next word in the list\n            return (word, words[words.index(word)+1])"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern to match words starting with letter 'p'\n    pattern = re.compile(r'^p[a-z]*$')\n    \n    # Iterate over words in the list and return two starting with letter 'p'\n    for word in words:\n        if pattern.match(word):\n            return word, word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regex pattern for starting with 'p'\n    pattern = r'^p\\w+'\n    # Iterate over words and find the ones starting with 'p'\n    for word in words:\n        if re.match(pattern, word):\n            # Return the words starting with 'p'\n            return word, words[words.index(word)+1]\n    # If no words starting with 'p' found, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-z]*' # matches words starting with 'p'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^[Pp]')\n    matches = pattern.findall(words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search('^p', word, re.IGNORECASE):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes a list a, the length of the list, index and the value of k as input.\n    The function returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    \n    # Initialize the maximum sum of increasing subsequence as 0\n    max_sum = 0\n    \n    # Initialize the list to store the maximum sum of increasing subsequence\n    max_sum_list = [0] * n\n    \n    # Initialize the sum of increasing subsequence from prefix until the kth element\n    k_sum = 0\n    \n    # Iterate from 0 to the kth element\n    for i in range(k):\n        # If the current element is greater than k, update the sum of increasing subsequence from prefix until the kth element\n        if a[i] > k:\n            k_sum += a[i]\n        \n        # Update the maximum sum of increasing subsequence from prefix until the kth element\n        if i > 0:\n            max_sum_list[i] = max(max_sum_list[i], max_sum_list[i-1] + a[i])\n            \n    # Update the sum of increasing subsequence from prefix until the ith index\n    if index > k:\n        ith_sum = 0\n        for i in range(k, index+1):\n            if a[i] > k:\n                ith_sum += a[i]\n            if i > 0:\n                max_sum_list[i] = max(max_sum_list[i], max_sum_list[i-1] + a[i])\n    \n    # Initialize the sum of increasing subsequence from index to the end\n    sum_ending_at_index = 0\n    \n    # Iterate from 0 to the index\n    for i in range(index, n):\n        # If the current element is greater than the kth element, update the sum of increasing subsequence from index to the end\n        if a[i] > k:\n            sum_ending_at_index += a[i]\n        \n        # Update the maximum sum of increasing subsequence from index to the end\n        if i > 0:\n            max_sum_list[i] = max(max_sum_list[i], max_sum_list[i-1] + a[i])\n            \n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i \n    return max(max_sum_list[0:index+1]) + k_sum + sum_ending_at_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum found so far\n    max_sum = float('-inf')\n    \n    # Initialize the sum of the current increasing subsequence\n    current_sum = 0\n    \n    # Initialize the maximum sum of the current increasing subsequence ending at i\n    max_sum_i = 0\n    \n    # Iterate over the indices from 0 to n\n    for i in range(n):\n        # If the current index i is not equal to the index we're looking for\n        if i!= index:\n            # Calculate the sum of the current increasing subsequence ending at i and including the kth element\n            current_sum = max(current_sum + a[i], a[i])\n            # Update the maximum sum of the current increasing subsequence ending at i\n            max_sum_i = max(max_sum_i, current_sum)\n            \n        # If the maximum sum of the current increasing subsequence ending at i is greater than the maximum sum found so far\n        if max_sum_i > max_sum:\n            # Update the maximum sum found so far\n            max_sum = max_sum_i\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n        a: list of integers\n        n: integer representing the length of the list\n        index: integer representing the current index of the list\n        k: integer representing the kth element after i\n\n    Returns:\n        max_sum: integer representing the maximum sum of increasing subsequence from prefix until ith index and including kth element\n    \"\"\"\n\n    # Initialize variables for the current index and the maximum sum\n    current_sum = 0\n    max_sum = 0\n\n    # Loop through the remaining indices\n    for i in range(index, n):\n        # Add the current element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is equal to the maximum sum so far, check if the element before it is greater than the kth element\n        if current_sum == max_sum and a[i] > a[k]:\n            # If it is, update the maximum sum\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0]\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    max_sum_increasing = 0\n    max_sum_ending_here = 0\n    for i in range(index, n):\n        if i == k - 1:\n            max_sum_ending_here += a[i]\n        elif i == index - 1:\n            max_sum_ending_here = max(a[i], max_sum_ending_here)\n        else:\n            max_sum_ending_here = max(a[i], max_sum_ending_here + a[i])\n        max_sum_increasing = max(max_sum_increasing, max_sum_ending_here)\n    return max_sum_increasing"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Base case: if the index is beyond the array range or if the kth element is not at or after the index, return 0\n    if index >= n or a[k] < index:\n        return 0\n\n    # Initialize variables to keep track of the maximum sum of increasing subsequence seen so far\n    max_sum = 0\n    curr_sum = 0\n\n    # Loop through the array from index 0 to index i-1\n    for i in range(index + 1):\n        # Add the current element to the current sum\n        curr_sum += a[i]\n\n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum is greater than the maximum sum of the current increasing subsequence and also includes the kth element, update the maximum sum accordingly\n        if curr_sum > max_sum and i == index:\n            max_sum += a[k]\n\n        # If the current sum is greater than the maximum sum of the current increasing subsequence and does not include the kth element, update the maximum sum accordingly\n        if curr_sum > max_sum and a[k] > i:\n            max_sum = max_sum + a[k] - i\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n        a: list of integers representing the input array.\n        n: integer representing the size of the array.\n        index: integer representing the current index to consider in the array.\n        k: integer representing the kth element after the current index.\n\n    Returns:\n        An integer representing the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array starting from index + 1 to k - 1 (since the sum of the kth element to the end is not increasing)\n    for i in range(index + 1, k):\n        # If the current element is less than the kth element, add the current element to the current sum and update the max sum if necessary\n        if a[i] < a[k - 1]:\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n        # If the current element is greater than or equal to the kth element, only add the kth element to the sum and update the max sum if necessary\n        else:\n            current_sum += a[k - 1]\n            max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        # If k is greater than index, there is no increasing subsequence.\n        return 0\n\n    # Initialize the maximum sum so far and the maximum sum of increasing subsequence ending at i.\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Traverse from i to k-1 and calculate the sum of increasing subsequence ending at each index.\n    for i in range(index, k):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    max_sum = float('-inf')\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        if i == index:\n            dp[i] = a[i]\n        elif i < index:\n            dp[i] = max(a[i], dp[i-1])\n        else:\n            dp[i] = max(a[i] + dp[i-k], dp[i-1])\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        if a[index] >= k:\n            return a[index]\n        else:\n            return 0\n\n    # Initialize maximum sum and maximum sum ending at index-1\n    max_sum = max_sum_ending_at_index_minus_one = float('-inf')\n\n    # Initialize maximum sum ending at index-1 and index-2\n    max_sum_ending_at_index_minus_two_and_index_minus_one = float('-inf')\n\n    # Iterate through all possible starting indexes of increasing subsequences up to index-1\n    for i in range(index):\n        # Calculate the sum of increasing subsequence up to index-1 and ending at i\n        sum_ending_at_i = a[i] + max_sum_ending_at_index_minus_one\n\n        # If the sum is greater than the maximum sum ending at index-1 and index-2, update the maximum sum and maximum sum ending at index-1 and index-2\n        if sum_ending_at_i > max_sum_ending_at_index_minus_two_and_index_minus_one:\n            max_sum_ending_at_index_minus_two_and_index_minus_one = max_sum_ending_at_index_minus_one\n            max_sum_ending_at_index_minus_one = sum_ending_at_i\n\n    # Calculate the sum of increasing subsequence up to index-1 and ending at k\n    sum_ending_at_k = a[index] + max_sum_ending_at_index_minus_two_and_index_minus_one\n\n    # If the sum is greater than the maximum sum, update the maximum sum\n    if sum_ending_at_k > max_sum:\n        max_sum = sum_ending_at_k\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # base case\n    if index == 0:\n        return a[0]\n    \n    # recursive case\n    prefix_sum = a[index] + max_sum_increasing_subseq(a, n, index-1, k)\n    \n    if index == k:\n        return prefix_sum\n    elif index < k:\n        return max(prefix_sum, max_sum_increasing_subseq(a, n, index-1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    result = []\n    for i in range(m):\n        result.append(deepcopy(tuplex[i]))\n    for i in range(n):\n        result.append(deepcopy(tuplex[m+i]))\n    return tuple(result)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 1:\n        if m == 1:\n            return (tuplex[0], )\n        else:\n            return ()\n    else:\n        if m == 1:\n            return (tuplex[0], ) + tuple(colon_tuplex(tuplex[1:], m - 1, n))\n        else:\n            return tuple(colon_tuplex(tuplex[1:], m, n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    -----------\n    tuplex : tuple\n        A tuple to get a colon from.\n    m : int\n        The number of elements in the colon.\n    n : int\n        The number of columns in the tuple.\n\n    Returns:\n    --------\n    colon : tuple\n        A tuple containing the m elements of the input tuple.\n\n    \"\"\"\n    colon = tuple([tuplex[i] for i in range(0, m)])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the original tuple\n    colon_tuple = deepcopy(tuplex)\n    # Get the length of the original tuple\n    length = len(tuplex)\n    # Set the length of the colon tuple\n    colon_tuple_length = m*n\n    # Set the end index for the colon tuple\n    end_index = length - 1\n    # Iterate through the colon tuple\n    for i in range(colon_tuple_length):\n        # Get the current index\n        current_index = i // m\n        # Get the current row\n        current_row = current_index // n\n        # Get the current column\n        current_column = i % m\n        # If the current index is not in the original tuple, set its value to None\n        if current_index >= length:\n            colon_tuple[i] = None\n        # If the current index is in the original tuple, get the value at that index and set it as the value of the current column\n        else:\n            colon_tuple[i] = tuplex[current_index][current_column]\n    return colon_tuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # check if the length of the tuple is m\n    if len(tuplex)!= m:\n        print(\"Tuple should have length\",m)\n        return\n\n    # create a copy of the tuple\n    colon = deepcopy(tuplex)\n\n    # loop through each element in the colon\n    for i in range(m):\n        # move the i-th element to the end of the colon\n        colon.insert(n,colon.pop(i))\n\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(new_tuplex)\n\n    # get the index of the first element\n    first_index = m - 1\n\n    # get the index of the last element\n    last_index = n - 1\n\n    # check if the first index is less than the length of the tuple\n    if first_index < length:\n        # check if the first index is less than the last index\n        if first_index < last_index:\n            # get the elements in the range [first_index, last_index]\n            elements = new_tuplex[first_index:last_index + 1]\n\n            # join the elements with a colon\n            colon_elements = ':'.join(str(x) for x in elements)\n\n            # get the first element of the tuple\n            first_element = new_tuplex[0]\n\n            # get the last element of the tuple\n            last_element = new_tuplex[-1]\n\n            # concatenate the first element and colon_elements with a colon\n            colon_string = str(first_element) + ':' + colon_elements\n\n            # concatenate colon_string with the last element\n            colon_tuplex = colon_string + str(last_element)\n\n            # convert the colon_tuplex to a tuple\n            colon_tuplex = tuple(colon_tuplex)\n        else:\n            # get the first element of the tuple\n            first_element = new_tuplex[0]\n\n            # concatenate the first element with a colon\n            colon_string = str(first_element) + ':'\n\n            # get the last element of the tuple\n            last_element = new_tuplex[-1]\n\n            # concatenate colon_string with the last element\n            colon_tuplex = colon_string + str(last_element)\n\n            # convert the colon_tuplex to a tuple\n            colon_tuplex = tuple(colon_tuplex)\n    else:\n        # get the last element of the tuple\n        last_element = new_tuplex[-1]\n\n        # concatenate the last element with a colon\n        colon_string = str(last_element) + ':'\n\n        # get the first element of the tuple\n        first_element = new_tuplex[0]\n\n        # concatenate colon_string with the first element\n        colon_tuplex = colon_string + str(first_element)\n\n        # convert the colon_tuplex to a tuple\n        colon_tuplex = tuple(colon_tuplex)\n\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(tuplex_copy)\n\n    # add m elements to the tuple\n    for i in range(m):\n        if i < length:\n            tuplex_copy.insert(0, tuplex_copy.pop(i))\n        else:\n            tuplex_copy.append(0)\n\n    # add n elements to the tuple\n    for i in range(n):\n        if i < length:\n            tuplex_copy.insert(length+i, tuplex_copy.pop(i))\n        else:\n            tuplex_copy.append(0)\n\n    # return the colon of the tuple\n    return tuple(tuplex_copy)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the size of the tuple\n    size = len(new_tuplex)\n    # If m > n, we need to append m-n zeros to the right of the tuple\n    if m > n:\n        for i in range(n-m):\n            new_tuplex.append(0)\n    # Otherwise, we need to remove m-n zeros from the right of the tuple\n    else:\n        for i in range(m-n):\n            new_tuplex.pop()\n    # Return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return (tuplex[m-1],)\n    else:\n        return (tuplex[m-1],colon_tuplex(tuplex,m+1,n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # deep copy the tuplex\n    tuplex_copy = deepcopy(tuplex)\n\n    # create a list to store the colon\n    colon = []\n\n    # iterate through the rows of the tuple\n    for i in range(m):\n        # create a list to store the elements of the row\n        row = []\n        # iterate through the columns of the row\n        for j in range(n):\n            # get the index of the current column\n            col_index = j + i*n\n            # if the index is within the range of tuplex, add the element to the row\n            if 0 <= col_index < len(tuplex_copy):\n                row.append(tuplex_copy[col_index])\n        colon.append(tuple(row))\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    # Check if the two input lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length\"\n    \n    # Create two dictionaries to store the maximum product for each combination of numbers\n    # The keys of the dictionaries will be tuples of two numbers, and the values will be the products\n    max_products = {(): 0}\n    \n    # Iterate through all possible combinations of two numbers from each input list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Create a tuple of the two numbers as a key for the dictionary\n            key = (nums1[i], nums2[j])\n            \n            # If the key already exists in the dictionary, update its value with the maximum of the current value and the current product\n            if key in max_products:\n                max_products[key] = max(max_products[key], nums1[i] * nums2[j])\n            # If the key does not exist in the dictionary, add it with its value as the product of the two numbers\n            else:\n                max_products[key] = nums1[i] * nums2[j]\n                \n            # If we have found the specified number of products, return the maximum\n            if len(max_products) == N:\n                return max(max_products.values())\n    \n    # If we have not found the specified number of products, return an error message\n    return \"Not enough products found\""
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize variables\n    largest_products = []\n    products = []\n\n    # Loop through each combination of two numbers from nums1 and nums2\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the selected numbers\n            product = nums1[i] * nums2[j]\n            # Add the product to the products list\n            products.append(product)\n            # If the product is larger than the largest product so far, update the largest_products and products lists\n            if product > largest_products[-1]:\n                largest_products.append(product)\n                if len(largest_products) == N:\n                    # If we have found N largest products, stop looping\n                    break\n\n    # Sort the products list in descending order and return the first N products\n    return sorted(products, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the product of the first N largest numbers from each list\n    product1 = 1\n    for i in range(N):\n        product1 *= nums1[i]\n\n    product2 = 1\n    for i in range(N):\n        product2 *= nums2[i]\n\n    # Calculate the product of the first N smallest numbers from each list\n    product3 = 1\n    for i in range(N):\n        product3 *= nums1[N-1-i]\n\n    product4 = 1\n    for i in range(N):\n        product4 *= nums2[N-1-i]\n\n    # Return the maximum of the four products\n    return max(product1, product2, product3, product4)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the largest products\n    max_product = 0\n    max_product_pair = []\n    count = 0\n\n    # Loop through each possible pair of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the product of the selected factors\n            product = nums1[i] * nums2[j]\n            # Update the count and max_product variables if necessary\n            if count < N or product > max_product:\n                max_product = product\n                max_product_pair = [nums1[i], nums2[j]]\n            # Increment the count\n            count += 1\n\n    # Return the largest products and the count\n    return max_product_pair, count"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables for the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n    largest_product3 = 0\n    largest_product4 = 0\n    \n    # loop through each possible combination of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            for k in range(len(nums1) - i):\n                for l in range(len(nums2) - j):\n                    # check if this combination is within the specified limit\n                    if (k + i) * (l + j) > N:\n                        continue\n                    \n                    # calculate the product of the selected factors and add to the total product\n                    product1 = nums1[k] * nums1[k + i]\n                    product2 = nums2[l] * nums2[l + j]\n                    product3 = product1 * product2\n                    product4 = nums1[k] * nums2[l] * nums2[l + j]\n                    \n                    # update the largest products found so far\n                    largest_product1 = max(largest_product1, product1)\n                    largest_product2 = max(largest_product2, product2)\n                    largest_product3 = max(largest_product3, product3)\n                    largest_product4 = max(largest_product4, product4)\n    \n    # return the total largest product found\n    return largest_product1 + largest_product2 + largest_product3 + largest_product4"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the input lists in non-decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Loop through the input lists until we have found N products\n    i = 0\n    j = 0\n    while i < len(nums1) and j < len(nums2) and len(largest_products) < N:\n        # Calculate the product of the current factors\n        product = nums1[i] * nums2[j]\n\n        # If the product is greater than or equal to the maximum product found so far, update the maximum product\n        if product >= largest_products[-1] or not largest_products:\n            largest_products.append(product)\n\n        # Move to the next factors in each list\n        i += 1\n        j += 1\n\n    # Return the largest products found\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest1, largest2 = 0, 0\n\n    # Loop through the first N elements of the sorted lists\n    for i in range(N):\n        # Multiply the two largest elements and store the result in the variable largest1\n        largest1 = max(nums1[i] * nums1[i+1], nums1[i] * nums2[i+1], nums1[i+1] * nums2[i])\n\n        # Multiply the two smallest elements and store the result in the variable largest2\n        largest2 = max(nums2[i] * nums2[i+1], nums2[i] * nums1[i+1], nums2[i+1] * nums1[i])\n\n        # Check if the product of largest1 and largest2 is greater than the product of any other element of the list\n        if largest1 * largest2 > largest1 * max(nums1[i:N+1]) * max(nums2[i:N+1]):\n            break\n\n    return largest1 * largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the desired number of products\n    for i in range(N):\n        # Calculate the product of the current two numbers\n        product = nums1[i] * nums2[i]\n\n        # If the product is greater than the current largest product, update the result list\n        if len(result) == 0 or product > result[-1]:\n            result = [product]\n        else:\n            result.append(product)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum value in nums1 and nums2\n    max_val = max(max(nums1), max(nums2))\n\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Iterate over all possible pairs of factors\n    for i in range(1, max_val + 1):\n        for j in range(1, max_val + 1):\n            # If the product is greater than N, add it to the list\n            if i * j > N:\n                largest_products.append((i, j))\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > len(nums2):\n        num1, num2 = nums1, nums2\n    else:\n        num1, num2 = nums2, nums1\n    largest_product = 0\n    for i in range(N):\n        product1 = 1\n        product2 = 1\n        for j in range(i, len(num1)):\n            product1 *= num1[j]\n        for j in range(i, len(num2)):\n            product2 *= num2[j]\n        if product1 > largest_product:\n            largest_product = product1\n        if product2 > largest_product:\n            largest_product = product2\n    return largest_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n\n    Parameters:\n    a (int): the first number to compare\n    b (int): the second number to compare\n\n    Returns:\n    int: the maximum of a and b\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert string to list of characters\n    lst = list(str1)\n    # Convert list of characters to tuple\n    tup = tuple(lst)\n    # Return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and converts it to a tuple of characters.\n    '''\n    # Use a list comprehension to convert the string to a tuple of characters\n    char_tuple = tuple(str1)\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function converts a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert string to list of characters\n    list_char = list(str1)\n\n    # Convert list of characters to tuple of characters\n    tuple_char = tuple(list_char)\n\n    # Return the tuple of characters\n    return tuple_char"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 1\n    while (bit & n) == 0:\n        bit <<= 1\n\n    return bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    mask = 1\n    while (n & mask) == 0:\n        mask <<= 1\n    return n | mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given number n.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The new value of n with the left most unset bit set.\n\n    Examples:\n        >>> set_left_most_unset_bit(10)\n        12\n        >>> set_left_most_unset_bit(2)\n        4\n        >>> set_left_most_unset_bit(15)\n        16\n        >>> set_left_most_unset_bit(0)\n        1\n    \"\"\"\n    while n & 1 == 0:  # check if n is even\n        n >>= 1  # shift n to the right by 1 bit\n    return n + 1  # return n plus 1 (which is the next rightmost set bit)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given integer n.\n\n    It returns the modified integer n with the left most unset bit set to 1.\n    If all the bits of n are set to 1, the function returns the original integer n.\n\n    If n is 0, the function returns 0.\n\n    Args:\n    n: An integer.\n\n    Returns:\n    An integer.\n    '''\n\n    # Check if n is 0\n    if n == 0:\n        return 0\n\n    # Find the position of the leftmost unset bit\n    left_most_unset_bit_index = 31 - n.bit_length()\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << left_most_unset_bit_index)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize variables\n    unset_bit = 0\n    unset_bit_index = -1\n    # Iterate through each bit of the number\n    for i in range(32):\n        # If the current bit is 0, set the unset bit flag to 1 and the index to the current bit number\n        if (n & (1 << i)) == 0:\n            unset_bit = 1\n            unset_bit_index = i\n            break\n    # If no unset bit is found, return n (n is already set to the leftmost unset bit)\n    if unset_bit == 0:\n        return n\n    # Set the leftmost unset bit in the number to 1\n    n = n | (1 << unset_bit_index)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize mask to all ones\n    mask = 2**32 - 1\n    \n    # Iterate through each bit in n from right to left\n    for i in range(31, -1, -1):\n        # Check if the current bit is set to 1\n        if n & (1 << i)!= 0:\n            # If it's set, set all the bits before it to 0\n            n &= ~(mask << i)\n            # Set the current bit to 1\n            n |= 1 << i\n            # Break out of the loop since we've already found the leftmost unset bit\n            break\n            \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize leftmost unset bit as 0\n    left_most_unset_bit = 0\n\n    # Find the least significant set bit from the right\n    while (n & (1 << left_most_unset_bit)) == 0:\n        left_most_unset_bit += 1\n\n    # Set the left most unset bit to 1\n    n |= (1 << left_most_unset_bit)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the counter variable\n    count = 0\n    # Iterate through each bit in the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the current bit is set to 1\n        if (n & (1 << i)) == 0:\n            # If yes, set the bit to 1 and break out of the loop\n            n |= (1 << i)\n            break\n        # If no, increment the counter\n        else:\n            count += 1\n    # Return the modified number\n    return n, count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer 'n' as input and returns the integer with the leftmost unset bit set.\n    '''\n\n    # Convert the integer to binary form\n    binary_form = bin(n)[2:]\n\n    # Iterate through the binary form from left to right, starting from the rightmost bit\n    for i in range(len(binary_form)-1, -1, -1):\n        if binary_form[i] == '0':\n            # Set the leftmost unset bit to 1\n            binary_form = binary_form[:i] + '1' + binary_form[i+1:]\n            break\n\n    # Convert the binary form back to an integer\n    result = int(binary_form, 2)\n\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given integer n.\n    \"\"\"\n    while (n & 1) == 0:\n        n >>= 1\n    return n << 1"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for cone volume: V = \u03c0r^2h\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone using Heron's formula\n    area = math.pi * (r ** 2)\n    volume = (1/3) * area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    return (1/3)*math.pi*r*r*h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone and returns the volume of the cone.\n    \"\"\"\n    pi = math.pi\n    return (1/3) * pi * r * r * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    area = math.pi * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone with a given base radius and height.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate volume of cone\n    volume = (1/3)*math.pi*(r**2)*(h)\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        return None\n    power = 1\n    while power <= n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n, 1, -1): \n        if 2**i <= n: \n            return 2**i "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    # Convert n to a binary representation of an integer\n    binary_representation = bin(n)[2:]\n    \n    # If binary_representation has a 0 at the beginning, remove it\n    if binary_representation[0] == '0':\n        binary_representation = binary_representation[1:]\n    \n    # Calculate the highest power of 2 that is less than or equal to n\n    highest_power = 1\n    for i in range(len(binary_representation)):\n        if binary_representation[i] == '0':\n            highest_power *= 2\n    \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Calculate the logarithm base 2 of n\n    log2 = 0\n    while n > 1:\n        n = n >> 1\n        log2 += 1\n\n    # Return the highest power of 2 less than or equal to n\n    return 1 << log2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize the highest power of 2 found to the smallest possible power of 2\n    highest_power = 2\n\n    # loop through all powers of 2 from 2 to n (inclusive)\n    while highest_power <= n:\n        # check if the current power is a power of 2\n        if highest_power & (highest_power - 1) == 0:\n            # if it is, update the highest power of 2 found\n            highest_power <<= 1\n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to a given number n.\n    \"\"\"\n    highest = 1\n    while highest * highest <= n:\n        highest *= 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate through the powers of 2 until the last power of 2 is greater than n\n    while 2**result <= n:\n        # Increment the result by 1\n        result += 1\n        \n    return result-1 # Return the result minus 1 since the last power of 2 is not included in the range"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        lucas = [2]\n        for i in range(2, n):\n            lucas.append(lucas[i-1] + lucas[i-2])\n        return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Convert the string to a list of strings\n    formatted_list = [string.format(x) for x in list_]\n    # Return the formatted list\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_item = string.format(item)\n        new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop over each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the element\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(x, string) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Use the string formatting method to apply the format string to the current element\n        formatted = string.format(list_[i])\n        # Replace the current element with the formatted element\n        list_[i] = formatted\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert the first list to a dictionary\n    d1 = dict(zip(l1[0], l1[1]))\n    # Convert the second list to a dictionary\n    d2 = dict(zip(l2[0], l2[1]))\n    # Convert the third list to a dictionary\n    d3 = dict(zip(l3[0], l3[1]))\n    # Combine the three dictionaries into a single dictionary\n    data = {**d1, **d2, **d3}\n    # Return the nested dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Convert the first list to a dictionary\n    d1 = dict(zip(l1, l2))\n    \n    # Convert the second list to a dictionary\n    d2 = dict(zip(l3, ['']))\n    \n    # Combine the two dictionaries into a nested dictionary\n    nested_dict = {**d1, **d2}\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # create a dictionary for each list\n    dict1 = dict(zip(l1, l2))\n    dict2 = dict(zip(l1, l3))\n\n    # combine the dictionaries into a single dictionary\n    result = dict(dict1.items() + dict2.items())\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # loop through each list and add it to the nested dictionary as a key\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    \n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): A list of integers.\n        l2 (list): A list of strings.\n        l3 (list): A list of dictionaries, where each dictionary contains two keys and two values.\n\n    Returns:\n        dict: A nested dictionary containing three lists and three dictionaries.\n    \"\"\"\n\n    # Create an empty dictionary to store the nested dictionary.\n    nested_dict = {}\n\n    # Loop through the three input lists.\n    for i in range(len(l1)):\n        # Add a list with integers to the nested dictionary.\n        nested_dict[l1[i]] = l2[i]\n        # Add a list with strings to the nested dictionary.\n        nested_dict[l1[i]] = l3[i]\n\n    # Return the nested dictionary.\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initializing an empty dictionary\n    nested_dict = {}\n    # iterating over the first list\n    for i in l1:\n        # iterating over the second list\n        for j in l2:\n            # iterating over the third list\n            for k in l3:\n                # creating a nested dictionary with values of (i,j,k)\n                nested_dict.update({(i,j,k): (i,j,k)})\n    # returning the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    This function takes any number of lists as arguments and returns a nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i, lst in enumerate(lists):\n        for item in lst:\n            key = f\"{i}_{item}\"\n            if key not in nested_dict:\n                nested_dict[key] = []\n            nested_dict[key].append(item)\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Loop through the first list and append each element to the nested dictionary\n    for item in l1:\n        nested_dict[item] = l2.pop(0)\n    # Loop through the second list and append each element to the nested dictionary\n    for item in l2:\n        nested_dict[item] = l3.pop(0)\n    # Return the final nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    - l1: list of strings\n    - l2: list of integers\n    - l3: list of floats\n\n    Returns:\n    - nested dictionary of lists\n    '''\n    # Create an empty dictionary to store the converted data\n    data = {}\n\n    # Add the data from l1 to the dictionary\n    data['l1'] = l1\n\n    # Add the data from l2 to the dictionary\n    data['l2'] = l2\n\n    # Add the data from l3 to the dictionary\n    data['l3'] = l3\n\n    # Return the converted data as a nested dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # convert first list to dictionary\n    dict1 = {i: l1[i] for i in range(len(l1))}\n    # convert second list to dictionary\n    dict2 = {i: l2[i] for i in range(len(l2))}\n    # convert third list to dictionary\n    dict3 = {i: l3[i] for i in range(len(l3))}\n    # combine all dictionaries into a single dictionary\n    result = {**dict1, **dict2, **dict3}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        max_sum = 0\n        for i in range(1, int(n/2)+1):\n            max_sum = max(max_sum, get_max_sum(i) + get_max_sum(n-i))\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n\n    # Calculate the maximum sum possible if n is even\n    even_max = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n\n    # Calculate the maximum sum possible if n is odd\n    odd_max = max(get_max_sum(n//2) + n, get_max_sum(n//3) + n, get_max_sum(n//4) + n, get_max_sum(n//5) + n)\n\n    return max(even_max, odd_max)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 42\n    \n    if n % 2 == 0:\n        return max(get_max_sum(n//2), get_max_sum(n//2) + get_max_sum(n//2) + get_max_sum(n//2))\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//2) + get_max_sum(n//2), get_max_sum(n//2) + get_max_sum(n//2) + get_max_sum(n//2) + get_max_sum(n//2))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    # Traverse through the list\n    for i in input_list:\n        # Check if the length of the current list is greater than the current max length\n        if len(i) > max_length:\n            # Update max_length and max_list\n            max_length = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # Initialize max_length to the length of the first list in the input_list\n    max_length = len(input_list[0])\n\n    # Loop through each list in the input_list\n    for list in input_list:\n        # If the length of the current list is greater than max_length, update max_length to the length of the current list\n        if len(list) > max_length:\n            max_length = len(list)\n\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to eliminate duplicates\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as an argument and returns the first non-repeated character in it.\n    '''\n    # Initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through each character in the string again\n    for char in str1:\n        # If the character has a count of 1, return it as the first non-repeated character\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeating character in the string\n    first_non_repeat = None\n    for char in str1:\n        if freq[char] == 1 and first_non_repeat is None:\n            first_non_repeat = char\n        elif freq[char] == 1:\n            return first_non_repeat\n\n    return first_non_repeat"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    first_non_repeating = None\n    for char, count in char_count.items():\n        if count == 1:\n            first_non_repeating = char\n            break\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the string again and find the first non-repeated character\n    for i in range(len(str1)):\n        if freq[str1[i]] == 1:\n            return str1[i]\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeated character by iterating through the string and comparing the frequency\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character with count 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character has count 1, the string is empty and there is no non-repeating character\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(string):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeated character by iterating through the dictionary\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n\n    # iterate over the string and keep track of the first non-repeated character\n    first = None\n    for char in str1:\n        if freq[char] == 1:\n            first = char\n            break\n\n    # return the first non-repeated character or None if there are no non-repeated characters\n    return first"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(string):\n    '''\n    This function takes a string as input and returns the first non-repeating character.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    # Initialize a variable to store the first non-repeating character\n    non_repeating_char = None\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is already in the dictionary, return the character as the first non-repeating character\n        if char in freq_dict:\n            return char\n        # If the character is not in the dictionary, add it to the dictionary with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    \n    # If no non-repeating character was found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(regex, string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the string matches the regex pattern\n    if re.match(regex, string):\n        # If it matches, check if the first and last characters are the same\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import random\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = random.choice(arr)\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    k = len(arr) // 2\n    return quickselect(arr, k)"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a,b,c])\n\n    # Calculate the median\n    if len(numbers) % 2 == 0: # even number of numbers\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2-1])/2\n    else: # odd number of numbers\n        median = numbers[len(numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the length of the list\n    length = len(numbers)\n\n    # If the list has an odd number of elements, the median is the middle number\n    if length % 2 == 1:\n        return numbers[length // 2]\n\n    # If the list has an even number of elements, the median is the average of the two middle numbers\n    else:\n        middle1 = length // 2\n        middle2 = middle1 - 1\n        return (numbers[middle1] + numbers[middle2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the median based on the length of the list\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers\n    sorted_numbers = sorted([a,b,c])\n\n    # calculate the median\n    if len(sorted_numbers) % 2 == 0: # even number of numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[(len(sorted_numbers)//2)-1]) / 2\n    else: # odd number of numbers\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    num_list = [a, b, c]\n    num_list.sort()\n    length = len(num_list)\n    if length % 2 == 0:\n        return (num_list[length//2 - 1] + num_list[length//2]) / 2\n    else:\n        return num_list[length//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a,b,c])\n    # Get the index of the middle element\n    mid = len(numbers)//2\n    # Check if the length of the numbers is odd or even\n    if len(numbers) % 2 == 0:\n        # If it is even, return the average of the middle two numbers\n        return (numbers[mid-1] + numbers[mid]) / 2\n    else:\n        # If it is odd, return the middle number\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Find the middle element of the sorted list\n    mid = len(sorted_list) // 2\n    \n    # If the length of the list is odd, the median is the middle element\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[mid]\n    \n    # If the length of the list is even, the median is the average of the two middle elements\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        total += temp\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        num_str = str(num)\n        num_int = int(num_str)\n        sum_digit = 0\n        for digit in num_str:\n            sum_digit += int(digit)\n        result += sum_digit\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        if isinstance(num, int):\n            digits = sum(int(digit) for digit in str(num))\n            result += digits\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        for digit in str(num):\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        total += digits_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    \n    for num in nums:\n        if isinstance(num, int):\n            total_sum += sum(int(d) for d in str(num))\n        else:\n            total_sum += 0\n            \n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        # convert the number to a string and convert each character to an integer\n        digit_sum = sum(int(digit) for digit in str(num))\n        # add up the sum of digits for each number\n        sum += digit_sum\n    return sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Perform bitwise xor operation on the tuples and return the result\n    return tuple(bin(x ^ y)[2:] for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n            result.append(test_tup2[i])\n        else:\n            result.append(0)\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Perform bitwise xor operation across all elements of the tuples\n    result = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        result_tup += tuple(test_tup1[len(test_tup2):])\n    elif len(test_tup2) > len(test_tup1):\n        result_tup += tuple(test_tup2[len(test_tup1):])\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to lists to allow bitwise operations\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n\n    # Perform the bitwise xor operation across the two lists\n    for i in range(len(tup1)):\n        tup1[i] = tup1[i] ^ tup2[i]\n\n    # Convert the list back to a tuple\n    result = tuple(tup1)\n\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tupels must have the same length.')\n    for i in range(len(test_tup1)):\n        test_tup1[i] ^= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for item in test_list:\n        if len(item) == 2 and tuple(item) not in test_list:\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq = {}\n    for item in test_list:\n        if tuple(item) in freq:\n            freq[tuple(item)] += 1\n        else:\n            freq[tuple(item)] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    from collections import Counter\n    \n    # create a Counter object to count unique tuples in the list\n    count = Counter(test_list)\n    \n    # return the number of unique tuples in the list\n    return count.keys()"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the number of unique tuples.\n    \"\"\"\n    # create a set to store unique tuples\n    unique_tuples = set()\n\n    # iterate over the list of tuples\n    for tup in test_list:\n        # add the tuple to the set\n        unique_tuples.add(tup)\n\n    # return the size of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty dictionary to store unique tuples and their frequencies\n    freq_dict = {}\n\n    # iterate over each element in the list\n    for item in test_list:\n        # check if the current element is a tuple and if it has already been seen before\n        if isinstance(item, tuple) and (item, ) not in freq_dict:\n            # if it hasn't been seen before, add it to the dictionary and set its frequency to 1\n            freq_dict[(item, )] = 1\n\n    # return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Convert the list to a set to get unique elements, then back to a list.\n    unique_tuples = list(set(test_list))\n    # Count the number of unique tuples in the list.\n    num_unique_tuples = len(unique_tuples)\n    # Return the number of unique tuples.\n    return num_unique_tuples"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the resultant tuples\n    result = []\n    # Loop through the tuples and add the elements at each index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    # Return the resultant list of tuples\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Check if both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length!\")\n\n    # Initialize an empty result tuple\n    result = ()\n\n    # Loop through each element in the input tuples and add the corresponding elements in index-wise manner\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements in the two input tuples and append the result to the result tuple\n        result += (test_tup1[i] + test_tup2[i],)\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup = (test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1])\n        result.append(tup)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i >= len(test_tup2):\n            result.append(test_tup1[i])\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        if isinstance(tup1, tuple) and isinstance(tup2, tuple):\n            result.append(add_nested_tuples(tup1, tup2))\n        else:\n            result.append(tup1 + tup2)\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tuple = []\n    for i in range(len(test_tup1)):\n        result_tuple.append(test_tup1[i] + test_tup2[i])\n    return result_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result_tup = []\n    \n    # loop through each tuple element in both input tuples\n    for i in range(len(test_tup1)):\n        # append the sum of the current tuple element and the next tuple element in the result list\n        result_tup.append(test_tup1[i] + test_tup2[i])\n        \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty tuple to store the final result\n    result_tup = ()\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Get the element at the current index of the first tuple\n        elem1 = test_tup1[i]\n        # Loop through each element of the second tuple\n        for j in range(len(test_tup2)):\n            # Get the element at the current index of the second tuple\n            elem2 = test_tup2[j]\n            # Perform the addition of the two elements and store the result in the result tuple\n            result_tup += (elem1 + elem2,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n\n    return test_tup1\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n\n    for element in tuplex:\n        if element in tuple1:\n            return True\n\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    \"\"\"\n    This function takes in a tuple and a tuple of elements to check for. \n    It returns a boolean value indicating whether the element exists in the tuple.\n    \"\"\"\n    for elem in tuplex: \n        if elem in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} is present in the tuple.\")\n    else:\n        print(f\"{tuplex} is not present in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        print(x, \"is even.\")\n        return False\n    else:\n        print(x, \"is odd.\")\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    parity = (x % 2 == 0)\n    if parity:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if x is odd, False otherwise.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Check if the number is even or odd\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes in a number x and returns a boolean value indicating whether the parity of x is odd or even.\n    \"\"\"\n\n    # check if the number is even or odd\n    if x % 2 == 0:\n        parity = False\n    else:\n        parity = True\n\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even\")\n    else:\n        print(\"The parity of\", x, \"is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the number is positive or negative\n    if x > 0: \n        parity = 1\n    elif x < 0: \n        parity = -1\n    else: \n        parity = 0\n    \n    # Check if the parity is odd or even\n    if parity % 2 == 1: \n        print(x, \"is odd\")\n    else: \n        print(x, \"is even\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes a single argument x and returns True if the parity of x is odd, False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    def next_bigger(num):\n        digits = [int(digit) for digit in str(num)]\n        digits.reverse()\n        digits.sort(reverse=True)\n        new_digits = []\n        carry = 0\n        for digit in digits:\n            if carry:\n                carry = digit\n            else:\n                new_digits.append(digit)\n        new_num = int(''.join(map(str, new_digits)))\n        return new_num\n\n    return next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_digits = len(str(n))\n    biggest_digit = 9\n    next_biggest_digit = 0\n    for digit in range(n_digits-1, -1, -1):\n        digit_value = int(str(n)[digit])\n        if digit_value > biggest_digit:\n            biggest_digit = digit_value\n            next_biggest_digit = 0\n        elif digit_value == biggest_digit:\n            next_biggest_digit += 1\n        else:\n            pass\n    next_biggest_number = n * 10**(next_biggest_digit)\n    next_biggest_number += biggest_digit\n    return next_biggest_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initializing the result variable with 0\n    result = 0\n    # converting the input number to a string\n    input_str = str(n)\n    # iterating over the characters of the input string\n    for i in range(len(input_str)-1, -1, -1):\n        # adding the value of the character to the result\n        result += int(input_str[i]) * (10**(len(input_str)-1-i))\n        # if the result is greater than the input number\n        if result > n:\n            # adding the remaining digits to the result\n            result += (9**(len(input_str)-1-i)) * (10**(len(input_str)-1-i))\n    # returning the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Find the length of the number string\n    length = len(num_str)\n    # Initialize the result variable\n    result = 0\n    # Loop through each digit of the number string\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the corresponding digit of the next larger number\n        next_digit = (9 - digit_int) % 10\n        # Convert the next digit to a string and concatenate it to the result variable\n        result = result * 10 + next_digit\n    # Return the final result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize variables\n    digits = [int(digit) for digit in str(n)]\n    new_num = 0\n    count = 0\n    \n    # Iterate through the digits and add the first digit to the new number\n    new_num += digits[0]\n    count += 1\n    \n    # Iterate through the digits and add the next digit to the new number if the sum of the current digit and the previous digit is greater than 9\n    for i in range(1, len(digits)):\n        if digits[i] + digits[i-1] > 9:\n            new_num += digits[i]\n            count += 1\n    \n    # Check if there are still digits left to be added to the new number\n    if count < len(digits):\n        # Add the remaining digits to the new number\n        for digit in digits[count:]:\n            new_num += digit\n    \n    # Return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    def find_next_bigger(num):\n        '''\n        Helper function to find the next bigger number.\n        '''\n        digits = list(str(num))\n        digits.sort(reverse=True)\n        new_num = int(''.join(digits))\n        return new_num\n    \n    if is_prime(n):\n        return n\n    \n    bigger_number = find_next_bigger(n)\n    return bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    digits = digits[::-1]\n    index = len(digits) - 1\n    \n    while index > 0:\n        if digits[index] >= digits[index - 1]:\n            digits[index], digits[index - 1] = digits[index - 1], digits[index]\n            index -= 1\n        else:\n            break\n    \n    return int(''.join(map(str, digits[::-1])))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    new_num = int(''.join(digits))\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    max_num = n\n    while True:\n        n += 1\n        if n > max_num:\n            return str(n)\n        else:\n            max_num = n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return None\n    elif n < 100:\n        return n + 1\n    elif n < 1000:\n        return n + 10\n    elif n < 10000:\n        return n + 100\n    elif n < 100000:\n        return n + 1000\n    elif n < 1000000:\n        return n + 10000\n    elif n < 10000000:\n        return n + 100000"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n    result = []\n\n    for num in nums1:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n\n    for num in nums2:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap))\n\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap of size k\n    min_heap = []\n    \n    # Use a nested loop to compare all possible pairs of elements in the arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # If the current pair of elements is smaller than the smallest element in the heap, add it to the heap\n            if len(min_heap) < k:\n                if nums1[i] + nums2[j] < min_heap[-1][0]:\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n            # If the current pair of elements is greater than or equal to the smallest element in the heap, compare it with the smallest element in the heap\n            else:\n                if nums1[i] + nums2[j] >= min_heap[0][0]:\n                    # Compare the current pair of elements with the smallest element in the heap\n                    if nums1[i] + nums2[j] < min_heap[0][0]:\n                        # If the current pair of elements is smaller than the smallest element in the heap, replace the smallest element with the current pair of elements\n                        heapq.heapreplace(min_heap, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n                    # If the current pair of elements is equal to the smallest element in the heap, remove the smallest element and add the current pair of elements to the heap\n                    elif nums1[i] + nums2[j] == min_heap[0][0]:\n                        heapq.heapreplace(min_heap, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n    \n    # Extract the k smallest elements from the heap\n    k_smallest_pairs = []\n    while min_heap:\n        k_smallest_pairs.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n    \n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1, num2))\n            else:\n                if num1 > heap[0][0]:\n                    heapq.heappushpop(heap, (num1, num2))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list of tuples containing the element from nums1 and nums2\n    pairs = [(num1, num2) for num1 in nums1 for num2 in nums2]\n    \n    # Sort the list of tuples by the sum of their elements\n    pairs.sort(key=lambda x: (x[0] + x[1]))\n    \n    # Create a min heap to store the k smallest elements\n    min_heap = []\n    \n    # Iterate through the sorted list of tuples\n    for num1, num2 in pairs:\n        # If the size of the heap is less than k, add the current pair to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n        # If the size of the heap is equal to k, compare the current element with the smallest element in the heap\n        else:\n            current_pair = (num1 + num2, (num1, num2))\n            smallest_pair = heapq.heappop(min_heap)\n            \n            # If the current element is smaller, add it to the heap\n            if current_pair[0] < smallest_pair[0]:\n                heapq.heappush(min_heap, current_pair)\n    \n    # Extract the k smallest elements from the heap and return them as a list of tuples\n    return [(num, pair[1]) for num, pair in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    result = []\n    while min_heap:\n        _, pair = heapq.heappop(min_heap)\n        result.append(pair)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the lists into a set to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    # Initialize a min heap with a default key of 0\n    min_heap = []\n    # Initialize a dictionary to store the pairs as we find them\n    pairs = {}\n\n    for num1 in nums1:\n        # Iterate through the remaining numbers in the second list\n        for num2 in nums2:\n            # Calculate the sum of the current pair\n            current_sum = num1 + num2\n            # If the sum is already in the dictionary, add the pair to the min heap\n            if current_sum in pairs:\n                heapq.heappush(min_heap, (-pairs[current_sum], (num1, num2)))\n            # If the sum is not in the dictionary, add the pair to the dictionary and the min heap\n            else:\n                pairs[current_sum] = (num1, num2)\n                heapq.heappush(min_heap, (-current_sum, (num1, num2)))\n            # If the min heap has a length greater than k, remove the smallest pair\n            if len(min_heap) > k:\n                pair, value = heapq.heappop(min_heap)\n                pairs.pop(pair)\n\n    # Get the k smallest pairs and convert them back to tuples\n    result = [(-pair, value) for pair, value in heapq.nsmallest(k, min_heap)]\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    min_heap = []\n\n    for num1 in nums1:\n        heapq.heappush(min_heap, (-num1, -1)) # push (-num1, index) into the heap\n\n    for num2 in nums2:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num2, -2)) # push (num2, index) into the heap\n        else:\n            smallest_pair = -heapq.heappop(min_heap) # pop the smallest pair from the heap\n            if smallest_pair[0] < num2:\n                heapq.heappush(min_heap, (-smallest_pair[0], smallest_pair[1])) # push (-smallest_pair[0], smallest_pair[1]) into the heap\n\n    return [-pair[0] for pair in min_heap] # return only the negative values of the pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize the heap with the first array elements\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n    \n    # Initialize the result array\n    result = []\n    \n    # Loop through the second array and find the k smallest pairs\n    for num in nums2:\n        # Find the index of the smallest element from the first array\n        index = -heapq.heappop(min_heap)\n        \n        # Add the pair to the result array and update the heap\n        result.append([num, index])\n        if len(result) == k:\n            break\n        if -index < num:\n            heapq.heappush(min_heap, -index)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a list of pairs of tuples\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2)) if nums1[i] + nums2[j] == k]\n\n    # sort the pairs based on the first element in each pair\n    pairs.sort(key=lambda x: x[0])\n\n    # return the first k pairs\n    return pairs[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    for num1 in nums1:\n        heappush(min_heap, (-num1, -1))\n\n    for num2 in nums2:\n        if not min_heap:\n            break\n\n        pair_value, pair_index = heappop(min_heap)\n        pair = (-pair_value, pair_index, num2)\n        pairs.append(pair)\n\n        if len(pairs) == k:\n            break\n\n        if pair_value <= 0:\n            break\n\n        heappush(min_heap, (-pair_value, len(nums1) - pair_index - 1))\n\n    pairs.sort(key=lambda x: x[0])\n    return [pair[1] for pair in pairs]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = list1[i][0] * list1[j][1]\n                if product < min_product:\n                    min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # create a set to store unique tuples from the given list\n    unique_tuples = set(tuple(x) for x in list1)\n    # initialize a variable to store the minimum product\n    min_product = float('inf')\n    # loop through each tuple in the set\n    for i, j in unique_tuples:\n        # calculate the product of the pair of tuples and store it in a variable\n        product = i * j\n        # check if the product is less than the current minimum product\n        if product < min_product:\n            # update the minimum product with the new product\n            min_product = product\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product and minimum value to be infinity\n    min_product = float('inf')\n    min_value = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Find the product of the values in the tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product and minimum value if the product is smaller\n            if product < min_product:\n                min_product = product\n                min_value = list1[i][0] * list1[j][1]\n    \n    # Return the minimum product and value as a tuple\n    return min_product, min_value"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables to keep track of the minimum and maximum values of the first element of each tuple\n    min1 = float('inf')\n    max1 = float('-inf')\n    \n    # iterate through the list of tuples and update the minimum and maximum values of the first element\n    for tup in list1:\n        if tup[0] < min1:\n            min1 = tup[0]\n        elif tup[0] > max1:\n            max1 = tup[0]\n    \n    # initialize variables to keep track of the minimum and maximum values of the second element of each tuple\n    min2 = float('inf')\n    max2 = float('-inf')\n    \n    # iterate through the list of tuples and update the minimum and maximum values of the second element\n    for tup in list1:\n        if tup[1] < min2:\n            min2 = tup[1]\n        elif tup[1] > max2:\n            max2 = tup[1]\n    \n    # initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # iterate through the list of tuples and calculate the product of the first element and the second element and update the minimum product if it's smaller than the current minimum product\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    \n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of any pair of tuples within the list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_value = float('inf')\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_value:\n                min_value = product\n                min_product = (list1[i], list1[j])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of any two tuples in the list.\n\n    Args:\n    list1: A list of tuples\n\n    Returns:\n    A float representing the minimum product of any two tuples in the list.\n\n    \"\"\"\n    min_product = float('inf')  # initialize minimum product to infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1]) < min_product:\n                min_product = (list1[i][0] * list1[j][1])\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Parameters:\n    list1 (list): a list of tuples.\n\n    Returns:\n    int: the minimum product of pairs of tuples.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product and list of tuples\n    min_product = float('inf')\n    tuples_list = []\n\n    # Loop through list of tuples\n    for i in range(len(list1)):\n        # Calculate product of first and second element of tuple\n        product = list1[i][0] * list1[i][1]\n\n        # Check if product is less than minimum product\n        if product < min_product:\n            # Update minimum product and list of tuples\n            min_product = product\n            tuples_list = [(list1[i][0], list1[i][1])]\n        # Check if product is equal to minimum product\n        elif product == min_product:\n            # Add tuple to list of tuples\n            tuples_list.append((list1[i][0], list1[i][1]))\n\n    # Return minimum product and list of tuples\n    return min_product, tuples_list\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the rest of the list and update min_val if an element is smaller than current min_val\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval[1:]:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError('Input must be a list')\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    if isinstance(listval[0], (int, float)):\n        return min(listval)\n    else:\n        return min_val([item for sublist in listval for item in sublist])"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    if len(listval) == 0:\n        raise ValueError(\"List is empty\")\n\n    min_val = listval[0]\n\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0] # initial value of minimum number\n    for i in range(1, len(listval)):\n        if listval[i] < min_num: # check if current number is smaller than minimum number\n            min_num = listval[i] # update minimum number\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = float('inf')\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(listval)\n    # Convert the set back to a list and sort it in ascending order\n    min_val_list = sorted(list(unique_set))\n    # Return the first element in the sorted list\n    return min_val_list[0]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    parts = re.findall(r'_(.)', word)\n    camel_parts = [part.upper() for part in parts]\n    return ''.join(camel_parts)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    return re.sub(r'_(.)', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lowercase\n    word = word.lower()\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word except for the first one\n    camel_case = words[0] + words[1:].capitalize()\n    # Join the words into a single string\n    camel_case = ''.join(camel_case)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub('_(.)', lambda m: m.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first letter of each word to uppercase\n    words[0] = words[0].upper()\n    # Join the words back into a string\n    camel_case_word = '_'.join(words)\n    # Capitalize the first letter of the camel case word\n    camel_case_word = camel_case_word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return camel_case.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the given word into its constituent parts\n    parts = re.findall(r'(\\w+)', word)\n\n    # Convert the parts to camel case\n    camel_word = parts[0]\n    for i in range(1, len(parts)):\n        camel_word += parts[i].capitalize()\n\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove any leading or trailing underscores from the word\n    word = word.strip('_')\n    # Split the word into a list of words based on underscores\n    words = word.split('_')\n    # Convert the first word to uppercase and append it to the camel case list\n    camel_case = [words[0].upper()]\n    # Convert the rest of the words to lowercase and append to the camel case list\n    for word in words[1:]:\n        camel_case.append(word.lower())\n    # Join the camel case list into a single string and return it\n    return ''.join(camel_case)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into individual words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # Join the words together into a camel case string\n    camel_case_word = ''.join(words)\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)', re.IGNORECASE)\n    return pattern.sub(lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        l (list): the list to remove odd numbers from.\n\n    Returns:\n        list: the list without odd numbers.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for number in l:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    Args:\n        list1 (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        Any: The nth element of the list.\n    \"\"\"\n    if not isinstance(list1, list) or not all(isinstance(x, tuple) for x in list1):\n        raise TypeError(\"Input must be a list of tuples.\")\n    if n < 0 or n >= len(list1):\n        raise IndexError(\"Index out of range.\")\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes in a list of tuples and an integer n.\n    It returns the nth element from the list, or None if there is not enough elements in the list.\n    \"\"\"\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Convert list of tuples to list of lists\n    list2 = [list(x) for x in list1]\n    # Check if nth element exists in list\n    if n <= len(list2):\n        return list2[n-1]\n    else:\n        return \"Invalid index\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes in a list of tuples and an integer n as input. It \n    returns the nth element from the list of tuples.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return \"List is too short\"\n    elif n <= 0:\n        return \"Invalid input\"\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # get the length of the list\n    length = len(list1)\n    # check if n is a valid index\n    if n > length or n < 0:\n        raise ValueError('Invalid index')\n    # return the nth element of the list\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each element in list2\n    freq_dict = {}\n    \n    # Iterate through list2 and add the frequency of each element to freq_dict\n    for element in list2:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    # Iterate through list1 and check whether any element in freq_dict exists in list1\n    for element in list1:\n        if element in freq_dict and freq_dict[element] > 0:\n            return True\n    \n    # If no element in freq_dict exists in list1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in list1 exists in list2 or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    if len(list1) > len(list2):\n        temp_list = list1\n        list1 = list2\n        list2 = temp_list\n\n    for element in list1:\n        if element in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether there is any value in the first list that is also present in the second list.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n\n    Args:\n    arr: a list of integers\n\n    Returns:\n    a tuple containing the two integers from the array with the highest product, and their product\n    \"\"\"\n\n    # Sort the input array in non-decreasing order\n    arr.sort(reverse=True)\n\n    # Initialize variables to store the two largest integers and their product\n    max1 = arr[0]\n    max2 = arr[1]\n    product = max1 * max2\n\n    # Check if the second largest integer is the same as the first largest integer\n    if arr[2] == max1:\n        return (max1, max2)\n\n    # Check if the second largest integer is the same as the second largest integer\n    elif arr[2] == max2:\n        return (max1, max2)\n\n    # If the second largest integer is not the same as either of the two largest integers,\n    # then we need to find the pair with the highest product that is not the same as either of the two largest integers\n    else:\n        # Calculate the product of the two largest integers and the third largest integer\n        third_largest = arr[2]\n        third_product = third_largest * max1 * max2\n\n        # Check if the third largest integer is the same as the first largest integer\n        if third_largest == max1:\n            return (max1, max2)\n\n        # Check if the third largest integer is the same as the second largest integer\n        elif third_largest == max2:\n            return (max1, max2)\n\n        # If the third largest integer is not the same as either of the two largest integers,\n        # then we need to find the pair with the highest product that is not the same as either of the two largest integers\n        else:\n            # Calculate the product of the two largest integers and the third largest integer\n            fourth_largest = arr[3]\n            fourth_product = fourth_largest * max1 * max2\n\n            # Check if the fourth largest integer is the same as the first largest integer\n            if fourth_largest == max1:\n                return (max1, max2)\n\n            # Check if the fourth largest integer is the same as the second largest integer\n            elif fourth_largest == max2:\n                return (max1, max2)\n\n            # If the fourth largest integer is not the same as either of the two largest integers,\n            # then we need to find the pair with the highest product that is not the same as either of the two largest integers\n            else:\n                # Calculate the product of the two largest integers and the third largest integer\n                fifth_largest = arr[4]\n                fifth_product = fifth_largest * max1 * max2\n\n                # Check if the fifth largest integer is the same as the first largest integer\n                if fifth_largest == max1:\n                    return (max1, max2)\n\n                # Check if the fifth largest integer is the same as the second largest integer\n                elif fifth_largest == max2:\n                    return (max1, max2)\n\n                # If the fifth largest integer is not the same as either of the two largest integers,\n                # then we need to find the pair with the highest product that is not the same as either of the two largest integers\n                else:\n                    # Calculate the product of the two largest integers and the third largest integer\n                    sixth_largest = arr[5]\n                    sixth_product = sixth_largest * max1 * max2\n\n                    # Check if the sixth largest integer is the same as the first largest integer\n                    if sixth_largest == max1:\n                        return (max1, max2)\n\n                    # Check if the sixth largest integer is the same as the second largest integer\n                    elif sixth_largest == max2:\n                        return (max1, max2)\n\n                    # If the sixth largest integer is not the same as either of the two largest integers,\n                    # then we need to find the pair with the highest product that is not the same as either of the two largest integers\n                    else:\n                        # Calculate the product of the two largest integers and the third largest integer\n                        seventh_largest = arr[6]\n                        seventh_product = seventh_largest * max1 * max2\n\n                        # Check if the seventh largest integer is the same as the first largest integer\n                        if seventh_largest == max1:\n                            return (max1, max2)\n\n                        # Check if the seventh largest integer is the same as the second largest integer\n                        elif seventh_largest == max2:\n                            return (max1, max2)\n\n                        # If the seventh largest integer is not the same as"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf') # Initialize the maximum product to negative infinity\n    \n    # Traverse through the array and find the maximum product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n    \n    # Return the pair with the maximum product\n    return (max_product, arr[arr.index(max_product)])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2 and arr[i]!= max1:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()  # sort the array in descending order\n    \n    # find the maximum product from the first two elements of the array\n    max1 = arr[0] * arr[1]\n    max2 = arr[-1] * arr[-2]\n    \n    # check if the maximum product is greater than the maximum product of the last two elements of the array\n    if max1 > max2:\n        return arr[0], arr[1]\n    else:\n        return arr[-1], arr[-2]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max_1 = max_2 = float('-inf')\n    min_1 = min_2 = float('inf')\n\n    for i in range(len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n\n        if arr[i] < min_1:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif arr[i] < min_2:\n            min_2 = arr[i]\n\n    return max_1 * max_2, min_1 * min_2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    min1 = float('inf')\n    for i in range(len(arr)): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n        elif arr[i] < min1: \n            min1 = arr[i] \n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n    n = len(arr)\n\n    # Calculate the maximum product of first and last elements\n    max1 = arr[n-1] * arr[n-2]\n\n    # Calculate the maximum product of the first and middle elements\n    max2 = arr[0] * arr[n//2]\n\n    # Calculate the maximum product of the middle and last elements\n    max3 = arr[n//2] * arr[n-1]\n\n    # Find the maximum of the three maximum products\n    max_product = max(max1, max2, max3)\n\n    # Initialize variables for the pair with the highest product\n    pair1 = None\n    pair2 = None\n\n    # Iterate through the sorted array and find pairs with the highest product\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_product:\n                pair1 = arr[i], arr[j]\n                pair2 = arr[i] * arr[j]\n\n    return pair1, pair2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max1 = arr[0]\n    max2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    \n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = [-float('inf'), -float('inf')]\n    min_product = float('inf')\n    min_pair = [-float('inf'), -float('inf')]\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n            elif product > min_product:\n                min_product = product\n                min_pair = [arr[i], arr[j]]\n    \n    return max_pair, min_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = []\n    for i in range(len(Input)): \n        for j in range(i+1, len(Input)): \n            if Input[i][0] == Input[j][0]: \n                common_first.append(Input[i][0])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    # create a set to store unique elements in the input list\n    unique_elements = set(Input)\n    # create an empty dictionary to store common elements with their count\n    common_elements = {}\n    # iterate through the unique elements and count the common elements with their first elements\n    for element in unique_elements:\n        count = 1\n        for tup in Input:\n            if tup[0] == element:\n                count += 1\n        common_elements[element] = count\n    # create a list to store the common elements with their count\n    result = []\n    # iterate through the sorted unique elements and their corresponding count and append it to the result list\n    for element in sorted(unique_elements):\n        if element in common_elements:\n            result.append((element, common_elements[element]))\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    # create an empty dictionary to store the common elements\n    common_dict = {}\n    \n    # loop through each tuple in the input list\n    for tup in Input: \n        # get the first element of the tuple\n        element = tup[0]\n        \n        # check if the element is already a key in the dictionary\n        if element in common_dict: \n            # if it is, add the tuple to the corresponding list for that key\n            common_dict[element].append(tup) \n        else: \n            # if it's not, create a new list for that key and add the tuple to it\n            common_dict[element] = [tup]\n    \n    # create an empty list to store the result\n    result = []\n    \n    # loop through each key in the dictionary\n    for key in common_dict: \n        # get the list of tuples for that key\n        value = common_dict[key]\n        \n        # if the list has only one element, append it to the result list\n        if len(value) == 1: \n            result.append(value[0]) \n        # if the list has multiple elements, loop through them and append the first element\n        else: \n            for tup in value: \n                result.append(tup[0])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store common first elements\n    common_first = {}\n    # loop through the list of tuples\n    for tup in Input:\n        # get the first element of the tuple\n        first = tup[0]\n        # if the first element is in the dictionary, increment its count\n        if first in common_first:\n            common_first[first] += 1\n        # otherwise, add the first element to the dictionary with a count of 1\n        else:\n            common_first[first] = 1\n    # find the maximum count of common first elements and return the first element of that tuple\n    max_count = max(common_first.values())\n    for key in common_first:\n        if common_first[key] == max_count:\n            return key\n    # if no common first elements are found, return None\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            common_element = None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for i in Input:\n        if len(common_first) == 0:\n            common_first.append(i[0])\n        elif i[0] == common_first[0]:\n            common_first.append(i[0])\n        elif i[0]!= common_first[0]:\n            common_first = []\n            common_first.append(i[0])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_first_elements.append((Input[i][0], [Input[i], Input[j]]))\n    return common_first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # find common first element in list of tuples\n    common = None\n    for t in Input:\n        if common is None:\n            common = t[0]\n        elif common == t[0]:\n            pass\n        else:\n            break\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_element = None\n    for tuple_ in Input:\n        if tuple_[0] == common_element:\n            return common_element\n        elif common_element is None:\n            common_element = tuple_[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n\n    # Iterate through the input list of tuples\n    for tup in Input: \n        # Extract the first element of the tuple\n        first_elem = tup[0]\n\n        # Check if the first element exists in the dictionary\n        if first_elem in common_dict: \n            # Increment the count of the element in the dictionary\n            common_dict[first_elem] += 1\n        else: \n            # Add the element to the dictionary with a count of 1\n            common_dict[first_elem] = 1\n\n    # Find the common element with the highest count\n    max_count = max(common_dict.values())\n    common_elem = [key for key, value in common_dict.items() if value == max_count][0]\n\n    # Return the common element\n    return common_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list with maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    # Iterating through the list to find the maximum length of the elements\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_element = None \n    for i in range(len(lst)): \n        if len(str(lst[i])) > max_len: \n            max_len = len(str(lst[i])) \n            max_element = lst[i] \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element having the maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element that has the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst: \n        if len(str(elem)) > max_len: \n            max_len = len(str(elem)) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Initialize variables to store the length of the current list and the maximum length so far\n    max_length = 1\n    current_length = 1\n\n    # Loop through the list and update the length variables as needed\n    for item in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the element with the maximum length\n    return lst[max_length-1]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = '' \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(s) for s in lst)\n    return max(s for s in lst if len(s) == max_len)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and rounds each number using the round() function, then adds up all the rounded numbers.\n    Finally, it multiplies the sum by the length of the list and returns the result.\n    '''\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    result = total_sum * len(lst)\n    return result\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        rounded_num = round(list1[i])\n        total_sum += rounded_num\n    print(total_sum*len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # Calculate the cube of the current even natural number and add it to the sum variable\n        sum += i*i*i\n\n    # Return the sum of the cubes of the even natural numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n\n    # Initialize variables\n    cube_sum = 0\n    num = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        num = i * 2  # Update the current number\n        cube_sum += num ** 3  # Add the cube of the number to the sum\n\n    return cube_sum  # Return the cube sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n, current_sum=0, current_cube_sum=0):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 1:\n        return current_cube_sum\n    else:\n        for i in range(2, n+1, 2):\n            current_sum += i\n            current_cube_sum += i**3\n        return cube_Sum(n-1, current_sum, current_cube_sum)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    sum_cube = 0\n    num = 2\n    while count < n:\n        cube = num * num * num\n        if cube % 2 == 0:\n            sum_cube += cube\n            count += 1\n        num += 2\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function calculates the sum of cubes of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 3\n        i += 2\n\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += item + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \"|\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]  # remove last delimiter"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = []\n    for i in test_tup:\n        result.append(str(i) + delimiter)\n    return \"\".join(result[:-1]) # Remove the last delimiter from the result."
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    result = result[:-1]\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '|'\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the given delimiter.\n    \"\"\"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n\n    average = sum/count\n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    total = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n    \n    average = total / count\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    avg = total / n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize sum to zero\n    sum_of_cubes = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n\n        # Calculate the cube of i\n        cube_i = i ** 3\n\n        # Add the cube to the sum of cubes\n        sum_of_cubes += cube_i\n\n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / n\n\n    # Return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i*i*i\n        count += 1\n    average = total/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1,n+1)] # calculate cubes of first n natural numbers\n    return sum(cubes)/len(cubes) # find the average of cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        result.append(string[rear_index])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_rear = []\n    for string in test_tuple:\n        extracted_rear.append(string[-1])\n    return extracted_rear"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if i % 2 == 0:\n            rear_index.append(test_tuple[i])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of integers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    # extract the date components\n    year, month, day = match.groups()\n    # convert the date components to the required format\n    new_dt = f'{day}-{month}-{year}'\n    # return the new date format\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use the re.sub() function to replace the pattern with the desired output format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # use the pattern to extract the year, month, and day components from the date string\n    year, month, day = re.findall(pattern, dt)[0]\n\n    # convert the year, month, and day components to the desired format\n    new_dt = f'{day}-{month}-{year}'\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the '-' with a blank space\n    dt = re.sub(r'-','', dt)\n    \n    # Convert the date to dd-mm-yyyy format\n    dt = dt.split()[2] + '-' + dt.split()[1] + '-' + dt.split()[0]\n    \n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = yyyy_mm_dd.match(dt)\n    if match:\n        return match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for the input date string\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the pattern to match the input date string\n    match = re.match(pattern, dt)\n    # Extract the year, month, and day from the matched groups\n    year, month, day = match.groups()\n    # Convert the year to a four-digit string and pad it with leading zeros if necessary\n    year = '{:04d}'.format(int(year))\n    # Build the new date string in the desired format\n    new_date = day + '-' + month + '-' + year\n    # Return the new date string\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Convert the input date format to match the pattern\n    dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    \n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern for matching a date in yyyy-mm-dd format\n    pattern = r\"^(\\d{4})-(\\d{2})-(\\d{2})$\"\n\n    # Use the pattern to match the date in the input string\n    match = re.match(pattern, dt)\n\n    # If the date is valid, convert it to dd-mm-yyyy format\n    if match:\n        year, month, day = match.groups()\n        new_dt = f\"{day}-{month}-{year}\"\n        return new_dt\n\n    # If the date is invalid, return None\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Iterate over array and sort elements with the gap\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap by 1\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            # Insert the current element in its correct position in the sorted part of the array.\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                # Swap elements if they are not in the correct position.\n                my_list[j - gap], my_list[j] = my_list[j], my_list[j - gap]\n                j -= gap\n        # Reduce the gap size.\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h + 1\n\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and temp < my_list[j - h]:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            for j in range(i, 0, -h):\n                if my_list[j] < my_list[j-h]:\n                    my_list[j], my_list[j-h] = my_list[j-h], my_list[j]\n        h = h//3"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple with the length of the smaller tuple\n    result_len = min(len(test_tup1), len(test_tup2))\n    # Create a list to store the elementwise and tuples\n    result = []\n    # Iterate through the list of tuples\n    for i in range(result_len):\n        # Append the elementwise and tuple to the result list\n        result.append((test_tup1[i] & test_tup2[i]))\n    # If the length of the smaller tuple is greater than the length of the result tuple,\n    # add the remaining elements of the smaller tuple to the result list\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1) - len(result)):\n            result.append(test_tup1[i])\n    elif len(test_tup2) > len(test_tup1):\n        for i in range(len(test_tup2) - len(result)):\n            result.append(test_tup2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Lengths of input tuples are not equal.\"\n    else:\n        return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # create a new empty tuple to store the element-wise and tuples\n    result_tup = ()\n    # loop through the two input tuples\n    for i in range(len(test_tup1)):\n        # extract the corresponding elements from each tuple\n        x = test_tup1[i]\n        y = test_tup2[i]\n        # perform the element-wise and operation and add the result to the new tuple\n        result = x & y\n        # add the result to the new tuple\n        result_tup += (result,)\n    # return the new tuple with element-wise and tuples\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the two input tuples\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # Extract the elementwise and of the two tuples\n        and_tup = tuple(x1 and x2 for x1, x2 in zip(tup1, tup2))\n        # Append the result to the list\n        result.append(and_tup)\n    # Return the list of results\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # create a new tuple for storing the elementwise and tuples\n    result_tup = ()\n    # iterate over the tuples and extract the elementwise and tuple\n    for i in range(len(test_tup1)):\n        # extract the two elements from the tuple\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        # perform the elementwise and operation and store the result in a new tuple\n        result_tup += (tup1_elem & tup2_elem,)\n    # return the new tuple of elementwise and tuples\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # check if the discriminant is negative\n    if disc < 0:\n        return \"There is no real solution for the directrix\"\n    \n    # calculate the root using the formula\n    root = (-b + math.sqrt(disc)) / (2*a)\n    \n    return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Defining the quadratic equation\n    quadratic_equation = b**2 - 4*a*c\n\n    # Checking if the quadratic equation has a real root\n    if quadratic_equation >= 0:\n        # Using the quadratic formula to find the two roots\n        discriminant = quadratic_equation**0.5\n        root1 = (-b + discriminant)/(2*a)\n        root2 = (-b - discriminant)/(2*a)\n\n        # Finding the directrix\n        directrix = (root1 + root2)/2\n\n        return directrix\n    else:\n        # If the quadratic equation has no real root, return None\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        directrix = (-b + delta**0.5) / (2*a)\n    else:\n        directrix = (-b - delta**0.5) / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4*a*c < 0:\n        print(\"No real roots\")\n    elif b**2 - 4*a*c == 0:\n        x = -b / (2 * a)\n        print(\"The directrix is\", x)\n    else:\n        x1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2 * a)\n        x2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2 * a)\n        print(\"The directrix is between\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is real\n    if disc >= 0:\n        # Calculate the two roots\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n\n        # Return the roots\n        return x1, x2\n    else:\n        # Return an error message\n        return 'Error: the discriminant is not real.'"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the slope and y-intercept of the parabola\n    slope = b/a\n    y_intercept = b\n\n    # Calculate the point on the perpendicular line that intersects the x-axis\n    x_intersect = (-b - (slope**2))/(2*slope)\n\n    # Calculate the point on the perpendicular line that intersects the x-axis\n    y_intersect = slope*x_intersect + y_intercept\n\n    return y_intersect"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola using the quadratic formula.\n    \"\"\"\n    if a == 0:\n        return \"No solution exists for a = 0.\"\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The directrix is between {root1:.2f} and {root2:.2f}.\"\n    elif discriminant == 0:\n        return f\"The directrix is {(-b)/(2*a):.2f}.\"\n    else:\n        return \"No real root exists.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    if discriminant > 0:\n        root1 = (-b + (discriminant**0.5)) / (2*a)\n        root2 = (-b - (discriminant**0.5)) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root1 = -b / (2*a)\n        root2 = root1\n        return root1, root2\n    else:\n        print(\"There is no real solution for the given equation.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant of the quadratic equation \n    discriminant = b**2 - 4*a*c \n\n    # Calculate the real and imaginary parts of the discriminant \n    discriminant_real = discriminant**0.5 \n    discriminant_imag = -discriminant_real \n\n    # Calculate the coefficients of the quadratic equation \n    quadratic_equation = [b**2 - 4*a*c, 2*b*c - 4*a*b, b**2 + 4*a*c] \n\n    # Calculate the roots of the quadratic equation \n    quadratic_roots = [(-quadratic_equation[0] + discriminant_real) / (2*quadratic_equation[1]), (-quadratic_equation[0] - discriminant_real) / (2*quadratic_equation[1])] \n\n    # Find the minimum and maximum values of the quadratic equation \n    quadratic_equation_min = quadratic_roots[quadratic_roots.index(min(quadratic_roots))] \n    quadratic_equation_max = quadratic_roots[quadratic_roots.index(max(quadratic_roots))] \n\n    # Calculate the intercept of the parabola \n    intercept = -quadratic_equation_min / 2 / a \n\n    # Calculate the slope of the parabola \n    slope = 2 * intercept / quadratic_equation_min \n\n    # Calculate the directrix of the parabola \n    directrix = (quadratic_equation_max - intercept) / (2 * a) \n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc > 0:\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        return \"The directrix of the parabola is between\", x1, \"and\", x2\n    elif disc == 0:\n        x = -b/(2*a)\n        return \"The directrix of the parabola is\", x\n    else:\n        return \"The directrix of the parabola is above or below the x-axis\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Check if there is a common element in two lists.\n\n    Args:\n        list1 (list): A list of elements.\n        list2 (list): Another list of elements.\n\n    Returns:\n        bool: True if there is a common element, False otherwise.\n    \"\"\"\n    if not list1 or not list2:\n        # Empty list\n        return False\n\n    # Use a set to store the common elements\n    common_set = set(list1) & set(list2)\n\n    return bool(common_set)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert lists to sets to remove duplicates and avoid duplicates in the intersection\n    list1_set = set(list1)\n    list2_set = set(list2)\n    # Find the intersection of the two sets\n    intersection = list1_set.intersection(list2_set)\n    # Check if there are any elements in the intersection\n    if len(intersection) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    \n    for element in list2:\n        if element in list1:\n            return True\n    \n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Check if the two lists have at least one element in common\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        if i in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for num in list1:\n        if num in list2 and num not in common_list:\n            common_list.append(num)\n    if len(common_list) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Returns True if there is at least one common element between two lists.\n    \"\"\"\n    # Check if the lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    else:\n        # Iterate through the lists and check for common elements\n        for elem in list1:\n            if elem in list2:\n                return True\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Create a set of the elements in list1\n    set1 = set(list1)\n    \n    # Iterate over the elements in list2 and check if they are in set1\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # If no common element was found, return False\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    base1_length = half_height * (base1 + base2)\n    base2_length = half_height * (base2 + base1)\n    return max(base1_length, base2_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) / 2 * height\n\n    # Calculate the length of the first half of the trapezium\n    half_length_1 = base1 / 2 * height\n\n    # Calculate the length of the second half of the trapezium\n    half_length_2 = base2 / 2 * height\n\n    # Determine the median length of the trapezium\n    if trapezium_length > half_length_1 + half_length_2:\n        median = half_length_1 + half_length_2\n    else:\n        median = (half_length_1 + half_length_2) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the length of the median trapezium using the formula:\n    length = 0.5 * (base1 + base2 + height)\n    \"\"\"\n    length = 0.5 * (base1 + base2 + height)\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1,base2,height = float(base1),float(base2),float(height)\n    area = (base1+base2)/2*height\n    if area < height:\n        print(\"The trapezium cannot form a trapezoid with the given base and height.\")\n        return None\n    elif area == height:\n        return (base1+base2)/2\n    else:\n        return math.sqrt(area) - (base1+base2)/2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the length of the base of the first half\n    half_base1 = base1 / 2\n\n    # calculate the length of the base of the second half\n    half_base2 = base2 / 2\n\n    # calculate the length of the trapezium\n    trapezium_length = half_base1 + half_base2\n\n    # calculate the area of the trapezium\n    area = trapezium_length * height\n\n    # calculate the perimeter of the trapezium\n    perimeter = half_base1 + half_base2 + height\n\n    # calculate the median length of the trapezium\n    median_length = 0.5 * (trapezium_length + perimeter / area)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2)\n\n    # Calculate the area of the trapezium\n    trapezium_area = 0.5 * (base1 * height + base2 * height)\n\n    # Calculate the height of the trapezium\n    trapezium_height = 0.5 * height\n\n    # Calculate the trapezium perimeter\n    trapezium_perimeter = 2 * (base1 + base2 + height)\n\n    # Calculate the trapezium diameter\n    trapezium_diameter = 2 * trapezium_length\n\n    # Calculate the trapezium volume\n    trapezium_volume = trapezium_area / trapezium_height\n\n    # Calculate the trapezium surface area\n    trapezium_surface_area = 2 * (trapezium_length * height + trapezium_length * trapezium_height)\n\n    # Calculate the median length of the trapezium\n    median_trapezium_length = trapezium_length\n\n    # Calculate the median area of the trapezium\n    median_trapezium_area = trapezium_area\n\n    # Calculate the median height of the trapezium\n    median_trapezium_height = trapezium_height\n\n    # Calculate the median perimeter of the trapezium\n    median_trapezium_perimeter = trapezium_perimeter\n\n    # Calculate the median diameter of the trapezium\n    median_trapezium_diameter = trapezium_diameter\n\n    # Calculate the median volume of the trapezium\n    median_trapezium_volume = trapezium_volume\n\n    # Calculate the median surface area of the trapezium\n    median_trapezium_surface_area = trapezium_surface_area\n\n    return median_trapezium_length, median_trapezium_area, median_trapezium_height, median_trapezium_perimeter, median_trapezium_diameter, median_trapezium_volume, median_trapezium_surface_area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * math.sin(math.pi/6) * height\n\n    # Calculate the sum of the sides of the trapezium\n    trapezium_sides = 2 * area + 2 * base1 + 2 * base2 + 2 * height\n\n    # Calculate the median by sorting the trapezium sides in ascending order\n    sorted_sides = sorted(trapezium_sides)\n\n    # Calculate the middle element of the sorted sides\n    middle_element = sorted_sides[len(sorted_sides)//2]\n\n    # Calculate the median by taking the average of the top and bottom halves of the trapezium\n    median = middle_element / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the trapezium side\n    long_side = (2 * area) ** 0.5\n\n    # Calculate the length of the shorter side\n    short_side = (2 * height * base1) ** 0.5\n\n    # Find the length of the trapezium's midpoint\n    mid_point = long_side + short_side\n\n    # Return the median value as the midpoint plus or minus 1/4th the difference between the long and short sides\n    return mid_point + 0.25 * (long_side - short_side)\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    base = 0.5 * (base1 + base2)\n    length = 0.5 * (area ** 0.5)\n    \n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the lengths of the sides of the trapezium\n    side1 = 0.5 * base1\n    side2 = 0.5 * (base1 + base2)\n    side3 = 0.5 * height\n\n    # Calculate the lengths of the three sides using Heron's formula\n    s = (side1 + side2 + side3) / 2\n    area = 0.5 * base1 * height\n    perimeter = side1 + side2 + side3\n    semiperimeter = 0.5 * perimeter\n\n    # Calculate the area of the trapezium using Heron's formula\n    area_trapezium = area * (semiperimeter ** 2)\n\n    # Calculate the hypotenuse of the triangle inscribed in the trapezium\n    hypotenuse = math.sqrt(area_trapezium / (math.sin(math.pi / 3)))\n\n    # Calculate the length of the midpoint of the hypotenuse\n    midpoint = 0.5 * hypotenuse\n\n    # Calculate the length of the smaller side of the trapezium\n    smaller_side = math.sqrt(s ** 2 - midpoint ** 2)\n\n    # Calculate the length of the larger side of the trapezium\n    larger_side = math.sqrt(s ** 2 - smaller_side ** 2)\n\n    # Calculate the length of the shorter side of the trapezium\n    shorter_side = math.sqrt(s ** 2 - larger_side ** 2)\n\n    # Find the length of the trapezium's base\n    base = 0.5 * (smaller_side + longer_side)\n\n    # Calculate the length of the trapezium's height\n    height = 0.5 * (smaller_side + shorter_side)\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = 0.5 * base\n    side2 = 0.5 * (base + side1)\n    side3 = 0.5 * height\n\n    # Calculate the lengths of the three sides using Heron's formula\n    s = (side1 + side2 + side3) / 2\n    area = 0.5 * base * height\n    perimeter = side1 + side2 + side3\n    semiperimeter = 0.5 * perimeter\n\n    # Calculate the area of the trapezium using Heron's formula\n    area_trapezium = area * (semiperimeter ** 2)\n\n    # Calculate the hypotenuse of the triangle inscribed in the trapezium\n    hypotenuse = math.sqrt(area_trapezium / (math.sin(math.pi / 3)))\n\n    # Calculate the length of the midpoint of the hypotenuse\n    midpoint = 0.5 * hypotenuse\n\n    # Calculate the length of the smaller side of the trapezium\n    smaller_side = math.sqrt(s ** 2 - midpoint ** 2)\n\n    # Calculate the length of the larger side of the trapezium\n    larger_side = math.sqrt(s ** 2 - smaller_side ** 2)\n\n    # Calculate the length of the shorter side of the trapezium\n    shorter_side = math.sqrt(s ** 2 - larger_side ** 2)\n\n    # Find the length of the trapezium's base\n    base = 0.5 * (smaller_side + longer_side)\n\n    # Calculate the length of the trapezium's height\n    height = 0.5 * (smaller_side + shorter_side)\n\n    # Calculate the median length of the trapezium\n    median = 0.5 * (base + height)\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = False\n    for i in arr:\n        if number > i:\n            greater_than = True\n            break\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return any(num > number for num in arr)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"{number} is greater than {arr[i]} at index {i}\")\n            return True\n    print(f\"{number} is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n\n    # Loop through the array and check if the number is greater than each element\n    for num in arr:\n        if num > number:\n            return True\n    \n    # If no greater elements are found, the number is not greater\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    if count == 0:\n        return \"The number is not greater than any element in the array.\"\n    else:\n        return \"The number is greater than all the elements in the array.\""
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # convert the entered number to a set so we can check if it's a member of the array\n    entered_number_set = set([number])\n\n    # loop through the array and check if each element is a member of the set\n    for i in arr:\n        if i in entered_number_set:\n            return True\n\n    # if we reach this point, it means the entered number is not greater than any of the elements in the array\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a(b)+\\b\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\b\\w*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a(?=\\w)\"\n    return re.search(pattern, text)\n\ntext = \"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"\nresult = text_match_one(text)\n\nif result:\n    print(result.group())\nelse:\n    print(\"No match found\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b){1,}'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    # Define the pattern to match the given pattern\n    pattern = r'a.*b+'\n\n    # Search for the pattern in the given text using the re module\n    result = re.search(pattern, text)\n\n    # If the pattern is found, return the matched string\n    if result:\n        return result.group()\n\n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba(?P<b>(?:b|B){1,})\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('b')\n    else:\n        return None\n\ntext = \"Some text with abbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabbabaabbabaabbabbabaabbabaabbabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabbabaabb"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab*a'\n    result = re.findall(pattern, text)\n    if result:\n        return 'Match found'\n    else:\n        return 'No match found'"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert number to string\n    str_n = str(n)\n    \n    # Find last digit of string\n    last_digit = str_n[-1]\n    \n    # Convert last digit to int and return it\n    return int(last_digit)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function finds the last digit of a given number.\n    '''\n    # Convert the number to a string\n    number = str(n)\n    \n    # Get the last character of the string\n    last_char = number[-1]\n    \n    # Convert the last character to an integer\n    last_int = int(last_char)\n    \n    # Return the last integer digit\n    return last_int"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the input number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    # Using string slicing to get the last digit of the given number\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n\n    neg_list = []\n\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Create an empty list to store negative numbers\n    neg_list = []\n    # Loop through each element in the given list\n    for num in list1:\n        # Check if the element is negative and append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # Return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_num = []\n    for i in list1:\n        if i < 0:\n            neg_num.append(i)\n    return neg_num"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of integers as an argument and returns a new list containing only the negative numbers from the original list.\n    \"\"\"\n    neg = []\n    for num in lst:\n        if num < 0:\n            neg.append(num)\n    return neg"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of integers as input and returns a new list of negative integers.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit() or int(char)%2==0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the even characters\n    even_chars = \"\"\n    # iterate through each character in the string\n    for char in string:\n        # if the character is odd, add it to the even_chars string\n        if char % 2!= 0:\n            even_chars += char\n    # return the even_chars string\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if ord(char) % 2 == 1:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isdigit() and int(char) % 2!= 0:\n            continue\n        new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                bidirectional_pairs += 1\n\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n                test_list[i] = (test_list[i][0], test_list[i][1])\n                test_list[j] = (test_list[j][0], test_list[j][1])\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1:] and (test_list[j][0], test_list[i][0]) in test_list[j][1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] == test_list[j][0]) and (test_list[j][1] == test_list[i][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # initialize two counters for each tuple in the list\n    forward_count = [0] * len(test_list)\n    reverse_count = [0] * len(test_list)\n\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through the remaining tuples to find pairs with the current one\n        for j in range(i+1, len(test_list)):\n            # check if the current tuple is a pair with the next one\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                # increment the forward count for the current tuple\n                forward_count[i] += 1\n                # increment the reverse count for the next tuple\n                reverse_count[j] += 1\n\n    # return the sum of forward and reverse counts\n    return sum(forward_count) + sum(reverse_count)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    bidirectional_pairs = 0\n    for i in range(len(test_list) - 1):\n        if (test_list[i], test_list[i + 1]) in test_list[i + 1:] and (test_list[i + 1], test_list[i]) in test_list[:i]:\n            bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        if type(i) == int:\n            total += i\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    \n    # Check if all the numbers are same\n    if all(isinstance(num, int) for num in L):\n        single_num = L[0]\n        for num in L:\n            single_num *= num\n        return single_num\n    \n    # Check if all the numbers are positive\n    if all(num > 0 for num in L):\n        return sum(L)\n    \n    # Check if all the numbers are positive integers\n    if all(isinstance(num, int) and num > 0 for num in L):\n        return sum(L)\n    \n    # If none of the above conditions are met, return None\n    return None"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each number in the list\n    for num in L:\n        # Check if the number is a multiple of 10\n        if num % 10 == 0:\n            # If it is, add it to the result string\n            result += str(num)\n    # If the result string is empty, return None\n    if len(result) == 0:\n        return None\n    # If it's not empty, return the integer value of the result string\n    else:\n        return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for i in L:\n        single_num += i\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total\n"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize the result variable\n    result = 0\n    # Loop through each element of the list\n    for num in L:\n        # Check if the element is multiple of 10\n        if num % 10 == 0:\n            # If it is, add the last digit to the result variable\n            result += num % 10\n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num % 2 == 0:\n            result += num\n        else:\n            result -= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result to 0\n    result = 0\n    \n    # iterate over the list of integers\n    for num in L:\n        # add the current number to the result\n        result += num\n        \n    # return the result\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all adverbs in the given sentence\n    adverbs = re.findall(r'\\b\\w*[a-z]*[aeiou]\\w*[!?]*[a-z]*\\b', text)\n\n    # Sort the adverbs by their position in the sentence\n    adverbs.sort(key=lambda x: x.lower())\n\n    # Print the adverbs and their positions in the sentence\n    for i, adv in enumerate(adverbs, 1):\n        print(f'{i}. {adv}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression to find adverbs\n    pattern = r'\\b(\\w*)\\s+(?:to|for|about|since|until|during|among|between)\\s+(\\w*)\\b'\n\n    # Search the text for matches\n    matches = re.findall(pattern, text)\n\n    # Loop through the matches and store the adverb and its position in a dictionary\n    adverbs = {}\n    for match in matches:\n        # Remove whitespace from the match to make it easier to compare\n        adverb = match[0].strip()\n        position = match[1].strip()\n        if adverb in adverbs:\n            adverbs[adverb].append(position)\n        else:\n            adverbs[adverb] = [position]\n\n    # Sort the dictionary by adverb and position\n    sorted_dict = dict(sorted(adverbs.items()))\n\n    # Print the sorted dictionary\n    for adverb, positions in sorted_dict.items():\n        print(f\"{adverb}: {', '.join(positions)}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*adverb\\w*\\b', text.lower())\n\n    # Check if there are any adverbs in the sentence\n    if not adverbs:\n        return None\n\n    # Find the positions of the adverbs in the sentence\n    adverb_positions = []\n    for index, word in enumerate(text.split()):\n        if word in adverbs:\n            adverb_positions.append(index)\n\n    # Find the adverb with the minimum position in the sentence\n    min_position = min(adverb_positions)\n\n    # Find the adverb with the maximum position in the sentence\n    max_position = max(adverb_positions)\n\n    # Find the adverb with the minimum and maximum positions in the sentence\n    min_and_max_position = sorted([min_position, max_position])\n\n    # Return the adverb and their positions\n    return adverbs[min_and_max_position[0]], adverb_positions[min_and_max_position[0]], adverbs[min_and_max_position[1]], adverb_positions[min_and_max_position[1]]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b(again|most|well|well-enough|already|rather|still|right\\s*now|finally|mostly|then|already|directly|surely|obviously|actually|absolutely|always|correctly|entirely|conclusively|amazingly|nevertheless|practically|perhaps|certainly|already)\\b'\n    matches = re.findall(adverb_pattern, text)\n    if len(matches) > 0:\n        adverbs = matches[0]\n        pos = text.find(adverbs)\n        return adverbs, pos\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    adverbs = re.findall(r'\\b(adverb)\\b', text, flags=re.IGNORECASE)\n    \n    for i, adv in enumerate(adverbs):\n        print(f'{adv} found at position {i+1}')\n    \n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match an adverb\n    pattern = r'\\b(also|also\\s|also,\\s|also\\.|also\\?|also!|also-)\\b'\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, print the adverb and its position in the sentence\n    if match:\n        print(match.group())\n        print(match.start())"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Remove all non-alphanumeric characters from the text\n    text = re.sub(r'\\W+', '', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    \n    # Loop through the words in the text\n    for i, word in enumerate(words):\n        # Check if the current word is an adverb\n        if word in ['very', 'great', 'amazing', 'best', 'excellent']:\n            # If it is, append the position to the adverbs list\n            adverbs.append(i)\n            \n    # If there are no adverbs in the text, return None\n    if not adverbs:\n        return None\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the sentence into words\n    words = text.split()\n    \n    # Initialize a list to store adverbs and their positions\n    adverbs = []\n    \n    # Loop through the words and check if they are adverbs\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'\\b[A-Za-z]{2,}\\b', word):\n            # If it is, add its position to the list of adverbs\n            adverbs.append(i)\n    \n    # If there are no adverbs in the sentence, return None\n    if not adverbs:\n        return None\n    \n    # Sort the list of adverbs in ascending order\n    adverbs.sort()\n    \n    # Return the first adverb and its position\n    return (words[adverbs[0]], adverbs[0])"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the pattern to match adverbs\n    pattern = r'\\b\\w*adverb\\w*\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Create a dictionary to store adverbs and their positions\n    adverb_positions = {}\n\n    # Loop through all matches and add adverbs and their positions to the dictionary\n    for match in matches:\n        adverb = match[0].lower()\n        position = text.lower().index(match.lower())\n\n        # Add the adverb and position to the dictionary\n        adverb_positions[adverb] = position\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the text\n    adverbs = re.findall(r'\\b(really|so|very|well|very|well|really|so|very|well)\\b', text, re.IGNORECASE)\n    # If no adverbs found, return None\n    if not adverbs:\n        return None\n    # Find their positions in the text\n    adverb_positions = []\n    for i, word in enumerate(text.split()):\n        if word.lower() in adverbs[0].lower():\n            adverb_positions.append(i)\n    # Return the adverbs and their positions\n    return adverbs, adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6*l**2) + (l**3) + (3*l**2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube using Heron's formula\n    s = (l ** 2) * 6\n    \n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    surface_area = 2 * area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l # Formula to find surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a side of a cube as input and returns the surface area of the cube.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array to store positive numbers\n    positive = array('i')\n    \n    # Iterate through the array and add positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n            \n    # Find the ratio of positive numbers to the total number of numbers\n    total = len(nums)\n    positive_ratio = positive.count(0) / total\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i', [0])\n    negative = array('i', [0])\n    zero = array('i', [0])\n    for num in nums:\n        if num > 0:\n            positive.append(1)\n        elif num < 0:\n            negative.append(1)\n        else:\n            zero.append(1)\n    return (positive[0]/(positive[0]+negative[0]+zero[0]),\n            negative[0]/(positive[0]+negative[0]+zero[0]),\n            zero[0]/(positive[0]+negative[0]+zero[0]))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize an array to store the count of positive numbers\n    count = array('i', [0])\n    # Loop through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n    # Calculate the ration of positive numbers and return it\n    pos_ratio = count[0] / len(nums)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count_positive = 0\n    count_negative = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n        else:\n            count_negative += 1\n    count_total = len(nums)\n    positive_ratio = count_positive / count_total\n    negative_ratio = count_negative / count_total\n    return positive_ratio, negative_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    if pos_count == 0:\n        return 0.0\n    else:\n        return (pos_count / (pos_count + neg_count)) * 100.0"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to a numpy array\n    arr = array('i', nums)\n    \n    # Count the number of positive numbers in the array\n    pos_count = len([x for x in arr if x > 0])\n    \n    # Calculate the ration of positive numbers in the array\n    pos_ratio = pos_count / len(arr)\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_nums = array('i')\n    neg_nums = array('i')\n    \n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n        else:\n            neg_nums.append(num)\n    \n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    pos_ratio = pos_count / (pos_count + neg_count)\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Create an array of integers to store positive numbers\n    positive = array('i')\n\n    # Iterate through the array and add only the positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n\n    # Calculate the ration of positive numbers\n    positive_count = len(positive) / len(nums)\n\n    # Return the ration of positive numbers as a float\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list\n    num_list = nums.tolist()\n    # Initialize counters for positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n    # Loop through the list\n    for num in num_list:\n        # Check if the number is positive\n        if num > 0:\n            pos_count += 1\n        # Check if the number is negative\n        elif num < 0:\n            neg_count += 1\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(num_list)\n    # Return the result\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize counters\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    # iterate over the array and count positive, negative, and zero numbers\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n            \n    # calculate the ration of positive numbers and return it\n    if pos_count == 0:\n        return 0\n    else:\n        return round((pos_count/len(nums)), 3)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    # Initialize a variable to keep track of the largest negative number\n    largest = float('-inf')\n\n    # Loop through each element in the list\n    for num in list1:\n        # Check if the current number is negative and larger than the current largest negative number\n        if num < 0 and num > largest:\n            largest = num\n\n    # Return the largest negative number found\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    neg_num = -1\n    for num in list1:\n        if num < 0 and num > neg_num:\n            neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = list1[0] \n    for num in list1: \n        if num < 0 and num > largest_neg: \n            largest_neg = num \n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        new_t = tuple(t[i:i+K] for i in range(len(t)))\n        result.append(new_t)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tuple(tup[:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for item in test_list:\n        trimmed_item = tuple(item[:-K])\n        trimmed_list.append(trimmed_item)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # initialize an empty list to store trimmed tuples\n    trimmed_list = []\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # initialize an empty list to store the trimmed values\n        trimmed_tup = []\n        \n        # loop through each value in the tuple\n        for val in tup:\n            # if the value is a list, trim it by K\n            if isinstance(val, list):\n                trimmed_val = trim_tuple(val, K)\n            # otherwise, trim the value by K\n            else:\n                trimmed_val = val[K:]\n            \n            # add the trimmed value to the trimmed tuple list\n            trimmed_tup.append(trimmed_val)\n        \n        # add the trimmed tuple to the trimmed list\n        trimmed_list.append(trimmed_tup)\n    \n    # return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to store trimmed tuples\n    trimmed_tuples = []\n    \n    # Loop through each tuple in the test list\n    for tuple in test_list:\n        # Use the tuple packing method to unpack the tuple\n        unpacked_tuple = tuple\n        # Trim each tuple by K\n        trimmed_tuple = tuple[K:]\n        # Use the tuple packing method again to pack the trimmed tuple\n        trimmed_unpacked_tuple = tuple(*trimmed_tuple)\n        # Add the trimmed unpacked tuple to the list of trimmed tuples\n        trimmed_tuples.append(trimmed_unpacked_tuple)\n        \n    # Return the list of trimmed tuples\n    return trimmed_tuples"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n\n    for i in range(len(test_list)):\n        for j in range(K):\n            if i!= j:\n                test_list[i] = tuple(filter(lambda x: x!= j, test_list[i]))"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[K:])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        result.append(tup)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the two tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Two tuples must have same length.\")\n        return\n    \n    # Initialize an empty list to store the multiplication result\n    result = []\n    \n    # Perform index multiplication\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    # Return the multiplication result\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        print(test_tup1[i] * test_tup2[i])"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have same length\")\n        return\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize a new empty list to store the multiplication result\n    result = []\n    \n    # iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # perform index wise multiplication\n        result.append(test_tup1[i] * test_tup2[i])\n        \n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the number of elements in the two tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        return \"The number of elements in both tuples should be same.\"\n    \n    # Initialize the result tuple with length of the shortest tuple\n    result_tup = (0,) * min(len(test_tup1), len(test_tup2))\n    \n    # Perform index wise multiplication of the two tuples\n    for i in range(len(test_tup1)):\n        result_tup = tuple(map(lambda x, y: x * y, test_tup1[i], test_tup2[i]))\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # initialize an empty list to store the result\n    result = []\n\n    # iterate over each element in the first tuple\n    for i in range(len(test_tup1)):\n        # perform index wise multiplication and append the result to the result list\n        result.append(test_tup1[i] * test_tup2[i])\n\n    # return the result list\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # check if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # iterate over the indices of the two tuples\n        for i in range(len(test_tup1)):\n            # multiply the corresponding elements of the two tuples\n            result.append(test_tup1[i] * test_tup2[i])\n        # return the result list\n        return result\n    else:\n        # raise an error if the length of the two tuples is not equal\n        raise ValueError(\"The length of the two tuples should be equal.\")"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tuple = tuple(count_dict.items())\n\n    count_tup = tuple(tup[i] for i in range(len(tup)) if i in count_dict)\n\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two parameters, tup and lst, which are tuples and lists respectively. \n    It uses the Counter() function from the collections module to count the frequency of each element in lst in tup.\n    The function returns a dictionary where the keys are elements from lst and the values are their respective counts in tup.\n    '''\n    freq = Counter(tup)\n    count_dict = {}\n    for i in freq.keys():\n        count_dict[i] = freq[i]\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple into a list\n    tup_list = list(tup)\n\n    # Use Counter to count the occurrences of each element in the list\n    count_dict = Counter(tup_list)\n\n    # Use a dictionary comprehension to create a dictionary where the keys are the elements of the list\n    # and the values are their count in the tuple\n    count_dict = {k: v for k, v in count_dict.items()}\n\n    # Count the occurrences of each element in the original list\n    original_count = Counter(lst)\n\n    # Use a dictionary comprehension to create a dictionary where the keys are the elements of the list\n    # and the values are their count in the original list\n    original_count_dict = {k: v for k, v in original_count.items()}\n\n    # Combine the dictionaries to get the final dictionary with the counts of each element\n    final_dict = {**count_dict, **original_count_dict}\n\n    # Return the final dictionary\n    return final_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    freq = Counter(lst)\n    return tup, freq"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in a tuple and a list as input, and returns a dictionary\n    where the keys are the elements of the tuple and the values are the number of times\n    each element appears in the list.\n    '''\n    count_dict = {}\n    for item in tup:\n        count_dict[item] = lst.count(item)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    for i in tup:\n        print(i, c[i])"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup).most_common()\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict_tup = Counter(tup)\n    count_dict_tup.subtract(count_dict)\n    count_dict_tup = dict(count_dict_tup)\n    return count_dict_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)  # Counter function to count the elements of the list\n    return tuple((tup[i], count_dict[lst[i]]) for i in range(len(tup)))  # Using tuple packing and unpacking to get the count of each element in the tuple\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two parameters: \n    - tup: a tuple of elements\n    - lst: a list of elements\n    \n    It uses the Counter class from the collections module to count the occurrences of all elements in the list \n    in the tuple.\n    \n    The function returns a dictionary with the counts of each element in the tuple.\n    \n    Example:\n    count_Occurrence((1, 2, 3, 4), [1, 2, 3, 4, 5])\n    Output: {'1': 2, '2': 2, '3': 2, '4': 1, '5': 1}\n    '''\n    count_dict = Counter(tup)\n    for num in lst:\n        count_dict[num] += 1\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    # loop through each element in the list\n    for num in nums:\n        # find the cube of the current element and append it to the result list\n        result.append(num**3)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the perrin numbers from 1 to n.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s += 1/i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum\n\nprint(cal_sum(10))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1) // (n - 1) + cal_sum(n - 1)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of Perrin numbers.\n    '''\n\n    perrin_numbers = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    sum_perrin = 0\n    for num in perrin_numbers:\n        sum_perrin += num\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (4*i-1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    return sum(perrin_nums[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n\n    Args:\n    n: int\n        The number of terms to generate.\n\n    Returns:\n    int\n        The sum of the perrin numbers.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n    # loop n times to generate the perrin numbers\n    for i in range(1, n+1):\n        # calculate the i-th perrin number\n        perrin = (4*i*i - 3*i + 1) // 2\n        # add the perrin number to the sum\n        total += perrin\n    # return the sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers up to n.\n    \"\"\"\n    perrin_numbers = []\n    for i in range(1, n+1):\n        if i % 13 == 0:\n            perrin_numbers.append(i)\n    perrin_sum = sum(perrin_numbers)\n    return perrin_sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n\n    # initialize an empty list to store extracted strings\n    extracted_strings = []\n\n    # iterate through the list of strings\n    for i in range(len(l)):\n\n        # check if the length of the current string is equal to the specified size\n        if len(l[i]) == l[0]:\n\n            # if yes, add the string to the extracted_strings list\n            extracted_strings.append(l[i])\n\n    # return the extracted strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) <= size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the size of the strings that the user wants to extract.\n    It returns a list of the extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= size:\n            extracted_strings.append(str_list[i])\n        else:\n            extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a list of strings from a given list of string values\n    with the specified size.\n    \"\"\"\n    # Initialize an empty list to store extracted strings\n    extracted_str_list = []\n    # Loop through the list of strings\n    for string in str_list:\n        # Check if the current string is longer than the specified size\n        if len(string) > size:\n            # If yes, append only the first `size` characters of the string to the extracted_str_list\n            extracted_str_list.append(string[:size])\n        else:\n            # If no, append the entire string to the extracted_str_list\n            extracted_str_list.append(string)\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer as input and returns a new list of strings of\n    the specified size. If the input list is shorter than the specified size, the function returns a list of\n    the same size as the input list.\n    '''\n    extracted_str = []\n    for i in range(len(str_list)):\n        if len(extracted_str) < size:\n            extracted_str.append(str_list[i])\n        else:\n            break\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        extracted_strings.append(l[i][:l[i].find(str)])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    This function takes a list of string values and a size as input and returns a list of specified size string values.\n    \"\"\"\n    return [str[i:i+l] for i in range(0, len(str), l)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a specified size of strings from a list of string values.\n    '''\n    string_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            string_list.append(str_list[i])\n    return string_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    return text2.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Define a regular expression pattern to match whitespace characters\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to remove all whitespace characters from the string\n    text2 = pattern.sub('', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove whitespaces using regex\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove whitespaces using strip method\n    # text1 = text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Remove all whitespaces using regular expression\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (actual_cost - sale_amount)/actual_cost*100\n    if loss_percentage < 0:\n        loss_amount = 0\n    else:\n        loss_amount = sale_amount*loss_percentage/100\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost - sale_amount < 0:\n        loss = abs(actual_cost - sale_amount)\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_per = actual_cost / sale_amount # calculate loss percentage\n    if loss_per > 0: # if loss percentage is greater than 0\n        loss_amount = (loss_per * sale_amount) - actual_cost # calculate loss amount\n    else:\n        loss_amount = 0 # if loss percentage is equal to or less than 0, no loss\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        loss = sale_amount - actual_cost \n        return loss \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactorsSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactorsSum += i\n    return evenFactorsSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    # Loop through odd factors of n\n    for i in range(1, int(math.sqrt(n))+1, 2):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If it is, add i to sum\n            sum += i\n    # Return the sum of even factors of n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Initialize sum variable to zero\n    total_sum = 0\n\n    # Loop through odd numbers up to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # Check if i is evenly divisible by n\n        if n % i == 0:\n            # If it is, add it to the total sum\n            total_sum += i\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of its even factors.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of its even factors.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the number from 2 to the square root of the input number\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if the input number is divisible by i\n        if n % i == 0:\n            # If it is, check if the remainder is 0 (meaning i is even)\n            if n % (2*i) == 0:\n                # If it is, add i to the sum\n                sum += i\n    \n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through odd numbers from 3 to n/2 (inclusive)\n    for i in range(3, n//2+1, 2): \n        # check if i is even\n        if i % 2 == 0: \n            # add i to sum\n            sum += i \n\n    # return sum\n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Calculate the sum of even factors using the math module\n    evenSum = sum(i for i in range(2, n+1, 2))\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\w+z\\w+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+[zZ]\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the given month number is between 1 and 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n\n    # Check if the given month number contains 31 days\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        if monthnum % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and checks whether the number contains 31 days or not.\n    \n    Parameters:\n    monthnum (int): The month number to be checked.\n    \n    Returns:\n    bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n\n    # Convert month number to month name\n    month_name = get_month_name(monthnum)\n    \n    # Check if the month name has 31 days\n    if month_name == 'January' or month_name == 'March' or month_name == 'May' or month_name == 'July' or month_name == 'August' or month_name == 'October' or month_name == 'December':\n        return True\n    else:\n        return False\n\n\ndef get_month_name(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns the name of the corresponding month.\n    \n    Parameters:\n    monthnum (int): The month number to be converted to its name.\n    \n    Returns:\n    str: The name of the corresponding month.\n    \"\"\"\n    \n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    return months[monthnum - 1]"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # check that the month number is a valid integer between 1 and 12\n    if not isinstance(monthnum, int) or monthnum < 1 or monthnum > 12:\n        raise ValueError(\"The month number must be an integer between 1 and 12.\")\n\n    # check whether the month number is divisible by 10 or not\n    if monthnum % 10 == 0:\n        raise ValueError(\"The month number cannot be divisible by 10.\")\n\n    # check whether the month number contains 30 days or not\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return \"28 or 29\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"30\"\n    else:\n        return \"31\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 12 == 0:\n        return True\n    elif monthnum2 % 12 in (1, 3, 5, 7, 8, 10, 12):\n        return False\n    elif monthnum2 % 12 == 2:\n        return True if monthnum2 % 100!= 0 else False\n    elif monthnum2 % 12 == 4:\n        return True\n    elif monthnum2 % 12 == 6:\n        return True\n    elif monthnum2 % 12 == 9:\n        return True\n    elif monthnum2 % 12 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    # iterate over each string in the list\n    for i in range(len(stringlist)):\n        # split the string into a list of characters\n        charlist = list(stringlist[i])\n        # reverse the list of characters\n        charlist.reverse()\n        # convert the list of characters back to a string and update the string in the list\n        stringlist[i] = ''.join(charlist)"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_len = float('inf')\n    min_sublist = None\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j]) < min_len:\n                min_len = len(lst[i:j])\n                min_sublist = lst[i:j]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    \n    for sublist in lst: \n        if len(sublist) < min_len: \n            min_len = len(sublist) \n            min_sublist = sublist\n    \n    return min_sublist "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 99999999999\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    # create an empty list to store the sublists\n    sublists = []\n\n    # loop through the list\n    for i in range(len(lst)):\n        # create a new list containing the current element and all previous elements\n        sublist = lst[i:i+1]\n        # check if the sublist is already in the list\n        if sublist not in sublists:\n            # if not, add it to the list\n            sublists.append(sublist)\n\n    # find the sublist with the minimum length\n    min_sublist = min(sublists, key=len)\n\n    # return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize variables\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    # iterate through the list and compare the length of each sublist with the current minimum length\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    min_len = len(lst)\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_sublist = sublist\n            min_len = len(sublist)\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function calculates the area of a rectangle.\n\n    :param l: length of the rectangle\n    :param b: breadth of the rectangle\n    :return: the area of the rectangle\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * breadth"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Create a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]')\n    \n    # Use the search() method to search for uppercase substrings\n    result = pattern.sub('', str1)\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'(?<!\\w)[A-Z][a-z]*(?!\\w)'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Remove uppercase substrings\n    str1 = re.sub('(?i)[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    uppercase_pattern = re.compile('[A-Z]+')\n    return uppercase_pattern.sub('', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Remove all uppercase substrings using regular expressions\n    pattern = re.compile(r'(?i)\\b[A-Z]+\\b')\n    str1 = pattern.sub('', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n\n    # Use findall() method to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n\n    # Iterate through the matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]')\n    \n    # Find all uppercase substrings in the given string using the regular expression\n    uppercase_substrings = pattern.findall(str1)\n    \n    # Loop through all uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    uppercase_pattern = r'[A-Z]+'\n\n    # Use the re.sub() function to replace uppercase substrings with an empty string\n    return re.sub(uppercase_pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and extracts the first element of each sublist and returns a new list with the extracted elements.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # initialize an empty list to store the extracted elements\n    extracted_lst = []\n\n    # loop through each sublist in the input list\n    for sublist in lst:\n        # if the sublist is not empty, extract the first element and add it to the extracted_lst\n        if sublist:\n            extracted_lst.append(sublist[0])\n\n    # return the extracted_lst\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)):\n        sublst = lst[i]\n        result.append(sublst[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the extracted elements\n    extracted_lst = []\n    \n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Get the first element of the sublist and append it to the extracted_lst\n        extracted_lst.append(sublist[0])\n    \n    # Return the extracted_lst\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n\n    Args:\n        str (str): The string to be analyzed.\n\n    Returns:\n        int: The number of upper case characters in the given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate over each character in the string\n    for char in str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the count variable\n            count += 1\n\n    # Return the count of uppercase characters\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    # initialize a variable to count the upper case characters\n    upper = 0\n    \n    # loop through each character in the string\n    for char in str:\n        # check if the character is uppercase\n        if char.isupper():\n            # increment the count of upper case characters\n            upper += 1\n    \n    # return the count of upper case characters\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    combinations = []\n    n = len(list1)\n    for i in range(1, 1 << n):\n        combination = []\n        for j in range(n):\n            if i & (1 << j):\n                combination.append(list1[j])\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    combs = []\n    # loop over the elements of the list\n    for i in range(len(lst)):\n        # create a new list containing the first element and all the others\n        comb = [lst[i]]\n        # loop over the remaining elements and append them to the combination\n        for j in range(i+1, len(lst)):\n            comb.append(lst[j])\n        # append the combination to the list of combinations\n        combs.append(comb)\n    # return the list of combinations\n    return combs"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Find the number of elements in the list\n    n = len(list1)\n    # Initialize a list to store the combinations\n    combinations = []\n    # Loop through each possible starting index\n    for i in range(n):\n        # Initialize a list to store the current combination\n        curr_combination = []\n        # Loop through each element after the starting element\n        for j in range(i+1, n+1):\n            # Append the current element to the current combination\n            curr_combination.append(list1[j-1])\n        # Add the current combination to the list of combinations\n        combinations.append(curr_combination)\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            result.append(list1[i-1:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            combinations.append(combination)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    \n    def helper(start, curr):\n        if len(curr) == n:\n            result.append(curr[:])\n        else:\n            for i in range(start, n):\n                if i > start and curr[i] == curr[i-1]:\n                    continue\n                curr.append(list1[i])\n                helper(i+1, curr)\n                curr.pop()\n    \n    helper(0, [])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Base case: if the length of the input list is 0, return an empty list\n    if len(list1) == 0:\n        return []\n\n    # Recursive case: generate all combinations of the first element of the list\n    first_element = list1[0]\n    first_combinations = combinations_list(list1[1:])\n\n    # Generate all combinations of the remaining elements\n    remaining_combinations = []\n    for combination in first_combinations:\n        remaining_combinations.append([first_element] + combination)\n\n    # Return all combinations\n    return remaining_combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    '''\n    Function to generate all possible combinations of elements in a given list.\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    return [lst[0]] + combinations_list(lst[1:])\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_product_start = 0\n    max_product_end = 0\n    current_product = 1\n    min_product = 1\n    \n    for i in range(len(arr)):\n        if i == 0:\n            current_product = arr[i]\n            min_product = arr[i]\n        elif i == len(arr) - 1:\n            current_product = arr[i]\n            if current_product > min_product:\n                min_product = current_product\n            else:\n                max_product = max(max_product, current_product)\n                current_product = 1\n                min_product = 1\n        else:\n            current_product = max(min_product * arr[i], arr[i])\n            if current_product > max_product:\n                max_product = current_product\n                max_product_start = i\n                max_product_end = i\n            else:\n                if current_product > min_product:\n                    min_product = current_product\n                \n    if max_product_start == 0:\n        return max_product * min_product\n    elif max_product_end == len(arr) - 1:\n        return max_product * min_product\n    else:\n        return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            max_ending_here = max(num, max_ending_here * num)\n            min_ending_here = min(num, min_ending_here * num)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = float('-inf')\n    curr_product = 1\n    \n    for num in arr:\n        curr_product = max(curr_product * num, num)\n        max_product = max(max_product, curr_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_product = max(max_product, max_ending_here)\n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    min_so_far = float('inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(1, n+1):\n        if dict.get(i)!= dict.get(1):\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    return len(set(value)) == 1"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict.keys()]\n    return n in values"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Get the first key and value from the dictionary\n    key = next(iter(dict))\n    value = dict[key]\n\n    # Check if all values in the dictionary are the same as the first value\n    for key, value in dict.items():\n        if value!= value:  # If any value is not the same as the first value, return False\n            return False\n\n    # If all values are the same as the first value, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    if n == 0:\n        return True\n    elif n > 0:\n        return all(values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = dict.values()\n    return all(all_values[0] == value for value in all_values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if len(set(value))!= 1:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n\n    Args:\n        dict1 (dict): A dictionary to process.\n\n    Returns:\n        dict: A new dictionary with empty items dropped.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '' and value is not None:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    return {key:value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for num in arr[1:]:\n        temp_max = max(max_ending_here * num, max_so_far * num)\n        temp_min = min(min_ending_here * num, temp_max)\n        max_so_far = temp_max\n        max_ending_here = temp_max / num\n        min_ending_here = temp_min\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables for max product and current subsequence product\n    max_product = float('-inf')\n    subsequence_product = 1\n\n    # Iterate through the array and update the max product and subsequence product\n    for num in arr:\n        if num > 0:\n            subsequence_product *= num\n            if subsequence_product > max_product:\n                max_product = subsequence_product\n        else:\n            subsequence_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    # Initialize variables to store the maximum product of increasing subsequence and the maximum product of the whole array\n    max_subseq_product = arr[0]\n    max_product_overall = arr[0]\n\n    # Iterate through the array and find the maximum product of increasing subsequence and the maximum product of the whole array\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_subseq_product = max(max_subseq_product * arr[i], max_subseq_product * arr[i-1])\n        else:\n            max_subseq_product = max(max_subseq_product * arr[i], arr[i-1])\n\n        max_product_overall = max(max_product_overall, max_subseq_product)\n\n    return max_product_overall"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    # Initialize max_product and max_ending_here as negative infinity\n    max_product = -float('inf')\n    max_ending_here = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Update max_ending_here\n        max_ending_here *= num\n\n        # Update max_product if max_ending_here is negative\n        if max_ending_here < 0:\n            max_product = max(max_product, max_ending_here)\n            max_ending_here = 1\n\n    # Update max_product if max_ending_here is non-zero\n    if max_ending_here!= 1:\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_ending_here = 1\n\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            max_product = max(max_product, max_ending_here)\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    max_product = float('-inf')\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_product = max(max_product, max_ending_here * arr[i])\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    def max_product_subsequence(arr, start, end):\n        if start == end:\n            return arr[start], 1, 1\n        \n        if end == len(arr) - 1:\n            return arr[start], 1, 1\n        \n        max1, max2, max3 = -float('inf'), -float('inf'), -float('inf')\n        max4, max5, max6 = -float('inf'), -float('inf'), -float('inf')\n        \n        for i in range(start, end+1):\n            p1, p2, p3 = max_product_subsequence(arr, start, i-1)\n            p4, p5, p6 = max_product_subsequence(arr, i, end)\n            max1 = max(max1, p1*arr[i], p2*arr[i], p3*arr[i], p4*arr[i], p5*arr[i], p6*arr[i])\n            max2 = max(max2, p1*arr[i], p2*arr[i], p3*arr[i], p4*arr[i], p5*arr[i], p6*arr[i])\n            max3 = max(max3, p1*arr[i], p2*arr[i], p3*arr[i], p4*arr[i], p5*arr[i], p6*arr[i])\n            max4 = max(max4, p1*arr[i], p2*arr[i], p3*arr[i], p4*arr[i], p5*arr[i], p6*arr[i])\n            max5 = max(max5, p1*arr[i], p2*arr[i], p3*arr[i], p4*arr[i], p5*arr[i], p6*arr[i])\n            max6 = max(max6, p1*arr[i], p2*arr[i], p3*arr[i], p4*arr[i], p5*arr[i], p6*arr[i])\n        \n        return max1, max2, max3\n    \n    return max_product_subsequence(arr, 0, len(arr)-1)[0]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # sort the array in non-decreasing order\n    arr.sort()\n    n = len(arr)\n    # initialize variables to store the maximum product and the maximum product ending at each index\n    max_product_ending_here = arr[0]\n    max_product_so_far = arr[0]\n    # iterate over the array and update the variables accordingly\n    for i in range(1, n):\n        if i > 0 and arr[i] > arr[i-1]:\n            continue\n        max_product_ending_here = max(max_product_ending_here * arr[i], max_product_ending_here, arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    return max_product_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        print(\"Error: The tuple should have at least two elements.\")\n        return\n    \n    # Initialize the variable to store the pairwise addition\n    pairwise_sum = 0\n    \n    # Loop through each element of the tuple and add the pairwise sum of the previous two elements\n    for i in range(len(test_tup)-1):\n        pairwise_sum = test_tup[i] + test_tup[i+1]\n    \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n\n    sum_neighbors = test_tup[0] + test_tup[-1]\n    for i in range(len(test_tup)-1):\n        sum_neighbors += test_tup[i] + test_tup[i+1]\n    return sum_neighbors"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        num_elements = len(test_tup)\n        for i in range(num_elements):\n            for j in range(i+1, num_elements):\n                result = test_tup[i] + test_tup[j]\n                print(\"Addition of the neighboring elements is:\", result)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    length = len(test_tup)\n    for i in range(length):\n        if i < length - 1:\n            total += test_tup[i] + test_tup[i + 1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the variable to store the sum\n    pairwise_sum = 0\n    # loop through the tuple and add the pairwise elements to the sum\n    for i in range(len(test_tup) - 1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    # return the final sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # check if the input tuple is empty\n    if len(test_tup) <= 1:\n        return test_tup\n\n    # find the length of the tuple\n    length = len(test_tup)\n\n    # initialize the list to store the pairwise additions\n    result = []\n\n    # loop through the tuple and add the pairwise additions to the result list\n    for i in range(length - 1):\n        result.append(test_tup[i] + test_tup[i + 1])\n\n    # return the result list\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup) - 1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a list to store the pairwise additions\n    pairwise_sum = []\n    # Loop through the tuple\n    for i in range(len(test_tup)-1):\n        # Add the neighboring elements and store the result in the pairwise_sum list\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    # Return the pairwise_sum list\n    return pairwise_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array `arr` and a number `n` as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the result variable to zero\n    result = 0\n\n    # Iterate over the array and multiply each element by n\n    for num in arr:\n        result = (result + num) % n\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Calculate the product of the array modulo n\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    \n    # Return the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as inputs and returns the product of their array multiplication modulo n.\n    '''\n\n    # calculate the product of the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n\n    # initialize the result to 1\n    result = 1\n\n    # loop through the array and multiply each element by the result\n    for num in arr:\n        result = (result * num) % n\n\n    # return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes two arrays, arr and n, as input and returns the product\n    of the array multiplication modulo n.\n\n    arr: list of integers\n    n: an integer\n\n    Returns:\n    int: The product of the array multiplication modulo n\n    \"\"\"\n    total = 1\n    for num in arr:\n        total = (total * num) % n\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        if product >= n:\n            product -= n\n    return product\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as an argument and returns True if it contains consecutive numbers and False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers else False.\n    '''\n    count = 0\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count >= 2:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # Check for empty list \n    if not l: \n        return \"Empty list\"\n    \n    # Initialize variables \n    prev_num = None \n    curr_num = None \n    consecutive_count = 0\n    \n    # Loop through the list \n    for num in l: \n        if not curr_num: \n            # First number in the list \n            curr_num = num \n            consecutive_count = 1\n        else: \n            if prev_num == curr_num + 1: \n                consecutive_count += 1\n            else: \n                # Reset the consecutive count and move to the next number \n                consecutive_count = 1\n        prev_num = curr_num\n        curr_num = num\n    \n    # Check if the last number is consecutive \n    if prev_num == curr_num - 1: \n        consecutive_count += 1\n    \n    # Check the consecutive count \n    if consecutive_count >= 2: \n        return True\n    else: \n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    # Check if the list is empty\n    if len(l) == 0:\n        return False\n    \n    # Initialize variables\n    prev = l[0]\n    consecutive = True\n    \n    # Iterate over the list\n    for num in l[1:]:\n        # Check if the current number is consecutive with the previous number\n        if num - prev!= 1:\n            consecutive = False\n            break\n        prev = num\n    \n    return consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as an input and returns True if the list contains consecutive numbers else False.\n    '''\n    if len(l) < 2: \n        return False \n    if l[0] == l[-1]: \n        return True \n    if l[0] < l[-1]: \n        for i in range(len(l)-1): \n            if l[i] == l[i+1] - 1: \n                return True \n        return False \n    else: \n        for i in range(len(l)-1): \n            if l[i] == l[i+1] + 1: \n                return True \n        return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False \n    \n    if l[0] == l[1]: \n        return True\n    \n    for i in range(1, len(l)-1): \n        if l[i] == l[i-1] + 1 and l[i] == l[i+1] - 1: \n            return True\n            \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # initialize the variable to store consecutive numbers\n    consecutive = []\n    \n    # loop through the list\n    for i in range(len(l)):\n        # if the current number is not equal to the next number, append it to the consecutive list\n        if l[i]!= l[i+1]:\n            consecutive.append(l[i])\n            \n    # check if the consecutive list is empty or not\n    if consecutive == []:\n        print(\"The list contains consecutive numbers.\")\n    else:\n        print(\"The list does not contain consecutive numbers.\")"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set of the elements in list1 to be used for set intersection\n    set1 = set(test_list1)\n\n    # Create a set of the elements in list2 to be used for set intersection\n    set2 = set(test_list2)\n\n    # Find the common elements in both sets and store them in a set\n    common_elements = set1.intersection(set2)\n\n    # Convert the set of common elements back into a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty dictionary to store the unique elements of the first list and their occurrences in the second list\n    count_dict = {}\n    for element in test_list1:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Iterate through the second list and check if each element is in the count_dict\n    for element in test_list2:\n        if element in count_dict and count_dict[element] > 0:\n            del count_dict[element]\n\n    # Convert the dictionary keys back to tuples and return the resulting list\n    return [tuple(key) for key in count_dict.keys()]\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns their intersection, where the order of the elements is irrelevant.\n    '''\n    # Create a set from each tuple list to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets using the '&' operator\n    intersection = set1 & set2\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set of elements from the first list\n    set1 = set(test_list1)\n\n    # create a set of elements from the second list\n    set2 = set(test_list2)\n\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection set to a list and sort it\n    intersection_list = sorted(list(intersection))\n\n    # return the sorted intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the list to set for faster membership testing\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of elements between the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection back to a list\n    intersection_list = list(intersection)\n\n    # Sort the list of tuples\n    intersection_list.sort()\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Check if both lists have the same length\n    if len(test_list1)!= len(test_list2):\n        return \"Lists are not of the same length.\"\n\n    # Find the intersection of elements in the lists\n    intersection = []\n    for element in test_list1:\n        if element in test_list2 and element not in intersection:\n            intersection.append(element)\n\n    # Return the intersection\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set from the first list to remove duplicates and then create a set from the second list\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets and create a list from the result\n    intersection_list = list(set1.intersection(set2))\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Check if both lists are not empty\n    if not test_list1 or not test_list2:\n        return None\n\n    # Sort the list of tuples\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize an empty set for the intersection\n    intersection = set()\n\n    # Loop through the list of tuples and check if they are present in the other list\n    for i in test_list1:\n        if i in test_list2:\n            intersection.add(i)\n\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from the second list to remove duplicates from the first list\n    set2 = set(test_list2)\n    # Use a set intersection to find the intersection of elements in the two lists\n    intersection = set(test_list1) & set2\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in a string and two characters as arguments, replaces the first character with the second character, and returns the modified string.\n    \"\"\"\n    # Check if the input characters are valid\n    if not (isinstance(str1, str) and isinstance(ch, str) and isinstance(newch, str) and len(str1) > 0 and len(ch) > 0 and len(newch) > 0):\n        raise ValueError(\"Input characters must be strings and not empty.\")\n\n    # Initialize an empty string to hold the modified string\n    modified_str = \"\"\n\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character matches the first character, replace it with the second character\n        if char == ch:\n            modified_str += newch\n        # Otherwise, just add the character to the modified string\n        else:\n            modified_str += char\n\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the current character is the character to be replaced\n        if str1[i] == ch:\n            # Replace it with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in a string, a character to be replaced, and a new character to replace it with.\n    The function returns a new string with all occurrences of the specified character replaced with the new character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Split the string into a list of characters\n    lst = list(str1)\n\n    # Loop through each character in the list\n    for i in range(len(lst)):\n        # If the current character is the specified character, replace it with the new character\n        if lst[i] == ch:\n            lst[i] = newch\n\n    # Join the list of characters back into a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = {}\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function sorts a dictionary by value in descending order.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the given dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value\n    sorted_counter = counter.most_common()\n\n    # Create a new dictionary to store the sorted items\n    sorted_dict = {}\n\n    # Iterate through the sorted items and add them to the new dictionary\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n\n    # Return the new dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Get the length of the array\n    length = len(nums)\n\n    # Get the largest and smallest value in the array\n    max_val = nums[0]\n    min_val = nums[0]\n\n    # Loop through the array and update the maximum and minimum values\n    for i in range(length):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        elif nums[i] < min_val:\n            min_val = nums[i]\n\n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError('The array must have at least two elements.')\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables for largest and smallest values\n    smallest = float('inf')\n    largest = float('-inf')\n    # loop through the array and update smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    # return the sum of largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the sum of the smallest and largest values\n    smallest = nums[0]\n    largest = nums[-1]\n    result = smallest + largest\n    \n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    # Initialize two variables to hold the largest and smallest values\n    max_val = nums[0]\n    min_val = nums[0]\n    \n    # Traverse through the array and update the largest and smallest values\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        if nums[i] < min_val:\n            min_val = nums[i]\n            \n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to store the largest and smallest values\n    max_val = nums[0]\n    min_val = nums[0]\n    \n    # Loop through the array to find the largest and smallest values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n\n    # Find the largest and smallest values in the sorted array\n    largest = nums[0]\n    smallest = nums[1]\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether the given string is all lowercase or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Removes all lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase letters\n    pattern = re.compile('[a-z]+')\n    \n    # Iterate over all lowercase substrings in the string\n    for match in pattern.findall(string):\n        # Replace the substring with an empty string\n        string = string.replace(match, '')\n    \n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns a new string with lowercase substrings removed.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = r'\\b[a-z]+\\b'\n    return re.sub(regex, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert all characters in the string to lowercase\n    str1 = str1.lower()\n    # Use regex to find all lowercase substrings in the string\n    pattern = re.compile(r'\\b\\w+\\b')\n    # Use findall to return a list of all matches found in the pattern\n    matches = pattern.findall(str1)\n    # Loop through each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'([a-z]+)', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.compile(r'\\b[a-z]\\w*\\b', re.IGNORECASE)\n    return lowercase.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub('[a-z]+', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    This function takes a string as input and removes all lowercase substrings from it.\n    \"\"\"\n    # Remove all lowercase substrings using regular expressions\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Parameters:\n    string (str): The string to remove lowercase substrings from.\n\n    Returns:\n    str: The string with all lowercase substrings removed.\n    \"\"\"\n    lowercase_pattern = re.compile(r'[a-z]+')\n    return lowercase_pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'(?i)[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 ** 0"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as an argument and returns its first digit.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert number to string\n    num_str = str(n)\n    # extract first digit from string\n    first_digit = num_str[0]\n    # return first digit\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the first digit of that number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n = n // 10\n    return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10 ** n.bit_length()\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Remove any leading zeros from the number\n    n = str(n)\n    while n.startswith('0'):\n        n = n[1:]\n    # Convert the number to an integer and take its first digit\n    first_digit = int(n[0])\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns the odd numbers in the list.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list of only the odd integers.\n    \"\"\"\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of cubes of first n natural numbers\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    \n    # sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # difference between sum of cubes and sum of numbers\n    difference = abs(sum_of_cubes - sum_of_numbers)\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n\n    difference_sum = sum_of_cubes - sum_of_natural_numbers\n    return difference_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_cubes(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\ndef sum_of_natural_numbers(n):\n    return n * (n + 1) // 2\n\ndef difference(n):\n    return abs(sum_of_cubes(n) - sum_of_natural_numbers(n))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    # sum of cubes of the first n natural numbers\n    sum_of_cubes = (n * (n + 1) * (2 * n + 1)) / 6\n    \n    # sum of the first n natural numbers\n    sum_of_natural = n * (n + 1) / 2\n    \n    # difference between the two sums\n    difference = sum_of_cubes - sum_of_natural\n    \n    # return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_nums = sum(range(1, n+1))\n    return sum_cubes - sum_nums"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_nums = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_nums"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_of_numbers = sum(range(1,n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        return sum(x**3 for x in range(1, n+1))\n\n    def sum_of_natural_numbers(n):\n        return sum(range(1, n+1))\n\n    return abs(sum_of_cubes(n) - sum_of_natural_numbers(n))"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes an array A and its length N as input\n    and returns the count of odd pairs in the array.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two lists A and N as input.\n    It checks for pairs whose xor value is odd, and returns the count.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes an array A and its size N and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    # XOR of the first N elements of the array\n    xor_sum = sum(A[:N])\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Traverse through all pairs of elements\n    for i in range(N):\n        for j in range(i+1, N):\n            # XOR of the current pair\n            xor_pair = A[i] ^ A[j]\n\n            # If the xor_pair is odd and the xor_sum is even, increment the count\n            if (xor_pair % 2!= 0) and (xor_sum % 2!= 0):\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function counts the number of pairs whose xor value is odd.\n\n    :param A: A list of integers.\n    :param N: An integer.\n    :return: An integer representing the number of pairs whose xor value is odd.\n    \"\"\"\n\n    # XOR of all the elements in the list\n    xor_result = sum(A)\n\n    # Count of odd pairs\n    count = 0\n\n    # Iterate through all possible pairs\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            # XOR of the elements at indices i and j\n            xor_ij = A[i] ^ A[j]\n            # Check if the XOR value is odd\n            if xor_ij % 2!= 0 and xor_ij!= 0:\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n\n    xor_count = 0\n    for i in range(N):\n        xor_count += (A[i] ^ i) % 2\n\n    return xor_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    This function takes a list A and an integer N as input and returns the\n    number of pairs whose xor value is odd.\n\n    A: list of integers\n    N: integer\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through the list A\n    for i in range(N):\n        # Loop through the list A again\n        for j in range(i+1,N):\n            # If the xor value of i and j is odd, increment the count variable\n            if ((A[i] ^ A[j]) & 1) == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, convert it to lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, convert it to uppercase\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # If the character is neither uppercase nor lowercase, keep it as it is\n        else:\n            string = string[:i] + string[i] + string[i+1:]\n    # Return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.swapcase() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize sum to 0\n    digit_sum = 0\n    \n    # Loop through each digit of n1 and n2\n    for i in range(10):\n        # Calculate the difference between the i-th digit of n1 and n2\n        diff = abs(n1 % 10 - n2 % 10)\n        \n        # Add the difference to the sum\n        digit_sum += diff\n        \n        # Shift the digits to the left by one place\n        n1 //= 10\n        n2 //= 10\n    \n    # Return the sum of the per-digit differences\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the difference between the two integers\n    diff = n1 - n2\n    \n    # Convert the difference to a string\n    str_diff = str(diff)\n    \n    # Initialize an empty list to store the sum of the per-digit differences\n    total_diff = []\n    \n    # Iterate over each digit in the difference string\n    for digit in str_diff:\n        # Calculate the absolute difference between the digit in the original integer and the digit in the difference string\n        abs_diff = abs(int(digit) - int(digit))\n        \n        # Add the absolute difference to the total_diff list\n        total_diff.append(abs_diff)\n        \n    # Return the sum of the total_diff list\n    return sum(total_diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the sum to 0\n    sum_diff = 0\n\n    # convert the integers to lists of digits\n    num1 = [int(digit) for digit in str(n1)]\n    num2 = [int(digit) for digit in str(n2)]\n\n    # loop through each digit of the two numbers\n    for i in range(max(len(num1), len(num2))):\n        # calculate the difference between the two digits\n        diff = abs(num1[i] - num2[i])\n\n        # add the difference to the sum\n        sum_diff += diff\n\n    # return the sum\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Iterate through each digit of the two numbers\n    for digit in str(n1) + str(n2):\n        # Subtract the current digit from the other number and store the result\n        difference = int(digit) - int(n1) - int(n2)\n        # Add the result to the total sum\n        total_sum += difference\n        \n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    # Remove the digits from the input numbers\n    num1 = ''.join(str(n1))\n    num2 = ''.join(str(n2))\n\n    # Check if both numbers have the same length\n    if len(num1)!= len(num2):\n        raise ValueError(\"Both numbers must have the same length.\")\n\n    # Initialize the sum of per-digit differences\n    distance = 0\n\n    # Loop through each digit in the numbers\n    for i in range(len(num1)):\n        # Calculate the difference between the digits\n        diff = int(num1[i]) - int(num2[i])\n\n        # Add the difference to the total distance\n        distance += diff\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff = 0\n    for i in range(10):\n        digit_diff += abs(n1 // 10**i - n2 // 10**i)\n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings and iterate over the digits\n    sum_diff = 0\n    for i in str(n1) + str(n2):\n        # If the digit is a different value, add the difference to the sum\n        if int(i)!= int(n1) and int(i)!= int(n2):\n            sum_diff += int(i) - int(n1) if int(i) > int(n1) else int(n1) - int(i)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_diff = 0\n    while diff > 0:\n        digit = diff % 10\n        sum_diff += digit ** 2\n        diff //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert both numbers to strings so that we can compare digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Compare each digit in the two numbers and add the difference to the sum\n    for i in range(len(n1_str)):\n        diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        sum += diff\n\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(10):\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n    else:\n        max_sum = max_sub_array_sum(a, size - 1)\n        curr_sum = max(a[0], a[1]) + max_sub_array_sum(a[2:], size - 1)\n        return max(curr_sum, max_sum)"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the max sum variable and its index\n    max_sum = float('-inf')\n    max_start = 0\n    # Loop through the given list\n    for i in range(size):\n        # Find the sum of the current sublist\n        sublist_sum = sum(a[max_start:i+1])\n        # Update the max sum and its index if necessary\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_start = i\n    # Return the max sum and its index\n    return max_sum, max_start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    \n    for end_index in range(size):\n        current_sum += a[end_index]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = end_index - size + 1\n    \n    return a[start_index:start_index+size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n    while end < size:\n        current_sum += a[end]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n        end += 1\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for end in range(len(a)):\n        current_sum += a[end]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end - size + 1\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    a (list): A list of integers.\n    size (int): The size of the sublist to consider.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n    \"\"\"\n    if size > len(a):\n        raise ValueError(\"size must be smaller than or equal to the length of a\")\n\n    current_sum = 0\n    max_sum = float('-inf')\n    current_window = [0] * size\n\n    for i in range(len(a)):\n        if i >= size - 1:\n            current_sum -= current_window[i - size + 1]\n\n        current_sum += a[i]\n        current_window[i % size] = a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables for maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    # Loop through the array and add elements to the current subarray sum\n    for i in range(size):\n        curr_sum += a[i]\n        # If the current subarray sum is greater than the maximum subarray sum, update the maximum subarray sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        # If the current subarray sum becomes negative, reset the current subarray sum\n        elif curr_sum < 0:\n            curr_sum = 0\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Convert the set to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # Output the sorted union\n    print(\"The union of the elements of the two tuples is:\", sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n\n    # Convert the set back to a list and sort it in ascending order\n    union = sorted(list(union))\n\n    # Output the union\n    print(\"Union of elements in sorted order:\", union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list as the output\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert the tuples to lists so that we can perform set operations on them\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Find the union of the two lists using the set() function and then convert back to a tuple\n    union_set = set(list1 + list2)\n    union_tup = tuple(union_set)\n\n    # Sort the union tuple in ascending order and output the result\n    sorted_union_tup = sorted(union_tup)\n    print(\"Union of elements:\", sorted_union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize an empty list to hold the union of the elements\n    union_list = []\n    # iterate over both tuples and add the union of their elements to the list\n    for elem in test_tup1 + test_tup2:\n        if elem not in union_list:\n            union_list.append(elem)\n    # sort the list in ascending order and return it\n    return sorted(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # First, create a set of the elements in both tuples\n    all_elements = set(test_tup1 + test_tup2)\n    # Then, sort the set and convert it back to a list\n    sorted_list = sorted(list(all_elements))\n    # Finally, output the sorted list of elements\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples into one\n    union_tup = test_tup1 + test_tup2\n\n    # sort the union tuple in ascending order\n    sorted_union_tup = sorted(union_tup)\n\n    # output the sorted union tuple\n    print(sorted_union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the tuple to a set to remove duplicates\n    set_tup = set(combined_tup)\n    \n    # Convert the set back to a sorted list and print it\n    sorted_list_tup = sorted(list(set_tup))\n    print(sorted_list_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of the two tuples\n    union_tup = test_tup1 + test_tup2\n    \n    # Sort the union tuple in ascending order\n    union_tup.sort()\n    \n    # Print the union tuple\n    print(union_tup)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n        current_length += 1\n        if current_length > max_length:\n            current_length = 0\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    if not lst:\n        return 0\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            max_length = max(max_length, len(sub_lst))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize a list to store the lengths of longest sublists\n    max_length = []\n    # Initialize a variable to store the length of the longest sublist seen so far\n    current_length = 1\n\n    # Iterate over the input list\n    for i in range(len(lst)):\n        # If the current element is equal to the next element, then the current sublist is longer.\n        if lst[i] == lst[i+1]:\n            current_length += 1\n        else:\n            # Update the max_length list if the length of the current sublist is greater than the previous longest sublist.\n            if current_length > max_length[-1]:\n                max_length.append(current_length)\n            # Reset the current_length variable to 1.\n            current_length = 1\n\n    # Update the max_length list if the length of the last sublist is greater than the previous longest sublist.\n    if current_length > max_length[-1]:\n        max_length.append(current_length)\n\n    # Return the length of the longest sublist.\n    return max_length[-1]"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length = 0\n    sublist = []\n\n    for i in range(len(lst)):\n        if len(sublist) == 0 or lst[i]!= lst[sublist[-1]]:\n            sublist.append(i)\n        else:\n            sublist[-1] = i\n\n        if i - sublist[0] + 1 > longest_length:\n            longest_length = i - sublist[0] + 1\n\n    return longest_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize max length and current length to zero\n    max_len = 0\n    curr_len = 0\n\n    # Iterate through the list of sublists\n    for sublist in lst:\n\n        # Iterate through the sublist\n        for item in sublist:\n\n            # Increase the current length by 1\n            curr_len += 1\n\n            # If the current length is greater than the maximum length, update the maximum length\n            if curr_len > max_len:\n                max_len = curr_len\n\n            # If the current length is equal to the maximum length, continue iterating through the sublist\n            if curr_len == max_len:\n                continue\n\n        # Reset the current length to zero\n        curr_len = 0\n\n    # Return the maximum length\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize max length and current length variables\n    max_length = 0\n    curr_length = 0\n\n    # loop through the list\n    for i in range(len(lst)):\n        # if the next element is greater than the current element,\n        # update the current length and max length variables\n        if i+1 < len(lst) and lst[i] < lst[i+1]:\n            curr_length += 1\n            if curr_length > max_length:\n                max_length = curr_length\n        # if the next element is not greater than the current element,\n        # reset the current length\n        else:\n            curr_length = 0\n\n    # return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = []\n    for i in range(len(lst)):\n        if not longest_sublist or i-len(longest_sublist) >= 0:\n            longest_sublist = lst[i:i+1]\n        elif i-len(longest_sublist) < 0:\n            longest_sublist = []\n            if not longest_sublist or i-len(longest_sublist) >= 0:\n                longest_sublist = lst[i:i+1]\n            else:\n                break\n    return len(longest_sublist)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")([\\w\\s,]+)(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks using regular expressions.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern to match quotation marks\n    pattern = r'(?<=\")[^\"]*(?=\")'\n\n    # Use the pattern to match all the values between quotation marks\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"' # Matches any sequence of characters between double quotes\n    values = re.findall(pattern, text) # Finds all non-overlapping occurrences of the pattern in the text\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n-1): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n\n    :param word: The string to split.\n    :return: A list of the characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sum up the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and split it into individual digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to store the sum of the digits\n    total = 0\n    # Loop over each digit and add it to the total\n    for digit in digits:\n        total += digit\n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Extract each digit of the number and add it to the sum\n    while n > 0:\n        digit = n % 10\n        sum_of_digits += digit\n        n //= 10\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    digits_list = []\n    while n > 0:\n        digits_list.append(n % 10)\n        n //= 10\n    return sum(digits_list)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    total = 0\n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n        # add it to the sum\n        total += digit\n        # remove the last digit of the number\n        n = n // 10\n    # return the sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize the variable to store the sum\n    total = 0\n    \n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit\n        digit = n % 10\n        \n        # add it to the total\n        total += digit\n        \n        # remove the last digit from the number\n        n //= 10\n        \n    # return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string\n    n_str = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    # Loop through each digit in the string and add it to the sum\n    for digit in n_str:\n        sum_digits += int(digit)\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # get the digits of the number\n    digits = [int(digit) for digit in str(n)]\n    # initialize the sum variable\n    sum = 0\n    # loop through the digits and add them to the sum\n    for digit in digits:\n        sum += digit\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is already sorted\n    if len(list1) <= 1:\n        return True\n    \n    # Check if the list is sorted in ascending order\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # Check if the list is sorted in descending order\n    for i in range(len(list1)-1):\n        if list1[i] < list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) == 0:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    else:\n        return lst[1:] == sorted(lst[:-1])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    # check if the first element is smaller than the last element\n    elif list1[0] > list1[-1]:\n        return False\n    # check if the list is sorted by comparing each element with its next element\n    else:\n        for i in range(len(list1) - 1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    # initialize an empty list to store the dictionaries\n    result = []\n\n    # loop through each index in the range of length\n    for i in range(length):\n        # create an empty dictionary\n        new_dict = {}\n        # add the dictionary to the result list\n        result.append(new_dict)\n\n    # return the result list\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Use a for loop to iterate through each sublist in the list\n    for sublist in list1:\n        # Use the sorted() function to sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_nums = set()\n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is not already in the set, add it\n        if num not in unique_nums:\n            unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicates from a given list of numbers.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with duplicate numbers removed.\n    \"\"\"\n    # Convert the list to a set, which automatically removes duplicates\n    unique_nums = set(nums)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_list = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]!= nums[j]:\n                unique_list.append(nums[i])\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a dictionary to store the unique elements and their indices\n    unique_dict = {}\n\n    # Iterate through each list in the input list\n    for i, num_list in enumerate(nums):\n        # Iterate through each element in the current list\n        for j, num in enumerate(num_list):\n            # If the element is not already in the dictionary, add it with the index\n            if num not in unique_dict:\n                unique_dict[num] = i * 1000000 + j\n\n    # Create a new list with the unique elements\n    unique_nums = [num for num in unique_dict.keys()]\n\n    # Return the unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(*args):\n    \"\"\"\n    Remove duplicate numbers from a list of lists or a list of numbers.\n\n    Args:\n        *args (list): A list of lists or a list of numbers.\n\n    Returns:\n        list: A new list with duplicate numbers removed.\n    \"\"\"\n    # Convert all inputs to lists to allow for nested loops.\n    inputs = [list(input) for input in args]\n\n    # Initialize an empty set to store unique numbers.\n    unique_nums = set()\n\n    # Iterate over each input list.\n    for num_list in inputs:\n        # Iterate over each number in the input list.\n        for num in num_list:\n            # Add the number to the unique_nums set only if it's not already there.\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Convert the set back to a list and return it.\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)  # create a set to keep only unique numbers\n    product = 1  # initialize the product to 1\n    \n    # calculate the product of unique numbers\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)  # convert the list to a set to remove duplicates\n    return 1 if len(unique_nums) == 1 else sum(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # create a set of unique numbers from the given list\n    unique_set = set(list_data)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # initialize an empty set to store the unique numbers\n    unique_nums = set()\n    # loop through the list of numbers and add each unique number to the set\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    # calculate the product of the unique numbers by multiplying them together\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Find the unique numbers in the list\n    unique_list = list(set(list_data))\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return 1 if len(unique_numbers) == 0 else reduce(lambda x, y: x * y, unique_numbers)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder using Heron's formula\n    surface_area = 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculating the surface area using the formula A = \u03c0r\u00b2h\n    A = 3.14 * r ** 2 * h\n    # Returning the surface area\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 2*math.pi*r*h\n    return S"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to calculate surface area of a cylinder\n    surface_area = 2*pi*r*h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Formula for surface area of a cylinder\n    surface_area = 2 * 3.14159 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2*math.pi*r*h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if A is a sublist of B\n    if B in A: \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A in B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    \n    # check if the length of A is greater than or equal to the length of B\n    if len(A) >= len(B): \n        return False\n    \n    # loop through the list A and check if any element is present in B\n    for i in range(len(A)): \n        if A[i] in B: \n            # return True if any element is found in B\n            return True\n    \n    # if no element is found in B, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)):\n        if A[i] not in B[i:]:\n            return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if B is a sublist of A or False otherwise.\n\n    :param A: A list\n    :type A: list\n    :param B: A list\n    :type B: list\n    :return: True if B is a sublist of A, False otherwise.\n    :rtype: bool\n    \"\"\"\n    if len(A) < len(B):\n        return False\n\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i:].startswith(B):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Function to check whether a list is sublist of another or not.\n\n    Parameters:\n    A (list): List to check if it is sublist of B.\n    B (list): List to check if it is sublist of A.\n\n    Returns:\n    bool: True if A is sublist of B, False otherwise.\n\n    \"\"\"\n\n    # If B is empty, then A must also be empty\n    if not B:\n        return True\n\n    # If A is empty, then B must contain at least one element of B\n    if not A:\n        return any(x in B for x in B)\n\n    # If A is a sublist of B, then B must be a sublist of A\n    if B[:len(A)] == A:\n        return is_Sub_Array(A, B[len(A):])\n\n    # If B is a sublist of A, then A must be a sublist of B\n    return is_Sub_Array(A, B)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #convert the given number to string\n    num_str = str(n)\n    #initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    #loop through each character in the string\n    for i in num_str:\n        #if the character is not a number, skip it\n        if not i.isdigit():\n            continue\n        #convert the character to integer and add it to the last_digit\n        last_digit += int(i)\n    #return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize result variable\n    result = 0\n    \n    # convert number to string\n    n = str(n)\n    \n    # loop through each character in the string\n    for i in range(len(n)-1, -1, -1):\n        # convert the character to an integer\n        digit = int(n[i])\n        \n        # multiply the digit with the result\n        result = result * digit\n        \n        # add the last digit to the result\n        result = result + digit\n    \n    # return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit in the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the factorial of n\n    factorial = 1\n    \n    # Loop through each digit in the factorial of n\n    while n > 0:\n        # Extract the last digit of n and multiply it by factorial\n        last_digit = n % 10\n        factorial *= last_digit\n        \n        # Divide n by 10 to remove the last digit\n        n = n // 10\n        \n    # Return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    n = str(n)\n    # Find the length of the string\n    length = len(n)\n    # Find the last digit of the factorial by taking the last character of the string\n    last_digit_factorial = int(n[-1])\n    # Return the last digit of the factorial\n    return last_digit_factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # convert number to string\n    n_str = str(n)\n    # find the last digit of factorial\n    last_digit_factorial = n_str[-1]\n    # print the result\n    print(\"The last digit of the factorial of\", n, \"is\", last_digit_factorial)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to string\n    n = str(n)\n    # Convert the first digit to integer\n    digit1 = int(n[0])\n    # Calculate the factorial of the first digit\n    fact1 = 1\n    for i in range(1, digit1 + 1):\n        fact1 *= i\n    # Calculate the last digit in the factorial of the first digit\n    last_fact1_digit = int(fact1 / (9 ** digit1))\n    return last_fact1_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Use list comprehension to create a new list with all the elements of all the input lists\n    new_list = [x for sublist in [list1, list2, list3] for x in sublist]\n    return new_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    # create a list of length 3*min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n    for i in range(len(list2)):\n        result.append(list2[i])\n    for i in range(len(list3)):\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = 0\n\n    while i < len(list1) and j < len(list2) and j < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[j]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[j]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[j])\n            j += 1\n\n    while i < len(list1) and j < len(list2) and j < len(list3):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[j])\n            j += 1\n\n    while i < len(list1) and j < len(list2) and j < len(list3):\n        if list1[i] < list3[j]:\n            result.append(list1[i])\n            i += 1\n        elif list3[j] < list1[i]:\n            result.append(list3[j])\n            j += 1\n        else:\n            result.append(list2[j])\n            j += 1\n\n    while i < len(list1) and j < len(list2) and j < len(list3):\n        if list2[j] < list1[i]:\n            result.append(list2[j])\n            j += 1\n        elif list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list3[j])\n            j += 1\n\n    while i < len(list1) and j < len(list2) and j < len(list3):\n        if list3[j] < list1[i]:\n            result.append(list3[j])\n            j += 1\n        elif list1[i] < list3[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index = 0\n    while index < len(list1):\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n        index += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Parameters:\n    list1: A list of integers.\n    list2: A list of integers.\n    list3: A list of integers.\n\n    Returns:\n    A single list of integers, where the i-th integer is the concatenation of the i-th element of list1, list2, and list3.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j]:\n            if list1[i] < list3[k]:\n                result.append(list1[i])\n                i += 1\n            else:\n                result.append(list3[k])\n                k += 1\n        elif list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    # Loop through the tuples and check if there are any similar elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            pass\n        else:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list\n"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # loop through the tuples and find the dissimilar elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # initialize an empty list to hold the dissimilar elements\n    dissimilar_list = []\n\n    # iterate through each element of the first tuple\n    for elem1 in test_tup1:\n        # check if the element is present in the second tuple\n        if elem1 not in test_tup2:\n            # if not, add it to the dissimilar list\n            dissimilar_list.append(elem1)\n\n    # iterate through each element of the second tuple\n    for elem2 in test_tup2:\n        # check if the element is present in the first tuple\n        if elem2 not in test_tup1:\n            # if not, add it to the dissimilar list\n            dissimilar_list.append(elem2)\n\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a dictionary to store the indices of each element in each tuple\n    index_dict1 = {}\n    index_dict2 = {}\n    # loop through the elements in the first tuple\n    for i, element in enumerate(test_tup1):\n        # if the element is not already in the dictionary, add it with its index as the value\n        if element not in index_dict1:\n            index_dict1[element] = i\n    # loop through the elements in the second tuple\n    for i, element in enumerate(test_tup2):\n        # if the element is not already in the dictionary, add it with its index as the value\n        if element not in index_dict2:\n            index_dict2[element] = i\n    # create a list to store the dissimilar elements\n    dissimilar_list = []\n    # loop through the elements in the first tuple\n    for element in test_tup1:\n        # if the element is not in the second tuple, add it to the dissimilar list\n        if element not in index_dict2:\n            dissimilar_list.append(element)\n    # loop through the elements in the second tuple\n    for element in test_tup2:\n        # if the element is not in the first tuple, add it to the dissimilar list\n        if element not in index_dict1:\n            dissimilar_list.append(element)\n    # return the dissimilar elements list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to hold the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through the elements in the first tuple\n    for element in test_tup1:\n        # Check if the element exists in the second tuple\n        if element not in test_tup2:\n            # If it doesn't exist, add it to the dissimilar list\n            dissimilar_list.append(element)\n    \n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element of the first tuple is equal to any element of the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # If the element is different, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    \n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                even_list.append(i)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            new_tuple.append(even_ele(elem, even_fnc))\n        else:\n            if even_fnc(elem):\n                new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for t in test_tuple:\n        if all(even_fnc(x) for x in t):\n            result.append(t)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a new list to store even elements\n    new_list = []\n    # Loop through each element in the tuple\n    for item in test_tuple:\n        # Check if the element is even using the even_fnc function\n        if even_fnc(item):\n            # If the element is even, add it to the new list\n            new_list.append(item)\n    # Return the new list with even elements only\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    return [even_fnc(x) for x in test_tuple if isinstance(x, (list, tuple))]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple):\n        return None\n    if not all(isinstance(item, tuple) for item in test_tuple):\n        return None\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_tuple = []\n    for sub_list in test_tuple:\n        even_list = []\n        for item in sub_list:\n            if even_fnc(item):\n                even_list.append(item)\n        if even_list:\n            uneven_tuple.append(even_list)\n    return uneven_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # initialize an empty list to store even elements\n    even_list = []\n    # loop through each element in the input tuple\n    for elem in test_tuple:\n        # check if the element is even using the even_fnc function\n        if even_fnc(elem):\n            # if it is even, append it to the even_list\n            even_list.append(elem)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [x for x in test_tuple if even_fnc(x)]\n\ndef even_fnc(x):\n    '''\n    Define a function to check if an element is even.\n    '''\n    return isinstance(x, int) and x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple\n\ndef is_even(item):\n    if isinstance(item, tuple):\n        return any(is_even(i) for i in item)\n    else:\n        return item % 2 == 0"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*s/2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    surface_area = 6*area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((b+s)*s)/2 #calculate the area of the pyramid using Heron's formula\n    return area #return the area of the pyramid"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the side of the square pyramid\n    side = b + 2 * s\n    \n    # Calculate the surface area of the square pyramid\n    surface = (2 * b * s) + (2 * s * b) + (2 * s * s) + ((b * b * b) * 2)\n    \n    # Return the surface area\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 6 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s # base * height = area of pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s * 2 # base area\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function takes in a dictionary and returns True if it's empty, and False otherwise.\n    \"\"\"\n    return not any(dict1.values())"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * n) * catalan_number(n - 1) // (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number using the formula:\n    C(n, k) = (2k+1)!/(k!*(2k-1)!)\n    \"\"\"\n    n = int(n)  # Convert input to integer to prevent errors with float division\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return int(((2 * n) * factorial(n)) / (factorial(2 * n - 1) * factorial(n)))\n\ndef factorial(n):\n    \"\"\"\n    Calculate n! using the formula:\n    n! = n * (n-1) * (n-2) *... * 1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    else:\n        f = 1\n        for i in range(1, n+1):\n            f *= i\n        return f"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_numbers = [1]\n    for i in range(1, num+1):\n        catalan_numbers.append(4*i*(i+1)/2)\n    return catalan_numbers[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(1, num+1):\n        catalan.append(0)\n        for j in range(i):\n            catalan[-1] += catalan[-2] // (j+1)\n            catalan[-1] %= 1000000007\n    return catalan[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns the nth Catalan number.\n\n    Input:\n    n (int): the value of n for which we want to find the Catalan number.\n\n    Output:\n    int: the nth Catalan number.\n    '''\n\n    # Define the factorial function\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Define the Catalan function\n    def catalan(n):\n        if n == 0:\n            return 1\n        elif n == 1 or n == 2:\n            return 1\n        else:\n            return factorial(2*n) // (factorial(n) * factorial(2*n-1))\n\n    # Return the nth Catalan number\n    return catalan(n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = [1]\n    for i in range(1, num+1):\n        catalan_list.append(catalan_list[-1] * (2*i-1) / i)\n    return catalan_list[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0, 1]\n    for i in range(2, num + 1):\n        catalan.append(i * catalan[-1] // (i - 1))\n    return catalan[num]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\bly\\b'\n    # Use the pattern to search for adverbs in the given text\n    adverbs = re.findall(pattern, text)\n    # Create a list to store the adverb positions and their lengths\n    adverb_positions = []\n    # Loop through the adverbs found in the text\n    for i, adverb in enumerate(adverbs):\n        # Calculate the starting and ending positions of the adverb\n        start_pos = text.find(adverb)\n        end_pos = start_pos + len(adverb)\n        # Add the adverb position and its length to the list\n        adverb_positions.append((start_pos, end_pos))\n    # Return the adverb positions and their lengths\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Using regular expressions to find the adverbs\n    adverbs = re.findall(r'\\b\\w+(?:ly)$\\b', text)\n    # Removing duplicates and returning the positions of the adverbs\n    return list(set(adverbs))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define a regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b[a-z]+ly\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # If no matches are found, return an empty list\n    if not matches:\n        return []\n\n    # Iterate over the matches and find the positions of the adverbs\n    positions = []\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        positions.append((start, end))\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[A-Za-z]+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match.start(), match.end())"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Use regular expressions to find the adverbs\n    pattern = r'\\b[a-z]+ly\\b'\n    matches = re.findall(pattern, text)\n\n    # Print the positions of the adverbs found\n    for match in matches:\n        print(match)\n\n    # Return the adverbs found\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all instances of the adverb ending with ly in the text\n    matches = re.finditer(r'\\b(ly)\\b', text)\n\n    # Iterate over the matches and extract the positions of the adverbs\n    positions = []\n    for match in matches:\n        positions.append(match.start())\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b(ly|LY)\\b'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n\n    # Create a list to store the positions of all adverbs found\n    positions = []\n\n    # Loop through all the adverbs found and append their positions to the positions list\n    for adv in adverbs:\n        positions.append(text.find(adv))\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'(?<=\\w)(ly)(?=\\W|$)' # regex pattern to match the adverb ending with ly\n    \n    # find all the occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # if there is no match, return an empty list\n    if not matches:\n        return []\n    \n    # iterate through the matches and find their positions in the text\n    adverbs = []\n    for i, match in enumerate(matches):\n        # calculate the position of the match in the text\n        position = text.find(match)\n        \n        # add the adverb and its position to the list of adverbs\n        adverbs.append((match, position))\n    \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b(?:ly|edly|ingly)\\b'\n\n    # Use re.findall() to find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Loop through the matches and print the positions and text of each match\n    for i, match in enumerate(matches):\n        print(f'Adverb found at position {i+1}: {match}')\n\n    # Return the list of positions of the matches found\n    return [i+1 for i, match in enumerate(matches)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of n items\n    max_heap = []\n    for item in items:\n        if not max_heap or item[1] > max_heap[0][1]:\n            heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Extract the n most expensive items from the heap\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap))\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Heapify the items list to create a min-heap\n    heapq.heapify(items)\n\n    # Extract the n most expensive items from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(items))\n\n    # Reverse the order of the result to get the n least expensive items\n    result.reverse()\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n\n    # Add the first n items to the min heap\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n\n    # Iterate through the remaining items in the dataset\n    for i in range(n, len(items)):\n        # If the current item is less than the smallest item in the min heap,\n        # remove the smallest item from the heap and add the current item\n        if items[i] < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, items[i])\n\n    # Return the n most expensive items\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and a positive integer n as input and\n    returns the n most expensive items in the dataset.\n\n    The function first sorts the input list of items in descending order of\n    their prices. Then, it uses a heap of size n to keep track of the n most\n    expensive items. The heapq module is used for this purpose.\n\n    The function then returns the heap of size n as the output.\n\n    \"\"\"\n\n    # Sort the items in descending order of their prices\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Create a heap of size n to keep track of the n most expensive items\n    heap = []\n\n    # Add the first n items to the heap\n    for item in sorted_items[:n]:\n        heapq.heappush(heap, item)\n\n    # Add the remaining items to the heap\n    for item in sorted_items[n:]:\n        # If the heap is full, remove the smallest item first\n        if len(heap) == n:\n            heapq.heappop(heap)\n        # Add the remaining items to the heap\n        heapq.heappush(heap, item)\n\n    # Return the heap as the output\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    :param items: A list of items, each with a price attribute.\n    :param n: An integer representing the number of most expensive items to find.\n    :return: A list of the n most expensive items.\n    \"\"\"\n    heap = []\n\n    # Build a min heap of n items from the dataset\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # Remove the lowest price item from the heap if the heap has more than n items\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input.\n    It finds the n most expensive items in the list and returns a list of them.\n    \"\"\"\n    # Create a min-heap of size n\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            # If the heap size is greater than n, compare the current item with the smallest item in the heap\n            if item < heap[0]:\n                heapq.heappushpop(heap, item)\n    # Return the list of n most expensive items\n    return [heap[0]] + heapq.nsmallest(n-1, heap)[1:]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and an integer n, find the n most expensive items in the dataset.\n    '''\n    heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # Add the remaining items to the heap in decreasing order of price\n    for item in items[n:]:\n        if item[1] > heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Extract and return the n most expensive items from the heap in order\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initialize an empty min heap and a dictionary to store the indices of the items\n    heap = []\n    item_indices = {}\n    \n    for i, item in enumerate(items):\n        # Add the item to the heap and store its index in the dictionary\n        heapq.heappush(heap, (-item, i))\n        item_indices[item] = i\n    \n    # Sort the items in decreasing order of their prices and return the n most expensive\n    return [items[i[1]] for i in heapq.nlargest(n, heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # If the heap size exceeds n, remove the item with the highest price from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n > len(l):\n        return \"List is not long enough to split at the nth element.\"\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l) or n < 0:\n        print(\"Invalid input\")\n    else:\n        l.insert(len(l), l[:n])\n        print(\"The new list is:\", l)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"Error: List should have at least\", n, \"elements!\")\n    else:\n        new_list = []\n        for i in range(n):\n            new_list.append(l[i])\n        new_list.extend(l[n:])\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the input list is valid\n    if not isinstance(l, list):\n        print(\"Error: Input must be a list.\")\n        return\n\n    # Check if the nth element is valid\n    if n < 0 or n >= len(l):\n        print(\"Error: Invalid index.\")\n        return\n\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n\n    # Concatenate the first part and the second part\n    new_list = first_part + second_part\n\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if isinstance(l, list):\n        mid = n // 2\n        new_list = l[mid:]\n        l[:mid] = l[mid:]\n        l.extend(new_list)\n    else:\n        raise TypeError(\"Input must be a list\")\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return []\n    if n >= len(l):\n        return [l[0]]\n    else:\n        return l[n:] + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # add the first part to the end of the second part\n    l = second_part + first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        raise ValueError('Invalid index. Index cannot be negative.')\n    elif n == 0:\n        return l[0:] + [l[0]]\n    else:\n        return split_Arr(l[1:], n-1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    \n    largest = max(nums)\n    smallest = min(nums)\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # find the maximum and minimum value in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # return the difference between the maximum and minimum value\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables to store the smallest and largest values\n    min_val = max_val = nums[0]\n\n    # Loop through the list and update the min and max values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    # Return the difference between the largest and smallest values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # Return the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 1:\n        return 0\n    \n    # find the minimum and maximum values in the list\n    min_val = min(nums)\n    max_val = max(nums)\n    \n    # return the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n\n    # Find the largest and smallest values in the list\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Loop through the list and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the difference between largest and smallest\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num**0.5 == int(num**0.5):\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store perfect squares\n    perfect_squares_list = []\n\n    # Loop through the range of a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        square = int(num**0.5)\n        if num == square**2:\n            # Append the perfect square to the list\n            perfect_squares_list.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a), int(b)+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store perfect squares\n    perfect_square_list = []\n\n    # Loop through all integers between a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        square = int(i**0.5) + 1\n        if square**2 == i:\n            # If it is, append it to the list\n            perfect_square_list.append(i)\n\n    # Return the list of perfect squares\n    return perfect_square_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if i*i == j*j:\n                perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers as arguments, a and b, and returns a list of perfect squares between the two numbers.\n    '''\n    squares = []\n    for i in range(a, b + 1):\n        square = i * i\n        squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Check if a is less than b\n    if a < b:\n        # Swap the two numbers\n        a, b = b, a\n\n    # Initialize variables\n    i = 1\n    square = 0\n    squares = []\n\n    # Loop until a is greater than or equal to b\n    while a >= b:\n        # Check if the square is a perfect square\n        if square * square == a:\n            # Add the square to the list of perfect squares\n            squares.append(square)\n            # Subtract the square from a\n            a -= square\n            # Set the square to the square plus one\n            square += 1\n        else:\n            # Increment the square\n            square += 1\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Create a list to store the squares of perfect squares\n    squares = []\n    # Loop through the range of numbers between a and b (inclusive)\n    for num in range(a, b + 1):\n        # Check if the number is a perfect square\n        if num == int(num ** 0.5) ** 2:\n            # If it is, add it to the list of squares\n            squares.append(num)\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if a and b are valid integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError(\"a and b must be integers.\")\n\n    # initialize variables for count and sum of squares\n    count = 0\n    sum_of_squares = 0\n\n    # iterate through a range of integers between a and b (inclusive)\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i**2 == i:\n            # if so, increment count and add i to sum of squares\n            count += 1\n            sum_of_squares += i\n\n    # return the count and sum of squares\n    return count, sum_of_squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    x (float): The radius value of the point.\n    y (float): The angle value of the point in radians.\n    \n    Returns:\n    tuple: A tuple containing the x and y values of the rectangular coordinates.\n    \"\"\"\n    # Convert radians to degrees\n    y = cmath.degrees(y)\n    # Calculate the rectangular coordinates\n    x_rect = x * cmath.cos(y*cmath.pi/180)\n    y_rect = x * cmath.sin(y*cmath.pi/180)\n    # Return the rectangular coordinates as a tuple\n    return (x_rect.real, x_rect.imag, y_rect.real, y_rect.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes in the polar coordinates (r, theta) and converts them to rectangular coordinates.\n    \"\"\"\n    # Convert theta to radians\n    theta = cmath.radians(theta)\n    # Calculate x and y coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    \n    return r * cmath.cos(phi), r * cmath.sin(phi)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): The radius of the circle in the x-direction.\n    y (float): The angle of the circle in degrees.\n\n    Returns:\n    (float, float): The x and y coordinates of the point in rectangular coordinates.\n    '''\n    # Convert degrees to radians\n    theta = cmath.pi * y / 180\n    \n    # Calculate x and y coordinates\n    x_coord = x * cmath.cos(theta)\n    y_coord = x * cmath.sin(theta)\n    \n    # Return x and y coordinates\n    return (x_coord.real, x_coord.imag)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # if the length of the list is less than 2, return the same list\n    if len(newList) < 2:\n        return newList\n    # swap the first and last elements in the list\n    first = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the length is 1 or less\n    if length <= 1:\n        return newList\n    \n    # Set the first and last elements\n    first = newList[0]\n    last = newList[length - 1]\n    \n    # Remove the last element from the list\n    newList.pop()\n    \n    # Insert the first element at the end of the list\n    newList.insert(0, first)\n    \n    # Insert the last element at the beginning of the list\n    newList.insert(0, last)\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Swap the first and last elements in the list using slicing\n    newList = newList[1:] + newList[:1]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements\"\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # check if list has at least two elements\n    if len(newList) < 2:\n        print(\"List must have at least two elements!\")\n        return\n    \n    # get the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # interchange the first and last elements\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Assigning the last element of the list to a temporary variable\n    temp = newList[-1]\n    # Removing the last element from the list\n    newList.pop()\n    # Adding the temporary element to the beginning of the list\n    newList.insert(0, temp)\n    # Returning the modified list\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n\n    # initialize variables\n    result = 0\n    factorial = 1\n\n    # calculate the factorial of n\n    for i in range(1, n + 1):\n        factorial *= i\n\n    # calculate the binomial coefficient\n    for i in range(n, k - 1, -1):\n        result += factorial // i\n        factorial //= i\n\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum variable to 0\n    sum_coeff = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1,n+1):\n        # calculate the binomial coefficient using the formula C(n,i) = n! / (i! * (n-i)!)\n        coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n        \n        # multiply the coefficient with the sum of the previous k coefficients\n        sum_coeff += coeff * sum_coeff_prev\n        \n        # store the sum of the previous k coefficients for the next iteration\n        sum_coeff_prev = sum_coeff\n    \n    # return the sum of the product of consecutive binomial co-efficients\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return n * binomial_coeff(n-1, k-1) + binomial_coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    if k == 1:\n        return n\n\n    coeff = 1\n    for i in range(2, k + 1):\n        coeff = (coeff * (n - i + 1)) // i\n\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum and the factorials of n and k\n    sum = 0\n    n_fact = 1\n    k_fact = 1\n\n    # Calculate the factorial of n and k\n    for i in range(1, n+1):\n        n_fact *= i\n    \n    for i in range(1, k+1):\n        k_fact *= i\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1, n+1):\n        for j in range(min(i,k)+1):\n            sum += n_fact // (i * j) * k_fact // (j)\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Check if n and k are non-negative integers\n    if not isinstance(n, int) or not isinstance(k, int) or n < 0 or k < 0:\n        raise ValueError(\"n and k must be non-negative integers\")\n    \n    # Check if k is not greater than n\n    if k > n:\n        raise ValueError(\"k must be less than or equal to n\")\n    \n    # Initialize variables\n    coeff = 1\n    sum_coeff = 0\n    \n    # Calculate the sum of product of consecutive binomial co-efficients\n    for i in range(k+1):\n        coeff *= n - i\n        sum_coeff += coeff\n    \n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    elif k > n // 2: \n        k = n - k\n    binomial_coeff = 0\n    for i in range(n-k+1):\n        binomial_coeff += (n-i)/i\n    return binomial_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n    else:\n        product = 1\n        for i in range(1,k+1):\n            product *= (n-i+1)\n        return product"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeros from each part of the ip address\n    ip = re.sub(r'^\\d+', '', ip)\n    ip = re.sub(r'^\\d+\\.', '', ip)\n    ip = re.sub(r'^\\d+.\\d+', '', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n    match = re.match(ip_pattern, ip)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d+\\.){3}\\d+$'\n    if re.match(pattern, ip):\n        ip = re.sub(r'^(\\d+\\.){3}', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$')\n    match = pattern.match(ip)\n    if match:\n        groups = match.groups()\n        return '.'.join([str(int(group)) for group in groups if group!= '0'])\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address using regular expressions\n    return re.sub(r'^(0+)\\d', r'\\1', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return \"The list is empty\"\n\n    # Initialize the first even and first odd numbers to None\n    first_even = None\n    first_odd = None\n\n    # Loop through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If it is even, check if it's the first even number\n            if first_even is None:\n                # If it is, set the first even number to the number\n                first_even = num\n            else:\n                # If it's not, add the difference to the sum of even numbers\n                sum_even += num - first_even\n        else:\n            # If the number is odd, check if it's the first odd number\n            if first_odd is None:\n                # If it is, set the first odd number to the number\n                first_odd = num\n            else:\n                # If it's not, add the difference to the sum of odd numbers\n                sum_odd += num - first_odd\n\n    # Check if there are any even numbers in the list\n    if first_even is not None:\n        # If there are, calculate the difference of the first even and first odd numbers\n        diff = first_even - first_odd\n        # Return the difference\n        return diff\n    else:\n        # If there are no even numbers in the list, return \"There are no even numbers in the list\"\n        return \"There are no even numbers in the list\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as an input and returns the difference between the first even and first odd numbers of the list.\n    '''\n    if len(lst) < 2:\n        return 'List must have at least two elements'\n    elif len(lst) % 2 == 0:\n        return 'List must have an odd number of elements'\n    else:\n        even_num = lst[0]\n        odd_num = lst[1]\n        diff = even_num - odd_num\n        return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    \n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and the first odd numbers in the list.\n    \"\"\"\n    if not lst:\n        return \"The list is empty.\"\n    else:\n        even = lst[0]\n        odd = lst[1]\n        diff = even - odd\n        return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            elif even_num!= num:\n                return even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            elif odd_num!= num:\n                return odd_num - num\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num - num\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    for num in lst:\n        if num % 2 == 0:\n            return num\n        elif num % 2!= 0:\n            return num - 1"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            if list1[i] % 2 == 0:\n                return list1[i] - list1[i-1]\n        else:\n            if list1[i] % 2 == 1:\n                return list1[i] - list1[i-1]\n    return -1"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list of integers as input and returns the difference of the first even and first odd number of the list.\n    '''\n    if len(lst) < 2:\n        return 'List should have at least 2 numbers'\n    elif lst[0] % 2 == 0 and lst[1] % 2 == 0:\n        return 'The first even number is the same as the first odd number.'\n    else:\n        return lst[1] - lst[0]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert the binary strings to lists of bits\n    binary_str1 = list(map(int, bin(int(str1, 2))[2:].zfill(len(str1))))\n    binary_str2 = list(map(int, bin(int(str2, 2))[2:].zfill(len(str2))))\n\n    # calculate the lengths of the two binary strings\n    n1 = len(binary_str1)\n    n2 = len(binary_str2)\n\n    # initialize the minimum number of swaps\n    min_swaps = 0\n\n    # initialize the current swaps\n    current_swaps = 0\n\n    # compare the two binary strings and swap bits as needed\n    for i in range(n1):\n        # if the bits are different, swap them\n        if binary_str1[i]!= binary_str2[i]:\n            current_swaps += 1\n            min_swaps = min(min_swaps, current_swaps)\n\n            # if the current bit is 1, swap it with the complement of the next bit\n            if binary_str1[i] == 1:\n                binary_str2[i], binary_str2[i + 1] = binary_str2[i + 1], binary_str2[i]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    if len(str1)!= len(str2):\n        print(\"Both strings should have same length\")\n        return -1\n\n    # Initialize a list of 0s to represent the binary number\n    bin_num = [0]*n\n\n    # Convert the binary strings to binary numbers and store them in the bin_num list\n    for i in range(n):\n        if str1[i] == '1':\n            bin_num[i] = 1\n\n    # Create a boolean array to store the swaps required for each position\n    swap_req = [False]*n\n\n    # Iterate through the binary number and check for swaps required\n    for i in range(n-1, -1, -1):\n        if bin_num[i] == 0:\n            continue\n        if swap_req[i]:\n            continue\n        # Check for swaps required for the next positions\n        for j in range(i+1, n):\n            if swap_req[j]:\n                continue\n            if bin_num[j] == 0:\n                if str2[j] == '1':\n                    swap_req[j] = True\n                    swap_req[i] = True\n                    break\n\n    # Count the number of swaps required\n    swaps = 0\n    for i in range(n):\n        if swap_req[i]:\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert the binary strings to integers\n    n1 = int(str1, 2)\n    n2 = int(str2, 2)\n\n    # Initialize variables for storing the count of swaps and the carry over from the last operation\n    count = 0\n    carry = 0\n\n    # Iterate through the bits of the binary strings\n    for i in range(len(str1)):\n        # Calculate the sum of the current bit and the carry over from the previous operation\n        bit_sum = (int(str1[i]) + carry) % 2\n\n        # If the bit is 1, then we need to swap bits\n        if bit_sum == 1:\n            # Calculate the position of the current bit in the binary string\n            bit_pos = len(str1) - 1 - i\n\n            # If the current bit is already 1 in the other string, then we don't need to swap it\n            if bit_sum == int(str2[bit_pos]):\n                continue\n\n            # Increment the count of swaps and the carry over\n            count += 1\n            carry = 1\n\n        # If the bit is 0, then we don't need to do anything with the carry over\n        else:\n            carry = 0\n\n    # If there are any left over bits in the last operation, then we need to swap them\n    if carry == 1:\n        count += 1\n\n    # Return the minimum number of swaps required to convert one binary number to another\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Calculate the difference between the numbers\n    diff = num1 ^ num2\n    # Count the number of swaps required to convert the difference to 0\n    count = 0\n    while diff!= 0:\n        diff = diff & (diff - 1)\n        count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize variables for counting swaps\n    count = 0\n    diff = 0\n    \n    # Loop through all bits in the binary strings\n    for i in range(len(str1)):\n        # Check if bits are the same\n        if num1 & (1 << i)!= num2 & (1 << i):\n            # Increment count of swaps\n            count += 1\n            # Calculate difference between the two numbers\n            diff = abs(num1 ^ num2)\n            # Shift the bits in the strings so that one number is smaller than the other\n            if (num1 & (1 << i)) == 0:\n                # Shift num1 to the left by 1 bit\n                num1 = (num1 << 1) & (1 << (len(str1) - 1))\n            else:\n                # Shift num2 to the left by 1 bit\n                num2 = (num2 << 1) & (1 << (len(str2) - 1))\n    \n    # Return the minimum number of swaps required to convert one binary number to another\n    return count, diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n, m = len(str1), len(str2)\n    dp = [[float('inf')] * (m+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n    return dp[n][m]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    str1_len = len(str1)\n    str2_len = len(str2)\n    # Initialize variables to store the current position of each string\n    str1_pos = 0\n    str2_pos = 0\n    # Initialize variables to store the common prefixes\n    common_prefix = 0\n    # Initialize variables to store the number of swaps required\n    num_swaps = 0\n    # Initialize variables to store the common suffixes\n    common_suffix = 0\n    # Loop through each character of the strings\n    while str1_pos < str1_len and str2_pos < str2_len:\n        # If the characters are not the same, increment the common prefix and suffix\n        if str1[str1_pos]!= str2[str2_pos]:\n            common_prefix += 1\n            common_suffix = 0\n            if str1_pos > 0:\n                common_suffix = str1_pos - common_prefix\n        # If the characters are the same, increment both positions\n        else:\n            str1_pos += 1\n            str2_pos += 1\n        # Increment the number of swaps if the prefixes are not equal\n        if common_prefix!= common_suffix:\n            num_swaps += 1\n    # Return the number of swaps required\n    return num_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n    \n    # Calculate the number of swaps required to convert binary numbers\n    swaps = 0\n    for i in range(len(str1)):\n        if bin1 & 1 == bin2 & 1:\n            # If bits are equal, swap bit positions\n            bin1 >>= 1\n            bin2 >>= 1\n            swaps += 1\n        else:\n            # If bits are different, shift the binary number to the right\n            if bin1 & 1 == 1:\n                bin1 >>= 1\n                swaps += 1\n            else:\n                bin2 >>= 1\n                swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both the strings to binary format\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for the min number of swaps and max number of bits in each number\n    min_swaps = 0\n    max1 = len(str1)\n    max2 = len(str2)\n\n    # Check if any number has more than 1 bit\n    while max1 > 1:\n        max1 -= 1\n\n    while max2 > 1:\n        max2 -= 1\n\n    # Iterate through the bits of both numbers and swap the bits if they differ\n    for i in range(max1):\n        if num1 & (1 << i)!= num2 & (1 << i):\n            min_swaps += 1\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n\n    # Iterate through the bits of the smaller number and swap them if they differ\n    for i in range(max1, max2):\n        if num1 & (1 << i)!= num2 & (1 << i):\n            min_swaps += 1\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function calculates the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both strings to binary\n    binary1 = ''.join(bin(int(x))[2:].zfill(8) for x in str1)\n    binary2 = ''.join(bin(int(x))[2:].zfill(8) for x in str2)\n\n    # Find the lengths of both strings\n    len1 = len(binary1)\n    len2 = len(binary2)\n\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Check for each possible swap\n    for i in range(len1):\n        for j in range(len2):\n            # If both are 0, continue\n            if binary1[i] == '0' and binary2[j] == '0':\n                continue\n\n            # Calculate the difference between the i-th bit in binary1 and the j-th bit in binary2\n            diff = binary1[i] + binary2[j] - '1'\n\n            # If the difference is 0, set the minimum number of swaps to 0 and return\n            if diff == '0':\n                min_swaps = 0\n                return min_swaps\n\n            # If the difference is greater than 0, calculate the number of swaps required\n            swaps = (len1 - i) + (len2 - j)\n            if swaps < min_swaps:\n                min_swaps = swaps\n\n    # If no swap is possible, set the minimum number of swaps to infinity\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_bytes = 0\n    for i in range(len(tuple_list)):\n        size_bytes += sys.getsizeof(tuple_list[i])\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list[0])\n    for i in range(len(tuple_list)):\n        size_of_tuple += sys.getsizeof(tuple_list[i])\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n\nif __name__ == '__main__':\n    # Example usage:\n    tup = (1, '2', [3, 4], (5, 6))\n    size_bytes = tuple_size(tup)\n    print(\"Size in bytes: \", size_bytes)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Get the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize variables to keep track of the current index and the current sum\n    i = 0\n    j = 0\n    current_sum = 0\n\n    # Traverse through both arrays simultaneously until we reach the kth element\n    while current_sum < k:\n        if i < n1 and j < n2:\n            # If the current element from arr1 is less than the current element from arr2, add it to the current sum and move to the next element from arr1\n            if arr1[i] < arr2[j]:\n                current_sum += arr1[i]\n                i += 1\n            else:\n                current_sum += arr2[j]\n                j += 1\n        elif i < n1:\n            # If the current element from arr1 is less than the current element from arr2, move to the next element from arr1\n            current_sum += arr1[i]\n            i += 1\n        else:\n            # If the current element from arr1 is greater than the current element from arr2, move to the next element from arr2\n            current_sum += arr2[j]\n            j += 1\n\n    # Return the kth element from the last array that we traversed\n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the midpoints of both arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    # If the first array has fewer elements than the second, swap the arrays and recurse with the swapped arrays\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    # Check if k is in the first half of the first array\n    if k <= mid1:\n        return find_kth(arr1, arr1[:mid1], k)\n    \n    # Check if k is in the second half of the first array\n    elif k > mid1 + 1:\n        return find_kth(arr1[mid1+1:], arr1[mid1:], k - mid1 - 1)\n    \n    # If k is in the first half of the second array, find the kth element there\n    elif k <= mid1 + mid2:\n        return find_kth(arr2, arr2[:mid2], k)\n    \n    # If k is in the second half of the second array, find the kth element there\n    else:\n        return find_kth(arr2[mid2+1:], arr2[mid2:], k - mid2 - 1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Initialize the pointers for each array\n    i, j = 0, 0\n\n    # Initialize the sum of elements in both arrays\n    sum_of_elements = 0\n\n    # Traverse both arrays simultaneously\n    while i < len(arr1) and j < len(arr2):\n        # Add the smaller element from both arrays\n        sum_of_elements += min(arr1[i], arr2[j])\n\n        # Move the pointers of the smaller array\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n        # If we have found kth element, return its value\n        if sum_of_elements >= k:\n            return sum_of_elements - min(arr1[i], arr2[j])\n\n    # If we have not found kth element, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    # Compare the first elements of both arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            # If the elements are equal, compare the next elements\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            # If arr1[i] is smaller, move i to the next element\n            i += 1\n        else:\n            # If arr2[j] is smaller, move j to the next element\n            j += 1\n            \n    # If the remaining elements of arr1 are less than k, return the remaining elements of arr1\n    if i == len(arr1):\n        return arr1[j:]\n    # If the remaining elements of arr2 are less than k, return the remaining elements of arr2\n    else:\n        return arr2[i:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and an integer k as input and returns\n    the kth smallest element from the two arrays. If there is a tie, the\n    function returns the element from the array with the smaller index.\n    \"\"\"\n    if len(arr1) == 0:\n        return arr2[k - 1] if k <= len(arr2) else None\n    elif len(arr2) == 0:\n        return arr1[k - 1] if k <= len(arr1) else None\n    else:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        elif k == len(arr1) + 1:\n            return max(arr1[-1], arr2[-1])\n        else:\n            mid = len(arr1) // 2\n            if arr1[mid] < arr2[mid]:\n                return find_kth(arr1[mid:], arr2, k)\n            else:\n                return find_kth(arr1, arr2[mid:], k - mid - 1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    # If we reach here, we need to check if kth element is in arr1 or arr2\n    if i == len(arr1):\n        return arr2[j]\n    elif j == len(arr2):\n        return arr1[i]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    left1, right1 = 0, len(arr1) - 1\n    left2, right2 = 0, len(arr2) - 1\n\n    while left1 <= right1 and left2 <= right2:\n        mid1 = (left1 + right1) // 2\n        mid2 = (left2 + right2) // 2\n\n        if arr1[mid1] == arr2[mid2]:\n            if k == 1:\n                return arr1[mid1]\n            k -= 1\n            left1, right1 = mid1 + 1, right1\n        elif arr1[mid1] < arr2[mid2]:\n            if k <= (right1 - mid1):\n                left1 = mid1 + 1\n            else:\n                right1 = mid1 - 1\n        else:\n            if k <= (right2 - mid2):\n                left2 = mid2 + 1\n            else:\n                right2 = mid2 - 1\n\n    if k == 1:\n        return arr1[right1]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            k -= 1\n            if k == 0:\n                return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes an integer number as input and returns True if it is an Armstrong number, else False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    '''\n\n    # Convert the number to a string\n    str_num = str(number)\n\n    # Convert the string to a list of digits\n    digits = [int(digit) for digit in str_num]\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_powers = sum([digit**len(digits) for digit in digits])\n\n    # Check if the sum of the digits raised to the power of the number of digits is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    A helper function that checks whether a number is armstrong or not.\n    \"\"\"\n    total = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    return num == total\n\ndef armstrong_number(number):\n    \"\"\"\n    Checks whether the given number is armstrong or not.\n    \"\"\"\n    if number == 0:\n        return False\n    elif number < 10:\n        return True\n    else:\n        return is_armstrong(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(n):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        sum = 0\n        temp = n\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        return n == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether a given number is Armstrong or not.\n    \"\"\"\n    total = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    if n == total:\n        return True\n    else:\n        return False\n\ndef armstrong_number(number):\n    \"\"\"\n    This function checks whether a given number is Armstrong or not.\n    \"\"\"\n    if number == 0:\n        return False\n    elif is_armstrong(number):\n        return True\n    else:\n        for i in range(1, number):\n            if is_armstrong(number - i):\n                return True\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Function to check whether a number is an Armstrong number or not.\n    \"\"\"\n    num = n\n    while num > 0:\n        digit = num % 10\n        num //= 10\n        total = total + digit**3\n    if n == total:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(number)\n    # Calculate the sum of the cubes of each digit in the number\n    num_sum = sum(int(digit)**3 for digit in num_str)\n    # Check if the sum of cubes equals the original number\n    if num_sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    num_str = str(number)\n\n    # Initialize the sum of the squares of each digit in the number\n    sum_of_squares = 0\n\n    # Iterate through each digit in the number\n    for digit in num_str:\n        # Convert the digit to an integer and square it\n        square = int(digit)**2\n\n        # Add the square to the sum of the squares\n        sum_of_squares += square\n\n    # Check if the sum of the squares is equal to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to string to make it iterable\n    str_num = str(number)\n    # initialize sum variable to 0\n    sum_of_squares = 0\n    # loop through each digit in the stringified number\n    for digit in str_num:\n        # convert the digit to an integer and square it\n        square = int(digit)**2\n        # add the square to the sum of squares\n        sum_of_squares += square\n    # return True if the sum of squares is equal to the original number, False otherwise\n    return number == sum_of_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is an Armstrong number, else False.\n    \"\"\"\n    num_str = str(num)\n    total = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        total += int(digit) ** power\n\n    if num == total:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Check whether the given number is Armstrong or not.\n    \"\"\"\n    num_str = str(num)\n    num_sum = 0\n    power = len(num_str)\n\n    for i in range(len(num_str)):\n        num_sum += int(num_str[i]) ** power\n\n    return num == num_sum\n\ndef armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is Armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n\n    return is_armstrong(number)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        raise ValueError('Input must be a positive integer.')\n    sum_ = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_ += i\n        count += 1\n    average = sum_/count\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        count += 1\n        sum += i\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    count = 0\n    while count < number:\n        count += 1\n        sum_ += count\n    average = sum_ / number\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i\n        count += 1\n        \n    average = sum/count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        return 'Please enter a positive integer.'\n    elif number == 1:\n        return 'The sum of the first natural number is 1 and the average is 1.'\n    else:\n        sum = 0\n        for i in range(1, number + 1):\n            sum += i\n        avg = sum / number\n        return f'The sum of the first {number} natural numbers is {sum} and the average is {avg:.2f}.'"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n        count += 1\n    average = sum_of_numbers / count\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    for i in range(1, number+1):\n        sum_of_numbers += i\n    average = sum_of_numbers/number\n    return sum_of_numbers, average\n\nprint(sum_average(5)) # Output: (15, 3.0)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # check if the number is even or not\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n            \n    for char in str1:\n        if count_dict[char] > 1:\n            return char\n            \n    return \"No repeated characters found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Create a dictionary to store the frequency of each character\n    freq_dict = {}\n    # Loop through the list of characters\n    for char in char_list:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it and set its frequency to 1\n        else:\n            freq_dict[char] = 1\n    # Loop through the dictionary to find the first repeated character\n    for char, freq in freq_dict.items():\n        if freq > 1:\n            return char\n    # If no repeated characters were found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character\n    for char, count in freq.items():\n        if count > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return 'No repeated character found'\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(n):\n        if i % 2 == 0:\n            lucid_numbers.append(i ** 2)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 0\n\n    while True:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        if i == n:\n            break\n        i += 1\n\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a given integer is a lucid number.\n    \"\"\"\n    s = str(n)\n    for i in range(len(s)):\n        if int(s[i])!= n // int(s[i]):\n            return False\n    return True\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if sum(int(digit) ** i for digit in str(i)) == i:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    while num <= n:\n        if num % 2 == 0:\n            lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 0\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a given integer is a lucid number.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while True:\n        if all(int(digit) >= int(digit) for digit in str(i)):\n            lucid.append(i)\n            i += 1\n        else:\n            break\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    \n    lucid_numbers = [x for x in range(2, n+1) if primes[x]]\n    \n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    A lucid number is a number whose digits are all the same.\n    '''\n    if n < 10:\n        return True\n    else:\n        digits = [int(digit) for digit in str(n)]\n        return digits == digits[0] * len(digits)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(2, n+1):\n        if i > 2:\n            is_lucid = True\n            for j in range(2, i):\n                if i % j == 0:\n                    is_lucid = False\n                    break\n            if is_lucid:\n                ludic_list.append(i)\n    return ludic_list"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string into a list of words\n    reversed_words = [] # create an empty list to store the reversed words\n    for word in words: # loop through each word in the list\n        reversed_words.insert(0, word) # insert the word at the beginning of the list\n    return''.join(reversed_words) # join the reversed words back into a string with spaces between them"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the words back into a string\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string into words\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1): # loop through the words in reverse order\n        reversed_words.append(words[i]) # add each word to a new list in reverse order\n    reversed_string =''.join(reversed_words) # join the list of reversed words back into a string with spaces\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string by spaces\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back together into a string\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if the given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n\n    # Check if the number is divisible by 2 or 3\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n\n    # Check if the number is divisible by any number between 4 and the square root of the number\n    for i in range(4, int(num**0.5)+1, 2):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns the corresponding value in radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # use the search() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # iterate through each match and return the substring, start index, and end index\n    for match in matches:\n        # extract the substring using the start and end indices\n        substring = text[match.start():match.end()]\n        # return the substring, start index, and end index\n        return substring, match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.findall() function to search for all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize a list to store the matches and their start and end indices\n    matches_info = []\n    \n    # Loop through the matches and calculate the start and end indices for each match\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        matches_info.append((match, start_index, end_index))\n        \n    # Return the matches_info list\n    return matches_info"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regex pattern as input.\n    It uses the re.findall() method to search for all substrings in the string that match the pattern.\n    It returns a list of tuples containing the matching substrings, their start index and their end index.\n    '''\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        result.append((match, start_index, end_index))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Find all substrings in a string that match the given regex pattern.\n    Return a list of tuples, where each tuple contains:\n    - the substring\n    - the start index of the substring\n    - the end index of the substring\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = match.group()\n        start = match.start()\n        end = match.end()\n        literals.append((literal, start, end))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function searches a string for a regex pattern. The function returns the matching subtring, a start index, and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        first_match = matches[0]\n        start_index = text.find(first_match)\n        end_index = start_index + len(first_match)\n        return first_match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print(match, start, end)\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog slept.\"\npattern = r\"(?<=\\s)([a-z]+)\"\nfind_literals(text, pattern)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize variables\n    count = 0\n    bell = 0\n    \n    # Check for edge cases\n    if n <= 0:\n        return None\n    \n    # Loop through each element of the series\n    for i in range(n):\n        # Check if the current element is prime or not\n        if i == 0 or i == 1:\n            bell += i\n        elif i > 1:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                bell += i\n        \n        # Check if the sum of elements exceeds n\n        if bell > n:\n            break\n        \n        # Increment the count and reset the bell number to 0\n        count += 1\n        bell = 0\n        \n    # Return the count of bell numbers\n    return count"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(1, n+1):\n        bell += bell\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer argument n and returns the nth Bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(1, n):\n        a, b, c = b, a + b, c + b\n    return c"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth bell number using the formula:\n    B(n) = 1 + (1/2)^n\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 + (1/2)**n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth bell number.\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 21\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2**n) * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (n+1)*(bell_Number(n-1))//2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    list2.pop(L-1)\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove the k'th element from the list\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = []\n    for i in range(L):\n        if i!= k-1:\n            result.append(list1[i])\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n\n    Parameters:\n    list1 (list): A list of integers.\n    L (int): The value of k.\n\n    Returns:\n    list: A new list without the k'th element.\n    \"\"\"\n    if len(list1) < L:\n        print(\"Error: The length of the list should be at least L.\")\n        return None\n\n    for i in range(len(list1)):\n        if i == L-1:\n            list1.pop(i)\n            break\n        elif i == len(list1)-1:\n            list1.pop()\n            break\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Define the kth element\n    k = L // 2\n\n    # Remove the kth element\n    del list1[k-1]\n\n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1 # the index of the element to be removed\n    list1.pop(k) # remove the kth element from the list\n    return list1 # return the updated list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.pop(L.index(list1[L.index(list1)-1]))\n    return L"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Convert the list to a list of tuples\n    list2 = [(i, list1[i]) for i in range(len(list1))]\n\n    # Sort the list based on the second element of each tuple (the element to be removed)\n    list2.sort(key=lambda x: x[1])\n\n    # Remove the kth element from the list\n    del list2[L-1]\n\n    # Convert the list of tuples back to a list\n    list3 = [x[0] for x in list2]\n\n    return list3"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].sort()\n        test_list[i].reverse()\n        max_val = test_list[i][N-1]\n        print(\"The maximum value in the {}th column is: {}\".format(N, max_val))"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_num:\n            max_num = test_list[i][N]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for i in range(len(test_list)):\n        col_max.append(max(test_list[i][N-1], key=lambda x: x[N-1]))\n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N:\n            continue\n        for j in range(len(test_list[i])):\n            if j == N:\n                max_value = max(max_value, test_list[i][j])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_value = 0\n    n = 1  # initialize n to 1 since 0th index of list is already used for column index\n    for row in test_list:\n        if n == N:\n            max_value = max(max_value, max(row))\n            n = 1  # reset n to 1 since we have iterated through all columns\n        else:\n            n += 1\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if i % N == 0:\n            max_num = max(max_num, max(test_list[i]))\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n        else:\n            max_val = max(max_val, test_list[i][N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, max(test_list[i]))\n        else:\n            max_value = max(max_value, max(test_list[i][N-1]))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # finding the length of the first list in the matrix\n    m = len(test_list)\n\n    # finding the length of the second list in the matrix\n    n = len(test_list[0])\n\n    # checking if N is a valid value\n    if N > n:\n        print(\"N is greater than the number of columns in the matrix.\")\n        return None\n\n    # finding the max of then'th column\n    max_val = float('-inf')\n    for i in range(m):\n        if i < n:\n            if max_val < test_list[i][N-1]:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        first_elem = sublist[0]\n        second_elem = sublist[1]\n        result.append([first_elem, second_elem])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged_lst = []\n    for i in lst:\n        merged_lst.append([i[0], i[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize cumulative sum to zero\n    cum_sum = 0\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Extract the values from the tuple and add them to the cumulative sum\n        cum_sum += tup[1]\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n    # loop through each element in the list\n    for element in test_list:\n        # add the element to the cumulative sum\n        cumulative_sum += element\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable\n    cumulative_sum = 0\n\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Calculate the sum of the values in the tuple\n        total = sum(tup)\n        # Add the total to the cumulative sum\n        cumulative_sum += total\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n    # Loop through the tuple list and add up the values\n    for num in test_list:\n        cumulative_sum += num\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Add the value of each tuple to the cumulative sum\n        cum_sum += tup[1]\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # initialize the cumulative sum to zero\n    cumulative_sum = 0\n\n    # loop through each tuple in the list\n    for tup in test_list:\n        # loop through each value in the tuple\n        for val in tup:\n            # add the value to the cumulative sum\n            cumulative_sum += val\n\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n    \n    # Loop through each tuple in the test_list\n    for i in range(len(test_list)):\n        # If the value is not None, add it to the cumulative sum\n        if test_list[i] is not None:\n            cumulative_sum += test_list[i]\n            \n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # initialize the cumulative sum with the first element of the list\n    cumulative_sum = test_list[0]\n    # iterate through the list and add each element to the cumulative sum\n    for i in range(1, len(test_list)):\n        cumulative_sum += test_list[i]\n    # return the cumulative sum\n    return cumulative_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        averages.append(sum(num_tuple)/len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        avg = total / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = 0\n        count = 0\n        for sub_num in num:\n            total += sub_num\n            count += 1\n        averages.append(total/count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_list = []\n    for num_tuple in nums:\n        total = 0\n        for num in num_tuple:\n            total += num\n        total_list.append(total / len(num_tuple))\n    return total_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values\n    avg_list = []\n\n    # iterate over each tuple in the input tuple\n    for tup in nums:\n        # initialize a variable to keep track of the total sum of the values in the tuple\n        total = 0\n        \n        # iterate over each value in the tuple and add it to the total\n        for val in tup:\n            total += val\n        \n        # calculate and append the average value to the average_list\n        avg_list.append(total/len(tup))\n    \n    # return the average_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        temp_sum = sum([x[i] for x in nums])\n        average = temp_sum / len(nums)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    avg_list = []\n\n    # Iterate through each tuple in the input tuple of tuples\n    for t in nums:\n        # Compute the average of the tuple and append it to the list\n        avg = sum(t) / len(t)\n        avg_list.append(avg)\n\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        sum_of_numbers = sum(num_tuple)\n        average = sum_of_numbers / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        if isinstance(num, tuple):\n            avg = sum(num) / len(num)\n            result.append(avg)\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length!\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element-wise modulo.\n\n    Parameters:\n    test_tup1 (tuple): First tuple to perform modulo on\n    test_tup2 (tuple): Second tuple to perform modulo on\n\n    Returns:\n    tuple: Tuple containing the element-wise modulo of the tuples\n\n    \"\"\"\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(modulo_result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Error: Tuples must have the same length.')\n        return None\n    \n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    \n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # check if the length of the input tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: the two tuples must have the same length\")\n        return\n    \n    # perform element-wise modulo\n    result_tup = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length!\")\n    \n    # Perform the element-wise modulo operation\n    result_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    # initialize variables\n    max_steps = 0\n    jumps = 0\n    current = (0, 0)\n\n    # loop through all possible points\n    for i in range(1, steps + 1):\n        if i > max_steps:\n            max_steps = i\n\n        # move in the direction of the highest point\n        if current[1] == d:\n            return jumps\n\n        # move in the direction of the next lower point\n        next_lower = (current[0], min(current[1], d))\n        if next_lower not in visited:\n            visited.add(next_lower)\n            queue.append(next_lower)\n\n        # backtrack if the number of jumps required is greater than the maximum number of jumps we can take\n        jumps += 1\n        if jumps > max_steps:\n            max_steps = jumps - 1\n            current = (current[0], d)\n            jumps = 0\n\n        current = next_lower\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    start_x = 0\n    start_y = 0\n    end_x = d\n    end_y = 0\n    jump_count = 0\n    current_x = start_x\n    current_y = start_y\n    \n    # Check if the destination is within the boundaries of the 2d plane\n    if end_x > steps or end_y > steps:\n        return -1\n    \n    # Perform the jump operations until the end point is reached\n    while current_x!= end_x or current_y!= end_y:\n        # Check if the destination is within the boundaries of the 2d plane\n        if end_x > steps or end_y > steps:\n            return -1\n        \n        # Check if the next jump is possible\n        if current_y == end_y:\n            current_x += 1\n        else:\n            current_y += 1\n        \n        # Increment the jump count\n        jump_count += 1\n    \n    # Return the final jump count\n    return jump_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    n = len(steps)\n    min_steps = 0\n    last_pos = -1\n\n    # iterate through steps\n    for i in range(n):\n        # check if the current step is the start point\n        if steps[i] == 0:\n            # initialize variables\n            steps_left = steps[i]\n            steps_taken = 1\n            current_pos = i\n\n            # iterate through steps from the current position to the end\n            while steps_left > 0 and current_pos < n - 1:\n                # check if the current position is the end point\n                if steps[current_pos + 1] == 0:\n                    # update minimum number of steps if necessary\n                    if steps_taken < min_steps:\n                        min_steps = steps_taken\n\n                    # move to the next step\n                    steps_left -= 1\n                    current_pos += 1\n                else:\n                    # move to the next step\n                    steps_left -= 1\n                    current_pos += 1\n                steps_taken += 1\n\n    # return the minimum number of steps\n    return min_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    curr_x = 0\n    curr_y = 0\n\n    # Iterate through the list of steps\n    for i in range(steps):\n        # Update the current position\n        if curr_x == d:\n            curr_x = 0\n            curr_y += 1\n        else:\n            curr_x += 1\n\n        # Check if we have reached the destination\n        if curr_y == 0:\n            return jumps + 1\n\n        # Check for the minimum number of jumps required for the current position\n        if i == steps - 1:\n            min_jumps = abs(curr_x - d)\n            return jumps + min_jumps\n\n        # Check if the current position is already visited\n        if (curr_x, curr_y) in visited:\n            continue\n\n        # Add the minimum number of jumps required for the current position to the count\n        min_jumps = abs(curr_x - d)\n        visited.add((curr_x, curr_y))\n        jumps += min_jumps\n\n    # If the loop completes without finding the destination, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr_pos = 0\n    \n    while curr_pos < steps:\n        jumps += 1\n        if curr_pos >= steps:\n            break\n        if curr_pos + d >= steps:\n            curr_pos += d - (steps - curr_pos)\n        else:\n            curr_pos += d\n        \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr_pos = 0\n    next_pos = 0\n    step_count = 0\n    while next_pos!= steps-1:\n        if next_pos == 0:\n            if step_count % 2 == 0:\n                curr_pos += 1\n            else:\n                curr_pos -= 1\n        else:\n            if step_count % 2 == 0:\n                curr_pos += d\n            else:\n                curr_pos -= d\n        next_pos = curr_pos\n        step_count += 1\n        jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_rows = 1\n    jumps = 0\n    row_index = 0\n    col_index = 0\n\n    while row_index < max_rows and col_index < steps:\n        row_index += 1\n        if row_index < max_rows and row_index % d == 0:\n            max_rows += 1\n            jumps += 1\n        else:\n            col_index += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    jumps = 0\n    i = 0\n    j = 0\n\n    while steps > 0:\n        i += 1\n        steps -= 1\n\n        if i == d:\n            if j == 0:\n                return jumps\n            i = j\n            j = 0\n            jumps += 1\n        else:\n            j += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # We'll start by initializing the two pointers i and j at 0, representing the starting point of the jump\n    i = 0\n    j = 0\n\n    # We'll also initialize a counter variable k to keep track of how many jumps we need to make\n    k = 0\n\n    # We'll use a while loop to keep going until the pointers reach the end of the array\n    while i < len(steps) - 1:\n        # If the current point is within the distance d from (0, 0)\n        if steps[i][0] <= d <= steps[i][1]:\n            # We'll increment the counter variable and set the value of i to the next index\n            k += 1\n            i += 1\n        # If the current point is not within the distance d from (0, 0)\n        else:\n            # We'll set the value of j to the next index\n            j = i + 1\n\n            # We'll check if the next point is within the distance d from (0, 0)\n            while j < len(steps) - 1 and steps[j][0] <= d <= steps[j][1]:\n                # If it is, we'll increment the counter variable and set the value of j to the next index\n                k += 1\n                j += 1\n\n            # We'll set i to the next index to continue the jump\n            i = j\n\n    # Once we've checked all the points in the array, we'll return the value of k\n    return k"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_pos = 0\n    destination = (d, 0)\n    while current_pos!= destination[0] and current_pos!= 0:\n        steps -= 1\n        if current_pos == 0:\n            jumps += 1\n            current_pos = destination[0]\n        elif current_pos < destination[0]:\n            current_pos += 1\n        else:\n            current_pos -= 1\n    if current_pos == destination[0]:\n        jumps += 1\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero.\")\n        result = num1 / num2\n        print(f\"{num1} / {num2} = {result}\")"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    \"\"\"\n    This function takes two lists as input and returns a list where each element is the result of dividing the corresponding element of the two lists.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"The lists have different lengths.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different length.\")\n        return\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the lists element-wise\n    for i in range(len(nums1)):\n        # Check if the second element is zero\n        if nums2[i] == 0:\n            print(\"Error: Division by zero.\")\n            return\n        else:\n            result.append(nums1[i] / nums2[i])\n    \n    # Return the list of results\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # initialize an empty list for the result\n    result = []\n\n    # iterate through both lists simultaneously\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    \n    if numbers:\n        return test_str[numbers[0]:]+numbers[1:]\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    # initialize a list to store the numbers\n    num_list = []\n\n    # iterate through the string\n    for char in test_str:\n        # check if the current character is a number\n        if char.isdigit():\n            # add the number to the list\n            num_list.append(char)\n        # if the current character is not a number, add it to the end of the string\n        else:\n            # split the string into two parts, one with the numbers and the other without\n            num_str, non_num_str = test_str.split(char)\n            # concatenate the parts with the numbers in reverse order\n            test_str = num_str + ''.join(num_list[::-1]) + non_num_str\n            # empty the list\n            num_list = []\n\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize an empty list to store the numbers\n    numbers = []\n\n    # Loop through each character in the input string\n    for char in test_str:\n\n        # If the character is a number, append it to the list of numbers\n        if char.isdigit():\n            numbers.append(char)\n\n    # Join the numbers list to form the final output string\n    output_str = ''.join(numbers)\n\n    return output_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a list to store numbers\n    nums = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number\n        if char.isdigit():\n            # append it to the list of numbers\n            nums.append(char)\n    # join the list of numbers into a string\n    result = ''.join(nums)\n    # return the result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    num_count = 0\n    num_list = []\n    temp_str = ''\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        if char.isdigit():\n            # If the current character is a number, append it to the number list\n            num_list.append(char)\n        else:\n            # If the current character is not a number, append it to the temp string\n            temp_str += char\n            \n    # Move the number list to the end of the temp string and return the final string\n    for i in range(len(num_list)):\n        temp_str = temp_str.replace(num_list[i], '', 1)\n    \n    return temp_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # find all the numbers in the string\n    nums = re.findall(r'\\d+', test_str)\n    \n    # reverse the list of numbers\n    nums.reverse()\n    \n    # join the numbers back into a string and return it\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a list to store the numbers\n    num_list = []\n    \n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n    \n    # join the num_list into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize variables for the maximum subset size and the current subset size\n    max_size = 0\n    curr_size = 1\n\n    # Iterate through the list\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            # If the current element is divisible by the previous element, add to the current subset size\n            curr_size += 1\n        else:\n            # If the current element is not divisible by the previous element, update the maximum subset size and start a new subset\n            if curr_size > max_size:\n                max_size = curr_size\n            curr_size = 1\n\n    # Check for the last subset size\n    if curr_size > max_size:\n        max_size = curr_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = [0] * len(a)\n    max_size = 0\n    n = len(a)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                if max_subset[i] < max_subset[j]:\n                    max_subset[i] += 1\n                    max_size = max(max_size, max_subset[i])\n                elif max_subset[j] < max_subset[i]:\n                    max_subset[j] += 1\n                    max_size = max(max_size, max_subset[j])\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return 0\n\n    # Sort the given list\n    a.sort()\n\n    # Initialize two pointers\n    left = 0\n    right = n-1\n\n    # Initialize a variable to store the size of the largest subset\n    largest = 0\n\n    # Loop through the list and find the largest subset\n    while left < right:\n        if a[left] % a[right] == 0:\n            largest = max(largest, right-left+1)\n            left += 1\n            right -= 1\n        elif a[left] % a[right] < 0:\n            left += 1\n        else:\n            right -= 1\n\n    # Add the last element of the list if it is divisible by any element in the subset\n    if a[right] % a[left] == 0:\n        largest = max(largest, right-left+1)\n\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize a variable to keep track of the size of the largest subset\n    largest_size = 0\n\n    # Iterate through each number in the list\n    for i in range(len(a)):\n        # Initialize a variable to keep track of the size of the current subset\n        current_size = 1\n\n        # Iterate through each number after the current number in the list\n        for j in range(i+1, len(a)):\n            # If the current number is divisible by the next number, add 1 to the current subset size\n            if a[j] % a[i] == 0:\n                current_size += 1\n            # If we have found a pair that is not divisible, exit the loop\n            else:\n                break\n\n        # Update the largest size if the current subset size is greater\n        if current_size > largest_size:\n            largest_size = current_size\n\n    # Return the largest size of the subset\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a set to store the numbers that we have seen so far\n    seen = set()\n    # Initialize variables to store the maximum size and the current subset size\n    max_size = 0\n    current_size = 0\n    \n    # Loop through the list of numbers\n    for num in a:\n        # If the number is not in the set, it is not in the current subset and we need to add it to the set and increment the current size\n        if num not in seen:\n            seen.add(num)\n            current_size += 1\n        # If the number is in the set, it is already in the current subset and we need to check if it can be added to the current subset or to a larger subset\n        else:\n            # If the current subset size is greater than the maximum size, we need to update the maximum size\n            if current_size > max_size:\n                max_size = current_size\n            # If the current subset size is equal to the maximum size, we need to check if adding the number to the current subset would increase it further\n            else:\n                # If adding the number to the current subset would not increase it further, we need to backtrack and try adding it to a larger subset\n                if num % seen.pop() == 0:\n                    # We can add the number to the current subset, so we do so and decrement the current size\n                    seen.add(num)\n                    current_size -= 1\n    \n    # If the current subset size is greater than the maximum size, we need to update the maximum size\n    if current_size > max_size:\n        max_size = current_size\n    \n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    dp = [1] * n\n    \n    # Initialize dp[0] and dp[1]\n    for i in range(2, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 1\n    \n    # Fill the rest of dp array\n    for i in range(2, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, j-i+1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 1\n    \n    # Traverse through all possible subsets of the list\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                size = i - j\n                if size > max_size:\n                    max_size = size\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return 0\n    \n    a.sort()\n    \n    i = 1\n    j = 0\n    result = 1\n    \n    while i < n:\n        while j < n - 1 and a[j] + a[j + 1] > a[i] * 2:\n            j += 1\n            \n        if j == n - 1 or a[j + 1] < a[i]:\n            result = max(result, i - j)\n            j += 1\n            \n        i += 1\n    \n    return result"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays to form a single array\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # Return the median based on the size of the array\n    if n % 2 == 0:\n        return (arr[n//2] + arr[n//2-1])/2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n\n    # calculate the median\n    if n % 2 == 0:\n        median = (arr[n//2 - 1] + arr[n//2])/2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two sorted lists\n    merged = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_merged = sorted(merged)\n    \n    # Find the median index\n    mid = n // 2\n    if n % 2 == 0:\n        median_index = mid\n    else:\n        median_index = mid + 1\n    \n    # Return the median element\n    return sorted_merged[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate both arrays and sort them\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (arr[mid-1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Find the middle index\n    mid = n // 2\n    \n    # Check if the length of the list is odd or even\n    if n % 2 == 0:\n        # Find the median of the two middle elements\n        median = (merged_list[mid-1] + merged_list[mid]) / 2\n    else:\n        # Find the median of the middle element\n        median = merged_list[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two sorted lists\n    all_list = arr1 + arr2\n\n    # Sort the concatenated list\n    all_list.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (all_list[n-1] + all_list[n//2]) / 2\n    else:\n        median = all_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Find the middle index of the merged list\n    mid = n // 2\n\n    # If the length of the merged list is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged_list[mid]\n\n    # If the length of the merged list is even, the median is the average of the middle two elements\n    else:\n        return (merged_list[mid - 1] + merged_list[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two arrays\n    arr = arr1 + arr2\n    # sort the concatenated array\n    arr.sort()\n    # find the middle index\n    mid = n // 2\n    # if the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return arr[mid]\n    # otherwise, return the average of the middle two elements\n    else:\n        return (arr[mid-1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"The lists should have the same size.\")\n    \n    mid = n // 2\n    arr1_index = 0\n    arr2_index = 0\n\n    for i in range(n):\n        if arr1[arr1_index] < arr2[arr2_index]:\n            if i == mid:\n                return arr1[arr1_index]\n            arr1_index += 1\n        elif arr1[arr1_index] > arr2[arr2_index]:\n            if i == mid:\n                return arr2[arr2_index]\n            arr2_index += 1\n        else:\n            if i == mid - 1:\n                return arr1[arr1_index]\n            elif i == mid:\n                return (arr1[arr1_index] + arr2[arr2_index]) / 2\n            arr1_index += 1\n            arr2_index += 1"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size and returns the median of the two lists.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists should have the same size\")\n\n    # Merge the two lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Calculate the median\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2] + sorted_list[len(sorted_list)//2 - 1]) / 2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # converting string to uppercase\n    string = string.upper()\n    # checking if the string is already uppercase\n    if string == string.upper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = string.upper()\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Find the length of the list\n    n = len(newList)\n    # Check if the list has at least 2 elements\n    if n < 2:\n        # If the list has only 1 element, return the list\n        return newList\n    # Swap the first and last elements of the list\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1: \n        newList[0], newList[-1] = newList[-1], newList[0] \n        print(newList) \n    else: \n        print(\"List must have at least 2 elements.\") "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # List to swap the first and last elements\n    tempList = newList[1:len(newList)-1]\n\n    # Interchanging the first and last elements of the tempList\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Adding the interchanged elements of the tempList back to the original list\n    newList[1:len(newList)-1] = tempList\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has at least two elements\n    if length < 2:\n        return newList\n    \n    # Get the first and last elements of the list\n    first = newList[0]\n    last = newList[length - 1]\n    \n    # Replace the last element with the first element\n    newList[length - 1] = first\n    \n    # Replace the first element with the last element\n    newList[0] = last\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    else:\n        print(\"List must have at least two elements\")\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"The list should have at least two elements.\"\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Checking if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The given list must have at least two elements.\")\n    else:\n        # Swapping the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"The new list is:\", newList)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define a helper function to calculate the length of a triangle given the side lengths\n    def triangle_length(a, b, c):\n        return (a + b + c) / 2\n\n    # Calculate the length of each side of a triangle\n    a = triangle_length(1, r, r)\n    b = triangle_length(r, 1, r)\n    c = triangle_length(r, r, 1)\n\n    # Determine the largest side of the triangle\n    largest = a\n    if b > largest:\n        largest = b\n    if c > largest:\n        largest = c\n\n    # Calculate the area of the largest triangle\n    area = largest * (largest - a) * (largest - b) * (largest - c)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the semi-perimeter of the triangle\n    s = 2 * r\n    \n    # Calculate the semi-area of a circle\n    area_circle = 2 * r * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_largest = area_circle - (s - area_circle)\n    \n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    A = 1\n    h = 2*math.sin(math.pi/5)\n    h_sq = h*h\n    A_max = (1-r*r)/(2*h_sq)\n    return A_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # find the area of a triangle using Heron's formula\n    # the formula is: a^2 + b^2 = c^2\n    # where a, b and c are the lengths of the sides of the triangle\n    # we want to find the longest side (a)\n    # then we calculate the area of the triangle using Heron's formula\n    # finally, we multiply the area by the radius to find the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    a = (3*r**2)**0.5\n    area = (a**2 * (math.pi * r**2)) / 4\n    \n    # return the calculated area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # define the semi-circle as a rectangle with dimensions r x r\n    semi_circle = [(x, y) for x in range(-r, r+1) for y in range(-r, r+1)]\n    # calculate the area of each triangle formed by the semi-circle\n    areas = [0] * len(semi_circle)\n    for i, (x, y) in enumerate(semi_circle):\n        for j in range(i+1, len(semi_circle)):\n            if (x-semi_circle[j][0])**2 + (y-semi_circle[j][1])**2 <= r**2:\n                areas[i] += abs(semi_circle[i][0] * semi_circle[j][1] - semi_circle[i][1] * semi_circle[j][0])\n                areas[j] += abs(semi_circle[i][0] * semi_circle[j][1] - semi_circle[i][1] * semi_circle[j][0])\n    # find the maximum area among all triangles\n    max_area = max(areas)\n    # return the area of the largest triangle that can be inscribed in the semicircle\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    \n    # find the length of the longest side of a triangle inscribed in a semicircle of radius r\n    s = 2 * r * math.sin(pi/3)\n    \n    # find the area of the largest triangle that can be inscribed in the semicircle with radius r\n    a = pi * r**2 * (math.sin(pi/3)**2 - math.sin(2*pi/3)**2)\n    \n    return a, s"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = math.pi\n    h = r * (2 * pi) ** 0.5\n    a = h / 3\n    b = a * math.sqrt(3)\n    area = (2 * a) * (3 * b)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area = pi * r**2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Calculate the semi-perimeter of the semicircle\n    s = math.pi * r\n    \n    # Calculate the area of the largest triangle\n    area = (s**2) / (4 * math.tan(math.pi / 3))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # The area of a triangle can be found using Heron's formula.\n    # Heron's formula is given below:\n    #\n    #    area = (s/2) * sqrt(s(s-a)(s-b)(s-c))\n    #\n    # where s is the semi-perimeter of the triangle, and a, b, and c are the lengths of the sides of the triangle.\n    #\n    # To find the semi-perimeter, we need to use the formula:\n    #\n    #    s = (a + b + c) / 2\n    #\n    # To solve for a and b, we need to use the law of cosines.\n    #\n    #    cos^2(x) + cos^2(y) - 2 * cos(xy) = 1\n    #\n    # Substituting:\n    #\n    #    cos^2(x) = 1 - (r^2 / (s^2))\n    #\n    #    cos^2(y) = 1 - (r^2 / (s^2))\n    #\n    #    xy = arctan(r / s)\n    #\n    #    s^2 = a^2 + b^2 + c^2 - 2ab + 2bc + 2ac\n    #\n    #    s^2 = (a^2 + b^2 + c^2) - (a^2 + b^2) - (a^2 + c^2) + (b^2 + c^2) + (a^2 + b^2 + c^2)\n    #\n    #    s^2 = (a^2 + b^2 + c^2) - (a^2 + b^2) - (a^2 + c^2) + (b^2 + c^2) + (a^2 + b^2 + c^2)\n    #\n    #    s^2 = (a^2 + b^2 + c^2) - (a^2 + b^2 - a^2 + c^2 + b^2 + c^2)\n    #\n    #    s^2 = (a^2 + b^2 + c^2) + (b^2 + c^2) - 2ab + 2bc + 2ac\n    #\n    #    s^2 = 2ab + 2bc + 2ac + b^2 + c^2\n    #\n    #    s^2 = 2ab + 2bc + 2ac + c^2^2\n    #\n    #    s^2 = 2ab^2 + 4ac^2 + 2bc^2\n    #\n    #    s^2 = 4ab^2 + 16ac^2\n    #\n    #    s^2 = 4ab^2 + 8ac^2\n    #\n    #    s^2 = 4ab^2 + 16ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #    s^2 = 4ab^2 + 32ac^2\n    #\n    #   "
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    - array (list): A sorted list of natural numbers.\n    - start (int, optional): Starting index of the search. Defaults to 0.\n    - end (int, optional): Ending index of the search. If None, it will search the entire list. Defaults to None.\n\n    Returns:\n    - int: The smallest missing number from the sorted list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            return i\n\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index of the array to consider. Default is 0.\n        end (int): The ending index of the array to consider. Default is None, which means to consider all elements.\n\n    Returns:\n        int: The first missing number in the array.\n\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function finds the smallest missing number in a sorted list of natural numbers.\n    The function takes an array of natural numbers, a start index (default value is 0), and an end index (default value is None).\n    \"\"\"\n\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n\n    Parameters:\n    array: A list of natural numbers sorted in ascending order.\n    start: Optional parameter to specify the starting index from which to start searching for the missing number.\n    end: Optional parameter to specify the ending index from which to end searching for the missing number.\n\n    Returns:\n    The first missing number from the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Find the first missing number using binary search\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < len(array) and array[mid] == mid + 1:\n            start = mid + 1\n        elif mid < len(array) and array[mid] > mid + 1:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If the array is empty or only contains one number, return 1\n    if len(array) <= 1:\n        return 1\n    \n    # If the end index is not specified, set it to the length of the array minus 1\n    if end is None:\n        end = len(array) - 1\n    \n    # If the start index is not specified, set it to 0\n    if start == 0:\n        start = 1\n    \n    # Check if the start index is less than 0 or greater than the end index\n    if start < 0 or start > end:\n        return \"Invalid start index\"\n    \n    # Check if the end index is less than 0 or greater than the length of the array\n    if end < 0 or end >= len(array):\n        return \"Invalid end index\"\n    \n    # If the start index is equal to the end index, return 1\n    if start == end:\n        return 1\n    \n    # Initialize the result variable to the start index\n    result = start\n    \n    # Loop through the array from the start index to the end index\n    for i in range(start, end + 1):\n        \n        # Check if the current element is equal to the result variable\n        if array[i - 1] == result:\n            \n            # If it is, increment the result variable and check if it is greater than the end index\n            result += 1\n            if result > end:\n                return 1\n            \n            # If it is not, check if it is greater than the current element and set the result variable to it\n            elif i == end:\n                result = array[i] + 1\n                return result\n            \n            # If it is, check if the next element is equal to the result variable\n            elif array[i] == result:\n                result += 1\n                if result > end:\n                    return 1\n                elif array[i + 1] == result:\n                    result += 1\n                    if result > end:\n                        return 1\n    \n    # If the loop completes without finding a missing number, return 1\n    return 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers (as strings) and returns the smallest missing number.\n\n    Args:\n        array (list): The sorted list of natural numbers.\n        start (int, optional): The starting index for the search. Defaults to 0.\n        end (int, optional): The ending index for the search. If None, the function will use the length of the array as the end index. Defaults to None.\n\n    Returns:\n        int: The smallest missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if i!= int(array[i]):\n            return i\n\n    return end"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the list is already sorted, it returns the first element of the list.\n    If the list is not sorted, it uses binary search to find the missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    if array[start]!= 0:\n        start += 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < len(array) and array[mid] == mid + 1:\n            return mid + 1\n        elif mid < len(array) and array[mid] < mid + 1:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    # initializing an empty list to store even numbers\n    even_list = []\n    \n    # iterating through each number in the input list\n    for num in lst:\n        # checking if the number is even and appending it to the even_list if it is\n        if num % 2 == 0:\n            even_list.append(num)\n    \n    # returning the even_list\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers and returns a new list of even numbers from the original list.\n    '''\n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns a list of all its adjacent coordinates.\n    '''\n    x, y = ele\n    adj_coords = [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]\n    return sub + adj_coords\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Define the adjacent coordinates\n    adj_coords = [(ele[0]+dx, ele[1]+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if (dx!= 0 or dy!= 0)]\n\n    # Add the current coordinate to the sublist\n    sub.append(ele)\n\n    # Recursive call to find adjacent coordinates for each adjacent coordinate\n    for coord in adj_coords:\n        adjac(coord, sub)\n\n    # Return the sublist containing all the adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    This function takes a coordinate tuple (x, y) as input and returns the\n    coordinates of all the adjacent cells in a grid. The adjacent cells are\n    given by the eight directional neighbours (north, south, east, west,\n    north-east, south-east, north-west, and south-west).\n\n    If the sub parameter is True, then the function will return the subgrid\n    coordinates instead of the main grid coordinates.\n\n    Example:\n    >>> adjac((3, 5))\n    [(3, 4), (3, 6), (4, 5), (4, 6), (5, 5), (5, 6), (6, 5), (6, 6)]\n    >>> adjac((3, 5), sub=True)\n    [(3, 5), (4, 5), (5, 5), (6, 5), (3, 6), (4, 6), (5, 6), (6, 6)]\n    \"\"\"\n\n    if sub:\n        x, y = ele\n        return [(x-1, y-1), (x-1, y), (x-1, y+1),\n                (x, y-1), (x, y+1),\n                (x+1, y-1), (x+1, y), (x+1, y+1)]\n    else:\n        x, y = ele\n        return [(x-1, y), (x, y-1), (x+1, y),\n                (x-1, y+1), (x, y+1), (x+1, y+1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Define the coordinates of the adjacent cells in the grid\n    adj_coords = [\n        (ele[0]-1, ele[1]),  # top\n        (ele[0]+1, ele[1]),  # bottom\n        (ele[0], ele[1]-1),  # left\n        (ele[0], ele[1]+1),  # right\n        (ele[0]+1, ele[1]+1),  # right-top\n        (ele[0]-1, ele[1]-1),  # left-bottom\n        (ele[0]+1, ele[1]-1),  # right-bottom\n        (ele[0]-1, ele[1]+1),  # left-top\n    ]\n    # Add the coordinates of the subcell if any is given\n    adj_coords.extend(sub)\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if len(sub) == 2:\n        return sub\n    else:\n        return adjac((ele[0]+1, ele[1]), sub) + adjac((ele[0]-1, ele[1]), sub) + adjac((ele[0], ele[1]+1), sub) + adjac((ele[0], ele[1]-1), sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract the x and y coordinates from the tuple\n    x, y = ele\n\n    # Define a list of adjacent coordinates\n    adjacent = []\n\n    # Add the coordinates one step to the left\n    adjacent.append((x-1, y))\n\n    # Add the coordinates one step to the right\n    adjacent.append((x+1, y))\n\n    # Add the coordinates one step up\n    adjacent.append((x, y-1))\n\n    # Add the coordinates one step down\n    adjacent.append((x, y+1))\n\n    # Return the list of adjacent coordinates\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) > 1:\n        return []\n    x, y = ele\n    adjacent = []\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x < 0:\n        adjacent.append((x+1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < 0:\n        adjacent.append((x, y+1))\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x - 1, y))\n    if x < 4:\n        sub.append((x + 1, y))\n    if y > 0:\n        sub.append((x, y - 1))\n    if y < 4:\n        sub.append((x, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0 and y > 0:\n        sub.append((x-1, y-1))\n        sub.append((x, y-1))\n        sub.append((x+1, y-1))\n    if x < 4 and y > 0:\n        sub.append((x+1, y-1))\n        sub.append((x+1, y))\n        sub.append((x+1, y+1))\n    if x < 4 and y < 4:\n        sub.append((x+1, y+1))\n        sub.append((x, y+1))\n        sub.append((x-1, y+1))\n    if x > 0 and y < 4:\n        sub.append((x-1, y+1))\n        sub.append((x, y+1))\n        sub.append((x-1, y))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)] + sub\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    result = text.replace(\" \", \"_\")\n    \n    # replace underscores with spaces\n    result = result.replace(\"_\", \" \")\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char =='':\n            result += '_'\n        elif char == '_':\n            result +=''\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    return text.replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n    for index in zero_indices:\n        num_list.pop(index)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Loop through the list and find the index of the first non-zero value\n    non_zero_index = None\n    for i, num in enumerate(num_list):\n        if num!= 0:\n            non_zero_index = i\n            break\n    \n    # If there are no non-zero values, there is no need to move them\n    if non_zero_index is None:\n        return num_list\n    \n    # Create a new list with the non-zero values\n    new_list = []\n    for i in range(non_zero_index, len(num_list)):\n        new_list.append(num_list[i])\n    \n    # Move all zeroes to the end of the new list\n    for i in range(non_zero_index, len(new_list)):\n        if new_list[i] == 0:\n            new_list[i], new_list[-1] = new_list[-1], new_list[i]\n    \n    # Return the new list with zeroes moved to the end\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a copy of the input list\n    temp_list = num_list[:]\n    # use two pointers to traverse the input list and the temporary list\n    i = 0\n    j = 0\n    while j < len(temp_list):\n        if temp_list[j] == 0:\n            # move the zero element to the end of the input list\n            num_list[i] = temp_list[j]\n            i += 1\n            j += 1\n        else:\n            # keep moving the elements from the temporary list to the input list\n            num_list[i] = temp_list[j]\n            i += 1\n            j += 1\n    # remove the remaining elements from the temporary list\n    num_list = num_list[:i]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    \n    for j in range(zero_count, len(num_list)-1):\n        num_list[j], num_list[j+1] = num_list[j+1], num_list[j]\n        \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers - one for the front of the list and the other for the back\n    front = 0\n    back = len(num_list) - 1\n\n    # Traverse through the list\n    while front < back:\n        # If the current element is zero, move it to the end of the list\n        if num_list[front] == 0:\n            num_list[front], num_list[back] = num_list[back], num_list[front]\n            front += 1\n        else:\n            back -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, one at the start and the other at the end of the list\n    start = 0\n    end = len(num_list) - 1\n\n    # Swap the elements if they are zero\n    while start < end:\n        if num_list[start] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            start += 1\n        else:\n            end -= 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    i = 0\n    j = len(num_list) - 1\n    \n    # Loop through the list from the beginning to the end\n    while i < j:\n        # If the current element is zero, swap it with the element at the end of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # Move the pointer to the right\n            j -= 1\n        # If the current element is not zero, move the pointer to the right\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        for i in range(len(num_list)-1, zero_index-1, -1):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 1:\n        xor_sum = 0\n        for i in range(len(arr)):\n            xor_sum += arr[i] ^ arr[i+1]\n        return xor_sum\n    else:\n        xor_sum = 0\n        for i in range(len(arr)-1):\n            xor_sum += arr[i] ^ arr[i+1]\n        return xor_sum + pair_xor_Sum(arr,n-1)"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i]^arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and its length n as input and returns the sum of the xor of all pairs of numbers in the list.\n    \"\"\"\n    # initialize a variable sum to store the sum of xor of all pairs of numbers\n    sum = 0\n    \n    # iterate through the list using a for loop\n    for i in range(n):\n        # iterate through the list using another for loop\n        for j in range(i+1,n):\n            # calculate the xor of the i-th and j-th elements\n            xor = arr[i] ^ arr[j]\n            # add the xor to the sum variable\n            sum += xor\n    \n    # return the sum of xor of all pairs of numbers in the list\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR of all elements in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    # XOR of all elements with their corresponding index\n    for i in range(n):\n        xor_sum ^= (arr[i] ^ i)\n\n    # XOR of all elements with their corresponding index and itself\n    for i in range(n):\n        xor_sum ^= (arr[i] ^ i ^ arr[i])\n\n    # XOR of all elements with their corresponding index and itself, repeated\n    for i in range(n):\n        xor_sum ^= (arr[i] ^ i ^ arr[i] ^ i ^ arr[i])\n\n    # XOR of all elements with their corresponding index and itself, repeated again\n    for i in range(n):\n        xor_sum ^= (arr[i] ^ i ^ arr[i] ^ i ^ arr[i] ^ i ^ arr[i])\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and its length n as input and returns the sum of xor of all pairs of numbers in the list.\n\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize sum variable\n    xor_sum = 0\n    # Iterate through the list of numbers\n    for i in range(n) : \n        # Calculate xor of current number and all previous numbers\n        for j in range(i) : \n            xor_sum ^= arr[j]\n    # Return xor sum\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    hq.heapify(iterable)\n\n    # extract the minimum element from the heap and insert it at the end\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort.\n    \"\"\"\n    # Convert the list to a min heap\n    hq.heapify(iterable)\n    \n    # Extract elements from the heap in sorted order\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n        \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a heap\n    heap = [float('-inf')] * len(iterable)\n    for i, x in enumerate(iterable):\n        heapq.heappushpop(heap, x)\n    # Convert the heap back to a list and return it\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable object and sorts it using heap sort algorithm.\n    '''\n    hq.heapify(iterable) # convert the list to heap\n\n    while len(iterable) > 1: # keep sorting until the length of the list is 1\n        hq.heappop(iterable) # remove the largest element from the heap\n        hq.heappush(iterable, hq.heappop(iterable)) # add the next largest element to the heap\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Build max heap\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    # Extract elements from heap one by one\n    for i in range(n-1, 0, -1):\n        # Move current root to end\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        # Call max heapify on the reduced heap\n        hq.heapify(iterable, 0, i)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = hq.heapify(iterable)\n\n    # Sort the heap\n    while len(heap) > 1:\n        # Pop the largest element from the heap\n        largest = hq.heappop(heap)\n\n        # Append the largest element to the end of the sorted list\n        sorted_list.append(largest)\n\n    # Convert the sorted list back to a list\n    sorted_list = list(sorted_list)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    heap_size = len(heap)\n\n    while heap_size > 1:\n        heapq.heapify(heap, 0, heap_size-1)\n        heap_size -= 1\n\n    sorted_list = []\n    for _ in range(heap_size):\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # Perform heap sort\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using a heapsort algorithm.\n    '''\n\n    # Create a max-heap from the list\n    hq.heapify(iterable)\n\n    # Extract elements from the heap until it is empty\n    while hq.heappop(iterable) is not None:\n        pass\n\n    return iterable"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return True\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check whether profit and loss are zero\n    if profit == 0 and loss == 0: \n        print(\"The given amount has no profit and no loss.\")\n        return True\n    else: \n        print(\"The given amount has profit of\",profit,\"and loss of\",loss)\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0: \n        return True\n    \n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    if profit <= 0 and loss <= 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit == 0:\n        return 'Profitable'\n    elif profit > 0:\n        return 'No Profit'\n    else:\n        return 'No Loss'"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    elif sale_amount >= actual_cost:\n        return False\n    else:\n        print(\"Invalid input\")\n        return None"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit\n    profit = sale_amount - actual_cost\n\n    # Calculate loss\n    loss = actual_cost - sale_amount\n\n    # If profit is negative, no profit and no loss\n    if profit < 0:\n        return \"No profit and no loss\"\n    else:\n        # If profit is positive, calculate percentage of profit\n        percentage_profit = (profit / sale_amount) * 100\n\n        # If percentage of profit is greater than or equal to 10%, no profit and no loss\n        if percentage_profit >= 10:\n            return \"No profit and no loss\"\n        else:\n            # If percentage of profit is less than 10%, calculate percentage of loss\n            percentage_loss = (loss / sale_amount) * 100\n\n            # If percentage of loss is greater than or equal to 10%, no profit and no loss\n            if percentage_loss >= 10:\n                return \"No profit and no loss\"\n            else:\n                # If percentage of loss is less than 10%, return \"Profitable\"\n                if percentage_profit < 10 and percentage_loss < 10:\n                    return \"Profitable\"\n                else:\n                    return \"Unprofitable\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit == 0 and loss == 0:\n        return \"Profit and Loss are 0\"\n    elif profit < 0 and loss > 0:\n        return \"Profit is negative and Loss is positive\"\n    elif profit > 0 and loss < 0:\n        return \"Profit is positive and Loss is negative\"\n    elif profit > loss:\n        return \"Profit is greater than Loss\"\n    else:\n        return \"Profit is less than Loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # calculate profit and loss for the given amount\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check if the profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount: \n        # If the actual cost is less than or equal to the sale amount, it means the sale amount has no profit and no loss\n        return True\n    else:\n        # If the actual cost is greater than the sale amount, it means the sale amount has some profit and some loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss\n    profit = actual_cost - sale_amount\n\n    # Check for no profit and no loss\n    if profit == 0 and sale_amount == 0:\n        print(\"No profit or loss\")\n        return True\n    else:\n        print(\"Profit:\", profit)\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    f = (9.81 * math.exp(17.27 * t / (237.3 + t))) / (v ** 2 * math.exp(17.27 * t / (237.3 + t)))\n    if f > 0:\n        return int(math.floor(f))\n    else:\n        return -1"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature from Celsius to Kelvin\n    T = t + 273.15\n\n    # calculate the heat capacity ratio\n    R = 287.058\n    \n    # calculate the entropy\n    S = 0.01 * (v ** 0.16)\n    \n    # calculate the enthalpy\n    H = 0.01 * ((T - 273.15) ** 2.3)\n    \n    # calculate the specific heat capacity\n    cp = (1 - 0.0065 * (T - 273.15) ** 2.3) * ((T - 273.15) ** 2.3)\n    \n    # calculate the total heat capacity\n    Cp = cp + R * H\n    \n    # calculate the latent heat of vaporization of water\n    Q = 2.501 * (T - 273.15) ** (-0.104)\n    \n    # calculate the dew point temperature\n    T_dp = T * math.exp(Q / (R * T))\n    \n    # calculate the wind chill index\n    Wi = (T_dp - 32) * (13.12 + 0.6215 * math.log(T_dp - 11.3)) / (math.log(T_dp) - 0.14)\n    \n    # round the result to the nearest integer\n    Wi_int = round(Wi)\n    \n    # return the wind chill index\n    return Wi_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed = v * 3.6  # convert km/h to m/s\n    return math.ceil(23.72 * (math.log(wind_speed) + 11.38 * (t - 273.15) / 2))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v) - 0.005857 * t * t * v + 0.000128 * t * t * t * v\n    # Round the wind chill index to the next integer\n    return math.ceil(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t <= -5:  # If the temperature is below freezing point, set the chill index to 0\n        return 0\n    elif t >= 100:  # If the temperature is above freezing point, set the chill index to 32767\n        return 32767\n    else:\n        chill_index = 237.3 + 0.6215 * t - 11.37 * math.pow(t, 2) + 0.3965 * math.pow(v, 0.16)\n        if chill_index > 32767:  # If the chill index is greater than 32767, set it to 32767\n            chill_index = 32767\n        elif chill_index < 0:  # If the chill index is less than 0, set it to 0\n            chill_index = 0\n        return int(chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t <= -10:\n        return None\n    if v <= 0:\n        return None\n\n    wind_speed_kmph = v * 1.609344\n\n    if wind_speed_kmph <= 0.5:\n        chill_index = 32 + 0.6215 * t + 13.37 * math.exp((17.625 * t) / (t + 243.5))\n    elif 0.5 < wind_speed_kmph <= 1.5:\n        chill_index = 26 + 0.3965 * t - 0.126 * math.log(wind_speed_kmph) + 13.37 * math.exp((17.625 * t) / (t + 243.5))\n    else:\n        chill_index = 26 + 0.3965 * t - 0.126 * math.log(wind_speed_kmph) + 13.37 * math.exp((17.625 * t) / (t + 243.5))\n\n    chill_index = round(chill_index)\n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    c = 0.6219718 * math.log(t/23 + 273.15) - 16.2304\n    \n    # Calculate the wind chill index\n    if v < 5:\n        wc = c + 4.349 * (v**0.16)\n    elif 5 <= v < 10:\n        wc = c + 13.39 * (v - 5)**0.16\n    else:\n        wc = c + 11.14 * (v - 10)**0.16\n        \n    # Round the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t - 273.15  # convert Celsius to Kelvin\n    speed = v * 1.60934  # convert km/h to m/s\n    wind_chill_c = (t * speed) / (10 ** 6)  # calculate wind chill in Celsius\n    wind_chill_f = math.ceil(9.0 / 5 * wind_chill_c + 32)  # convert Celsius to Fahrenheit\n    return int(math.ceil(wind_chill_f))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # convert to m/s\n    wind_speed = v * 1000\n    \n    # convert to Fahrenheit\n    temp = t * 9/5 + 32\n    \n    # calculate wind chill\n    wind_chill_degree = 459.67 * math.log(wind_speed / 10) + 32.74 * (temp - 32)\n    wind_chill_index = int(round(wind_chill_degree))\n    \n    # return wind chill index\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 0.15\n    t_k = k * t\n    return math.ceil(v / 2.645 * math.log(t_k + 273.15))"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a new list to store the names without the lowercase letters\n    filtered_names = []\n    \n    # loop through each name in the original list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it\n            continue\n        # otherwise, add it to the new list of filtered names\n        else:\n            filtered_names.append(name)\n            \n    # sum the length of each name in the new filtered list\n    total_length = sum([len(name) for name in filtered_names])\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            names_sum += len(name)\n    return names_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [name for name in sample_names if name.isalpha()]\n    total_length = sum([len(name) for name in sample_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name[0].islower()]\n    lengths = [len(name) for name in names]\n    return sum(lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of names lengths to 0\n    total_length = 0\n    \n    # Loop through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip to the next name\n            continue\n        # If the name doesn't start with a lowercase letter, add its length to the sum of names lengths\n        total_length += len(name)\n    \n    # Return the total length of the names after removing the ones that start with a lowercase letter\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^\\)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Define a regular expression pattern to match the parenthesis and what is inbetween them\n    pattern = r'\\(.*?\\)'\n\n    # Use the re.sub() function to replace the parenthesis with an empty string\n    result = re.sub(pattern, '', items)\n\n    # Return the result\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Find all the parenthesis in the string\n    parentheses = re.findall(r'\\([^)]*\\)', items)\n\n    # Remove the parenthesis and what is inbetween them\n    for parenthesis in parentheses:\n        items = items.replace(parenthesis, '')\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Split the items into a list\n    item_list = items.split()\n\n    # Create a list to store the non-parenthesis items\n    non_paren_list = []\n\n    # Loop through the item list\n    for item in item_list:\n\n        # Check if the item is a parenthesis\n        if re.match(r'\\(|\\)', item):\n\n            # If it is, skip it\n            continue\n\n        # If it's not a parenthesis, add it to the non-parenthesis list\n        else:\n            non_paren_list.append(item)\n\n    # Join the non-parenthesis list into a string\n    non_paren_str =''.join(non_paren_list)\n\n    # Return the non-parenthesis string\n    return non_paren_str"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\((.*?)\\)\"\n    items = re.sub(pattern, r'\\1', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    # use regex to remove all the parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'  # regular expression to match parenthesis\n    result = re.sub(pattern, '', items)  # remove matched parenthesis\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Using regular expressions to remove the parenthesis\n    items = re.sub('\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    side = 1\n    while side * side < n:\n        side += 1\n    return (n - side * side) * side // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n-1)) + (2 * (n-1))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Calculate the square of the number of nonagonal numbers\n    square = n*(n-1)*(n-2) // 6\n\n    # Calculate the nth nonagonal number\n    nth_nonagonal = 2*n - 2*square\n\n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    total = 1\n    for i in range(1, n):\n        total += 2*i\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return \"The given number is even.\"\n    else:\n        return (n * (n + 1)) / 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1) // 2\n\nn = 7\nprint(is_nonagonal(n)) # Output: 41"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Calculate the first nonagonal number (n^2 - 1)\n    first_nonagonal = (n**2 - 1) // 2\n\n    # Calculate the number of rows and columns\n    rows = (n + 1) // 2\n    cols = (2*n + 1) // 2\n\n    # Initialize the grid with zeros\n    grid = [[0 for j in range(cols)] for i in range(rows)]\n\n    # Fill the grid with 1's\n    for i in range(rows):\n        grid[i][i] = 1\n        grid[rows - i - 1][rows - i - 1] = 1\n\n    # Print the grid\n    for row in grid:\n        for num in row:\n            print(num, end=' ')\n        print()"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function checks if a given number is a nonagonal number or not.\n    \"\"\"\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\nn = int(input(\"Enter a number: \"))\nif is_nonagonal(n):\n    print(f\"{n} is a nonagonal number.\")\nelse:\n    print(f\"{n} is not a nonagonal number.\")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return None\n    else:\n        return (n*n) + (2*n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # first, initialize the variables\n    previous_nonagonal = 1\n    current_nonagonal = 2\n\n    # loop through the range of numbers up to n\n    for i in range(2, n+1):\n\n        # calculate the nth nonagonal number\n        nth_nonagonal = previous_nonagonal + current_nonagonal\n\n        # update the variables\n        previous_nonagonal = current_nonagonal\n        current_nonagonal = nth_nonagonal\n\n    # return the nth nonagonal number\n    return current_nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)[^A-Za-z]*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?<!z)z(?!\\w|\\s)'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<=\\b|^)(?=z)(?=\\b|$)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[Zz]|[Zz]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern to match the 'z' character at the start and end of a word\n    pattern = r'\\b[zZ]\\w+\\b'\n    # Search for matches in the text using the pattern\n    matches = re.findall(pattern, text)\n    # Check if there are any matches\n    if matches:\n        # Return True if there are matches, and False otherwise\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])z(?![a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![a-z])(z)(?!.*(z))(?!.*(?<=z)[^a-z])(?!.*(?<=z)[^A-Z])[a-zA-Z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![a-zA-Z])z(?![a-zA-Z])'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])z(?![a-zA-Z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, -1, -1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the input array\n    n = len(input)\n    # Find the position of the kth element from the end\n    kth_index = n - k\n\n    # Reverse the array from the first element to kth_index-1\n    for i in range(kth_index):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, k):\n        input[0], input[n-i-1] = input[n-i-1], input[0]\n    print(\"Array reversed upto\", k, \"position:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k-1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Create a copy of the input array to avoid modifying the original one\n    reversed_array = input[:]\n    \n    # Reverse the array from the first element up to the k-th element (inclusive)\n    for i in range(k):\n        reversed_array[i], reversed_array[len(reversed_array) - i - 1] = reversed_array[len(reversed_array) - i - 1], reversed_array[i]\n    \n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize pointers for the first and last positions of the array\n    i = 0\n    j = len(input) - 1\n\n    # reverse the array upto k-1 positions\n    while i < k:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n\n    # reverse the array from kth position to the end\n    while i < j:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Reverse the input array\n    input.reverse()\n    # Count the number of elements to be reversed\n    count = len(input) - k\n    # Reverse the first k elements\n    input[:k] = input[:k][::-1]\n    # Reverse the last count elements\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # if k is greater than or equal to the length of the array, reverse the whole array\n    if k >= n:\n        return input[::-1]\n    # if k is less than the length of the array, reverse the array upto k\n    else:\n        return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n or k < 1:\n        return \"Invalid input\"\n    else:\n        new_array = input[:k][::-1] + input[k:] + input[:k][::-1]\n        return new_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Check if k is valid\n    if k > n or k <= 0:\n        return \"Invalid value for k\"\n    \n    # Reverse the array from index 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    # Reverse the array from index k to n-1\n    for i in range(k, n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    # Reverse the array from index n-k to n-1\n    for i in range(n-k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    # Reverse the array from index 0 to n-1\n    for i in range(n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Copy the tuple to avoid modifying it\n    new_tup = test_tup[:]\n    # Add the dictionary to the tuple\n    new_tup.append(test_dict)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    dict_list = list(test_dict.items())\n    # Concatenate the tuple and the list of tuples\n    result = (test_tup,) + tuple(dict_list)\n    # Return the result\n    return result"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Using a list comprehension to create a new tuple with the added dictionary\n    new_tuple = (test_tup[0], test_tup[1], test_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # converting the dictionary to a tuple\n    new_tuple = tuple(test_dict.items())\n    # adding the new tuple to the original tuple\n    return test_tup + new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary that contains the values from the original tuple and the dictionary\n    merged_dict = dict(test_tup)\n    merged_dict.update(test_dict)\n    # Convert the merged dictionary into a tuple and return it\n    return tuple(merged_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0], **test_dict)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    paths = []\n    visited = set()\n\n    # Breadth first search\n    def bfs(i, j):\n        nonlocal max_avg, paths\n        visited.add((i, j))\n        paths.append((i, j))\n        # Check if the bottom right cell has been reached\n        if i == n-1 and j == n-1:\n            avg = sum(cost[i][j]) / (i+j+1)\n            max_avg = max(max_avg, avg)\n            return\n        # Move in the appropriate direction\n        if i < n-1:\n            bfs(i+1, j)\n        if j < n-1:\n            bfs(i, j+1)\n\n    # Call bfs on the top left cell\n    bfs(0, 0)\n\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    # Base cases\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n    for j in range(N):\n        dp[0][j] = cost[0][j]\n\n    # Fill the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + cost[i][j]\n\n    # Find the maximum average\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            for k in range(i, j + 1):\n                avg = dp[i][j] / (k - i + 1)\n                max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_path_sum = float('-inf')\n    dp = [[0]*N for _ in range(N)]\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n    for k in range(1, N):\n        for i in range(N-k):\n            j = i+k\n            dp[i][j] = dp[i][j-1] + cost[i][j] + dp[i+1][j] - dp[i][j-1] - dp[i+1][j-1] - cost[i][j-1] - cost[i+1][j-1]\n            max_path_sum = max(max_path_sum, dp[i][j])\n    return max_path_sum / N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Find the maximum and minimum values in the matrix\n    max_val = max(cost)\n    min_val = min(cost)\n    \n    # Initialize variables to keep track of the maximum and minimum averages\n    max_avg = 0\n    min_avg = 1e10\n    \n    # Initialize variables to keep track of the maximum and minimum number of cells visited\n    max_cells = 0\n    min_cells = 1e10\n    \n    # Initialize a set to store all possible paths\n    paths = set()\n    \n    # Iterate over each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            \n            # Skip cells that are already visited\n            if (i,j) in paths:\n                continue\n            \n            # Create a new path by adding the current cell to the path\n            path = set([(i,j)])\n            \n            # Initialize variables to keep track of the total cost and the number of cells visited\n            total_cost = cost[i][j]\n            num_cells = 1\n            \n            # Initialize variables to keep track of the path's maximum and minimum values\n            max_val = cost[i][j]\n            min_val = cost[i][j]\n            \n            # Iterate over all possible directions to move\n            for di, dj in ((1, 0), (0, 1), (-1, 0), (0, -1)):\n                \n                # Skip cells that are already visited\n                if (i+di, j+dj) in paths:\n                    continue\n                \n                # Update the path by adding the next cell to it\n                path.add((i+di, j+dj))\n                \n                # Update the total cost and number of cells visited\n                total_cost += cost[i+di][j+dj]\n                num_cells += 1\n                \n                # Update the maximum and minimum values\n                max_val = max(max_val, cost[i+di][j+dj])\n                min_val = min(min_val, cost[i+di][j+dj])\n                \n            # If the maximum value is greater than the current maximum average, update the maximum average\n            if max_val > max_avg:\n                max_avg = max_val\n                max_cells = num_cells\n            \n            # If the minimum value is less than the current minimum average, update the minimum average\n            if min_val < min_avg:\n                min_avg = min_val\n                min_cells = num_cells\n            \n            # Add the current path to the set of possible paths\n            paths.add(path)\n    \n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    n = len(cost)\n    max_avg = 0\n    path_count = 0\n    current_avg = 0\n    path = []\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif i == 0:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif j == 0:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif i == n-1 and j == n-1:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif i == n-1:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif j == n-1:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            else:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n\n            if current_avg > max_avg:\n                max_avg = current_avg\n\n    print(\"Maximum Average:\", max_avg)\n    print(\"Number of paths:\", path_count)\n    print(\"Path:\", path)\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    # initialize variables\n    N = len(cost)\n    path_cost = [0] * (N*N)  # array to store cost of each path\n    visited = [False] * (N*N)  # array to store if a cell has been visited\n\n    # set initial values\n    visited[0] = True\n    path_cost[0] = cost[0][0]\n    max_avg = path_cost[0]\n\n    # compute the cost of all paths\n    for i in range(N):\n        for j in range(N):\n            if not visited[i*N+j]:\n                if i < N-1 and not visited[i*N+j+1]:\n                    visited[i*N+j+1] = True\n                    path_cost[i*N+j+1] = cost[i][j] + path_cost[i*N+j]\n                    max_avg = max(max_avg, path_cost[i*N+j+1])\n                if j < N-1 and not visited[i*N+j+N]:\n                    visited[i*N+j+N] = True\n                    path_cost[i*N+j+N] = cost[i][j] + path_cost[i*N+j]\n                    max_avg = max(max_avg, path_cost[i*N+j+N])\n                visited[i*N+j] = True\n\n    # find the maximum average path\n    max_path = [0] * N\n    max_avg_path = 0\n    for i in range(N):\n        if path_cost[i] == max_avg:\n            for j in range(N):\n                if visited[i*N+j]:\n                    max_path[j] = i\n                    break\n        max_avg_path = max(max_avg_path, path_cost[i])\n\n    # compute the total cost of the path and return it\n    total_cost = 0\n    for i in range(N):\n        for j in range(N):\n            if i == max_path[j]:\n                total_cost += path_cost[i*N+j]\n    return total_cost / N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    dp = [[float('-inf') for _ in range(N)] for _ in range(N)]\n    \n    # Initialize the first row and column with the given cost\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n        max_avg = max(max_avg, cost[i][0])\n        max_avg = max(max_avg, cost[0][i])\n    \n    # Fill the rest of the matrix using the recursive approach\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i][j] < dp[i-1][j]:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n            max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N-1):\n        for j in range(N-1):\n            # Check if the current cell is accessible\n            if cost[i][j] == float('inf'):\n                continue\n            # If the current cell is accessible, check the paths going up or down\n            for k in range(i+1, N):\n                avg = (cost[i][j] + cost[k][j]) / 2\n                max_avg = max(max_avg, avg)\n            for k in range(j+1, N):\n                avg = (cost[i][j] + cost[i][k]) / 2\n                max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    visited = [[0 for j in range(N)] for i in range(N)]\n    for i in range(N):\n        visited[0][i] = visited[i][0] = cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            visited[i][j] = visited[i-1][j] + visited[i][j-1] - visited[i-1][j-1] + cost[i][j]\n            max_avg = max(max_avg, visited[i][j])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    paths = []\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                paths.append((i, j, cost[i][j]))\n            elif i == N-1 and j == N-1:\n                paths.append((i, j, cost[i][j]))\n            else:\n                paths.append((i, j, cost[i][j]))\n                paths.append((i, j+1, cost[i][j+1]))\n                paths.append((i+1, j, cost[i+1][j]))\n                paths.append((i, j, cost[i][j]+cost[i+1][j]+cost[i][j+1]+cost[i+1][j+1]))\n                paths.pop()\n                paths.pop()\n                max_avg = max(max_avg, sum(path[2]*(path[1]-path[0]+1) for path in paths))\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Define a function to check if a student has height and weight above the minimum\n    def is_valid_student(student, h, w):\n        if student[1][0] > h and student[1][1] > w:\n            return True\n        else:\n            return False\n\n    # Use filter() to filter the students based on the given conditions\n    valid_students = list(filter(lambda student: is_valid_student(student, h, w), students.items()))\n\n    # Create a dictionary to store the valid students and their names\n    valid_students_dict = {}\n    for student in valid_students:\n        valid_students_dict[student[0]] = student[1]\n\n    return valid_students_dict"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Check if the input lists have the same length\n    if len(nums1)!= len(nums2):\n        return None\n    \n    # Initialize a counter to keep track of the number of same values\n    count = 0\n    \n    # Iterate through the lists and compare the values\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    \n    # Return the count of same values\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(i+1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create an empty dictionary to store indices where values are the same\n    same_indices = {}\n    # Loop through each value in the lists\n    for i in range(len(nums1)):\n        # Check if the value is already in the same_indices dictionary\n        if nums1[i] in same_indices:\n            # If it is, add the index to the list of indices\n            same_indices[nums1[i]].append(i)\n        else:\n            # If it's not, add the value and index to the dictionary\n            same_indices[nums1[i]] = [i]\n    # Loop through the second list\n    for j in range(len(nums2)):\n        # Check if the value is in the same_indices dictionary\n        if nums2[j] in same_indices:\n            # If it is, add the index to the list of indices\n            same_indices[nums2[j]].append(j)\n        else:\n            # If it's not, add the value and index to the dictionary\n            same_indices[nums2[j]] = [j]\n    # Count the number of indices where the values are the same in both lists\n    count = 0\n    for key in same_indices:\n        if len(same_indices[key]) == 2:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize an empty dictionary to store the counts\n    count_dict = {}\n    # loop through the lists and update the count dictionary accordingly\n    for i in range(len(nums1)):\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict and nums2[i] in count_dict:\n            if eq(nums1[i], nums2[i]):\n                count_dict[nums2[i]] += 1\n    # count the number of elements in the dictionary that have the same value as a number in nums1\n    same_count = sum(count > 1 for count in count_dict.values())\n    return same_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Convert the digit to an integer\n        digit = int(digit)\n        # Add the digit to the sum to the power\n        sum += digit ** power\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base and power to integer values\n    base = int(base)\n    power = int(power)\n\n    # Calculate the sum of digits of the base to the power\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power //= 10\n\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n\n    # Convert the base to a string to access its individual digits\n    base_str = str(base)\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through each digit of the base string and add it to the sum\n    for digit in base_str:\n        sum += int(digit)\n\n    # Calculate the sum of the digits raised to the power\n    result = sum ** power\n\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the sum of digits of the base\n    sum_of_digits = 0\n    while base > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        base //= 10\n    \n    # Calculate the sum of digits to the power of the power\n    sum_of_powers = 0\n    for _ in range(power):\n        sum_of_powers += sum_of_digits\n    \n    return sum_of_powers"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum variable to zero\n    total = 0\n    \n    # convert base to string and iterate over its digits\n    for digit in str(base):\n        # calculate the current digit raised to the power of the power variable\n        current_digit = int(digit) ** power\n        # add the current digit to the sum variable\n        total += current_digit\n        \n    # return the sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit ** power\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through each digit of the base\n    for digit in str(base):\n        # convert the digit to an integer and add it to the sum\n        sum += int(digit) ** power\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 0:\n        base = -base # make base positive\n    \n    result = 0\n    while power > 0:\n        digit = base % 10 # get the last digit\n        result += digit # add it to the result\n        power -= 1 # decrement the power\n        base //= 10 # remove the last digit from the base\n    \n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'(?<!\\\\)\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    quotations = [match[1:-1] for match in matches]\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(\\\\.|[^\"])*\"'\n    return re.findall(pattern, text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]+)\"')\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(\".*?\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    result_list = []\n    for i in range(len(test_tup)-1):\n        result_list.append(t_1*t_2)\n        t_1 = t_2\n        t_2 = result_list[i]\n    result_list.append(t_1*t_2)\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2 # find the length of the tuple\n    result_tup = () # initialize an empty tuple to hold the result\n    \n    # loop through the tuple and multiply each pair of elements\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+N],) # add the product to the result tuple\n    \n    return result_tup # return the result tuple"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(N)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    N = len(test_tup) // 2\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i + N])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize an empty tuple to store the result\n    result = ()\n    \n    # Iterate through the tuple and multiply each pair of elements\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    \n    # Add the last element to the result\n    result += (test_tup[-1],)\n    \n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) % 2!= 0:\n        test_tup = test_tup + (0,)\n    result = ()\n    for i in range(len(test_tup) // 2):\n        result += (test_tup[2*i] * test_tup[2*i+1],)\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input [a_1,...,a_n] and [b_1,...,b_n] and returns a new list containing the sum of corresponding elements in each list.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists and returns their sum.\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"Both lists should have the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(lst1)):\n            result.append(lst1[i] + lst2[i])\n        return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create an iterator to group the numbers by their values\n    grouped = groupby(sorted(set(nums)))\n    # iterate over the grouped iterator and remove the duplicates\n    for key, group in grouped:\n        if len(list(group)) > 1:\n            yield from group\n    # if no consecutive duplicates are found, return the original list\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools.groupby() to group the numbers by consecutive duplicates\n    grouped = groupby(nums, lambda x: x)\n    \n    # Extract the consecutive duplicates and return them as a new list\n    return list(filter(lambda x: len(list(x)) > 1, grouped))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(sorted(nums)):\n        if len(list(group)) > 1:\n            yield from group\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a generator object for grouping the elements of nums by their values\n    grouped_nums = groupby(nums)\n    # create a new list to store the unique elements of nums\n    unique_nums = []\n    # iterate over each group of consecutive duplicates\n    for _, group in grouped_nums:\n        # append the first element of the group to unique_nums\n        unique_nums.append(group[0])\n    # return unique_nums\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def remove_consecutive_duplicates(nums):\n        for key, group in groupby(sorted(nums)):\n            if key == 0:\n                yield from group\n            else:\n                yield from group[:-1]\n\n    return list(remove_consecutive_duplicates(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), lambda x: x[1] == x[0] + 1))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for i, group in enumerate(groupby(sorted(set(nums)))), prev_num in zip(nums, group):\n        if i!= len(nums) - 1 and i == len(nums) - 2 and i == len(nums) - 3:\n            # consecutive duplicates of three numbers\n            if prev_num + 1 == group[0] and prev_num + 2 == group[1] and prev_num + 3 == group[2]:\n                continue\n            elif prev_num - 1 == group[0] and prev_num - 2 == group[1] and prev_num - 3 == group[2]:\n                continue\n        result.append(prev_num + group[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*h + 2*math.pi*r**2\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    # Area = pi * r^2 * h\n    # where pi = 3.14159...\n    area = math.pi * r**2 * h\n    \n    # Return the lateral surface area\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for the lateral surface area of a cone: \n    # SA = pi * r^2 * h\n    sa = math.pi * r ** 2 * h\n    return sa"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h/3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * r * (h/3)\n    print(\"Lateral surface area of a cone with radius\", r, \"and height\", h, \"is\", area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the cone\n    area = math.pi * r * r * h\n    # Calculate the lateral surface area\n    lateralsurface = 2 * math.pi * r * math.tan(math.pi / 4) * h\n    # Return the result\n    return lateralsurface"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regex pattern to replace spaces, commas, or dots with a colon\n    pattern = r'[\\s.,]+'\n    # use re.sub() method to replace all occurrences of pattern in text with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^\\w\\s]', '', text) # remove special characters\n    text = re.sub(r'\\s+', ':', text) # replace spaces with colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Regular expression to replace all special characters with a colon\n    pattern = re.compile(r'[^a-zA-Z0-9\\s]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    special_char = r'\\s|,|\\.'\n    new_text = re.sub(special_char, ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Replace spaces with a colon\n    text = re.sub(r'\\s', ':', text)\n\n    # Replace commas with a semicolon\n    text = re.sub(r',', ';', text)\n\n    # Replace dots with a period\n    text = re.sub(r'\\.', '.', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^\\w\\s]'\n    text = re.sub(pattern, ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text).replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[.,\\s]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s|,|\\.|:'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the left and right pointers\n    left, right = 0, len(A) - 1\n    # check if the right pointer is within the range of the array\n    if right < 0:\n        return -1\n\n    # iterate over the array until the left pointer is less than the right pointer\n    while left < right:\n        # calculate the midpoint\n        mid = (left + right) // 2\n        # if the element at the midpoint is equal to x, return the index\n        if A[mid] == x:\n            return mid\n        # if the element is less than x, search in the right half\n        elif A[mid] < x:\n            left = mid + 1\n        # if the element is greater than x, search in the left half\n        else:\n            right = mid - 1\n    # if the element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize index of first occurrence to -1\n    index = -1\n\n    # Traverse through the array\n    for i in range(len(A)):\n        # Check if the element at current index is equal to the given number\n        if A[i] == x:\n            # If it is, update the index of first occurrence\n            index = i\n            # Exit the loop as we have found the first occurrence\n            break\n\n    # Return the index of first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            left = mid\n            right = mid\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left if A[left] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first element in A that is greater than or equal to x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    # If the value was not found, return -1\n    if left == right and A[left]!= x:\n        return -1\n    # Otherwise, return the index of the first occurrence of x\n    else:\n        return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # x is not in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Binary search algorithm to find the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            # Check if the mid element is the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # x is not in A"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        \n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n        total_sum += prod\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # dp[i][j] stores the sum of products of subarrays arr[i:j+1]\n    dp = [[0]*n for _ in range(n)]\n\n    # fill the first column\n    for i in range(n):\n        dp[0][i] = arr[i]\n\n    # fill the other columns\n    for i in range(1, n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            dp[i][j] = dp[i-1][j] + prod\n\n    # sum of products of all sublists\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            total_sum += dp[i][j]\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        sub_product = 1\n        for j in range(i, n):\n            sub_product *= arr[j]\n        result += sub_product\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n    \n    # Initialize two pointers, left and right, both pointing to the first element of the array\n    left, right = 0, 0\n    prod_sum = 0\n    subarray_sum = 0\n    \n    # Calculate the product of the subarray and its sum\n    while right < n:\n        prod = prefix_sum[right+1] - prefix_sum[left]\n        subarray_sum += arr[right]\n        prod_sum += prod\n        right += 1\n        \n        # Move the left pointer to the right until the product of the subarray is 0\n        while prod_sum!= 0 and left < right:\n            prod_sum -= arr[left]\n            left += 1\n            \n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    MOD = 1000000007\n\n    def helper(start, end, prev_prod=1):\n        if start == end:\n            return prev_prod * arr[start]\n        if start > end:\n            return 0\n\n        mid = (start + end) // 2\n        left = helper(start, mid, prev_prod)\n        right = helper(mid + 1, end, prev_prod)\n\n        return ((arr[mid] - arr[start]) * (right - left)) % MOD\n\n    return helper(0, n - 1)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(1, n+1):\n        product = 1\n        for j in range(n-i+1):\n            product *= arr[j]\n        result += product\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize an empty list to store sum of products\n    sum_list = []\n\n    # Loop through all possible sublists of the array\n    for i in range(n):\n        # Initialize an empty list to store products of sublist\n        prod_list = []\n        # Initialize two pointers i and j\n        j = i\n        while j < n:\n            # Append the product of the current element and the next element\n            prod_list.append(arr[j] * arr[j+1])\n            # Move the pointer j to the next element\n            j += 1\n        # Calculate the sum of products\n        sum_of_prod = sum(prod_list)\n        # Append the sum of products to the sum_list\n        sum_list.append(sum_of_prod)\n\n    # Calculate the sum of products of the entire array\n    sum_of_array = sum(arr)\n    # Calculate the final sum\n    final_sum = sum_of_array - sum(sum_list)\n\n    # Return the final sum\n    return final_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subarray_prod = [1] * len(arr)  # Initialize subarray_prod with 1\n    prod = 1  # Initialize product with 1\n\n    for i in range(len(arr)):\n        prod *= arr[i]  # Update product with the next element in the array\n\n        # Update subarray_prod with the product of the remaining elements in the array\n        subarray_prod[i] = prod\n\n    # Calculate the sum of products of all possible sublists of the array\n    sum_of_subarray_prod = sum(subarray_prod)\n\n    return sum_of_subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0]*(n+1) for _ in range(2)] # to store sum of products of sublists of arr\n    \n    # Initialize base case for dp\n    dp[0][0] = 0\n    dp[0][1] = 1\n    \n    for i in range(1, n+1):\n        dp[1-i%2][0] = 0 # initialize base case for dp[0]\n        dp[1-i%2][1] = arr[i-1] # initialize base case for dp[1]\n        \n        # calculate sum of products of sublists of arr[:i]\n        for j in range(i):\n            dp[1-i%2][0] += dp[(1-i%2)^j][0]*arr[j]\n            dp[1-i%2][1] += dp[(1-i%2)^j][1]*arr[j]\n        \n        # add the sum of products of sublists of arr[:i] to sum of products of sublists of arr\n        dp[i%2][0] = dp[i%2][0] + dp[1-i%2][0]\n        dp[i%2][1] = dp[i%2][1] + dp[1-i%2][1]\n    \n    return dp[n%2][0]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize the result and a variable to store the current sublist product\n    result = 1\n    sublist_product = 1\n    \n    # Loop through each element in the input array\n    for num in arr:\n        # Multiply the current sublist product by the current element and add it to the result\n        result += sublist_product * num\n        \n        # Update the sublist product to be the current element\n        sublist_product *= num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Store the first bit and the last bit of the number\n    first_bit = (n & 1)\n    last_bit = (n >> 31) & 1\n    \n    # Calculate the middle bits as the XOR of the first and last bits\n    middle_bits = first_bit ^ last_bit\n    \n    # Toggle the middle bits\n    n ^= middle_bits\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle the middle bits of a given number except for the first and last bit.\n    \"\"\"\n    bit_len = len(bin(n)[2:])  # length of binary representation of n\n    first_bit = n & 1  # first bit of n\n    last_bit = (n >> bit_len - 1) & 1  # last bit of n\n    middle_bits = (n >> 1) & ((1 << (bit_len - 2)) - 1)  # middle bits of n\n\n    return first_bit + last_bit + middle_bits\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Initialize variables\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n\n    # Toggle the middle bit\n    middle_bit = first_bit ^ last_bit\n\n    # Set the first and last bits to the same value\n    n = (n & 0xFFFFFFFF) ^ (middle_bit << 31)\n\n    # Set the middle bit to 0\n    n = (n & 0xFFFFFFFF) ^ (middle_bit << 30)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # set the first bit to 0 and the last bit to 1\n    n = n & ~(0x5555555555555555)\n    # toggle the middle bit\n    n = n ^ 0xAAAAAAAAAAAAAAAA\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bits to 0\n    first_bit = 0\n    last_bit = 0\n\n    # Extract the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> (n.bit_length()-1)\n\n    # Toggle the first and last bits\n    n = n ^ (first_bit ^ last_bit)\n\n    # Extract the middle bits of the number\n    middle_bits = n & ~(first_bit ^ last_bit)\n\n    # Combine the first and middle bits, toggle the last bit, and combine with the middle bits\n    n = (first_bit << (n.bit_length()-1)) | (middle_bits ^ last_bit)\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the index of the first and last set bits\n    i = 0\n    while (n & 1) == 0:\n        i += 1\n        n >>= 1\n    j = 32\n    while (n & 1) == 0:\n        j -= 1\n        n >>= 1\n    # Toggle the middle bits\n    n ^= ((1 << (j - i)) - 1) << i\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Find the position of the first and last bits in binary representation of n\n    first_bit = n & (n - 1)\n    last_bit = n | (n - 1)\n    # Toggle the bits of n except the first and last bit\n    n = (n ^ first_bit ^ last_bit) & ~((first_bit | last_bit) - 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the length of the binary representation of n\n    length = len(bin(n)[2:])\n    # Initialize the first and last bits\n    first_bit = (1 << (length-1)) & n\n    last_bit = (1 << length) & n\n    # Toggle the first and last bits\n    toggled_first_bit = (first_bit + last_bit) ^ first_bit\n    toggled_last_bit = (first_bit + last_bit) ^ last_bit\n    # Toggle the middle bits\n    middle_bits = (toggled_first_bit + toggled_last_bit) ^ first_bit\n    # Combine the first and last bits with the middle bits\n    result = middle_bits | first_bit | last_bit\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1) & 0x55555555\n    n = n ^ (n << 1) & 0xAAAAAAAA\n    n = n ^ (n >> 2) & 0x33333333\n    n = n ^ (n << 2) & 0xCCCCCCCC\n    n = n ^ (n >> 4) & 0x0F0F0F0F\n    n = n ^ (n << 4) & 0xF0F0F0F0\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:] # Remove the \"0b\" prefix from the binary string representation of n\n    if len(n) < 10: # If the binary string representation of n has less than 10 bits, it will be padded with 0's\n        n = '0'*(10-len(n)) + n\n    \n    # Find the position of the first and last bits\n    first_bit = n.index('1')\n    last_bit = n.rindex('1')\n    \n    # Toggle bits at the first and last positions\n    toggled_bits = n[:first_bit] + '0' + n[first_bit+1:last_bit+1] + '1' + n[last_bit+1:]\n    \n    # Convert the binary string representation of toggled_bits back to an integer\n    return int(toggled_bits, 2)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if i!= len(a) and a[i] == x else -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Using binary search to find the insertion point\n    index = bisect.bisect_left(a, x)\n    # Return the leftmost index\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n    return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x - 1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0 or a[index - 1]!= x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): A sorted list of integers.\n    x (int): An integer to be inserted.\n\n    Returns:\n    int: The index at which to insert x into a sorted list a.\n    \"\"\"\n    # Use bisect.bisect_left function to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        elif a[index] < x:\n            return bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the leftmost element that is greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # Return the index of the leftmost element that is greater than or equal to x\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(f\"{string} is a valid starting word for a vowel.\")\n    else:\n        print(f\"{string} is not a valid starting word for a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        print(f\"{string} starts with a vowel.\")\n    else:\n        print(f\"{string} does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The geometric sum of\", n, \"-\", \"1\", \"is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1/n) + (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 / n) * (geometric_sum(n-1))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    triangular_numbers = {}\n    for i in range(1, n+1):\n        triangular_numbers[i] = math.ceil(math.sqrt(i*i + 1)) - math.floor(math.sqrt(i*i + 1))\n    smallest_triangular = None\n    for tri in triangular_numbers.values():\n        if smallest_triangular is None or tri < smallest_triangular:\n            smallest_triangular = tri\n    return triangular_numbers[min(triangular_numbers, key=triangular_numbers.get)]"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # calculate the sum of first n natural numbers\n    sum_natural = n * (n + 1) // 2\n\n    # calculate the length of the triangular number\n    length = int(math.log(sum_natural, 10)) + 1\n\n    # calculate the smallest triangular number with n digits\n    triangular = 10 ** length - sum_natural\n\n    # find the index of the smallest triangular number\n    for i in range(sum_natural, 0, -1):\n        if i == triangular:\n            return i\n\n    # if the index is not found, return -1\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 1\n    triangular = 0\n\n    # check if n is valid\n    if n < 1:\n        return \"Invalid input. n should be greater than or equal to 1.\"\n\n    # loop through all triangular numbers with n digits\n    while count <= n:\n        triangular = count * (count + 1) // 2\n        # check if the triangular number is smaller than or equal to n\n        if triangular <= n:\n            count += 1\n        else:\n            # return the index of the triangular number\n            return triangular - n - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    triangular_numbers = []\n    triangular_number = 0\n\n    # Iterate until n digits have been added to the triangular_numbers list\n    while len(str(triangular_number)) < n:\n        triangular_number += 1\n        triangular_numbers.append(triangular_number)\n\n    # Find the index of the smallest triangular number\n    smallest_triangular_number = min(triangular_numbers)\n    index = triangular_numbers.index(smallest_triangular_number) + 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 1\n    index = 0\n    while math.log10(triangular_number) < n:\n        triangular_number += 1\n        index += 1\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Index(n): \n    # Initialize the smallest triangular number with n digits to 10^n-1 \n    smallest_triangular = 10**n-1\n\n    # Iterate from n to 2 \n    for i in range(n, 2, -1): \n        # Calculate the next triangular number using the formula: triangular[i] = smallest_triangular + i \n        next_triangular = smallest_triangular + i \n        # Check if the next triangular number has n digits \n        if len(str(next_triangular)) == n: \n            # If it does, update the smallest triangular number to the next triangular number \n            smallest_triangular = next_triangular \n\n    # Return the index of the smallest triangular number with n digits \n    return str(smallest_triangular).index('0')"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # find smallest triangular number with n digits\n    triangular = math.ceil(10**(n-1))\n    \n    # find index of smallest triangular number with n digits\n    index = n - int(math.log10(triangular))\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n\n    # Initialize the index to 1\n    index = 1\n\n    # Initialize the number of digits in the smallest triangular number\n    digit_count = 1\n\n    # Initialize the smallest triangular number with 0th digit\n    smallest_num = 0\n\n    # Loop until the number of digits is equal to n\n    while digit_count < n: \n\n        # Calculate the next triangular number and its digit count\n        triangular_num = index * (index + 1) // 2\n        digit_count = len(str(triangular_num))\n\n        # Check if the triangular number is smaller than the current smallest triangular number\n        if triangular_num < smallest_num: \n\n            # If it is, update the smallest triangular number and index\n            smallest_num = triangular_num\n            index = triangular_num // smallest_num\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n % 2 == 0: \n        return -1 \n\n    m = n // 2\n    triangular_numbers = []\n    triangular_numbers.append(1)\n\n    for i in range(1, m): \n        triangular_numbers.append(i*(i+1))\n\n    smallest_triangular_number = max(triangular_numbers)\n\n    count = 0\n    for i in range(len(triangular_numbers)): \n        if triangular_numbers[i] == smallest_triangular_number: \n            count = i+1\n            break\n\n    return count\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    num = 0\n    for i in range(1, n+1):\n        num += i*i\n\n    return math.log(num, 10) + 1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Check if the input tuple has an odd number of elements\n    if len(test_tup) % 2!= 0:\n        print(\"Error: The tuple should have an odd number of elements.\")\n        return\n    \n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Loop through the tuple and add adjacent elements to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    \n    # Return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Using tuple packing and unpacking\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            dict_obj[test_tup[i]] = test_tup[i+1]\n        else:\n            dict_obj[test_tup[i]] = test_tup[i-1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        print(\"The tuple must have an even number of elements.\")\n        return\n    \n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        key_value_dict[key] = value\n    \n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # creating a dictionary\n    my_dict = {}\n    # iterating over the tuple\n    for i in range(0, len(test_tup), 2):\n        # adding the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # returning the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # loop through the tuple and add the first two elements as key-value pairs in the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.count(s[0]) == len(s)"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Checking if the length of the string is 0 or not\n    if len(s) == 0:\n        return True\n\n    # Iterating over the string to find the first character\n    first_char = s[0]\n\n    # Initializing a variable to keep track of the count of characters in the string\n    count = 1\n\n    # Iterating over the string to find the rest of the characters\n    for i in range(1, len(s)):\n        if s[i] == first_char:\n            count += 1\n        else:\n            break\n\n    # Checking if the count is equal to the length of the string\n    if count == len(s):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a string are same or not.\n    \"\"\"\n    # getting the first character of the string\n    first_char = s[0]\n    # iterating over the string using a loop\n    for char in s:\n        # if any two characters are not same, then return False\n        if char!= first_char:\n            return False\n    # if all characters are same, then return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to lowercase\n    s = s.lower()\n    # check if the length of the string is 1\n    if len(s) == 1:\n        return True\n    # check if all the characters are the same in the string\n    else:\n        for i in range(1, len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Args:\n    side (float): the length of each side of the tetrahedron\n\n    Returns:\n    float: the area of the tetrahedron\n    \"\"\"\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (3 * side ** 2) / 2\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(semi_perimeter ** 2 + 3 * side ** 2 + 10 * side ** 2)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Find the semi-perimeter of the tetrahedron\n    semi_perimeter = (side * (3 + math.sqrt(10))) / 4\n\n    # Find the area of the tetrahedron using Heron's formula\n    area = math.sqrt(semi_perimeter * (semi_perimeter - side) * (semi_perimeter - side) * (semi_perimeter - side))\n\n    # Return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    area = (1/3) * side * side * side\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Compute the semi-perimeter\n    semi_perimeter = (1/3) * side * side * side\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter * (semi_perimeter - side) * (semi_perimeter - (2*side)) * (semi_perimeter - (3*side)))\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # formula to calculate area of tetrahedron\n    s = (1 + math.sqrt(5)) / 2\n    area = (1 / 6) * side ** 2 * math.sqrt(1 + s * side / 4)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side/2\n    b = math.sqrt(3)*a\n    c = a*a\n    return (a+b+c)/2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # To handle the case where m is greater than n\n    \n    # Storing the last m items in a new list\n    right_rotated = list[-m:]\n    \n    # Removing the last m items from the list\n    for i in range(m-1, -1, -1):\n        list.pop()\n    \n    # Concatenating the last m items with the first m items in the list\n    for i in range(m):\n        list.append(right_rotated[i])\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n    # Find the length of the list\n    n = len(list)\n    # Find the modulo of m and n\n    mod = m % n\n    \n    # If m is not divisible by n, then m cannot be rotated to the right\n    if mod!= 0:\n        return list\n    \n    # Create a new list to store the rotated items\n    rotated_list = []\n    \n    # Iterate through the list from the end to the first element\n    for i in range(n-mod):\n        rotated_list.append(list[i])\n        \n    # Iterate through the list from the first element to the end\n    for i in range(mod):\n        rotated_list.append(list[i])\n    \n    # Return the rotated list\n    return rotated_list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n\n    :param list: A list to be rotated.\n    :param m: An integer representing the number of items to be rotated to the right.\n    :return: The rotated list.\n    \"\"\"\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Get the length of the list\n    n = len(list)\n\n    # Check if the rotation is within the bounds of the list\n    if m >= n:\n        return list\n\n    # Get the elements to be rotated\n    temp = list[m:]\n    new_list = list[:m]\n\n    # Append the rotated elements to the end of the list\n    new_list.extend(temp)\n\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function rotates the given list by m items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m %= n\n    lst.extend(lst[:m])\n    lst[:m] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        list.extend(list[:m])\n        list = list[m:]\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m > n:\n        m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # To ensure that m is less than n.\n\n    # Traverse the list from right to left.\n    for i in range(n-m, -1, -1):\n        # Swap the current element with the (i+m)th element.\n        list[i], list[i+m] = list[i+m], list[i]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for elem in test_tup:\n        if elem is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(value is None for value in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    none_value = None\n    for item in test_tup:\n        if item is none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    none_found = False\n    for val in test_tup:\n        if val is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(int(d) % num == 0 for d in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % 10 == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two arguments: startnum and endnum.\n    It iterates through each number in the range between startnum and endnum.\n    For each number, it checks if it is divisible by every digit that it contains.\n    If the number is divisible by every digit, it is added to a list of divisible numbers.\n    Finally, the list of divisible numbers is returned.\n    \"\"\"\n    def is_divisible_by_digit(num, digit):\n        \"\"\"\n        This function takes in two arguments: num and digit.\n        It returns True if the digit appears in the integer representation of num.\n        \"\"\"\n        digit_int = int(digit)\n        num_int = int(num)\n        return digit_int in str(num_int)\n\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        if all(is_divisible_by_digit(str(num)[i], str(num)[i]) for i in range(len(str(num)))):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    # Helper function to check if a number is divisible by every digit in a list\n    def is_divisible(num, digits):\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n\n    # Loop through each number in the range and check if it is divisible by every digit it contains\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if is_divisible(num, digits):\n            print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    def is_divisible_by_digits(num):\n        '''\n        Helper function to check if a number is divisible by every digit it contains.\n        '''\n        digits = [int(d) for d in str(num)]\n        return all(d == 0 for d in digits)\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def check_divisibility(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit % 2!= 0:\n                return False\n        return True\n\n    return list(filter(check_divisibility, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Check if a number is divisible by every digit it contains.\n        \"\"\"\n        def is_divisible_by(digit, num):\n            \"\"\"\n            Check if a digit is divisible by a number.\n            \"\"\"\n            return num % digit == 0\n\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if not is_divisible_by(digit, num):\n                return False\n        return True\n\n    numbers = list(range(startnum, endnum + 1))\n    divisible_numbers = list(filter(is_divisible_by_digits, numbers))\n    return divisible_numbers"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    \"\"\"\n    if a > 360:\n        return None\n    \n    # Calculating the radius of the sector\n    s = r * math.sin(math.radians(a))\n    \n    # Calculating the area of the sector\n    area = math.pi * (r ** 2)\n    \n    # Calculating the area of the circle which is inside the sector\n    circ_area = math.pi * (s ** 2)\n    \n    # Returning the total area of the sector\n    return area - circ_area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    a = math.radians(a)\n    \n    # calculate area of sector\n    area = math.pi * (r ** 2) * (a / 360)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within 360 degrees\n    if a > 360:\n        print(\"Angle should be less than 360 degrees.\")\n        return None\n    \n    # Convert angle to radians\n    a = a * math.pi/180\n    \n    # Calculate area of sector\n    area = math.pi * r**2 * (1 - math.cos(a))\n    \n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r ** 2) * (a / 360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is valid\n    if a > 360:\n        return None\n\n    # Convert angle to radians\n    a = a * (math.pi/180)\n\n    # Calculate area\n    area = r * r * a\n\n    # Return area\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is within valid range\n    if a > 360 or a < 0:\n        return None\n    \n    # Calculate area of sector using formula A = Pi * r^2 * sin(theta/2)\n    area = math.pi * r**2 * math.sin(math.radians(a/2))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        area = math.pi * r ** 2 * a / 360\n        return area\n    else:\n        print(\"Error: Angle should be less than or equal to 360 degrees.\")\n        return None"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize the length of the three strings\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n\n    # Create a 3D table to store the lengths of longest common subsequence \n    # for all possible lengths of the three strings. \n    # The base case is when the length of a string is 0. \n    table = [[0 for i in range(o+1)] for j in range(m+1)] \n\n    # Fill the base case of the table \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, o+1): \n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    table[i][j][k] = table[i-1][j-1][k-1] + 1 \n                else: \n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j][k-1]) \n\n    # Return the length of the longest common subsequence \n    return table[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    This function uses dynamic programming approach to solve the problem.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Creating a 3D table to store lengths of LCS of three sequences\n    dp = [[[0] * (p + 1) for j in range(n + 1)] for i in range(m + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    # Backtracking to find the LCS\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j][k]:\n            i -= 1\n        elif dp[i][j - 1][k] == dp[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Find the length of the three strings\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Step 2: Create a table to store the length of LCS of all prefixes\n    table = [[0] * (p + 1) for i in range(n + 1)]\n\n    # Step 3: Fill in the table using dynamic programming\n    for i in range(n + 1):\n        for j in range(m + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    table[i][j][k] = table[i - 1][j - 1][k - 1] + 1\n                else:\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i][j][k - 1])\n\n    # Step 4: Backtrack from the table to get the LCS of all prefixes\n    lcs = []\n    i = n\n    j = m\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i - 1][j][k] == table[i][j - 1][k]:\n            i -= 1\n        elif table[i][j - 1][k] == table[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Step 5: Reverse the LCS to get the correct order\n    lcs.reverse()\n\n    # Step 6: Return the LCS\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    # create a dictionary to store length of LCS for each substring of X, Y, Z \n    LCS = {} \n    for i in range(len(X)): \n        for j in range(len(Y)): \n            for k in range(len(Z)): \n                # check if all three substrings are present in X, Y, Z \n                if i+j+k == len(X) and X[i:i+j] in LCS and Y[j:j+k] in LCS and Z[k:k+len(Z)-i-j] in LCS: \n                    # if they are present, update the length of LCS in the current position of LCS dictionary \n                    if X[i:i+j] not in LCS: LCS[X[i:i+j]] = [] \n                    if Y[j:j+k] not in LCS[X[i:i+j]]: LCS[X[i:i+j]].append(Y[j:j+k]) \n                    if Z[k:k+len(Z)-i-j] not in LCS[X[i:i+j]]: LCS[X[i:i+j]].append(Z[k:k+len(Z)-i-j]) \n                    # if length of LCS is greater than or equal to the length of LCS of any other substrings, update the length of LCS in the current position of LCS dictionary \n                    if len(LCS[X[i:i+j]]) >= len(LCS[X[0:i+j]]): LCS[X[i:i+j]] = LCS[X[0:i+j]] \n    # find the longest LCS among all three substrings \n    max_len = max(len(LCS[X[0:i+j]]) for i in range(len(X))) \n    return [X[i:i+j] for j in range(max_len) for i in range(len(X)-max_len+1) if len(LCS[X[i:i+j]]) == max_len] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # initialize the matrix to store the length of the longest common subsequence for each pair of substrings\n    L = [[0 for j in range(len(Y) + 1)] for i in range(len(X) + 1)]\n    \n    # fill the matrix using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n                \n    # build the longest common subsequence using the matrix\n    lcs = []\n    i, j = len(X), len(Y)\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n            \n    # reverse the subsequence and return it\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    def longest_common_subsequence(X, Y, Z): \n        M = len(X) \n        N = len(Y) \n        O = len(Z) \n  \n        # table to store lengths of LCS of subarrays \n        L = [[0] * (O + 1) for i in range(M + 1)] \n  \n        # Fill L[i][j] in bottom up manner \n        for i in range(M + 1): \n            for j in range(O + 1): \n                if i == 0 or j == 0: \n                    L[i][j] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[i-1]: \n                    L[i][j] = L[i-1][j-1] + 1 \n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n        # print the constructed LCS \n        i = M \n        j = O \n        lcs = [] \n        while i > 0 and j > 0: \n            if X[i-1] == Y[j-1] and X[i-1] == Z[i-1]: \n                lcs.append(X[i-1]) \n                i -= 1 \n                j -= 1 \n            elif L[i-1][j] > L[i][j-1]: \n                i -= 1 \n            else: \n                j -= 1 \n  \n        return lcs[::-1] \n  \n    # Finding the length of LCS of subarrays for each string \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n  \n    # table to store lengths of LCS of subarrays \n    L = [[0] * (o + 1) for i in range(m + 1)] \n  \n    # Fill L[i][j] in bottom up manner \n    for i in range(m + 1): \n        for j in range(o + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0 \n            elif X[i-1] == Y[j-1] and X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # print the constructed LCS of subarrays \n    for i in range(m + 1): \n        for j in range(o + 1): \n            if i == 0 or j == 0: \n                print(0, end=' ') \n            else: \n                print(L[i][j], end=' ') \n        print() \n  \n    # Finding the length of LCS for each string \n    LCS = [] \n    for i in range(m + 1): \n        for j in range(o + 1): \n            if i == 0 or j == 0: \n                LCS.append(0) \n            else: \n                LCS.append(L[i][j]) \n  \n    # print the LCS \n    for i in range(m + 1): \n        for j in range(o + 1): \n            if i == 0 or j == 0: \n                print(0, end=' ') \n            else: \n                print(LCS[i] - L[i][j], end=' ') \n        print() \n  \n    # Finding the length of LCS of all three strings \n    LCS_of_all_three = [] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    LCS_of_all_three.append(0) \n                else: \n                    LCS_of_all_three.append(max(L[i][k], L[j][k])) \n  \n    # print the LCS of all three strings \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    print(0, end=' ') \n                else: \n                    print(LCS_of_all_three[i] - L[i][k], end=' ') \n        print() \n  \n    # finding the LCS of all three strings"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 2D table to store the length of LCS for all possible subsequences\n    table = [[0] * (n+1) for i in range(m+1)]\n\n    # fill the table using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j] = table[i-1][j-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    table[i][j] = table[i-1][j]\n                elif X[i-1] == Z[k-1]:\n                    table[i][j] = table[i][j-1]\n                elif Y[j-1] == Z[k-1]:\n                    table[i][j] = table[i][j-1]\n\n    # find the length of LCS\n    lcs_length = table[m][n]\n\n    # create a list to store the LCS itself\n    lcs = []\n\n    # backtrack the table to construct LCS\n    i = m\n    j = n\n    k = p\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            k -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n\n    return lcs_length, \"\".join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Convert the input strings to lists of characters\n    X = list(X)\n    Y = list(Y)\n    Z = list(Z)\n\n    # Initialize the length of LCS as zero\n    LCS = 0\n\n    # Initialize the table to store the length of LCS for all possible pairs of characters in X and Y\n    table = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the table to store the length of LCS for all possible pairs of characters in X and Y\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n                if table[i][j] > LCS:\n                    LCS = table[i][j]\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    return LCS"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Find lengths of strings X, Y, Z\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of subproblems\n    L = [[0 for j in range(p + 1)] for i in range(n + 1)]\n\n    # Fill the L table in bottom up fashion.\n    for i in range(n + 1):\n        for j in range(p + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] and X[i-1] == Z[i-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Print the lengths of LCS for all possible substrings\n    for i in range(n + 1):\n        for j in range(p + 1):\n            print(\"L[{0}, {1}] = {2}\".format(i, j, L[i][j]), end=\" \")\n\n    # Initialize variables for LCS and indices of the LCS\n    lcs = \"\"\n    i = n\n    j = p\n\n    # Fill the lcs string in bottom up fashion.\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[i-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][p]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # use the pattern to find all non-overlapping matches of the pattern in the given string\n    matches = re.finditer(pattern, str1)\n    # loop through the matches and replace the word with a space followed by the capitalized word\n    for match in matches:\n        str1 = str1.replace(match.group(0),'' + match.group(0).lower())\n    # return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern for matching capitalized words\n    pattern = r'\\b[A-Z]\\w+\\b'\n    # Use the re.sub() method to substitute the pattern with a space\n    return re.sub(pattern,'', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # replace all occurrences of the pattern with a space\n    str2 = re.sub(pattern, r' \\1', str1)\n    \n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove any non-alphanumeric characters from the string\n    str1 = re.sub('[^a-zA-Z0-9]+','', str1)\n    # Split the string into individual words\n    words = str1.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back together with spaces between them\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # convert the input string to lowercase\n    str1 = str1.lower()\n    # split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # iterate over the words and check if the first letter is capital\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            # if it is, add a space before the word\n            words[i] ='' + word\n    # join the words back together into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n\n    # Initialize an empty string to store the output\n    output = \"\"\n\n    # Iterate through each word\n    for word in words:\n        # If the first letter of the word is capital, add a space before it and append to the output\n        if word[0].isupper():\n            output += \" \" + word\n        else:\n            output += word\n\n    # Return the final output string\n    return output"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # Capitalize the first letter of each word and join them with spaces\n    return''.join(word.capitalize() for word in words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings to integers\n    nums = [int(x) for x in nums_str]\n\n    # Sort the integers using the built-in sort() function\n    nums.sort()\n\n    # Convert the sorted integers back to strings and join them into a single string\n    sorted_str = \"\".join(str(x) for x in nums)\n\n    return sorted_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Use a lambda function to convert each string to a float and sort it numerically\n    nums_sorted = sorted(nums_str, key=lambda x: float(x))\n    return nums_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert list to list of int\n    nums_int = [int(n) for n in nums_str]\n    # sort the list of int in ascending order\n    nums_int.sort()\n    # convert list of int back to list of strings\n    nums_str = [str(n) for n in nums_int]\n    # return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for s in nums_str:\n        try:\n            nums.append(float(s))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings as input and sorts the numeric strings in the list numerically.\n    The function uses the built-in `sort()` function of the list.\n    '''\n    nums = [float(num_str) for num_str in nums_str if num_str.isnumeric()]\n    nums.sort()\n    sorted_nums = [str(num) for num in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert the list of strings to a list of numbers\n    nums = [int(num) for num in nums_str]\n    # Sort the list of numbers\n    nums.sort()\n    # Convert the sorted list back to a list of strings\n    result = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for s in nums_str:\n        try:\n            nums.append(float(s))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically using Python's built-in sort() function.\n    \"\"\"\n    nums_str.sort()\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Split the input list into individual strings of numbers\n    nums = [x for x in nums_str if x.isdigit()]\n    \n    # Sort the list of numeric strings numerically using the `sorted()` function\n    nums.sort(key=lambda x: int(x))\n    \n    # Convert the sorted list of numeric strings back into a list of strings\n    sorted_nums = [str(x) for x in nums]\n    \n    # Join the sorted list of strings back into a single string separated by commas\n    return \", \".join(sorted_nums)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    # remove non-numeric characters from the string\n    nums_str = ''.join(filter(str.isdigit, nums_str))\n    # convert the string to list of integers\n    nums_list = [int(x) for x in nums_str]\n    # sort the list of integers\n    nums_list.sort()\n    # convert the list of integers back to string\n    nums_str = ''.join(map(str, nums_list))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the given tuple to the list\n    test_list.append(test_tup)\n    \n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    test_list.append(test_tup)\n    # return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for item in test_list:\n        test_list.append(item)\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the root is smaller than its children\n    if i > 0:\n        if arr[i] < arr[i//2]:\n            return False\n    # Recursively check if the children are smaller\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: empty array is a min heap\n    if len(arr) == 0:\n        return True\n    # Check if the root is smaller than its children\n    if arr[0] < arr[1]:\n        return False\n    # Recursively check the heap properties\n    return check_min_heap_helper(arr, 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    if arr[parent] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, parent)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0: # base case\n        return True\n    \n    if arr[i] < arr[i//2]: # check if left child is smaller than parent\n        return False\n    \n    return check_min_heap_helper(arr, i//2) # recursive call to check left child\n\ndef check_min_heap(arr):\n    '''\n    Given an array of integers, check if it represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or i == len(arr)-1:\n        return True\n    if arr[i] > arr[2*i] or arr[i] > arr[2*i+1]:\n        return False\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents min heap or not.\n    \"\"\"\n    # Base case: if the array has only one element, then it is a min heap\n    if i == len(arr) // 2:\n        return True\n\n    # Check if the left child is less than the current element\n    if i * 2 + 1 < len(arr) and arr[i] > arr[i * 2 + 1]:\n        return False\n\n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Main function to check if the given array represents min heap or not.\n    \"\"\"\n    # Base case: if the array is empty, it is a min heap\n    if not arr:\n        return True\n\n    # Check if the array is a min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n    Returns True if the array represents min heap, else False.\n    '''\n\n    if i >= 0 and i < len(arr):\n        left = 2*i + 1\n        right = 2*i + 2\n        smallest = i\n\n        if left < len(arr) and arr[left] < arr[smallest]:\n            smallest = left\n\n        if right < len(arr) and arr[right] < arr[smallest]:\n            smallest = right\n\n        if smallest!= i:\n            arr[i], arr[smallest] = arr[smallest], arr[i]\n            check_min_heap_helper(arr, smallest)\n\n        return False\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n\n    # Check if the left child is smaller than the parent\n    if arr[i] < arr[2 * i + 1]:\n        return False\n\n    # Recursively call the function on the left child\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef is_min_heap(arr):\n    '''\n    This function takes an array and returns True if it represents a min heap and False otherwise.\n    '''\n\n    # Check if the given array is empty\n    if not arr:\n        return False\n\n    # Call the helper function to check if the array represents a min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i > 0:\n        if arr[i] < arr[(i-1)//2]:\n            return False\n    if i*2+1 < len(arr):\n        if arr[i] > arr[i*2+1]:\n            return False\n    if i*2+2 < len(arr):\n        if arr[i] > arr[i*2+2]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n\n    if i == 0 and arr[i] > arr[i+1]:\n        return False\n\n    if i == 0:\n        if arr[i] > arr[i+1]:\n            return False\n        else:\n            return True\n\n    if arr[i] > arr[i+1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i+1)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if i == 0 and arr[i] < arr[i+1]:\n        return False\n    if arr[i] > arr[i+1] or (arr[i] == arr[i+1] and arr[i] > arr[i+2]):\n        return False\n    return check_min_heap_helper(arr, i+1)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n\nif __name__ == '__main__':\n    arr = [5, 2, 10, 3, 1, 6]\n    if check_min_heap(arr):\n        print(\"The array is a min heap\")\n    else:\n        print(\"The array is not a min heap\")"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        jacob_num = 0\n        for i in range(2, n+1):\n            jacob_num = (2*jacob_num - 1) % n\n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        jacobsthal_num = 0\n        for i in range(2, n+1):\n            jacobsthal_num += jacobsthal_num_helper(i)\n        return jacobsthal_num\n\ndef jacobsthal_num_helper(n):\n    '''\n    Helper function to calculate the nth jacobsthal number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        jacobsthal_num = 0\n        for i in range(2, n):\n            jacobsthal_num += (i*(i-1))\n        return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_num = 0\n    for i in range(1, n+1):\n        jacob_num = (2*jac_num + 1) // i\n    return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = jacobsthal_num(n-1) + jacobsthal_num(n-2)\n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]  # first two numbers are 0 and 1\n    count = 2  # count of jacobsthal numbers found so far\n\n    while count < n:\n        jacobsthal_numbers.append(jacobsthal_numbers[-1] + jacobsthal_numbers[-2])\n        count += 1\n    \n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first two elements of the sequence\n    a = 0\n    b = 1\n    # Use a loop to calculate the sequence up to n\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    # Return the nth element of the sequence\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function calculates the nth Jacobsthal number.\n    \"\"\"\n    # Initialize the first two numbers in the sequence\n    a, b = 0, 1\n\n    # Iterate through the sequence n times\n    for i in range(n):\n        # Add the previous two numbers and update the variables\n        a, b = a + b, a\n        # Print the current number\n        print(a, end=\" \")\n\n    # Return the final number in the sequence\n    return a"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the tuple list based on the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # Find the first K elements in the sorted list\n    min_list = test_list[:K]\n\n    # Create an empty list to store the final result\n    min_list_final = []\n\n    # Iterate through the first K elements in the sorted list and add them to the final result\n    for i in range(K):\n        min_list_final.append(min_list[i][0])\n\n    return min_list_final"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Initialize variables for minimum count and minimum key\n    min_count = float('inf')\n    min_key = None\n\n    # Loop through the list\n    for i in range(len(test_list)):\n\n        # Get the count and key of the current record\n        count, key = test_list[i]\n\n        # If the count is less than the minimum count or the count is equal to the minimum count and the key is smaller\n        if count < min_count or (count == min_count and key < min_key):\n\n            # Update the minimum count and key\n            min_count = count\n            min_key = key\n\n    # Return the minimum key and count\n    return min_key, min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the test list by the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize the minimum records list and the minimum value found so far\n    min_records = []\n    min_value = float('inf')\n\n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        # Check if the current value is smaller than the minimum value found so far\n        if sorted_list[i][1] < min_value:\n            # If yes, update the minimum value and add the corresponding tuple to the minimum records list\n            min_value = sorted_list[i][1]\n            min_records = [sorted_list[i]]\n        # If no, check if the current value is already in the minimum records list\n        elif sorted_list[i][1] == min_value:\n            # If yes, add the corresponding tuple to the list\n            min_records.append(sorted_list[i])\n\n    # Return the minimum records list\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples by the second element in descending order\n    test_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize the minimum_list to keep track of the k smallest records\n    minimum_list = []\n\n    # Loop through the sorted list of tuples and keep track of the minimum k records\n    for i in range(K):\n        if i < len(test_list):\n            minimum_list.append(test_list[i])\n        else:\n            break\n\n    return minimum_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Store all the tuples in a set to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Sort the set in ascending order based on the last element of each tuple\n    sorted_set = sorted(unique_tuples, key=lambda x: x[-1])\n\n    # Find the minimum k records\n    min_k_records = []\n    for i in range(K):\n        min_k_records.append(sorted_set.pop(0))\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Sort the list based on the length of the tuple in descending order\n    sorted_list = sorted(test_list, key=lambda x: len(x), reverse=True)\n\n    # Create a dictionary to store the count of each element in the list\n    element_count = {}\n\n    # Initialize the minimum count of elements to be K\n    min_count = K\n\n    # Iterate through the list and update the count of each element in the dictionary\n    for record in sorted_list:\n        for element in record:\n            if element in element_count:\n                element_count[element] += 1\n            else:\n                element_count[element] = 1\n\n        # Check if the count of elements is equal to K or greater\n        if sum(element_count.values()) >= K:\n            # If it is, break out of the inner loop\n            break\n\n    # Find the minimum count of elements in the dictionary\n    min_elements = [key for key, value in element_count.items() if value == min_count]\n\n    # Return the list of minimum count elements\n    return min_elements"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize a variable to store the minimum k records\n    min_k_records = []\n\n    # Iterate over the sorted list and add the first K elements to the min_k_records\n    for i in range(K):\n        min_k_records.append(sorted_list[i][1])\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Initialize minimum count and minimum value\n    min_count = 0\n    min_value = float('inf')\n\n    # Loop through the tuple list and update min_count and min_value\n    for i in range(len(test_list)):\n        if test_list[i][1] <= min_value:\n            min_value = test_list[i][1]\n            min_count = 1\n        elif test_list[i][1] == min_value:\n            min_count += 1\n\n    # Return the minimum count of k records\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \"\"\"\n\n    # convert test_list to a dictionary to reduce time complexity\n    d = {}\n    for t in test_list:\n        d[t] = True\n\n    # sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(d.items(), key=lambda item: item[1], reverse=True))\n\n    # find the minimum K records\n    min_records = []\n    for i in range(K):\n        min_key = next(iter(sorted_dict))\n        min_records.append(min_key)\n        del sorted_dict[min_key]\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_list = []\n    for i in range(len(test_list)):\n        min_k_list.append(test_list[i][0])\n        min_k_list.sort()\n        min_k_list.pop()\n    min_k_list.sort()\n    return min_k_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty set to hold common elements\n    common = set()\n    # loop through each index in the lists\n    for i in range(min(len(l1), len(l2), len(l3))):\n        # check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # if they are, add the element to the set of common elements\n            common.add(l1[i])\n    # return the list of common elements\n    return list(common)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Loop through all possible indices\n    common_indices = []\n    for i in range(len(l1)):\n        # Check if the element at index i is in l1, l2, and l3\n        if l1[i] in l1 and l2[i] in l2 and l3[i] in l3:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i] and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty dictionary to store the indices and their common elements\n    common_elements = {}\n    \n    # Loop through the first list and find the indices of elements in the second and third lists\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            # Add the index to the dictionary if it's not already there\n            if i not in common_elements:\n                common_elements[i] = [l1[i]]\n            # If the element is already in the dictionary, add it to the list of common elements\n            else:\n                common_elements[i].append(l1[i])\n    \n    # Convert the dictionary to a list of lists and return it\n    return [common_elements[i] for i in range(max(common_elements))]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the count of each element in each list\n    counts = {}\n    for i in range(len(l1)):\n        if l1[i] in counts:\n            counts[l1[i]] += 1\n        else:\n            counts[l1[i]] = 1\n    for i in range(len(l2)):\n        if l2[i] in counts:\n            counts[l2[i]] += 1\n        else:\n            counts[l2[i]] = 1\n    for i in range(len(l3)):\n        if l3[i] in counts:\n            counts[l3[i]] += 1\n        else:\n            counts[l3[i]] = 1\n    \n    # Find the common elements in each list\n    common = []\n    for key in counts:\n        if counts[key] == 3:\n            common.append(key)\n    \n    # Return the common elements in a list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            continue\n        elif l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l2[l2.index(l1[i])] == l3[l3.index(l1[i])]:\n                common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n\n    # Return the second smallest number in the list\n    return sorted_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = None\n    \n    for num in numbers[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number in the list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a\\b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+a'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"The string '{text}' matches the pattern '{pattern}'.\")\n    else:\n        print(f\"The string '{text}' doesn't match the pattern '{pattern}'.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*b+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a\\w*b')\n    return pattern.findall(text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?<![a-zA-Z])[a][b]*(?![a-zA-Z])'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'This is a short text with an a followed by zero or one b. There is also a bb in the text.'\nresult = text_match_zero_one(text)\nprint(result)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # create a dictionary to store the count of each string\n    string_count = {}\n\n    # loop through the given string list\n    for string in test_list:\n        # add the string to the dictionary and increment its count by 1\n        if string in string_count:\n            string_count[string] += 1\n        else:\n            string_count[string] = 1\n\n    # create a set to store the reverse pairs\n    reverse_pairs = set()\n\n    # loop through the dictionary keys and check if the reverse of the key exists in the dictionary\n    for string in string_count:\n        if string[::-1] in string_count and string!= string[::-1]:\n            # add the reverse pair to the set\n            reverse_pairs.add((string, string[::-1]))\n\n    # return the length of the set which contains the reverse pairs\n    return len(reverse_pairs)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    # Iterate over all the strings in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the first string is a reverse of the second string\n            if test_list[i][::-1] in test_list[j]:\n                # Increment the count of reverse pairs\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate over all strings in the list\n    for string in test_list:\n        # Check if the string is a palindrome\n        if string == string[::-1]:\n            # If the string is a palindrome, then it is a reverse pair\n            count += 1\n        # If the string is not a palindrome, then it is not a reverse pair\n        else:\n            # Check if the string is a substring of another string in the list\n            for i in range(len(test_list)):\n                # If the substring is also a palindrome and not the same as the current string, then it is a reverse pair\n                if string in test_list[i] and string!= test_list[i]:\n                    count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_tuples = tuple(tuple(x) for x in list1)\n    count_dict = {}\n    for t in list1_tuples:\n        if t in count_dict:\n            count_dict[t] += 1\n        else:\n            count_dict[t] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        count_dict[tuple(item)] = count_dict.get(tuple(item), 0) + 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple to count its occurrences\n        tuple_element = tuple(element)\n        # If the tuple is already in the dictionary, increment its count\n        if tuple_element in counts:\n            counts[tuple_element] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[tuple_element] = 1\n    # Return the dictionary with the counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for item in list1:\n        for subitem in item:\n            sublist = tuple(subitem)\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 0\n            sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store unique sublists and their count\n    unique_sublist_count = {}\n\n    # Loop through each element in the list1\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and add it to the dictionary\n            if tuple(element) not in unique_sublist_count:\n                unique_sublist_count[tuple(element)] = 1\n            else:\n                unique_sublist_count[tuple(element)] += 1\n\n    return unique_sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as an input and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    '''\n    # Create an empty dictionary to store the unique sublists and their frequency\n    freq_dict = {}\n    \n    # Iterate over each element of the input list\n    for elem in lst:\n        # Convert the element to a tuple and add it to the dictionary if it doesn't exist already\n        if tuple(elem) in freq_dict:\n            freq_dict[tuple(elem)] += 1\n        else:\n            freq_dict[tuple(elem)] = 1\n    \n    # Return the dictionary of unique sublists and their frequency\n    return freq_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if sublist not in count_dict:\n            count_dict[tuple(sublist)] = 1\n        else:\n            count_dict[tuple(sublist)] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_count[tuple(sublist)] = sublist_count.get(tuple(sublist), 0) + 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count unique sublists in a list.\n    \"\"\"\n    counts = {}\n    for item in lst:\n        if isinstance(item, tuple):\n            item_str = str(item)\n        else:\n            item_str = item\n        if item_str in counts:\n            counts[item_str] += 1\n        else:\n            counts[item_str] = 1\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return False\n        if abs(num - int(num)) < 0.01:\n            return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        decimal_num = float(num)\n        if abs(decimal_num - int(decimal_num)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    if len(num) > 1 and '.' in num:\n        # Check if the decimal part of the number has a precision of 2\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if \".\" in num:\n        decimal_point_index = num.index(\".\")\n        if len(num) - decimal_point_index - 1 > 2:\n            return False\n        for digit in num[decimal_point_index + 1:]:\n            if not digit.isdigit() or int(digit) >= 10:\n                return False\n    else:\n        if len(num) > 10:\n            return False\n        for digit in num:\n            if not digit.isdigit() or int(digit) >= 10:\n                return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if '.' not in num:\n            return False\n        if '.' in num and len(num.split('.')[1]) > 2:\n            return False\n        if num.split('.')[0].isdigit() == False:\n            return False\n        if len(num.split('.')[0]) > 10:\n            return False\n        if num.split('.')[1].isdigit() == False:\n            return False\n        if len(num.split('.')[1]) > 2:\n            return False\n    except ValueError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # convert the string to a float and check if it's a decimal number with a precision of 2\n        float(num)\n        if '.' in num and len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        # if the string can't be converted to a float, it can't be a decimal number\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if '.' not in num or len(num.split('.')[1]) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    # Check if the string contains a decimal point\n    if '.' not in num:\n        return False\n\n    # Split the string into integer and decimal parts\n    int_part, dec_part = num.split('.')\n\n    # Check that the integer part is a valid decimal number\n    if int_part.replace('-', '').replace('+', '').replace('e', '').replace('E', '').isdigit():\n        int_val = int(int_part)\n    else:\n        return False\n\n    # Check that the decimal part has a precision of 2\n    if len(dec_part) > 2:\n        return False\n\n    # Check that the decimal part is a valid decimal number\n    if dec_part.replace('-', '').replace('+', '').replace('e', '').replace('E', '').isdigit():\n        dec_val = float(dec_part)\n    else:\n        return False\n\n    # Check that the total number of digits in the integer part and the decimal part add up to the number of digits in the original string\n    if int_part.replace('-', '').replace('+', '').replace('e', '').replace('E', '').isdigit() and \\\n        int(int_part) + dec_val == len(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        # If yes, return True\n        return True\n    else:\n        # If no, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # check if all elements in the dictionary have frequency 1\n    for value in freq.values():\n        if value > 1:\n            return False\n\n    # if we reach this point, all elements have frequency 1\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Loop through the list and update the frequency dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Check whether all the values in the frequency dictionary are 1\n    for value in freq.values():\n        if value!= 1:\n            return False\n\n    # If all the values in the frequency dictionary are 1, then all elements are unique\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Check if the list is empty\n    if len(arr) == 0:\n        return True\n    \n    # Initialize a set to store the unique elements of the list\n    unique_set = set()\n    \n    # Iterate through the list and add each element to the set\n    for i in arr:\n        unique_set.add(i)\n    \n    # Check if the set contains only one element\n    if len(unique_set) == 1:\n        return True\n    \n    # If the set contains more than one element, the list contains at least two distinct elements\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # check if the length of the set is 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers and returns a boolean value indicating whether it contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i])!= len(arr):\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"30\"\n    elif monthnum3 in [2]:\n        return \"29\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n\n    # Check if the month number is between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Month number is not between 1 and 12.\")\n        return\n    \n    # Dictionary of month names and numbers\n    months = {1: \"January\", 2: \"February\", 3: \"March\", 4: \"April\", 5: \"May\", 6: \"June\", 7: \"July\", 8: \"August\", 9: \"September\", 10: \"October\", 11: \"November\", 12: \"December\"}\n\n    # Get the name of the month from the dictionary\n    monthname = months[monthnum3]\n\n    # Check if the month name contains \"30\"\n    if \"30\" in monthname:\n        print(f\"{monthname} contains 30 days.\")\n    else:\n        print(f\"{monthname} does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (datetime.date(2022, 2, 29).weekday() == 5):\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if (datetime.date(2022, 4, 30).weekday() == 5):\n            return True\n        else:\n            return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if (datetime.date(2022, 2, 29).weekday() == 5):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # list of months and their days\n    months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    # check if the month number is valid\n    if monthnum3 in months:\n        # if the month number is valid, check if it has 30 days\n        if months[monthnum3] == 31:\n            return True\n        elif months[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        # if the month number is not valid, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2 and is_leap_year(year):\n            days[1] = 29\n        return days[monthnum3-1]\n    else:\n        return \"Invalid month number\"\n\ndef is_leap_year(year):\n    '''\n    Check whether the given year is a leap year or not.\n    '''\n    if year % 4!= 0:\n        return False\n    if year % 100!= 0:\n        return True\n    if year % 400!= 0:\n        return False\n    return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30 days\"\n    else:\n        return \"31 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 in [2, 4, 6, 8, 10, 12]:\n            return True\n        elif monthnum3 in [1, 3, 5, 7, 9, 11]:\n            return False\n    else:\n        if monthnum3 in [1, 3, 5, 7, 9, 11]:\n            return True\n        elif monthnum3 in [2, 4, 6, 8, 10, 12]:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days_in_month:\n        return f'{monthnum3} contains 30 days.'\n    else:\n        return f'{monthnum3} does not contain 30 days.'"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes a list of n integers as input and returns the minimum difference between any two elements in the list.\n    \"\"\"\n    arr.sort()\n    diff = float('inf')\n    min_diff = arr[1] - arr[0]\n\n    for i in range(1, n):\n        diff = min(diff, arr[i] - arr[i-1])\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first and the last elements\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Initialize two pointers, left and right, to start at the first and last elements of the array, respectively\n    left, right = 0, n-1\n\n    # Move the left pointer to the right until it reaches the element before the first element\n    while left < right:\n        diff = arr[left+1] - arr[left]\n        if diff < min_diff:\n            min_diff = diff\n        left += 1\n\n    # Move the right pointer to the left until it reaches the element after the last element\n    while left < right:\n        diff = arr[right] - arr[right-1]\n        if diff < min_diff:\n            min_diff = diff\n        right -= 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and a number n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n == 1:\n        return abs(arr[1] - arr[0])\n\n    # Sorting the array in ascending order\n    arr.sort()\n\n    # The minimum difference will be the difference between the first and last elements\n    min_diff = abs(arr[-1] - arr[0])\n\n    # Traversing the array from second element to first element\n    for i in range(1, n - 1):\n        # If the current element is greater than the next element, we need to calculate the difference between the current and next elements\n        if arr[i] > arr[i + 1]:\n            diff = abs(arr[i] - arr[i + 1])\n            # Updating the minimum difference if the difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as the maximum value of the array\n    min_diff = arr[-1] - arr[0]\n\n    # Initialize two pointers\n    i, j = 0, n-1\n\n    # Traverse the array from both ends\n    while i < j:\n        # Calculate the difference between the current and next element\n        diff = arr[j] - arr[i]\n\n        # Update the minimum difference if the difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n        # Move the pointer to the next element\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n    \n    # Loop through the array\n    for i in range(n-1):\n        # Find the difference between current and next element in the array\n        diff = arr[i+1] - arr[i]\n        \n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference and minimum index\n    min_diff = abs(arr[1] - arr[0])\n    min_idx = 0\n    \n    # Loop through the array\n    for i in range(1, n):\n        # If the difference between the current element and the previous minimum is smaller, update the minimum difference and index\n        if abs(arr[i] - arr[i-1]) < min_diff:\n            min_diff = abs(arr[i] - arr[i-1])\n            min_idx = i\n    \n    # Return the minimum difference\n    return min_diff, min_idx"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two variables to store minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[n-1]\n    # Initialize a variable to store the minimum difference\n    min_diff = max_val - min_val\n    # Loop through the array from the second element to the last element\n    for i in range(1, n-1):\n        # Calculate the difference between current element and previous element\n        diff = arr[i+1] - arr[i-1]\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, abs(arr[i+1] - arr[i]))\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference and the minimum element\n    min_diff = arr[-1] - arr[0]\n    min_elem = arr[0]\n\n    # Iterate through the array and update the minimum difference and minimum element\n    for i in range(1, n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n            min_elem = arr[i-1]\n        elif arr[i] - arr[i-1] == min_diff:\n            min_elem = min(min_elem, arr[i])\n\n    return min_diff, min_elem"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find the nth polite number.\n    '''\n    num = 0\n    i = 2\n    while num < n:\n        if i % 2 == 0:\n            num += 2\n        else:\n            num += 1\n        i += 1\n    \n    return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_number = 2\n    count = 0\n    while count < n:\n        if is_prime(polite_number):\n            count += 1\n        polite_number += 1\n    return polite_number\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    This function takes an integer n as input and returns the n-th polite number. \n    The nth polite number is defined as the smallest number greater than or equal to n that is both even and divisible by 3.\n    \"\"\"\n    if n < 1: \n        return \"Invalid input. Please enter a positive integer.\" \n    elif n == 1: \n        return 2 \n    else: \n        for i in range(n-2): \n            j = 3 \n            while j <= 10000: \n                if i == 0: \n                    return j \n                elif i > 0 and j % 2 == 0 and j % 3 == 0: \n                    return j \n                j += 1\n        return \"No polite number exists for n = \" + str(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number. The nth polite number is defined as the smallest positive integer m such that the sum of the digits of m is equal to n.\n    \"\"\"\n    def sum_of_digits(n):\n        \"\"\"\n        This function takes an integer n and returns the sum of its digits.\n        \"\"\"\n        return sum(int(digit) for digit in str(n))\n\n    def is_polite_helper(i, m):\n        \"\"\"\n        This function takes two parameters, i and m, and returns True if m is a nth polite number and False otherwise.\n        \"\"\"\n        if sum_of_digits(m) == n:\n            return True\n        elif m < 10:\n            return False\n        else:\n            return is_polite_helper(i, m - 10)\n\n    return is_polite_helper(n, 10**n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            polite_numbers.append(i)\n    return polite_numbers[n-1]\n\ndef is_prime(num):\n    '''\n    Function to check whether a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (2 * n - 1) ** 2 + math.sqrt(2) - 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find the nth polite number.\n    '''\n\n    def sieve_of_eratosthenes(limit):\n        primes = []\n        sieve = [True] * (limit + 1)\n        sieve[0], sieve[1] = False, False\n\n        for i in range(2, int(math.sqrt(limit)) + 1):\n            if sieve[i]:\n                for j in range(i*i, limit + 1, i):\n                    sieve[j] = False\n\n        for i in range(2, limit + 1):\n            if sieve[i]:\n                primes.append(i)\n\n        return primes\n\n    limit = int(n * (math.log(n) + 1))\n    primes = sieve_of_eratosthenes(limit)\n\n    for i, prime in enumerate(primes):\n        if prime == n:\n            return i + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n\n    # Define the start and end values of the search range\n    start = 1\n    end = 1000000000\n\n    # Initialize the count of polite numbers\n    count = 0\n\n    # Loop through the range of values to find the nth polite number\n    while count < n:\n        # Calculate the next polite number by adding 1 to the previous one\n        next_polite = start + 1\n\n        # Check if the next polite number is less than the square root of the number\n        if next_polite < int(math.sqrt(end)):\n            # If it is, increment the count and update the start value\n            count += 1\n            start = next_polite\n        else:\n            # If it is not, update the end value and start the search over again\n            end = start\n            start = next_polite\n\n    # Return the nth polite number\n    return start"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    a = 3\n    b = 2\n    c = 1\n    count = 1\n    while count < n:\n        a, b, c = b, a+b, c+a\n        count += 1\n    return c"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n    \"\"\"\n    def nth_polite_number(n):\n        \"\"\"\n        This function computes the nth polite number.\n        \"\"\"\n        # Base case: nth polite number is 0\n        if n == 0:\n            return 0\n        # Base case: nth polite number is 1\n        elif n == 1:\n            return 1\n        # Recursive case: nth polite number is the sum of the previous two polite numbers\n        else:\n            return nth_polite_number(n-1) + nth_polite_number(n-2)\n\n    # Call the function and return its result\n    return nth_polite_number(n)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function takes a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the number of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference using sets.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(li1)\n    set2 = set(li2)\n\n    # Calculate the difference of the two sets\n    diff_set = set1 - set2\n\n    # Convert the difference set back to a list and return it\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list that contains the elements of the first list that are not present in the second list.\n    '''\n    diff = []\n    for element in li1:\n        if element not in li2:\n            diff.append(element)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a list that contains the elements of `li1` that are not present in `li2`.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists and returns their difference.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # create an empty list to store the difference between the lists\n    diff = []\n    # loop through the first list\n    for i in li1:\n        # check if the element is present in the second list\n        if i in li2:\n            # if it is, append it to the diff list\n            diff.append(i)\n        else:\n            # if it is not, append it to the diff list\n            diff.append(i)\n    # return the difference list\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as arguments and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    '''\n    count = 0\n    sum_ = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            count += 1\n            sum_ += i**4\n    return sum_\n\nprint(odd_num_sum(10))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize sum variable to 0\n    sum_of_fourth_powers = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of i\n        fourth_power = i**4\n\n        # Add the fourth power to the sum_of_fourth_powers variable\n        sum_of_fourth_powers += fourth_power\n\n    # Return the sum of fourth powers of odd numbers\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        fourth_power = i ** 4\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num_sum = 0\n    count = 0\n\n    while count < n:\n        num_sum += 4 ** count\n        count += 1\n\n    return num_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum and counter variables\n    sum = 0\n    count = 0\n\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # check if the number is odd and fourth power of even number\n        if i % 2!= 0 and i**4 == 2*i:\n            # add the fourth power of the odd number to the sum\n            sum += i**4\n            # increment the counter\n            count += 1\n\n    # return the sum of fourth powers of odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if len(stack) == 0 or (char == ')' and stack[-1]!= '(') or (char == ']' and stack[-1]!= '[') or (char == '}' and stack[-1]!= '{'):\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n        else:\n            pass\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a queue to store the opening brackets\n    opening_brackets = deque()\n\n    # loop through the expression\n    for char in exp:\n        # if the character is an opening bracket, add it to the queue\n        if char in ['(', '{', '[']:\n            opening_brackets.append(char)\n        # if the character is a closing bracket, and the queue is not empty,\n        # check if the opening bracket is the same as the closing bracket\n        elif char in [')', '}', ']'] and not opening_brackets.empty():\n            opening_bracket = opening_brackets.pop()\n            if char == ')' and opening_bracket!= '(':\n                return False\n            elif char == '}' and opening_bracket!= '{':\n                return False\n            elif char == ']' and opening_bracket!= '[':\n                return False\n\n    # if the queue is not empty, there are more opening brackets than closing brackets\n    return opening_brackets.empty()"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in \"([{\":\n            stack.append(char)\n        elif char in \")]}\":\n            if not stack:\n                return False\n            if stack[-1] == \"(\" and char == \")\":\n                stack.pop()\n            elif stack[-1] == \"[\" and char == \"]\":\n                stack.pop()\n            elif stack[-1] == \"{\" and char == \"}\":\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n    \n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                balanced = False\n                break\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                balanced = False\n                break\n    \n    if len(stack)!= 0:\n        balanced = False\n    \n    return balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n\n    # loop through the words and remove the ones with k length\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n\n    # join the result into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    words_to_remove = []\n    for i, word in enumerate(words):\n        if len(word) == K:\n            words_to_remove.append(i)\n    for index in sorted(words_to_remove, reverse=True):\n        del words[index]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words to be removed\n    removed_words = []\n    # Loop through each word in the string\n    for word in words:\n        # If the length of the word is not equal to K, append it to the removed_words list\n        if len(word)!= K:\n            removed_words.append(word)\n    # Join the removed_words list into a string and return it\n    return''.join(removed_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store words with length K\n    result = []\n    # loop through each word in the list\n    for word in words:\n        # if the length of the word is not equal to K, append it to the result list\n        if len(word)!= K:\n            result.append(word)\n    # join the words in the result list into a string\n    result_str =''.join(result)\n    # return the result string\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the non-K-length words\n    non_k_words = []\n    \n    # Loop through the words and add the non-K-length words to the non_k_words list\n    for word in words:\n        if len(word)!= K:\n            non_k_words.append(word)\n    \n    # Join the non-K-length words back into a string and return it\n    return''.join(non_k_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the non-K-length words\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Add the word to the result list\n            result.append(word)\n    # Join the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    if matches:\n        for match in matches:\n            print(\"Match found at position:\",match.start())\n            print(\"Substring:\",text[match.start():match.start()+len(pattern)])\n        return matches\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    match = re.search(pattern, text)\n\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        match = re.search(pattern, text)\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        for match in matches:\n            return (match[0], match.start(), match.end())"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(\"Match:\", match)\n            print(\"Occurrence:\", matches.count(match))\n            print(\"Position:\", matches.index(match))\n        return None\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expressions to search for pattern in text\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches\n    if matches:\n        # Print the matches and their positions\n        for i, match in enumerate(matches):\n            print(f\"Match {i+1}: {match}\")\n            print(f\"Position: {text.index(match)}\")\n    else:\n        # Return None if there is no match\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Loop through the list and check if the odd index contains an odd number\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # create an empty dictionary to store the count of odd numbers at each index\n    count_odd = {}\n    # iterate through the list and count the odd numbers at each index\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                if i in count_odd:\n                    count_odd[i] += 1\n                else:\n                    count_odd[i] = 1\n    # iterate through the count_odd dictionary and check if every odd index contains odd numbers\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if i not in count_odd or count_odd[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            odd_count += 1\n    return odd_count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([x for x in nums[i] if x % 2 == 1]))!= len(nums[i]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            count += 1\n            if count > 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n\n    for i in range(len(test_str)):\n        if i > 0:\n            prev_char = test_str[i-1]\n            if prev_char in vowels and test_str[i] in vowels:\n                count += 1\n\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Convert the set to a list and sum the elements\n    sum_list = list(unique_set)\n    sum_sum = sum(sum_list)\n\n    return sum_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # initialize the sum variable\n    sum_non_repeated = 0\n    # loop through the unique elements of the set\n    for element in unique_set:\n        # add the element to the sum variable if it's not already there\n        if element not in arr:\n            sum_non_repeated += element\n    # return the final sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n\n    # Initialize sum to 0\n    sum_non_repeated = 0\n\n    # Iterate over unique elements in the set\n    for element in unique_set:\n        # Add element to sum\n        sum_non_repeated += element\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    # create a set to store the unique elements in the list\n    unique_elements = set(arr)\n    # initialize the sum to 0\n    total_sum = 0\n    # iterate through the unique elements\n    for element in unique_elements:\n        # add the element to the sum\n        total_sum += element\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n        arr: list of integers\n\n    Returns:\n        The sum of all the non-repeated elements in the list.\n    \"\"\"\n    # Create a set of non-repeated elements\n    unique_elems = set(arr)\n\n    # Initialize the sum to 0\n    sum_unique = 0\n\n    # Iterate over the unique elements and add their sum to the sum of unique elements\n    for elem in unique_elems:\n        sum_unique += elem\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Convert the set to a list and sort it\n    unique_list = sorted(list(unique_set))\n\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n\n    # Iterate through the sorted list and add the current element to the sum_non_repeated variable\n    for i in range(len(unique_list)):\n        sum_non_repeated += unique_list[i]\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq = {}\n    # Initialize a variable to store the sum of non-repeated elements\n    sum = 0\n    \n    # Loop through the list and increment the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Loop through the dictionary and add up all the values whose frequency is 1\n    for num, count in freq.items():\n        if count == 1:\n            sum += num\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # initialize the sum to zero\n    sum = 0\n    # loop through the unique elements and add their values to the sum\n    for element in unique_elements:\n        sum += element\n    # return the sum of non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Calculate the sum of non-repeated elements by summing up the values of the dictionary\n    non_repeated_sum = 0\n    for num in counts:\n        if counts[num] == 1:\n            non_repeated_sum += num\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    \n    # convert set to list and sort it\n    sorted_list = sorted(list(unique_set))\n    \n    # initialize the sum variable to 0\n    sum = 0\n    \n    # iterate through the sorted list and add each element to the sum\n    for i in range(len(sorted_list)):\n        sum += sorted_list[i]\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pack_consecutive_duplicates(lst):\n    grouped = groupby(lst)\n    grouped_list = list(grouped)\n    result = []\n    for group in grouped_list:\n        if len(list(group)) > 1:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list and packs consecutive duplicates of elements into sublists.\n    \"\"\"\n    return list(map(list, groupby(lst)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [''.join(list(group)) for key, group in groupby(list1) if key == list1[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(map(list, groupby(list1)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Create a generator object for the input list\n    grouped_list = groupby(list1)\n\n    # Iterate over each group\n    result = []\n    for group in grouped_list:\n        # Check if the group contains consecutive duplicates\n        if len(list(group[1])) > 1:\n            # Add the group to the result list\n            result.append(list(group[1]))\n\n    # Return the final result\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Use groupby() function from itertools to group the elements in the list\n    grouped_list = list(groupby(list1))\n\n    # Initialize an empty list to store sublists\n    sublists = []\n\n    # Iterate over the grouped list and append consecutive duplicates to sublists\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            sublists.append([next(group)])\n        else:\n            sublists[-1].append(next(group))\n\n    # Return the packed list of sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Use the groupby() function to group the list elements by their value\n    grouped_list = groupby(list1)\n\n    # Create an empty list to store the packed sublists\n    packed_list = []\n\n    # Iterate through the grouped list and pack consecutive duplicates into sublists\n    for key, group in grouped_list:\n        packed_sublist = list(group)\n        if len(packed_sublist) > 1:\n            packed_list.append(packed_sublist)\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, key=lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use itertools.groupby() to group the list into sublists based on consecutive duplicates\n    sublists = [(list(group), len(list(group))) for key, group in groupby(list1) if not key]\n\n    # Remove sublists with length equal to 1, which are duplicates of the previous sublist\n    sublists = [sublist for sublist in sublists if len(sublist) > 1]\n\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            unique_lists[tuple(list1[i:j])] = unique_lists.get(tuple(list1[i:j]), 0) + 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            count[tuple(item)] = count.get(tuple(item), 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary\n    sublist_count = {}\n\n    # Loop through each list in the main list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it is already in the dictionary\n        if tuple(sorted(sublist)) in sublist_count:\n            sublist_count[tuple(sorted(sublist))] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            sublist_count[tuple(sorted(sublist))] = 1\n\n    # Return the dictionary\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list of lists and returns a dictionary of unique sublists.\n    '''\n    sublist_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_dict:\n            sublist_dict[sublist_tuple] = 1\n        else:\n            sublist_dict[sublist_tuple] += 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    # iterate through the list of lists\n    for sublist in list1:\n        # turn the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in count_dict:\n            # if it's already in the dictionary, increment its count by 1\n            count_dict[tuple(sublist)] += 1\n        else:\n            # if it's not in the dictionary, add it with a count of 1\n            count_dict[tuple(sublist)] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every sublist is turned into a tuple and its count is stored in the dictionary.\n    '''\n    result = {}\n    for i in lst:\n        if type(i) == tuple:\n            if i in result:\n                result[i] += 1\n            else:\n                result[i] = 1\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create an empty dictionary to store the counts of each tuple\n    counts = {}\n    \n    # loop through each list in the input list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        tup = tuple(sublist)\n        \n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # increment the count if it is already in the dictionary\n            counts[tup] += 1\n        else:\n            # add the tuple to the dictionary if it's not already there\n            counts[tup] = 1\n            \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            for k in range(j+1, len(test_list)+1):\n                for l in range(k+1, len(test_list)+1):\n                    for m in range(l+1, len(test_list)+1):\n                        if sum((test_list[i], test_list[j], test_list[k], test_list[l], test_list[m])) in test_list:\n                            print(f\"({test_list[i]}, {test_list[j]}, {test_list[k]}, {test_list[l]}, {test_list[m]})\")"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        if sum(test_list[i]) == sum(test_list[j]) and sum(test_list[j]) == sum(test_list[k]) and sum(test_list[k]) == sum(test_list[l]) and sum(test_list[l]) == sum(test_list[m]):\n                            result.append((test_list[i], test_list[j], test_list[k], test_list[l], test_list[m]))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb_list.append(test_list[i] + test_list[j])\n\n    # Create a set to remove duplicates\n    comb_set = set(comb_list)\n    return list(comb_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combinations_list.append(tuple(sorted([test_list[k] for k in range(i, j)])))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    n = len(test_list)\n    result = []\n\n    for i in range(1, n+1):\n        for comb in combinations(range(n), i):\n            current_sum = sum(test_list[j] for j in comb)\n            if current_sum == 0:\n                result.append(tuple(comb))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the given list of tuples in ascending order\n    test_list = sorted(test_list)\n\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # For each tuple, loop through the rest of the list to find combinations of sums with it\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the two tuples is equal to the sum of the first tuple\n            if sum(test_list[i]) + sum(test_list[j]) == sum(test_list[0]):\n                # Combine the two tuples into a tuple and add it to the set of unique tuples\n                unique_tuples.add(tuple(sorted([test_list[i], test_list[j]])))\n\n    # Return the set of unique tuples\n    return unique_tuples"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    \n    for i in range(1, len(test_list)+1):\n        for j in range(1, i+1):\n            for k in range(j, i+1):\n                for l in range(k, i+1):\n                    for m in range(l, i+1):\n                        if i+j+k+l+m == 20:\n                            print(test_list[l], test_list[k], test_list[j], test_list[i])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # function to check if a tuple contains a sum\n    def contains_sum(tup, target_sum):\n        for num in tup:\n            if num == target_sum:\n                return True\n        return False\n    \n    # function to check if a tuple is a subset of another tuple\n    def is_subset(tup1, tup2):\n        for num in tup2:\n            if num not in tup1:\n                return False\n        return True\n    \n    # iterate over all possible combinations of tuples\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            # check if the combo contains the sum\n            target_sum = sum(combo)\n            if contains_sum(combo, target_sum):\n                # check if the combo is a subset of another combo\n                if any(is_subset(subset, combo) for subset in combinations(test_list, i-1)):\n                    print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]) + sum(test_list[l]):\n                        count += 1\n    return count\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # First, filter out the tuples that don't have unique elements\n    unique_tuples = set()\n    for tup in test_list:\n        if len(tup) == len(set(tup)):\n            unique_tuples.add(tup)\n    \n    # Then, loop through the unique tuples and find the combinations of sums\n    for tup in unique_tuples:\n        for combo in combinations(tup, len(tup)):\n            if sum(combo) in test_list:\n                print(tuple(combo))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "Let's write the Python code for the function `count_divisors` that satisfies the given problem statement."
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return divisors\n\nprint(count_divisors(28)) # Output: [1, 2, 4, 7, 14, 28]"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1\n    if count % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        print(\"The number of divisors is even.\")\n    else:\n        print(\"The number of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns a boolean value indicating whether the count of divisors is even or odd.\n    \"\"\"\n    # Calculate the number of divisors of n\n    num_divisors = math.factorial(n)\n    \n    # Check whether the count of divisors is even or odd\n    if num_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n    \n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n // i)\n    if len(divisors) == 0:\n        divisors.append(1)\n    return sum(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                total_sum += arr[j]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n\n    # Loop through all subarrays of odd length\n    for i in range(n-1):\n        for j in range(i+2, n, 2):\n            sum_odd += arr[j]\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum = 0\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            if arr[i] % 2!= 0:\n                sum += arr[i]\n        else:\n            if arr[i] % 2!= 0:\n                sum += arr[i]\n            if arr[i - 1] % 2!= 0:\n                count += 1\n                sum -= arr[i - 1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+2, len(arr)+1, 2):\n            sum += arr[i:j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    # initialize variables to keep track of the sum of even and odd subarrays\n    even_sum = 0\n    odd_sum = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        # if the current element is odd, add it to the odd_sum variable\n        if arr[i] % 2!= 0:\n            odd_sum += arr[i]\n\n        # if the current element is even, add it to the even_sum variable\n        else:\n            even_sum += arr[i]\n\n    # return the sum of all odd subarrays\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    # Initialize a variable to store the sum of odd length subarrays\n    odd_sum = 0\n    # Initialize two pointers to the left and right ends of the array respectively\n    left = 0\n    right = 0\n    # Loop through the array and check if the length of the current subarray is odd\n    while right < n:\n        if right - left + 1 % 2!= 0:\n            # If the length of the current subarray is odd, add its sum to the variable\n            odd_sum += arr[right]\n        # Increment the right pointer\n        right += 1\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_list = []\n    count = 0\n\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] % 2!= 0:\n                sum_list.append(arr[i])\n                count += 1\n        elif arr[i] % 2!= 0:\n            sum_list.append(arr[i])\n            count += 1\n            if count == 2:\n                sum_list.sort()\n                sum_list.append(arr[i-1])\n                sum_list.pop(0)\n                sum_list.pop(0)\n                return sum_list[1] + sum_list[2]\n\n    return 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Given an array of integers, return the sum of all odd length subarrays.\n    \"\"\"\n    sum_odd_length = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum_odd_length += arr[j]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    sum_odd_length = 0\n    for i in range(n):\n        for j in range(i + 1, n - 1, 2):\n            sum_odd_length += prefix_sum[j + 1] - prefix_sum[i]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum of odd length subarrays to zero\n    sum_of_odd_length_subarrays = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Initialize a temporary variable to keep track of the current subarray sum\n        current_sum = 0\n        \n        # Iterate through the array starting from index i and calculate the sum of odd length subarrays\n        for j in range(i, len(arr)):\n            current_sum += arr[j]\n            \n            # Check if the length of the subarray is odd\n            if len(str(current_sum)) % 2!= 0:\n                # If the length is odd, add the current subarray sum to the sum of odd length subarrays\n                sum_of_odd_length_subarrays += current_sum\n    \n    # Return the sum of odd length subarrays\n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert to floats\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    # Compute hue and saturation\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = h / 6\n    \n    if h < 0:\n        h += 1\n    \n    # Compute saturation and value\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    \n    if cmax == r:\n        v = (g - b) / delta\n    elif cmax == g:\n        v = (b - r) / delta + 1/3\n    else:\n        v = (r - g) / delta + 2/3\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    # convert rgb to hsv\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    elif cmax == b:\n        h = (r - g) / delta + 4\n    h = h / 6\n    \n    # calculate hsv values\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    \n    if cmax == 0:\n        v = 0\n    else:\n        v = cmax / 255\n    \n    # return hsv values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    \n    if max_value == min_value:\n        h = s = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        s = delta / max_value\n    \n    v = max_value\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the RGB values to HSV values\n    r, g, b = r/255, g/255, b/255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n    delta = max_val - min_val\n    if delta == 0:\n        s = 0\n    else:\n        if max_val == r:\n            h = 60 * (((g - b) / delta) % 6)\n        elif max_val == g:\n            h = 60 * (((b - r) / delta) + 2)\n        else:\n            h = 60 * (((r - g) / delta) + 4)\n        if h < 0:\n            h += 360\n        if s == 0:\n            s = delta / max_val\n        else:\n            s = delta / max_val\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in RGB values and returns their HSV equivalent.\n    \"\"\"\n    \n    r = r/255 # normalize red value to range 0-1\n    g = g/255 # normalize green value to range 0-1\n    b = b/255 # normalize blue value to range 0-1\n    \n    max_value = max(r, g, b) # find the maximum value in the RGB tuple\n    min_value = min(r, g, b) # find the minimum value in the RGB tuple\n    \n    delta = max_value - min_value # calculate the difference between the maximum and minimum values\n    \n    h = 0 # initialize hue value to 0\n    s = 0 # initialize saturation value to 0\n    \n    if max_value == 0: # check if the maximum value is 0\n        h = 0 # set hue to 0\n    elif max_value == r: # check if the maximum value is red\n        h = (g - b) / delta # calculate hue based on the difference between green and blue\n    elif max_value == g: # check if the maximum value is green\n        h = 2 + (b - r) / delta # calculate hue based on the difference between blue and red\n    elif max_value == b: # check if the maximum value is blue\n        h = 4 + (r - g) / delta # calculate hue based on the difference between red and green\n    \n    if max_value == min_value: # check if the minimum value is equal to the maximum value\n        s = 0 # set saturation to 0\n    else:\n        if max_value == r: # check if the maximum value is red\n            s = delta / (max_value - min_value) # calculate saturation based on the difference between maximum and red\n        elif max_value == g: # check if the maximum value is green\n            s = delta / (max_value - min_value) # calculate saturation based on the difference between maximum and green\n        elif max_value == b: # check if the maximum value is blue\n            s = delta / (max_value - min_value) # calculate saturation based on the difference between maximum and blue\n        \n        if s == 0: # check if saturation is 0\n            h = 0 # set hue to 0\n    \n    h = h * 60 # normalize hue to range 0-360\n    \n    if h < 0: # check if hue is negative\n        h += 360\n    \n    return h, s, max_value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert rgb to r, g, and b ranges to 0-1\n    r = r / 255\n    g = g / 255\n    b = b / 255\n\n    # Calculate min, max, and delta values\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n    delta = max_value - min_value\n\n    # Calculate h, s, and v values\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        s = delta / max_value\n\n    # Calculate h, s, and v values\n    if max_value == 0:\n        h = 0\n        s = 0\n    else:\n        h = h * 360\n\n    # Convert to hsv color model\n    hsv_color = (h, s, max_value)\n\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in the red, green and blue values of an rgb color and returns the HSV (hue, saturation, value) color model.\n    The HSV color model represents the color as a combination of hue, saturation, and value.\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    if max_color == min_color:\n        h = 0\n    elif max_color == r and g >= b:\n        h = (g - b) / delta\n    elif max_color == r and g < b:\n        h = (g - b) / delta + 6\n    elif max_color == g:\n        h = (b - r) / delta + 2\n    elif max_color == b:\n        h = (r - g) / delta + 4\n    h *= 60\n    if h < 0:\n        h += 360\n    if h < 0:\n        h += 360\n    s = delta / (1 - abs(2 * max_color - 1))\n    v = max_color\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        if delta == 0:\n            h = 0\n            s = 0\n        elif r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n        if h < 0:\n            h += 1\n\n        s = delta / max_value\n\n    return (h, s, max_value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Calculate the maximum and minimum values of each color channel\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values of each color channel\n    delta = max_value - min_value\n\n    # Calculate the hue value\n    if max_value == min_value:\n        h = 0  # achromatic color\n    else:\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6  # hue value ranges from 0 to 1\n\n    # Calculate the saturation value\n    if max_value == 0:\n        s = 0  # grayscale color\n    else:\n        s = delta / max_value\n\n    # Calculate the value value\n    v = max_value\n\n    # Convert h, s, and v to decimal values\n    h, s, v = map(lambda x: x / 255, (h, s, v))\n\n    # Return a tuple of the hsv values\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes three values representing the red, green and blue components of an RGB color\n    and returns a tuple containing the hue, saturation and value components of the HSV color model\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / delta)\n    elif max_val == g:\n        hue = 60 * ((b - r) / delta) + 120\n    else:\n        hue = 60 * ((r - g) / delta) + 240\n    \n    if delta == 0:\n        saturation = 0\n    elif max_val == r or max_val == g:\n        saturation = delta / max_val\n    else:\n        saturation = delta / (2 - max_val - min_val)\n    \n    value = max_val\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return None\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all even and odd numbers.\n    \"\"\"\n    # Initialize variables to store the even and odd numbers\n    even_num = 0\n    odd_num = 0\n    product = 1\n    \n    # Iterate through the list of numbers\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_num += num\n        # Check if the number is odd\n        else:\n            odd_num += num\n            \n    # Calculate the product of the even and odd numbers\n    product = even_num * odd_num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Check if there are any even or odd numbers in the list\n    if even_count == 0 or odd_count == 0:\n        return None\n    \n    # Return the product of even and odd numbers\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= min(even_count, odd_count)\n            break\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 1\n    odd_num = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n\n    product = even_num * odd_num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            even_count = 0\n            odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 1\n    product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd *= i\n            \n        product *= min(even, odd)\n        \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count == 0:\n        return None\n    else:\n        return list1[0] * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= list1[0]\n            break\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            product *= list1[i]\n        else:\n            product *= list1[i]\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by commas and spaces\n    str_list = test_str.split(',')\n    # create a list of integer values\n    int_list = [int(x.strip()) for x in str_list]\n    # convert the list of integers into a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    new_tuple = tuple(map(int, test_str.strip('()').split(',')))\n    return new_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for i in test_str:\n        if i.isdigit():\n            int_tuple += (int(i),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string to an integer and append it to a new list\n    int_list = []\n    for str in str_list:\n        int_list.append(int(str))\n    \n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    for i in range(len(test_str)):\n        try:\n            int_tuple.append(int(test_str[i]))\n        except ValueError:\n            continue\n    return tuple(int_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # convert the tuple string to integer tuple\n        int_tuple = tuple(map(int, test_str))\n        return int_tuple\n    except ValueError:\n        # if the tuple string cannot be converted to integer tuple, raise ValueError\n        raise ValueError(\"Invalid tuple string. Please provide a valid tuple string.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # split the string by space\n    str_list = test_str.split()\n\n    # initialize an empty list to store the integer tuples\n    int_list = []\n\n    # iterate through each element in the list\n    for element in str_list:\n        # check if the element is a tuple string\n        if element.startswith('(') and element.endswith(')'):\n            # convert the tuple string to integer tuple\n            int_tuple = tuple(int(i) for i in element[1:-1].split(','))\n            # append the integer tuple to the list\n            int_list.append(int_tuple)\n\n    # return the list of integer tuples\n    return int_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert the string to a tuple\n    test_tuple = tuple(test_str.split(','))\n    # initialize an empty list to store the integers\n    int_list = []\n    # iterate over each element in the tuple\n    for elem in test_tuple:\n        # check if the element is an integer\n        try:\n            int_list.append(int(elem))\n        except ValueError:\n            print(\"Error: non-integer element found in the tuple string\")\n            return None\n    # return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def str_to_int(s):\n        return int(s)\n    \n    # Split the input string by commas and create a list of tuples\n    str_list = test_str.split(',')\n    int_list = [tuple(str_to_int(s.strip()) for s in lst.split()) for lst in str_list]\n    \n    # Convert the list of tuples to a tuple of tuples and return it\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to locate the right insertion point\n    index = bisect.bisect_right(a, x)\n    # If the value is already in the list, return its index\n    if a[index-1] == x:\n        return index-1\n    else:\n        # Otherwise, return the index after the insertion point\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect_right returns the index where to insert x in a sorted list a.\n    index = bisect_right(a, x)\n    # If x is not in the list, we need to return the index where to insert it.\n    if index == len(a):\n        index = bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_right function to find the right insertion point\n    i = bisect.bisect_right(a, x)\n    \n    # Return the index of the right insertion point\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_right to find the right insertion point\n    i = bisect.bisect_right(a, x)\n    # Return the index of the first element greater than or equal to x\n    return i if a[i-1] >= x else i-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    :param a: Sorted list of values.\n    :param x: Value to be inserted.\n    :return: Index of the right insertion point.\n    \"\"\"\n\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # initialize the left and right indices for the search range\n    left, right = 0, len(a) - 1\n    # initialize the insertion point\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        # the value is already in the first element\n        return 0\n    elif i == len(a):\n        # the value is already in the last element\n        return i\n    elif a[i-1] == x:\n        # the value is already in the element before the insertion point\n        return i - 1\n    elif a[i] == x:\n        # the value is already in the insertion point\n        return i\n    else:\n        # the value must be inserted after the insertion point\n        return i + 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba\\w{2}b\\w{2}\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w{2}b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=.*b){3}b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(?=[b]{3})')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create a new list with test_str and test_list concatenated\n    new_list = [test_str] + test_list\n    # convert the list to a tuple\n    new_tuple = tuple(new_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + test_str\n\n    # Convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Join the tuple with the given string and convert it back to a tuple\n    new_tuple = tuple(test_str.join(str(x) for x in test_tuple))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_list)\n    new_list.append(test_str)\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    # create a new tuple from the combined list\n    new_tuple = tuple(combined_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string into a single string\n    combined_str = str(test_list) + str(test_str)\n\n    # Split the combined string into a list of characters\n    chars_list = list(combined_str)\n\n    # Convert the list of characters into a tuple\n    new_tuple = tuple(chars_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Join the characters in the list into a single string\n    new_str = ''.join(char_list)\n    # Convert the new string to a tuple\n    new_tuple = tuple(new_str)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # iterate over the list of numbers\n    for i in range(0, len(nums), 2):\n        # check if the current index contains an even number\n        if nums[i] % 2 == 0:\n            # if so, check if the number is even\n            if nums[i] % 2 == 0:\n                # if it is, return True\n                return True\n    \n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)//2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count = 0\n            for j in range(i+1, len(nums)):\n                if nums[j] % 2 == 0:\n                    count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(str(nums[i]))) % 2 == 0:\n            print(\"False\")\n            return False\n    print(\"True\")\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len(set([num for num in nums[i:i+2] if num % 2 == 0]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Use list comprehension to create a new tuple without the nested tuples\n    new_tup = tuple(x for tup in test_tup for x in tup if type(x) not in [tuple])\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # iterate over the tuple and remove any tuples that are nested inside another tuple\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            # remove the inner tuple and add the contents back to the original list\n            test_tup[i:i+1] = [x for x in test_tup[i]]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create a new list to store the flattened tuple\n    flat_list = []\n    # Loop through each element of the original tuple\n    for elem in test_tup:\n        # Check if the element is a tuple, and if it is not, append it to the new list\n        if not isinstance(elem, tuple):\n            flat_list.append(elem)\n        else:\n            # If it is a tuple, recursively call the function and append the results to the new list\n            flat_list.extend(remove_nested(elem))\n    # Return the new list with all nested tuples removed\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(x for tup in test_tup for x in tup if type(x)!= tuple)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return remove_nested(test_tup[0])\n    elif isinstance(test_tup, list):\n        return [remove_nested(x) for x in test_tup]\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Loop through each element in the given tuple\n    for item in test_tup:\n        # Check if the element is a tuple\n        if isinstance(item, tuple):\n            # Recursively call the function with the tuple element as an argument\n            test_tup = remove_nested(item)\n        # If the element is not a tuple, remove it from the tuple\n        else:\n            test_tup = test_tup.remove(item)\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(tup for tup in test_tup if not isinstance(tup, tuple))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    def remove_nested_helper(tup):\n        \"\"\"\n        A recursive helper function to remove nested tuples.\n        \"\"\"\n        if isinstance(tup, tuple):\n            return [remove_nested_helper(x) for x in tup]\n        else:\n            return tup\n\n    return remove_nested_helper(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for inner_item in item:\n                new_tup.append(inner_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        count += len(sublist)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n        else:\n            raise ValueError('Input list contains non-list item')\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    # Find the last index of the element\n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i if i >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array and an element as input and returns the last position of the element in the array.\n    If the element is not present in the array, it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            # If we found the element at the middle position, now check if it is the last occurrence.\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                # If the element is not the last occurrence, we need to search for the last occurrence of the element.\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If the element is not present in the array, return -1.\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize variables\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    # Find first occurrence of x\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # If x was not found, return -1\n    if result == -1:\n        return -1\n\n    # Find last occurrence of x\n    low = 0\n    high = result\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments:\n    arr: sorted array in which the element needs to be searched\n    x: the element for which the last position needs to be found\n\n    This function returns the last position of the element x in the array arr.\n    If the element x is not present in the array, the function returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid + 1\n            while left < len(arr) and arr[left] == x:\n                left += 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Initialize the left and right pointers of the sorted array\n    left = 0\n    right = len(arr) - 1\n\n    # Loop until the left pointer is greater than or equal to the right pointer\n    while left < right:\n\n        # Calculate the midpoint of the array\n        mid = (left + right) // 2\n\n        # If the element is found at the midpoint, return the midpoint index\n        if arr[mid] == x:\n            return mid\n\n        # If the element is less than the midpoint element, search in the left subarray\n        elif arr[mid] > x:\n            right = mid - 1\n\n        # If the element is greater than the midpoint element, search in the right subarray\n        else:\n            left = mid + 1\n\n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize the last position as -1\n    last_pos = -1\n    \n    # loop through the array and find the last occurrence of the given element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_pos = i\n    \n    # return the last position of the element\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    if len(arr) == 0:\n        return -1\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba\\w*b\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*?)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dictionary.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    s = 0\n    for i in range(l, r+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    sum = 0\n    \n    for i in range(l, r+1, 2):\n        sum += i\n        \n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Take input from user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # Initialize sum variable to zero\n    sum = 0\n\n    # Loop through all odd natural numbers within the given range\n    for i in range(l, r+1, 2):\n        # Add each odd natural number to the sum variable\n        sum += i\n\n    # Return the final sum of all odd natural numbers within the given range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # take input from the user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    \n    # initialize a variable to store the sum of odd numbers\n    sum = 0\n    \n    # loop through the range of natural numbers within the given range\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2 == 1:\n            # add the odd number to the sum variable\n            sum += i\n    \n    # print the sum of odd numbers in the given range\n    print(\"The sum of all odd numbers within the given range is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through odd numbers between 1 and n\n    for i in range(1, n+1, 2):\n        # add each odd number to the sum\n        sum += i\n    # return the sum of odd numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum_of_odds = 0\n\n    while l <= r:\n        if l % 2!= 0:\n            sum_of_odds += l\n        l += 1\n\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1 # start at 1\n    r = n # end at n\n    sum_of_odds = 0 # initialize sum to 0\n    \n    while l <= r: # loop until l is greater than or equal to r\n        if l % 2!= 0: # if l is odd\n            sum_of_odds += l # add l to the sum of odds\n            \n        l += 1 # increment l by 1\n    \n    return sum_of_odds # return the sum of odds"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary and reverse the order\n    binary_n = bin(n)[2:].zfill(32)\n    binary_n = binary_n[::-1]\n    \n    # calculate the number of bits to be rotated\n    num_bits = len(binary_n) - d\n    \n    # calculate the number of bits to be shifted\n    num_shifts = num_bits // 2\n    \n    # rotate the bits to the left\n    rotated_n = binary_n[-num_shifts:] + binary_n[:-num_shifts]\n    \n    # convert the rotated number back to decimal\n    decimal_n = int(rotated_n, 2)\n    \n    return decimal_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # If d is greater than 31, rotate left d-32 bits\n    if d > 31:\n        return (n << (d-32)) | (n >> (32 - d))\n    # If d is less than 32, rotate left d bits\n    else:\n        return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary\n    binary_str = format(n, '032b')\n    # Reverse the binary string\n    binary_str = binary_str[::-1]\n    # Get the number of bits in the binary string\n    num_bits = len(binary_str)\n    # Calculate the number of bits to be rotated\n    num_bits_to_rotate = num_bits - d\n    # Extract the rightmost d bits\n    rightmost_d_bits = binary_str[-d:]\n    # Extract the remaining bits\n    remaining_bits = binary_str[:-d]\n    # Reverse the remaining bits\n    remaining_bits = remaining_bits[::-1]\n    # Concatenate the rightmost d bits with the remaining bits\n    rotated_binary_str = rightmost_d_bits + remaining_bits\n    # Convert the binary string back to an integer\n    rotated_n = int(rotated_binary_str, 2)\n    # Return the rotated number\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the rightmost d bits of n and shift them to the left\n    mask = ((1 << d) - 1)\n    rotated_bits = (n & mask) << (32 - d)\n    \n    # Extract the leftmost bits of n and shift them to the right by d\n    n = ((n >> d) & ((1 << 32) - 1)) | rotated_bits\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary format\n    bin_num = bin(n)[2:]\n    # Pad the binary number with leading zeros to make it d bits long\n    pad_num = '0' * (d - len(bin_num)) + bin_num\n    # Convert the padded binary number to an integer\n    padded_num = int(pad_num, 2)\n    # Perform the left rotation\n    rotated_num = padded_num << d\n    # Return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n\n    # Pad the binary string with zeros to d bits\n    padded_binary_str = '0' * (d - len(binary_str)) + binary_str\n\n    # Convert the padded binary string back to an integer\n    result = int(padded_binary_str, 2)\n\n    return result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all the whitespaces using regular expression\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expression\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    # Remove all occurrences of multiple whitespaces\n    text = re.sub(r'\\s+','', text)\n    # Remove all occurrences of single whitespaces\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, max(x, y, z) + 1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    # create a set with the three numbers as elements\n    nums = {x, y, z}\n\n    # count the number of elements in the set\n    count = len(nums)\n\n    # return the count of equal numbers in the set\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z) + 1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # initialize variables to store the count and the current number\n    count = 0\n    num = x\n\n    # loop through the remaining numbers and compare each to the current number\n    while num <= y:\n        if num == x or num == y or num == z:\n            count += 1\n        num += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    # Initialize a counter variable to keep track of the number of equal numbers\n    count = 0\n    # Loop through the three given integers\n    for num in [x, y, z]:\n        # If the current integer is equal to the previous integer, increment the counter\n        if num == x:\n            count += 1\n    # Return the final count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z) + 1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    # calculate the minimum value in the array\n    min_val = min(arr)\n    # count the number of rotations required to generate a sorted array\n    count = 0\n    while min_val!= max(arr):\n        # calculate the median of the current rotation\n        median = (min_val + max(arr)) // 2\n        # rotate the array by subtracting the median value from each element\n        arr = [arr[i] - median if arr[i] < median else arr[i] + median - min_val for i in range(len(arr))]\n        # increment the count of rotations\n        count += 1\n        # update the minimum value in the array\n        min_val = min(arr)\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i+1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        # Swap the first and last element of the array\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n        # Check if the array is sorted\n        if arr[:n//2] <= arr[n//2:]:\n            return 0\n    # If the array is not sorted, return 1 for each swap\n    return n//2\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the number of rotations required to generate the sorted array.\n    \"\"\"\n    # Find the number of rotations required to generate the sorted array\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Traverse the array from the last element to the first element\n    for i in range(n-2, -1, -1):\n        # If the current element is greater than its adjacent element\n        if arr[i] > arr[i+1]:\n            # Traverse the array from the current element to the last element\n            for j in range(i+1, n-1):\n                # If the current element is greater than the adjacent element at index j\n                if arr[j] > arr[j+1]:\n                    # Swap the current element and the adjacent element at index j\n                    arr[i], arr[j] = arr[j], arr[i]\n                    # Return the count of rotations required\n                    return 1\n                # If the adjacent element at index j is already greater than the current element\n                else:\n                    return 0\n    # If no rotations are required, return 0\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # check if the array is already sorted in reverse order\n    if arr == sorted(arr, reverse=True):\n        return 0\n    # if the array is not sorted, we need to count the number of rotations\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] < arr[j]:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] > arr[j]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # Find the maximum element in the array\n    max_val = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n\n    # Find the minimum element in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Calculate the difference between the maximum element and minimum element\n    diff = max_val - min_val\n\n    # Calculate the number of rotations required to generate a sorted array\n    while diff > 0:\n        # Check if the difference is even or odd\n        if diff % 2 == 0:\n            diff /= 2\n            count += 1\n        else:\n            diff = (diff + 1) / 2\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # If the length of the array is 1 or 0, return 0\n    if n <= 1:\n        return 0\n\n    # Find the maximum element of the array\n    max_ele = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ele:\n            max_ele = arr[i]\n\n    # Find the minimum element of the array\n    min_ele = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_ele:\n            min_ele = arr[i]\n\n    # If the maximum and minimum element of the array are same, return 0\n    if max_ele == min_ele:\n        return 0\n\n    # Calculate the number of rotations required to sort the array\n    rotations = 0\n    for i in range(1, n):\n        # Check if the element at i is greater than the element at i-1\n        if arr[i] < arr[i-1]:\n            rotations += 1\n\n    return rotations"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    # check if n is a perfect square using the formula for the square root\n    # https://en.wikipedia.org/wiki/Square_root#Binary_representation\n    # round up the square root to the nearest integer and compare it with n\n    sqrt_n = int(n ** 0.5) + 1\n    if sqrt_n * sqrt_n == n:\n        return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n < 0:\n        return False\n\n    a = 1\n    b = n\n\n    while b ** 2 > n:\n        a += 1\n        b = (a ** 2) + n\n\n    return a * a == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    It does this by iterating from 1 to the square root of the given number, and checking if the square of each number is equal to the given number.\n    If it is, then the given number is a perfect square.\n    \"\"\"\n    sqrt_n = int(n ** 0.5)  # Find the square root of n\n    for i in range(1, sqrt_n+1):\n        if i ** 2 == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n**0.5)\n    return root*root == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Check for the base case where n is 1 or a negative number\n    if n < 1:\n        return False\n    \n    # Use a loop to check whether n is a perfect square or not\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n        \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    if n == 1:\n        return True\n    if n < 2:\n        return False\n\n    # Find the square root of n using the formula: sqrt(n) = (1 + sqrt(n)) / 2\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Create a list of prime numbers up to sqrt_n\n    primes = [True] * sqrt_n\n    primes[0] = primes[1] = False\n\n    # Sieve of Eratosthenes algorithm to find prime numbers up to sqrt_n\n    for i in range(2, sqrt_n):\n        if primes[i]:\n            for j in range(i * i, sqrt_n, i):\n                primes[j] = False\n\n    # Check if n is a perfect square\n    return primes[n - 1]"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Find the square root of n\n    root = int(n ** 0.5)\n\n    # Check if root is an integer\n    if root * root!= n:\n        return False\n    \n    # Check if the number of divisions by 4 is less than or equal to root\n    if n % 4 == 0 and root % 4 == 0:\n        return True\n    elif n % 4 == 0:\n        return False\n    elif root % 4 == 0:\n        return False\n    else:\n        # Check if the number of divisions by 2 is less than or equal to root\n        if n % 2 == 0 and root % 2 == 0:\n            return True\n        elif n % 2 == 0:\n            return False\n        elif root % 2 == 0:\n            return False\n        else:\n            # Check if the number of divisions by 3 is less than or equal to root\n            if n % 3 == 0 and root % 3 == 0:\n                return True\n            elif n % 3 == 0:\n                return False\n            elif root % 3 == 0:\n                return False\n            else:\n                return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = n ** 0.5\n    return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n\n    for num in arr: \n        product *= num\n\n    if product % 2 == 0: \n        return \"The product of the numbers is even.\" \n    else: \n        return \"The product of the numbers is odd.\" "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product is even\")\n    else:\n        print(\"The product is odd\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n    \n    # calculate the product of all numbers in the list\n    for num in arr:\n        product *= num\n    \n    # check if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n\n    for num in arr: \n        product *= num \n\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the sum of the elements in the lists and the maximum sum\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # Initialize a variable to store the sum of the elements in the current list\n        current_sum = 0\n        \n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the element to the current sum\n            current_sum += lists[i][j]\n            \n            # If the current sum is greater than the maximum sum so far, update the maximum sum and list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lists[i]\n    \n    # Return the maximum sum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                if lists[i][j][k] > max_sum:\n                    max_sum = lists[i][j][k]\n                    max_list = [[lists[i][j][k]]]\n                elif lists[i][j][k] == max_sum:\n                    max_list.append(lists[i][j][k])\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = []\n\n    # Loop through the lists in the input list\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # If the sum is greater than the maximum sum found so far, update the maximum sum and the corresponding list\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize max_sum to the first element in the first list\n    max_sum = lists[0][0]\n\n    # Loop through each element in each list\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            # Calculate the sum of the current element and the element in the next row\n            next_row_sum = lists[i][j] + lists[i][j+1]\n            # Update the max_sum if necessary\n            if next_row_sum > max_sum:\n                max_sum = next_row_sum\n\n    # Create a list to store the maximum element in each row\n    max_row = []\n    # Loop through each row in the lists\n    for row in lists:\n        # Find the index of the maximum element in the row\n        max_index = row.index(max(row))\n        # Append the maximum element to the max_row list\n        max_row.append(row[max_index])\n\n    # Return the max_row list\n    return max_row"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    result = []\n\n    # Loop through each list in the list of lists\n    for i in range(len(lists)):\n        # Initialize variables\n        current_sum = 0\n        list_sum = 0\n\n        # Loop through each element in the list\n        for j in range(len(lists[i])):\n            # Add the current element to the list sum\n            list_sum += lists[i][j]\n\n            # If the list sum becomes negative, reset it to 0\n            if list_sum < 0:\n                list_sum = 0\n\n            # Add the current element to the current sum\n            current_sum += lists[i][j]\n\n            # If the current sum becomes negative, reset it to 0\n            if current_sum < 0:\n                current_sum = 0\n\n            # If the current sum is greater than the maximum sum, update the maximum sum and result\n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = lists[i]\n\n    # Return the result list\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [[lists[i][j]]]\n            elif lists[i][j] == max_sum:\n                max_list.append([lists[i][j]])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_lists = []\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lists = [sublist]\n        elif current_sum == max_sum:\n            max_lists.append(sublist)\n\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    # Loop through each sublist in the list of lists\n    for sublist in lists:\n        # Calculate the sum of elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # Check if the current sublist sum is greater than the maximum sum\n        if sublist_sum > max_sum:\n            # Update the maximum sum and maximum sum list\n            max_sum = sublist_sum\n            max_sum_list = sublist\n\n    # Return the maximum sum list\n    return max_sum_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 1\n    max_count = 1\n    current_run_uppercase = False\n    max_run_uppercase_start = 0\n    max_run_uppercase_end = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run_uppercase = True\n            if uppercase_count > max_count:\n                max_count = uppercase_count\n                max_run_uppercase_start = max_run_uppercase_end = i\n        else:\n            current_run_uppercase = False\n            uppercase_count = 0\n            max_run_uppercase_end = i\n\n    if current_run_uppercase:\n        max_count += 1\n        max_run_uppercase_end = i\n\n    return max_count, max_run_uppercase_start, max_run_uppercase_end"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                max_run = max(max_run, i - start + 1)\n            start = i\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    start = 0\n    max_run = 0\n    current_run = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, increase the current run\n        if test_str[i].isupper():\n            current_run += 1\n        # If the character is not uppercase, check if the current run is longer than the previous max run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start = i - max_run + 1\n            # Reset the current run\n            current_run = 0\n\n    # Check if there is a maximum run of uppercase characters in the string\n    if max_run == 0:\n        return \"No uppercase characters found\"\n    else:\n        # Return the maximum run of uppercase characters\n        return test_str[start:start+max_run], max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run = 0\n    max_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            uppercase_count = 0\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run, uppercase_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    n = len(test_str)\n    max_run = 0\n    start = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            if i == n - 1:\n                max_run += 1\n            else:\n                if test_str[i+1].isupper():\n                    max_run += 1\n                    start = i\n                else:\n                    if i > start:\n                        max_run = i - start + 1\n                    else:\n                        max_run = 0\n    if max_run == 0:\n        return 0\n    else:\n        return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    start_index = 0\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_index = start_index\n            count = 1\n            start_index = i\n            \n    if count > max_count:\n        max_count = count\n        max_index = start_index\n    \n    return max_count, max_index"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    last_uppercase = False\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        \n        if current_run > max_run:\n            max_run = current_run\n            last_uppercase = True\n            \n        if current_run == 0:\n            last_uppercase = False\n            \n    if last_uppercase:\n        max_run += 1\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str)-1:\n                if i-start+1 > max_run:\n                    max_run = i-start+1\n            elif not test_str[i+1].isupper():\n                if i-start+1 > max_run:\n                    max_run = i-start+1\n                start = i\n        else:\n            start = i\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            max_run = max(max_run, count)\n            count = 0\n    max_run = max(max_run, count)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # convert all characters to lowercase\n    test_str = test_str.lower()\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    # iterate through the string\n    for i in range(len(test_str)):\n        # if the character is uppercase and the next character is also uppercase\n        if test_str[i] == test_str[i+1] and test_str[i]!='':\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            # reset the current run\n            current_run = 0\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # if no odd number is found in the list, return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the given tuple contains the k or not\n    if test_tup[K-1] == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the length of the tuple is equal to K\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(len(test_tup)-K+1):\n        if test_tup[i] in test_tup[i+K:]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup in K:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    if count >= 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) < K:\n        return False\n    else:\n        return test_tup[:K]"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    # Check if the length of both tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of the same length\")\n        return\n    \n    # Compare each element of the second tuple to its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"Error: Second tuple is not smaller than the first tuple\")\n            return\n    print(\"Both tuples are smaller\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must have the same length!\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                print(f\"{test_tup2[i]} is not smaller than {test_tup1[i]}.\")\n            else:\n                print(f\"{test_tup1[i]} is not smaller than {test_tup2[i]}.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should have the same length.\"\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The first tuple is smaller.\")\n            return\n        elif test_tup1[i] < test_tup2[i]:\n            print(\"The second tuple is smaller.\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have different lengths.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return \"Error: First tuple contains element larger than or equal to the corresponding element in the second tuple.\"\n    return \"All elements in the second tuple are smaller than the corresponding elements in the first tuple.\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]