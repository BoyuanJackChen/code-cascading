[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1, set2 = set(test_tup1), set(test_tup2)\n    shared_elements = set1 & set2\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1 and test_tup1[i] not in shared_elements:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a dictionary to store the count of each element in test_tup1\n    count1 = {}\n    for item in test_tup1:\n        if item in count1:\n            count1[item] += 1\n        else:\n            count1[item] = 1\n\n    # Create a dictionary to store the count of each element in test_tup2\n    count2 = {}\n    for item in test_tup2:\n        if item in count2:\n            count2[item] += 1\n        else:\n            count2[item] = 1\n\n    # Find the shared elements in the two dictionaries\n    shared = set(count1.keys()) & set(count2.keys())\n\n    # Return the shared elements\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets for the first tuple and second tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Convert the tuples into sets to remove duplicates and store them in sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets and store it in a set\n    common_set = set1.intersection(set2)\n\n    # Convert the common set back into a list and return it\n    return list(common_set)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprimes = []\nfor i in range(2, 1001):\n    if is_prime(i):\n        primes.append(i)\n\nprint(primes)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer 'n' as input and returns True if 'n' is not prime, else False.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #if n is a prime number, return False\n    if n <= 1:\n        return False\n    #if n is divisible by 2 or 3, it is not a prime number\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    #for all other numbers, check if they are divisible by any number from 5 to n-1\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    #if all numbers are divisible by 2, 3, 5,... up to the square root of n-1, n is a prime number\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return True\n    \n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return True\n    \n    # Check if n is a prime number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # If all checks pass, n is not a prime number\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize an empty min-heap\n    min_heap = []\n    \n    # Fill the min-heap with the first n numbers\n    for num in nums[:n]:\n        heapq.heappush(min_heap, num)\n    \n    # Pop and return the largest numbers from the min-heap\n    for _ in range(n):\n        largest = heapq.heappop(min_heap)\n        yield largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Find the n largest integers in a list of numbers, ordered from largest to smallest.\n    Returns a list of the n largest integers.\n    '''\n    # Create a min heap of the first n elements of the list\n    hq.heapify(nums[:n])\n    # Extract the n largest elements from the heap\n    return hq.nlargest(n, nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappushpop(max_heap, num)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes a list of integers and a positive integer n, and returns the n largest integers in descending order.\n    \"\"\"\n    # create a min heap to store the n largest integers\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -nums[i])\n    # pop the n largest integers from the heap and return them in descending order\n    return [-heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list into a min heap\n    max_heap = [-num for num in nums]\n    hq.heapify(max_heap)\n    # Return the n largest integers from the min heap\n    return [hq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap from the first n elements of the list\n    hq.heapify(nums[:n])\n\n    # remove the smallest element from the heap and append it to the result list\n    result = []\n    while len(result) < n:\n        result.append(hq.heappop(nums))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heap\n    nums_heap = hq.nlargest(n, nums)\n    # return the heap as a list\n    return [num for num in nums_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(nums)\n    \n    # Pop the largest n elements from the heap\n    for i in range(n):\n        hq.heappop(nums)\n    \n    # Convert the heap back to a list and return it\n    return hq.nsmallest(n, nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to heap\n    heap = hq.nlargest(n, nums)\n    # return heap\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of the first n elements\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n\n    # for the remaining elements, pop the smallest element and push it onto the min-heap\n    for num in nums[n:]:\n        if num > hq.heappop(min_heap):\n            hq.heappush(min_heap, num)\n\n    return min_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    count = 0\n    while x!= 0:\n        if x & 1:\n            count += 1\n        x >>= 1\n    return count % 2 == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the given number to binary and then split it into two parts\n    binary_str = bin(x)[2:]\n    # Convert the second part of the binary string to int\n    y = int(binary_str, 2)\n\n    # Check if the difference between the two numbers is one\n    if y - x!= 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x):\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n    if x & (x - 1) == 0:\n        return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1: \n        return True\n    if x & (x - 1) == 0: \n        return False\n    return is_Power_Of_Two(x & (x - 1))"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if the binary representation of x has only one 1 followed by zeroes, and False otherwise.\n    '''\n\n    # Convert the integer to binary\n    bin_x = bin(x)[2:]\n\n    # Check if the binary representation has only one 1 followed by zeroes\n    if len(bin_x) == 1 and bin_x[0] == '1':\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1))!= 0: # check if x has only one bit set\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # convert the binary representation of x into a list of digits\n    x_binary = bin(x)[2:]\n    x_binary = [int(digit) for digit in x_binary]\n\n    # loop through the digits of x\n    for i in range(len(x_binary)-1):\n        # check if the difference between the current and the next digit is 1\n        if x_binary[i+1] - x_binary[i]!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1: \n        if x & 1!= x >> 1: \n            return False\n        x = x >> 1 \n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    if x == 0: \n        return True \n    elif x % 2 == 0: \n        if is_Power_Of_Two(x//2) == True: \n            return True \n    else: \n        return False "
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Find all words which are at least 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are too short\n    filtered_words = [word for word in words if len(word) >= 4]\n    # Return the list of filtered words\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n    \n    # Create an empty list to store the words with at least 4 characters\n    long_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word has at least 4 characters\n        if len(word) >= 4:\n            # Add the word to the long_words list\n            long_words.append(word)\n    \n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Use regular expression to find all words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Use list comprehension to create a new list with squares of each element in the original list\n    squares = [num**2 for num in nums]\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    # Initialize the count of rotations to zero\n    count = 0\n    \n    # Initialize the dictionary to store the frequency of characters in the string\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str: \n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in freq: \n            freq[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else: \n            freq[char] += 1\n            \n    # Loop through each character in the dictionary\n    for char in freq: \n        # If the frequency of the character is greater than 1, increment the count of rotations\n        if freq[char] > 1: \n            count += 1\n    \n    # Return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Find the length of the string\n    n = len(str)\n    # Initialize a boolean variable to check if the string is palindrome or not\n    is_palindrome = True\n    # Loop through all possible rotations of the string\n    for i in range(n):\n        # Find the reverse of the current rotation\n        reverse_str = str[i:n] + str[:i]\n        # Check if the reverse of the current rotation is equal to the original string\n        if reverse_str!= str:\n            is_palindrome = False\n            break\n    # If the string is palindrome, return 0\n    if is_palindrome:\n        return 0\n    else:\n        # Find the minimum number of rotations required to get the same string\n        min_rotations = 1\n        count = 0\n        while not is_palindrome:\n            count += 1\n            # Find the reverse of the current rotation\n            reverse_str = str[i:n] + str[:i]\n            # Check if the reverse of the current rotation is equal to the original string\n            if reverse_str!= str:\n                is_palindrome = False\n                break\n            # Update the minimum number of rotations required to get the same string\n            min_rotations += count\n        return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # convert the string to a list of characters\n    str_list = list(str)\n    # initialize the minimum number of rotations to infinity\n    min_rot = float('inf')\n    # loop through all possible rotations of the string\n    for i in range(len(str_list)):\n        # get the current rotation\n        rotation = str_list[i:i+len(str_list)-i]\n        # check if the rotation is equal to the string\n        if rotation == str_list:\n            # if it is, update the minimum number of rotations if the current rotation is smaller than the current minimum number\n            if len(rotation) < min_rot:\n                min_rot = len(rotation)\n    # return the minimum number of rotations required to get the same string\n    return min_rot\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Converting the input string to lowercase\n    str = str.lower()\n    \n    # Creating a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Finding the maximum frequency of each character\n    max_freq = {}\n    for char, count in freq.items():\n        if char not in max_freq or count > max_freq[char]:\n            max_freq[char] = count\n    \n    # Finding the minimum frequency of each character\n    min_freq = {}\n    for char, count in freq.items():\n        if char not in min_freq or count < min_freq[char]:\n            min_freq[char] = count\n    \n    # Calculating the minimum number of rotations required to get the same string\n    rotations = 0\n    for char, max_count in max_freq.items():\n        if max_count < min_freq[char]:\n            rotations += 1\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # initialize the min rotation count to infinity\n    min_rotations = float('inf')\n    # iterate through all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # check if the substrings match and are of equal length\n            if str[i:j] == str[j:i][::-1]:\n                # calculate the number of rotations required to get the same substring\n                rotations = (j-i)//2\n                # update the minimum number of rotations if necessary\n                if rotations < min_rotations:\n                    min_rotations = rotations\n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Build a binary representation of the string\n    bin_str = \"\"\n    for i in range(n):\n        bin_str += str[i]\n        if str[i] == str[-1]:\n            # We have a repeated character, so we need to rotate\n            bin_str = bin_str[::-1]\n            break\n\n    # Count the number of rotations required to get the same string\n    rotations = 0\n    while bin_str!= str:\n        rotations += 1\n        bin_str = bin_str[::-1]\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create all possible rotations of the string\n    rotations = []\n    for i in range(n):\n        rotations.extend(str[i:] + str[:i])\n    # find the minimum number of rotations to get the same string\n    min_rot = n\n    for rotation in rotations:\n        if rotation == str:\n            min_rot = min(min_rot, len(rotation) - n)\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    \n    # Convert the string to a list of characters\n    char_list = list(str)\n    \n    # Initialize the minimum number of rotations to zero\n    min_rotations = 0\n    \n    # Loop through all possible rotations of the string\n    for i in range(len(char_list)):\n        \n        # Initialize a temporary list to store the characters in the current rotation\n        temp_list = []\n        \n        # Move the i-th character to the first position of the temporary list\n        temp_list.append(char_list[i])\n        \n        # Loop through all previous rotations and append the i-th character to each rotation\n        for j in range(i):\n            \n            # Check if the i-th character is the same as the j-th character in the string\n            if char_list[i] == char_list[j]:\n                # If yes, append the j-th character to the temporary list\n                temp_list.append(char_list[j])\n            else:\n                # If no, break the loop and stop appending characters to the temporary list\n                break\n        \n        # Check if the temporary list is equal to the original string\n        if temp_list == char_list:\n            # If yes, increment the minimum number of rotations by one\n            min_rotations += 1\n    \n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n\n    # Check if the string is already rotated\n    if n == len(str[::-1]):\n        return 0\n\n    # Check if the string is already equal to its reverse\n    if str == str[::-1]:\n        return 0\n\n    # Check if the string can be rotated by 180 degrees\n    if n % 2 == 0 and str[0] == str[-1]:\n        return 0\n\n    # Check if the string can be rotated by 90 degrees clockwise\n    for i in range(n // 2):\n        if str[i]!= str[n - i - 1]:\n            return 1\n\n    # Check if the string can be rotated by 90 degrees counterclockwise\n    for i in range(n // 2):\n        if str[n - i - 1]!= str[i]:\n            return 1\n\n    # If no rotations are possible, return -1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # If the string is already a palindrome, there's no rotation needed\n    if str == str[::-1]:\n        return 0\n\n    # Initialize a set to store the characters that appear more than once\n    char_count = set()\n\n    for c in str:\n        if c not in char_count:\n            char_count.add(c)\n        else:\n            char_count.remove(c)\n\n    # If there are no characters that appear more than once, it's already a palindrome\n    if len(char_count) == 0:\n        return 0\n\n    # Count the number of occurrences of each character in the string\n    char_counts = [str.count(c) for c in char_count]\n\n    # Find the minimum number of rotations required to make the characters appear more than once\n    min_rotations = n - len(char_count)\n\n    # Determine the rotation by which the characters need to be added or removed to make the string a palindrome\n    if min_rotations == 0:\n        rotation = [c for c in char_count]\n    else:\n        rotation = [c for c in str]\n        for i in range(min_rotations):\n            rotation.extend(rotation[i:0:-1])\n\n    # Rotate the string to get the same string after the required rotations\n    rotated_str = str[::-1]\n    for c in rotation:\n        rotated_str = rotated_str[::-1].replace(c, '')\n        rotated_str = rotated_str[::-1]\n\n    # Return the minimum number of rotations required to get the same string\n    return min(min_rotations, len(str) - len(rotated_str))"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence\n    if s.find(ch) == 0:\n        s = s[1:]\n    # remove last occurrence\n    if s.find(ch, len(s) - 1) == len(s) - 1:\n        s = s[:len(s) - 1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not ch in s:\n        return \"Character not found in the string\"\n    else:\n        s = s.replace(ch, '')\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return None\n    elif len(s) == 1 and s[0] == ch:\n        return None\n    else:\n        if s[0] == ch:\n            s = s[1:]\n        if s[-1] == ch:\n            s = s[:-1]\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').strip()"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch): \n    # Split the string into a list of characters\n    char_list = list(s)\n    # Check if the character to be removed exists in the string\n    if ch in char_list: \n        # Remove first occurrence\n        if char_list.index(ch) == 0: \n            char_list.pop(0)\n        # Remove last occurrence\n        if char_list.index(ch) == len(char_list) - 1: \n            char_list.pop()\n    # Convert the list back into a string\n    result = ''.join(char_list)\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')[:s.find(ch)] + s[s.find(ch)+len(ch):]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # first, remove the first occurrence of the character\n    s = s.replace(ch, '')\n    # then, remove the last occurrence of the character\n    s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \"\"\"\n    # split the string into a list of characters\n    s_list = list(s)\n    \n    # remove the first occurrence of the character\n    s_list.remove(ch)\n    \n    # remove the last occurrence of the character\n    s_list.remove(ch)\n    \n    # convert the list of characters back to a string\n    s = ''.join(s_list)\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Initialize two pointers i and j to 0 and length of string s-1 respectively\n    i = 0\n    j = len(s)-1\n\n    # Traverse the string from both ends\n    while i <= j: \n        # If the character at i is not equal to ch, move the pointer i to next position\n        if s[i]!= ch: \n            i += 1\n        # If the character at j is not equal to ch, move the pointer j to previous position\n        elif s[j]!= ch: \n            j -= 1\n        # If the character at i is equal to ch, move the pointer i to next position\n        else: \n            s = s[:i] + s[i+1:]\n            j -= 1\n\n    # Return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if len(s) < 2:\n        return s\n    \n    # Remove first occurrence of the character\n    if s[0] == ch:\n        s = s[1:]\n    \n    # Remove last occurrence of the character\n    if s[-1] == ch:\n        s = s[:-1]\n    \n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Create a new list to store the sorted matrix\n    sorted_M = []\n    \n    # Sort the matrix based on the row sums\n    for i in range(len(M)):\n        sorted_M.append(M[i])\n        M[i] = sorted(M[i], key=lambda x: row_sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize the sum of each row as 0\n    row_sums = [0] * len(M[0])\n    \n    # Iterate through each row of the matrix\n    for i in range(len(M)):\n        # Iterate through each element of the row and add its value to the sum of that row\n        for j in range(len(M[i])):\n            row_sums[j] += M[i][j]\n            \n    # Sort the row_sums in ascending order\n    row_sums.sort()\n    \n    # Initialize the final sorted matrix as an empty list\n    final_matrix = []\n    \n    # Iterate through each row of the matrix\n    for i in range(len(M)):\n        # Initialize the row as an empty list\n        row = []\n        \n        # Iterate through each element of the row and find its index in row_sums\n        for j in range(len(M[i])):\n            index = row_sums.index(M[i][j])\n            \n            # Add the index of the element to the row\n            row.append(index)\n        \n        # Append the sorted row to the final matrix\n        final_matrix.append(row)\n    \n    # Return the final sorted matrix\n    return final_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a copy of the matrix\n    M_sorted = M.copy()\n\n    # Sort each row of the matrix in ascending order\n    for i in range(len(M)):\n        M_sorted[i].sort()\n\n    # Sort the matrix in ascending order according to the sum of its rows\n    M_sorted.sort(key=sum)\n\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Find the index of the smallest row sum\n    min_index = row_sums.index(min(row_sums))\n    \n    # Create a new matrix where each row is sorted in ascending order\n    sorted_M = [sorted(M[i]) for i in range(len(M)) if i!= min_index]\n    \n    # Combine the sorted rows and return the result\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row of the matrix\n    sums = [sum(row) for row in M]\n\n    # sort the matrix based on the sums in ascending order\n    M.sort(key=lambda x: x[0])\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # check if the matrix is a valid matrix\n    if not isinstance(M, list) or not all(isinstance(row, list) and len(row) == len(M[0]) for row in M):\n        raise ValueError('Invalid matrix format')\n    \n    # sort the matrix based on the sum of its rows\n    M.sort(key=lambda x: sum(x))\n    \n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i, n):\n            # find the maximum element in the row\n            max_element = M[i][j]\n            # compare the maximum element with the elements in the next row\n            for k in range(j+1, n):\n                if M[i][k] > max_element:\n                    max_element = M[i][k]\n            # swap the maximum element with the element at the end of the row\n            M[i][j], M[i][n-1] = M[i][n-1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Sort the rows in ascending order\n    sorted_rows = sorted(row_sums)\n    \n    # Create a new matrix with the sorted rows\n    sorted_matrix = []\n    for row_sum in sorted_rows:\n        row = []\n        for i in range(len(M[0])):\n            row.append(M[i][M[0].index(row_sum)])\n        sorted_matrix.append(row)\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Iterate over all elements in the matrix\n    for i in range(rows):\n        for j in range(cols):\n            # Compute the sum of the current row\n            row_sum = 0\n            for k in range(cols):\n                row_sum += M[i][k]\n            # Check if the current element is smaller than the sum of its row\n            if M[i][j] < row_sum:\n                # Swap the elements if they are not in ascending order\n                M[i][j], M[i][cols-j-1] = M[i][cols-j-1], M[i][j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M[j])):\n                M[i][j][k] = sum(M[i][j])"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the volume of the prism using Heron's formula\n    volume = (l * b * h) / 2\n\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # calculate the base area\n    base_area = 0.5 * l * b\n\n    # calculate the volume\n    volume = base_area * h\n\n    # return the volume\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three arguments, l (length of base), b (length of height), and h (length of top).\n    It returns the volume of the triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the triangular prism\n    V = (l*b*h) / 6\n    \n    # Return the volume of the triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters, l, b, and h, which represent the length, width, and height of a triangular prism.\n    The function returns the volume of the prism.\n    '''\n    # Calculate the volume of the prism using Heron's formula\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z]*_[a-z][a-z]*'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z])([A-Z])'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=\\b)[a-z]+(?=\\b_)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+_[a-z]+)'\n    matches = re.findall(pattern, text.lower())\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    regex = r'\\b[a-z][a-z\\d]*[_][a-z\\d]*\\b'\n    return bool(re.search(regex, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define the regular expression pattern to match lowercase letters followed by an underscore\n    pattern = r'[a-z_]+'\n    # Use re.findall() to find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # Check if there are any matches found\n    if len(matches) > 0:\n        # If there are matches, return true\n        return True\n    else:\n        # If there are no matches, return false\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    set1 = set(string)\n    set2 = set(string[1:])\n    result = set1.intersection(set2)\n    return ''.join(chr(i) for i in result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    \"\"\"\n    This function takes a string as input and returns a new string with the characters in the first string which are not present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    string_list = list(string)\n\n    for i in range(len(string_list)):\n        if string_list[i] not in string:\n            string_list[i] = 0\n\n    new_string = ''.join(map(chr, string_list))\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    string_list = list(string)\n\n    # Remove the characters in the second string from the first string\n    for char in string_list:\n        if char in list_of_chars:\n            list_of_chars.remove(char)\n\n    # Convert the list to a string\n    result = ''.join(list_of_chars)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of ASCII characters\n    ascii_list = list(string)\n    # Remove the characters from the first list which are present in the second list\n    for char in ascii_list:\n        if char in string:\n            ascii_list.remove(char)\n    # Convert the list of ASCII characters back to a string\n    result = ''.join(ascii_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    if len(string) <= NO_OF_CHARS:\n        return list(string)\n    \n    # Convert string to list of characters\n    char_list = list(string)\n    \n    # Remove characters from char_list which are present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    \n    # Convert char_list back to string\n    result = ''.join(char_list)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = \"\"\n    for char in string:\n        if char not in string[1:]:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) > 0:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string, char_set):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n\n    :param string: The first string.\n    :param char_set: The second string.\n    :return: A new string with characters from the first string which are not present in the second string.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    chars = list(string)\n\n    # Create an empty list to store the new characters\n    new_chars = []\n\n    # Iterate over the characters in the string\n    for char in chars:\n        # Check if the character is present in the char_set\n        if char not in char_set:\n            # If it is not present, add it to the new_chars list\n            new_chars.append(char)\n\n    # Convert the new_chars list to a string\n    new_string = ''.join(new_chars)\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i in char_set:\n            string = string.replace(chr(i), \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    lst = list(string)\n    \n    # Create a set of characters in the second string\n    second_set = set(string)\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the characters in the first string\n    for char in lst:\n        # If the character is not in the second string, append it to the result\n        if char not in second_set:\n            result.append(char)\n            \n    # Convert the result list to a string\n    result_str = ''.join(result)\n    \n    return result_str"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Initialize an empty dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array and update the count of each element in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate through the dictionary and check if any element has a count greater than 1\n    for num, count in count_dict.items():\n        if count > 1:\n            return True\n\n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_nums = set()\n\n    # Loop through the array\n    for num in arraynums:\n        # If the number is already in the set, return True\n        if num in unique_nums:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_nums.add(num)\n\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # check if the length of the set is equal to the length of the original array\n    if len(unique_set) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    # create a dictionary to store the frequency of each element in the array\n    frequency = {}\n\n    # loop through each element in the array\n    for num in arraynums:\n        # check if the element is already in the dictionary\n        if num in frequency:\n            # if it is, return True as the array contains a duplicate element\n            return True\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            frequency[num] = 1\n\n    # if the loop completes without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array\n    for num in arraynums:\n        # Check if the current element is already in the dictionary\n        if num in count_dict:\n            # If it is, increment the count of that element\n            count_dict[num] += 1\n        else:\n            # If not, add the element to the dictionary with a count of 1\n            count_dict[num] = 1\n\n    # Iterate through the dictionary to check for duplicates\n    for num in count_dict:\n        # If the count of the current element is greater than 1, it means that the element is a duplicate\n        if count_dict[num] > 1:\n            return True\n\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the elements\n    element_dict = {}\n    for num in arraynums:\n        if num in element_dict:\n            # if the number already exists in the dictionary, return True\n            return True\n        else:\n            # if the number doesn't exist in the dictionary, add it with value 1\n            element_dict[num] = 1\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the set is less than the length of the array\n    if len(unique_set) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a set to store unique elements\n    unique_nums = set()\n    \n    # Iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n        \n    # Check if there are any elements in the set\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0: \n        return \"The number is not a woodball.\"\n    else: \n        return \"The number is a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 500:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and x > 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the number is divisible by 10 or not\n    if x % 10 == 0:\n        return False\n\n    # Check if the number is divisible by 5 or not\n    if x % 5 == 0:\n        return True\n\n    # If none of the above conditions are met, it is not a woodball\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 8 or x == 25 or x == 49 or x == 76:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    This function takes a number x and checks if it is a woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    This function takes a number as an argument and returns True if it's a woodball, False otherwise.\n    A woodball is defined as a positive integer greater than 20, which is the number of unique ways to arrange 5 coins to make a total sum of 20.\n    '''\n    if x > 20:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Check if the given number is even or odd\n    if num % 2 == 0:\n        # If it's even, then it can't be one less than twice its reverse\n        return False\n    else:\n        # If it's odd, then it must be one less than twice its reverse\n        return num - 2 * rev(num//2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num!= 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num //= 10\n    return (reverse + 1) % 2 == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to a number\n    rev_num = int(rev_str)\n    # Calculate the difference between the original number and the reverse number\n    diff = abs(rev_num - num)\n    # Check if the difference is less than twice the reverse number\n    if diff < 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # initialize variables\n    reverse = 0\n    count = 0\n    # calculate reverse\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # check if one less than twice reverse\n    if reverse < (2 * reverse - 1):\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # check if number is odd or even\n    if num % 2 == 0:\n        return \"The given number is even and one less than twice its reverse.\"\n    else:\n        # convert number to string and reverse it\n        rev_str = str(num)[::-1]\n        # convert string back to integer and check if it is 1 less than twice its reverse\n        rev_int = int(rev_str)\n        if rev_int == num - 2:\n            return \"The given number is odd and one less than twice its reverse.\"\n        else:\n            return \"The given number is odd and not one less than twice its reverse.\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n    return num == reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    reversed_num = int(str(num)[::-1])\n    \n    # Check if the reversed number is one less than twice the original number\n    if reversed_num <= num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return num - reversed_num == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return (num == reverse - 2)\n\nprint(rev(12345)) # True\nprint(rev(654321)) # True\nprint(rev(1234)) # False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Define the maximum number of digits in the input list\n    max_digits = len(arr)\n\n    # Create an empty list to store the digits that can be formed with the given digits\n    digits = []\n\n    # Iterate through the input list\n    for digit in arr:\n        # If the current digit is a multiple of 2, add it to the list of digits\n        if digit % 2 == 0:\n            digits.append(digit)\n        # If the current digit is not a multiple of 2, subtract it from the list of digits\n        else:\n            digits.append(digit - 1)\n\n    # Initialize the maximum number that can be formed with the given digits\n    max_num = 0\n\n    # Iterate through the list of digits\n    for digit in digits:\n        # Add the digit to the maximum number if the sum is greater than the current maximum number\n        if digit + max_num > max_num:\n            max_num = digit + max_num\n\n    # Return the maximum number that can be formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(1,10):\n        if all(int(digit) <= i for digit in arr):\n            max_num = i * 10**(len(arr)-1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # sorting the list of digits in decreasing order\n    arr.sort(reverse=True)\n\n    # creating a list to store the remainders after each digit is removed from the original number\n    remainders = []\n\n    # iterating through the sorted list of digits\n    for digit in arr:\n\n        # calculating the remainder after the digit is removed from the original number\n        remainder = digit % 9\n\n        # adding the remainder to the list of remainders\n        remainders.append(remainder)\n\n    # finding the maximum number of digits in the remainders list\n    max_num_of_remainders = max(remainders)\n\n    # finding the maximum number that can be formed with the remainders list\n    max_num = max_num_of_remainders * 9\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n\n    # Step 1: Sort the given list of digits in decreasing order\n    arr.sort(reverse=True)\n\n    # Step 2: Initialize a variable to store the maximum number that can be formed\n    max_num = 0\n\n    # Step 3: Initialize a variable to store the sum of digits of the maximum number that can be formed\n    sum_of_digits = 0\n\n    # Step 4: Loop through the sorted list of digits\n    for digit in arr :\n\n        # Step 5: Check if the sum of digits can be formed with the current digit\n        if sum_of_digits + digit > max_num :\n\n            # Step 6: Update the maximum number and the sum of digits\n            max_num = sum_of_digits + digit\n            sum_of_digits = digit\n\n    # Step 7: Return the maximum number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n\n    # Sort the given list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number formed with the given digits\n    max_num = 0\n\n    # Traverse through the sorted list and add up the corresponding digits to form the maximum number\n    for digit in arr:\n        max_num += digit\n\n    # Return the maximum number formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 :\n        return arr[0]\n    \n    else :\n        max_num = max(arr[0], find_Max_Num(arr[1:]))\n        return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num) + max_num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Function to find the maximum number that can be formed with the given list of digits\n    def max_number(arr):\n        \"\"\"\n        Helper function to find the maximum number that can be formed with the given list of digits.\n        \"\"\"\n        # Sort the given list of digits in descending order\n        arr.sort(reverse=True)\n\n        # Initialize the maximum number to be formed\n        max_num = 0\n\n        # Iterate through the sorted list of digits and multiply them with their corresponding index\n        for i in range(len(arr)):\n            max_num += arr[i] * (len(arr) - i)\n\n        # Return the maximum number that can be formed with the given list of digits\n        return max_num\n\n    # Return the maximum number that can be formed with the given list of digits\n    return max_number(arr)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the given list of digits in descending order\n    arr.sort(reverse=True)\n    # initialize max_num to 0\n    max_num = 0\n    # iterate through each digit of the sorted list\n    for num in arr:\n        # add the current digit to max_num\n        max_num += num\n        # check if max_num is greater than 9\n        if max_num > 9:\n            # if yes, reset it to 0\n            max_num = 0\n            # continue the iteration\n            continue\n        # if max_num is less than or equal to 9, return max_num\n        return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the list of digits in ascending order\n    arr = sorted(arr)\n\n    # Initialize variables for the largest number and its corresponding length\n    max_num = 0\n    max_len = 0\n\n    # Loop through each digit and check its length\n    for digit in arr:\n        # Find the length of the digit and update the max_num and max_len if necessary\n        len_digit = len(str(digit))\n        if len_digit > max_len:\n            max_num = digit\n            max_len = len_digit\n\n    # Return the maximum number with its length\n    return max_num, max_len"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x*y < 0: \n        return \"The two integers have opposite signs.\"\n    else: \n        return \"The two integers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Convert the integers to their absolute values\n    x = abs(x)\n    y = abs(y)\n\n    # Check if the absolute values of x and y are equal\n    if x == y:\n        # If they are equal, then x and y have opposite signs\n        return True\n    else:\n        # If they are not equal, then x and y do not have opposite signs\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # If both the numbers are equal, return True\n    if x == y:\n        return True\n\n    # If one of the numbers is negative, the other one must also be negative\n    if x < 0 and y >= 0 or x >= 0 and y < 0:\n        return False\n\n    # If both the numbers are negative, or both the numbers are positive, return False\n    return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters\n    ----------\n    x : int\n        The first integer.\n    y : int\n        The second integer.\n\n    Returns\n    -------\n    bool\n        True if the signs of x and y are opposite, False otherwise.\n\n    \"\"\"\n\n    # check if signs of x and y are opposite\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return \"Both numbers have same positive sign.\"\n    elif x <= 0 and y <= 0:\n        return \"Both numbers have same negative sign.\"\n    else:\n        return \"Both numbers have opposite sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if the signs are the same or not\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        print(f\"{x} and {y} have opposite signs.\")\n    else:\n        print(f\"{x} and {y} do not have opposite signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    if x*y < 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    octagonal_num = 0\n    while i <= n:\n        octagonal_num += i\n        i += 8\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # initialize variables\n    count = 0\n    octagonal_number = 0\n\n    # loop through each number from 1 to n\n    for i in range(1, n+1):\n        # calculate the number of squares required\n        num_of_squares = int((i**2) / 2)\n\n        # loop through each number from 1 to num_of_squares\n        for j in range(1, num_of_squares+1):\n            # add the squares to the octagonal number\n            octagonal_number += i*j\n\n        # add the octagonal number to the count\n        count += octagonal_number\n        octagonal_number = 0\n\n    # return the count of octagonal numbers\n    return count"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def nth_octagonal(n):\n        if n < 1:\n            return None\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 8\n        else:\n            return 8 * nth_octagonal(n - 1) + 1\n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Initialize the sum of the first 8 natural numbers\n    sum_of_natural_numbers = 24\n\n    # Calculate the nth octagonal number using the formula:\n    #   nth octagonal number = (n*n) + sum of natural numbers\n    nth_octagonal_number = (n * n) + sum_of_natural_numbers\n\n    # Check if the nth octagonal number is a natural number\n    if nth_octagonal_number == sum_of_natural_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2 + n - 10\n\nfor i in range(1, 21):\n    print(is_octagonal(i))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = 1\n    for i in range(n): \n        oct_num = oct_num * 2\n        if i % 2 == 1: \n            oct_num = oct_num - 1\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        num += 8\n        count += 1\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_octagonal(n)\nprint(\"The\", n, \"th octagonal number is\", result)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Calculate the sum of the cubes of the first n natural numbers\n    # and the cubes of the squares of the first n natural numbers\n    sum_of_cubes = n * (n + 1) ** 2 / 6\n    sum_of_squares = n * (n + 1) ** 2 / 4\n\n    # Return the result\n    return sum_of_cubes - sum_of_squares"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    octagonal_numbers = []\n    i = 1\n    while i*i*i < n:\n        j = 1\n        while i*i*j <= n:\n            octagonal_numbers.append(i*i*j)\n            j += 1\n        i += 1\n    return octagonal_numbers"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) ** 0.5\n\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        i = 2\n        octagonal = 1\n        while i <= n:\n            octagonal = octagonal + (3 * i - 1) ** 0.5\n            i = i + 1\n        return int(octagonal)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a defaultdict to store the count of substrings with sum of digits equal to length\n    substrings = defaultdict(int)\n\n    # Iterate through the string s and for each character, count the number of substrings with sum of digits equal to length\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Create a substring with sum of digits equal to length\n            substring = s[i:j]\n            # Calculate the sum of digits in the substring\n            sum_of_digits = sum(int(digit) for digit in substring)\n            # Update the count of substrings with sum of digits equal to length\n            substrings[sum_of_digits] += 1\n\n    # Return the count of substrings with sum of digits equal to length\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Convert the string to a list of characters\n    s = list(s)\n\n    # Create a defaultdict to store the count of substrings of each length\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of length 1 to n\n    for i in range(len(s)):\n        # Get the substring and its sum of digits\n        substring = s[i:i+1]\n        digit_sum = sum(int(digit) for digit in substring)\n\n        # If the sum of digits is equal to the length of the substring, increment the count in the defaultdict\n        if digit_sum == len(substring):\n            count_dict[len(substring)] += 1\n\n    # Return the total count of substrings\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of each substring with sum of digits equal to their length\n    count = defaultdict(int)\n\n    # Iterate over all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # If the substring has sum of digits equal to its length, increment the count in the dictionary\n            if sum(int(d) for d in s[i:j]) == j-i:\n                count[j-i] += 1\n\n    # Return the dictionary containing the count of each substring with sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n        for j in range(i+1, len(s)+1):\n            if sum(int(d) for d in s[i:j]) == len(s[i:j]):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    count = 0\n    \n    for i in range(len(s)):\n        digit_count[sum(int(c) for c in s[i:i+1])] += 1\n    \n    for i in range(len(s)-1):\n        count += digit_count[sum(int(c) for c in s[i:i+2])]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    # Create a dictionary to store the count of digits in a substring\n    digit_count = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Add the current digit to the count of digits in the substring\n        digit_count[s[i]] += 1\n        # If the sum of digits is equal to the substring length, increment the count\n        if sum(digit_count.values()) == i + 1:\n            count += 1\n        # Remove the first digit to reset the count of digits\n        digit_count[s[i]] -= 1\n        # Move the substring one character to the right\n        while digit_count[s[i]] < 0:\n            digit_count[s[i]] += 1\n            i += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # create a dictionary to store the count of substrings with the sum of digits equal to their length\n    digit_count = defaultdict(int)\n    \n    # loop through the string and count the substrings with the sum of digits equal to their length\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            digits = sum(int(digit) for digit in s[i:j])\n            digit_count[digits] += 1\n            \n    # return the count of substrings with the sum of digits equal to their length\n    return sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a defaultdict to store the count of substrings\n    count = defaultdict(int)\n    # loop through all the possible substrings of length i from the string s\n    for i in range(len(s)+1):\n        for j in range(i, len(s)+1):\n            # if the substring has a sum of digits equal to its length\n            if sum(int(digit) for digit in s[j-i:j]) == i:\n                # increment the count of the substring in the defaultdict\n                count[j-i] += 1\n    # return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            count_dict[digits_sum] += 1\n    return count_dict[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings for each length of digit sum\n    digit_count = defaultdict(int)\n\n    # Iterate through the string and calculate the sum of digits for each substring\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the substring\n            substring = int(''.join(sorted(s[i:j+1])))\n            # Count the substring in the dictionary\n            digit_count[substring] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(1 for count in digit_count.values() if count > 0)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    \n    # Traverse the list and check if each element is smaller than the current smallest number\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            # If an element is smaller, update the smallest number to that element\n            smallest = xs[i]\n    \n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                diff = test_list[i][1] - test_list[j][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create a dictionary to store the frequency of each number in the list\n    freq = {}\n    for num in test_list:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize variables to store the maximum difference and the minimum difference\n    max_diff = 0\n    min_diff = float('inf')\n\n    # Iterate through each pair of numbers in the dictionary and calculate the difference\n    for num1, count1 in freq.items():\n        for num2, count2 in freq.items():\n            if num1!= num2 and count1 > 0 and count2 > 0:\n                diff = abs(num1 - num2)\n                if diff > max_diff:\n                    max_diff = diff\n                if diff < min_diff:\n                    min_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the given list of tuples in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize two variables to store the maximum and minimum differences\n    max_diff = float('-inf')\n    min_diff = float('inf')\n\n    # Iterate through the sorted list and calculate the maximum and minimum differences\n    for i in range(len(sorted_list)):\n        diff = sorted_list[i][1] - sorted_list[i][0]\n        max_diff = max(max_diff, diff)\n        min_diff = min(min_diff, diff)\n\n    # Return the maximum difference between available pairs in the sorted list\n    return max_diff - min_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize max_diff to a very small number\n    max_diff = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the two tuples\n            diff = test_list[j][0] - test_list[i][0]\n\n            # Update max_diff if the new difference is larger\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the final value of max_diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the maximum difference between available pairs.\n    \n    Args:\n    test_list: A list of tuples containing integers.\n    \n    Returns:\n    An integer representing the maximum difference between available pairs.\n    \"\"\"\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, abs(test_list[i][1] - test_list[j][1]))\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            diff_list.append(diff)\n    return max(diff_list)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    This function takes a list of tuples representing student marks for each subject\n    and sorts the list in descending order based on the second value of each tuple.\n    \"\"\"\n    # sorting the list based on the second value of each tuple in descending order\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    # sort the subjectmarks list by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple as the sorting key\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts them based on the second value of each tuple.\n    '''\n\n    # Sorting the list of tuples based on second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Initialize the sum to zero\n    total = 0\n    # Recursively loop through the list and sum its elements\n    def flatten(lst):\n        for item in lst:\n            if type(item) == list:\n                flatten(item)\n            else:\n                total += item\n    flatten(data_list)\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list is empty, return 0.\n    if not data_list:\n        return 0\n    # Recursive case: Add the first element of the list to the sum of the remaining elements.\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: empty list\n    if not data_list:\n        return 0\n    # recursive case: non-empty list\n    else:\n        # get the first element of the list\n        head = data_list[0]\n        # recursively call the function with the rest of the list\n        tail_sum = recursive_list_sum(data_list[1:])\n        # add the head and tail sums together\n        return head + tail_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if type(item) == list:\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Base case: If the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: Add the first element to the sum of the flattened list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list, current_list=None, total=0):\n    if current_list is None:\n        current_list = []\n    if len(data_list) == 0:\n        return total\n    else:\n        current_list.append(data_list.pop(0))\n        total += current_list[-1]\n        return recursive_list_sum(data_list, current_list, total)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(item) for item in data_list])\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten_list(item)\n        else:\n            yield data_list\n\n    flattened_list = list(flatten_list(data_list))\n    total_sum = sum(flattened_list)\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        head, *tail = data_list\n        return head + recursive_list_sum(tail)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a Python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # create a list of all the Bell numbers up to n\n    bell = [1, 1]\n    while bell[-1] <= n:\n        bell.append(bell[-1] * 2 + 1)\n\n    # initialize the counter\n    count = 0\n\n    # loop through all the Bell numbers up to n\n    for i in range(2, bell[-1]):\n        # if i is prime, add 1 to the count\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize variables\n    bell_numbers = [1] * (n+1)\n    bell_numbers[0] = 0\n    bell_numbers[1] = 0\n    ways = 1\n\n    # Fill in the bell numbers array\n    for i in range(2, n+1):\n        bell_numbers[i] = bell_numbers[i-1] + bell_numbers[i-2]\n        ways *= bell_numbers[i]\n\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize a list to store the number of ways to partition the Bell numbers\n    ways = [1] * (n+1)\n\n    # Initialize variables to keep track of the current partitioning\n    current_partition = 0\n    current_count = 1\n\n    # Loop through the Bell numbers from 1 to n\n    for b in range(1, n+1):\n\n        # Calculate the number of ways to partition the current Bell number\n        new_count = ways[current_partition]\n        if b % 2 == 0:\n            new_count += ways[current_partition-1]\n        else:\n            new_count -= ways[current_partition-1]\n\n        # Update the number of ways to partition the current Bell number\n        ways[b] = new_count\n\n        # Calculate the number of ways to add the current Bell number to the current partition\n        new_count = 1\n        for i in range(1, current_partition+1):\n            new_count *= i\n\n        # Update the number of ways to add the current Bell number to the current partition\n        ways[current_partition+b] = new_count\n\n        # Move to the next partition\n        current_partition += 1\n\n    # Return the final value in the list, which is the number of ways to partition the Bell numbers\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(n):\n        count += (2*i + 1)\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    # Initialize the result to 1\n    result = 1\n    \n    # Iterate over all possible values of k from 1 to n-1\n    for k in range(1, n):\n        # Calculate the number of ways to partition the Bell numbers with k elements\n        numerator = k\n        denominator = (n - k)\n        result *= numerator // denominator\n        \n    # Return the result\n    return result"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n + bell_number(n-1) - bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(n, k):\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        return helper(n - 1, k - 1) + helper(n - 1, k)\n    \n    total = 0\n    for i in range(n + 1):\n        total += helper(n, i)\n    \n    return total"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * bell_number(n - 1) + bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition as 1\n    ways = 1\n\n    # Iterate through the numbers from 0 to n\n    for i in range(n+1):\n        # Initialize the number of ways to partition for the current number as 1\n        ways_curr = 0\n\n        # Iterate through the numbers from 0 to i\n        for j in range(i+1):\n            # Add the number of ways to partition for j and i-j to the number of ways to partition for j\n            ways_curr += ways_curr_prev\n            # Update the current number of ways to partition for the previous iteration\n            ways_curr_prev = ways_curr\n\n        # Update the number of ways to partition for the current iteration\n        ways += ways_curr\n\n    # Return the final number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return partition(n-1, k-1) * partition(n, k-1)\n\n    return partition(n, n)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    if len(A) == 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A) - 1):\n            if A[i] <= A[i - 1]:\n                return False\n            elif A[i] >= A[i + 1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A) - 1):\n            if A[i] >= A[i - 1]:\n                return False\n            elif A[i] <= A[i + 1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and checks whether it is monotonic. \n    A monotonic array is one in which the elements are either increasing or decreasing.\n    '''\n    n = len(A)\n    if n == 0:\n        return True\n    elif n == 1:\n        return True if A[0] >= 0 else False\n    else:\n        if A[0] < A[1]:\n            for i in range(1, n):\n                if A[i] < A[i-1]:\n                    return False\n        elif A[0] > A[1]:\n            for i in range(1, n):\n                if A[i] > A[i-1]:\n                    return False\n        else:\n            return is_Monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2: \n        return True\n    \n    for i in range(1, n): \n        if A[i-1] > A[i]: \n            return False\n        elif A[i-1] < A[i]: \n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) <= 1:\n        return True\n    \n    if A[0] >= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    \n    prev = A[0]\n    for i in range(1, len(A)):\n        if A[i] < prev:\n            return False\n        prev = A[i]\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize a flag to check whether the array is increasing or decreasing\n    increasing = True\n    \n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    for i in range(1, len(A)):\n        if A[i-1] > A[i]:\n            increasing = False\n            break\n        elif A[i-1] < A[i]:\n            increasing = True\n            break\n    \n    # Check if the array is monotonic\n    if increasing == True:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    n = len(A)\n\n    # Check if all elements in the array are non-decreasing or non-increasing\n    if A[0] < A[-1]:\n        for i in range(1, n-1):\n            if A[i] <= A[i-1]:\n                return False\n    elif A[0] > A[-1]:\n        for i in range(1, n-1):\n            if A[i] >= A[i-1]:\n                return False\n    else:\n        return True\n\n    # Check if the array is monotonic in the entire array\n    if A[0] <= A[1]:\n        for i in range(1, n-1):\n            if A[i] < A[i-1]:\n                return False\n    elif A[0] >= A[1]:\n        for i in range(1, n-1):\n            if A[i] > A[i-1]:\n                return False\n\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        raise ValueError('Both arguments must be lists')\n    \n    if not all(isinstance(x, (int, float, str)) for x in s):\n        raise ValueError('All elements in the sublist must be strings or numbers')\n    \n    if not all(isinstance(x, (int, float, str)) for x in l):\n        raise ValueError('All elements in the list must be strings or numbers')\n\n    sublist = sorted(s)\n    for element in l:\n        if element in sublist:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    elif len(s) == len(l):\n        if s == l:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i + len(s)] == s:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not l:\n        return False\n    elif l[0] == s[0]:\n        if is_sublist(l[1:], s[1:]):\n            return True\n        else:\n            return False\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sublist in s:\n        if sublist in l:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Convert the given sublist to a set to make it faster for membership testing\n    s = set(s)\n    # Loop through the given list and check if any element of the sublist is present\n    for i in range(len(l)):\n        if l[i] in s:\n            # If an element of the sublist is found, return True\n            return True\n    # If no element of the sublist is found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have the same number of elements or False otherwise.\n    '''\n    if len(set([len(tup) for tup in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize a list to store the lengths of the input tuples\n    lengths = []\n    # iterate over each tuple in the input list\n    for i in Input:\n        # append the length of the tuple to the list\n        lengths.append(len(i))\n    # find the minimum and maximum lengths of the input list\n    min_length = min(lengths)\n    max_length = max(lengths)\n    # check if all the tuples have the same length\n    if min_length == max_length:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    for i in range(n):\n        if len(Input[i])!= n:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Initialize a dictionary to store the length of each tuple\n    len_dict = {}\n\n    # Iterate over the input list\n    for tup in Input:\n        # If the length of the tuple is not in the dictionary, add it to the dictionary with a value of 1\n        if len(tup) not in len_dict.keys():\n            len_dict[len(tup)] = 1\n        # If the length of the tuple is already in the dictionary, increment its value by 1\n        else:\n            len_dict[len(tup)] += 1\n\n    # Iterate over the dictionary and check if all the values in the dictionary are equal to 1\n    for val in len_dict.values():\n        if val!= 1:\n            return False\n\n    # If all the values in the dictionary are equal to 1, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(t) for t in Input])) == 1:\n        print(\"All tuples have equal length.\")\n    else:\n        print(\"Not all tuples have equal length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize an empty dictionary to store the count of tuples\n    count_dict = {}\n    \n    # loop through each tuple in the input list\n    for i in Input:\n        # convert the tuple to a string and count the number of characters in it\n        key = str(i)\n        if key in count_dict:\n            count_dict[key] += 1\n        else:\n            count_dict[key] = 1\n    \n    # loop through the count dictionary and check if all the values are equal to 1\n    for value in count_dict.values():\n        if value!= 1:\n            return False\n    \n    # if all the values are equal to 1, return True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the Comb sort algorithm.\n    '''\n    swapped = True\n    n = len(nums)\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        gap = gap // 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                swap(nums, i, i + gap)\n                swapped = True\n\n        gap = gap // 1.3\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n    i = 0\n\n    while swapped:\n        swapped = False\n\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n\n        gap = int(gap / 1.3)\n        i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): A list of elements to be sorted.\n\n    Returns:\n    The sorted list.\n    '''\n\n    # define the parameters for the Comb Sort algorithm\n    max_iter = 100\n    gap = len(nums) // 2\n\n    # initialize the sorted flag to True\n    sorted_flag = True\n\n    # repeat the following steps until the sorted flag is True\n    while sorted_flag:\n        # set the sorted flag to False\n        sorted_flag = False\n\n        # repeat the following steps for max_iter iterations\n        for i in range(max_iter):\n            # check if the gap is greater than the length of the list\n            if gap > len(nums):\n                gap = len(nums)\n\n            # check if the gap is greater than or equal to the length of the list\n            if gap >= len(nums):\n                break\n\n            # swap adjacent elements if they are in the wrong order\n            for j in range(len(nums) - gap):\n                if nums[j] > nums[j + gap]:\n                    nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                    sorted_flag = True\n\n        # reduce the gap by a factor of 1.3\n        gap = int(gap * 1.3)\n\n        # check if the gap is less than or equal to 1\n        if gap <= 1:\n            break\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n        if sorted:\n            return\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define the number of iterations\n    n = len(nums)\n    # define the gap variable\n    gap = n // 2\n\n    # check if the gap is less than 1\n    while gap > 0:\n        # iterate through each element\n        for i in range(gap, n):\n            # swap adjacent elements if they are in the wrong order\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        # shrink the gap by half\n        gap = gap // 2\n\n    # print the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n\n    # Initialize the minimum and maximum values in the list\n    min_val = nums[0]\n    max_val = nums[-1]\n\n    # Initialize the number of iterations and the gap\n    iterations = 1\n    gap = int(len(nums) / 2)\n\n    # While the gap is greater than 1\n    while gap > 1:\n\n        # If the gap is greater than the minimum value in the list\n        if gap > min_val:\n\n            # Find the new gap by counting pairs of adjacent elements and dividing by the gap\n            gap = int((gap + 1) / 2)\n\n            # If the gap is still greater than the minimum value in the list\n            while gap > min_val:\n\n                # Compare the adjacent elements and swap them if they are in the wrong order\n                for i in range(0, len(nums) - gap):\n\n                    # If the adjacent elements are in the wrong order\n                    if nums[i] > nums[i + gap]:\n\n                        # Swap the adjacent elements\n                        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n                # Update the minimum and maximum values in the list\n                min_val = min(nums[:gap])\n                max_val = max(nums[-gap:])\n\n        # Decrease the gap by half to find the next iteration\n        gap = int(gap / 2)\n\n        # Increment the number of iterations\n        iterations += 1\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = int(gap * 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the comb sort algorithm.\n    '''\n    swapped = True\n    n = len(nums)\n    while swapped:\n        swapped = False\n        gap = n // 2\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        n = gap"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is less than 0 or not\n    if n < 0:\n        return \"Invalid input! n should not be negative.\"\n    \n    # Check if n can be represented as the difference of two squares or not\n    sqrt_n = int(n ** 0.5)\n    square_sum = (sqrt_n ** 2) + (sqrt_n ** 2)\n    if n == square_sum:\n        print(\"n can be represented as the difference of two squares.\")\n    else:\n        print(\"n cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Find the square root of n\n    sqrt_n = int(n**0.5)\n\n    # Check if the square root is odd or even\n    if sqrt_n % 2 == 0:\n        print(\"The square root of\", n, \"is even.\")\n        return False\n\n    # Check if the difference of the square and the square root is a perfect square\n    diff_square = (sqrt_n + 1)**2 - n**2\n    diff_sqrt = (sqrt_n - 1)**2 - n**2\n\n    if diff_square == diff_sqrt**0.5:\n        print(\"The difference between the square and square root of\", n, \"is a perfect square.\")\n        return True\n    else:\n        print(\"The difference between the square and square root of\", n, \"is not a perfect square.\")\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Initialize variables \n    square = int(n**0.5) # Square root of the given number \n    square1 = int((n - square**2)/2) # Square of the first half \n    square2 = int((n + square**2)/2) # Square of the second half \n\n    # Check if the difference between the squares is equal to the given number \n    if square1 + square2 == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return \"The number cannot be represented as the difference of two squares.\"\n    for i in range(1, int(n**0.5) + 1):\n        if n - i**2 <= 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(n ** 0.5)\n    for i in range(sqrt_n, 0, -1):\n        if i * i == n:\n            return True\n        if i * i > n:\n            return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    # check for cases where the number is less than or equal to 0\n    if n <= 0: \n        return \"Invalid input. Please enter a positive integer.\"\n\n    # check for cases where the number is equal to 1\n    if n == 1: \n        return \"The given number is equal to 1.\"\n\n    # check for cases where the number is less than 1000\n    if n < 1000: \n        return \"The given number is less than 1000.\"\n\n    # check for cases where the number is equal to the square of its digits\n    if n == int(str(n) ** 2): \n        return \"The given number can be represented as the difference of two squares.\"\n\n    # check for cases where the number is the difference of two squares\n    if n - int(str(n) ** 2) == int(str(int(str(n) ** 2) - n) ** 2): \n        return \"The given number can be represented as the difference of two squares.\"\n\n    return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        print(\"The given number can be represented as the difference of two squares.\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares.\")\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if the given number is an integer or not\n    if isinstance(n, int):\n        # Check if the given number is greater than 0\n        if n > 0:\n            # Calculate the square of the given number\n            sqr = n ** 2\n            # Calculate the difference of the squares\n            diff = (sqr * (sqr - n)) ** 0.5\n            # Check if the difference of squares is an integer or not\n            if isinstance(diff, int):\n                # Return True if the difference of squares is an integer, otherwise return False\n                return True\n            else:\n                # If the difference of squares is not an integer, return False\n                return False\n        else:\n            # If the given number is less than or equal to 0, return False\n            return False\n    else:\n        # If the given number is not an integer, return False\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    # Check if the given number is odd or even\n    if n % 2 == 0:\n        return False\n\n    # Calculate the square of the given number\n    square = n ** 2\n\n    # Check if the square is divisible by 4\n    if square % 4 == 0:\n        return True\n\n    # Check if the square is divisible by 16\n    if square % 16 == 0:\n        return True\n\n    # If the given number cannot be represented as the difference of two squares, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    \n    # Check whether the given number is a square or not\n    if n*n == n:\n        return \"Yes, it can be represented as the difference of two squares.\"\n    else:\n        return \"No, it cannot be represented as the difference of two squares.\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    sequence = []\n    for i in range(len(colors)):\n        if colors[i] not in sequence:\n            sequence.append(colors[i])\n        else:\n            if patterns[sequence.index(colors[i])]:\n                sequence.append(colors[i])\n            else:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # check if the lengths of the two arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # check if all colors are present in the patterns array\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    # check if the patterns array follows the sequence\n    for i in range(len(patterns)-1):\n        if patterns[i]!= patterns[i+1]:\n            return False\n\n    # if all checks pass, it follows the sequence\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    color_count = [0] * len(colors)\n    curr_pattern = ''\n    match = True\n\n    # Loop through the patterns\n    for pattern in patterns:\n        # Check if the current pattern matches the current color count\n        if pattern == 'b':\n            if curr_pattern == 'r':\n                if color_count[0] >= 1:\n                    color_count[0] -= 1\n                else:\n                    match = False\n                    break\n            else:\n                if color_count[1] >= 1:\n                    color_count[1] -= 1\n                else:\n                    match = False\n                    break\n        elif pattern == 'r':\n            if curr_pattern == 'b':\n                if color_count[1] >= 1:\n                    color_count[1] -= 1\n                else:\n                    match = False\n                    break\n            else:\n                if color_count[2] >= 1:\n                    color_count[2] -= 1\n                else:\n                    match = False\n                    break\n        else:\n            if curr_pattern == 'g':\n                if color_count[0] >= 1:\n                    color_count[0] -= 1\n                else:\n                    match = False\n                    break\n            else:\n                if color_count[2] >= 1:\n                    color_count[2] -= 1\n                else:\n                    match = False\n                    break\n\n        # Update the current pattern and color count\n        curr_pattern = pattern\n        color_count = [0] * len(colors)\n\n    # Check if the final pattern matches the final color count\n    if curr_pattern == 'r':\n        if color_count[1] >= 1:\n            return True\n    elif curr_pattern == 'b':\n        if color_count[0] >= 1:\n            return True\n    else:\n        if color_count[2] >= 1:\n            return True\n\n    # If the sequence does not follow the given patterns, return False\n    return match"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the number of colors is equal to the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Loop through the patterns array and check if each color is present in the colors array\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n\n    # If we make it through the loop without returning False, it means the sequence is valid\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Define a dictionary to store the color patterns\n    color_patterns = {\n        'R': {'R', 'Y', 'B'},\n        'Y': {'R', 'Y', 'B'},\n        'B': {'R', 'Y', 'B'},\n        'G': {'G', 'C', 'M'},\n        'C': {'G', 'C', 'M'},\n        'M': {'G', 'C', 'M'},\n        'K': {'K', 'W', 'O'},\n        'W': {'K', 'W', 'O'},\n        'O': {'K', 'W', 'O'},\n    }\n\n    # Check if the length of the colors list is equal to the length of the patterns list\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check if the colors list contains only valid color names\n    for color in colors:\n        if color not in color_patterns:\n            return False\n\n    # Check if the patterns list contains only valid color patterns\n    for pattern in patterns:\n        if pattern not in color_patterns.values():\n            return False\n\n    # Check if the colors and patterns are in the same order as defined in the patterns list\n    index = 0\n    for color in colors:\n        if color!= patterns[index]:\n            return False\n        index += 1\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for i in range(len(colors)):\n        if colors[i] == patterns[count]:\n            count += 1\n        if count == len(patterns):\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    colors_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in colors_dict:\n            colors_dict[colors[i]] = i\n    pattern_dict = {}\n    for pattern in patterns:\n        if pattern not in pattern_dict:\n            pattern_dict[pattern] = []\n        pattern_dict[pattern].append(colors_dict[pattern[0]])\n        pattern_dict[pattern].append(colors_dict[pattern[-1]])\n    for i in range(len(colors)):\n        for pattern in patterns:\n            if pattern_dict[pattern][0] == i or pattern_dict[pattern][-1] == i:\n                if colors[i]!= pattern[0] and colors[i]!= pattern[-1]:\n                    return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    colors.sort()\n    \n    for i in range(n):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # create a dictionary to store the frequency of each color in the colors array\n    color_freq = {}\n    for color in colors:\n        if color in color_freq:\n            color_freq[color] += 1\n        else:\n            color_freq[color] = 1\n\n    # loop through the patterns array and check if it follows the sequence given in the patterns array\n    for pattern in patterns:\n        # if the pattern has more colors than the colors array, it's not valid\n        if len(pattern) > len(colors):\n            return False\n\n        # loop through the pattern and check if each color is present in the colors array and its frequency is greater than 0\n        for color in pattern:\n            if color not in color_freq:\n                return False\n            if color_freq[color] == 0:\n                return False\n            color_freq[color] -= 1\n\n    # if we reach here, the pattern follows the sequence given in the patterns array\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for elem in tup:\n            if elem % K!= 0:\n                count += 1\n                break\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a value K and returns a list of tuples that have all elements divisible by K.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): A value that is a divisor of all the elements of the tuples in the list.\n\n    Returns:\n    list: A list of tuples that have all elements divisible by K from the input list.\n    \"\"\"\n    divisible_tuples = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple(filter(lambda x: x % K == 0, t)) for t in test_list]"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes in a list of tuples and an integer K and returns a list of all tuples that have all elements divisible by K from the list.\n    '''\n    res = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            res.append(i)\n    return res"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_divisible_by_k = []\n    for tuple in test_list:\n        if all(elem % K == 0 for elem in tuple):\n            tuples_divisible_by_k.append(tuple)\n    return tuples_divisible_by_k"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Create a new list to store the tuples which have all elements divisible by K\n    divisible_tuples = []\n    \n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Create a new list to store the elements of the current tuple\n        divisible_tup = []\n        \n        # Loop through each element in the current tuple\n        for elem in tup:\n            # If the element is divisible by K, add it to the divisible_tup list\n            if elem % K == 0:\n                divisible_tup.append(elem)\n            # If the element is not divisible by K, skip it and continue to the next tuple\n            else:\n                continue\n        \n        # If the divisible_tup list is not empty, add the tuple to the divisible_tuples list\n        if divisible_tup:\n            divisible_tuples.append(tup)\n    \n    # Return the list of divisible tuples\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find tuples in the given list of tuples that have all elements divisible by k.\n\n    :param test_list: list of tuples, each tuple contains integers\n    :param K: integer, divisible elements must be present in all tuples\n    :return: list of tuples containing all elements divisible by K\n    \"\"\"\n    result = []\n    for tuple_ in test_list:\n        divisible_elements = [element for element in tuple_ if element % K == 0]\n        if len(divisible_elements) == len(tuple_):\n            result.append(tuple_)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                tuples_list.append((test_list[i], test_list[j]))\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples which satisfy the condition\n    result = []\n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # Create a list to store the elements of the tuple\n        tup_list = list(tup)\n        # Loop through each element in the tuple and check if it is divisible by K\n        for elem in tup_list:\n            if elem % K!= 0:\n                # If the element is not divisible by K, remove it from the tuple\n                tup_list.remove(elem)\n                # Check if the tuple contains all elements divisible by K\n                if len(tup_list) == K:\n                    # If the tuple contains all elements divisible by K, add it to the result list\n                    result.append(tup)\n                else:\n                    # If the tuple contains less elements than K, backtrack to the previous element\n                    break\n    # Return the list of tuples which have all elements divisible by K from the input list\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    \"\"\"\n    This function checks whether a number is divisible by 11 or not.\n    \n    Parameters:\n    n (int): A positive integer\n    \n    Returns:\n    bool: True if n is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"{word} is odd\")\n        else:\n            print(f\"{word} is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Convert the string to lower case to ignore case sensitivity\n    s = s.lower()\n\n    # Split the string into words and store them in a list\n    words = s.split()\n\n    # Loop through each word and check its length\n    for word in words:\n        if len(word) % 2 == 0: # check if length is even\n            print(word, \"is an even length word.\")\n        else:\n            print(word, \"is an odd length word.\")\n\n    # If all words are odd length, print a message\n    if len(words) % 2 == 1:\n        print(\"All words in the sentence are odd length words.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The word is odd.\"\n        else:\n            continue\n    return \"All words have even length.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"has an odd length.\")\n        else:\n            print(word, \"has an even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # Split the input string into a list of words\n    for word in words:\n        if len(word) % 2 == 1:  # Check if the length of the word is odd\n            return True\n    return False  # If no odd word is found, return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Check if the length of the first word is odd or not\n    if len(words[0]) % 2 == 1:\n        print(\"The first word has odd length.\")\n    else:\n        print(\"The first word has even length.\")\n    # Check if the length of all the other words is odd or not\n    for word in words[1:]:\n        if len(word) % 2 == 1:\n            print(word + \" has odd length.\")\n        else:\n            print(word + \" has even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for i in word:\n        if len(i) % 2 == 0:\n            print(i, \"is even.\")\n        else:\n            print(i, \"is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    This function takes a string s as input and checks whether the length of the word is odd or not.\n    If the length is odd, it returns True, else it returns False.\n    '''\n    words = s.split() # Split the string into individual words\n    for word in words:\n        if len(word) % 2!= 0: # If the length of the word is odd\n            return True\n    return False # If no word in the string has odd length"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n % 2 == 1:\n        return tetrahedral_number(n//2) + 1\n    else:\n        return tetrahedral_number(n//2) + 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*4*3*2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    # Initialize variables for tetrahedral number and its square root\n    tetrahedral = 0\n    sqrt_tetrahedral = 0\n\n    # Loop through the number of terms until the tetrahedral number is found\n    for i in range(1, n + 1):\n        # Calculate the nth tetrahedral number\n        tetrahedral = i * (i + 1) * (i + 2) * (i + 3)\n\n        # Calculate the square root of the tetrahedral number\n        sqrt_tetrahedral = tetrahedral ** 0.5\n\n        # Check if the square root of the tetrahedral number is an integer\n        if sqrt_tetrahedral.is_integer():\n            # If it is, return the integer value of the square root\n            return int(sqrt_tetrahedral)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return 4*n*(n-1)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n\n    A tetrahedral number is a positive integer that is the sum of three distinct positive integers.\n    The first tetrahedral number is 12.\n\n    Example:\n\n    >>> tetrahedral_number(1)\n    12\n\n    >>> tetrahedral_number(2)\n    48\n\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 12\n    prev = 12\n    for i in range(2, n+1):\n        curr = (3*(i-1)**2 + 1)/4\n        if curr > prev:\n            return curr\n        prev = curr\n    return None"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function returns the nth tetrahedral number using a recursive algorithm.\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 10\n    else:\n        return n*(2*n - 1) + 10"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return (n*(n-1)*(n-2)*(n-3)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (2 * n + 1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function finds the nth tetrahedral number using the formula \n    T(n) = (1/2)^(1/3) * (n/3)^(1/3) * (2/3)^(1/3) * n \n    ''' \n    return (1/2)**(1/3) * (n/3)**(1/3) * (2/3)**(1/3) * n "
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    def tetrahedral_helper(a, b, c, d):\n        if a+b > c and a+c > b and a+d > c and b+c > d and b+d > c and c+d > b:\n            return a + b + c + d\n        else:\n            return -1\n\n    def is_valid(a, b, c, d):\n        return a >= 1 and b >= 1 and c >= 1 and d >= 1 and a + b + c + d <= n\n\n    if is_valid(1, 1, 1, 1):\n        return 1\n\n    a = 1\n    while True:\n        b = a + 1\n        while True:\n            c = b + 1\n            while True:\n                d = c + 1\n                while True:\n                    if tetrahedral_helper(a, b, c, d) == n:\n                        return tetrahedral_helper(a, b, c, d)\n                    d += 1\n                c += 1\n            b += 1\n        a += 1"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3 # formula for sphere volume\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4.0/3.0 * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for i in strr:\n        sum_ascii += ord(i)\n    return chr((sum_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_ascii = ascii_sum % 26\n    char = chr(char_ascii + ord('a'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return char % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    char_sum %= 26\n    return chr(char_sum + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n\n    # Initialize the sum of ASCII values of characters to 0\n    sum_ascii = 0\n\n    # Iterate through each character of the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n        # Add the ASCII value to the sum of ASCII values\n        sum_ascii += ascii_val\n\n    # Find the character made by adding the ASCII value of all the characters modulo 26\n    char = chr(((sum_ascii % 26) + 65) % 26 + 97)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for i in range(len(strr)):\n        ascii_value += ord(strr[i])\n    ascii_value %= 26\n    char = chr(ascii_value + ord('a'))\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize the sequence with the first four numbers\n    seq = [0, 1, 1, 0]\n\n    # Loop through the sequence and calculate the next number\n    for i in range(4, n+1):\n        # Calculate the next number by taking the XOR of the previous two numbers\n        next_num = seq[i-2] ^ seq[i-3]\n\n        # Append the next number to the sequence\n        seq.append(next_num)\n\n    # Return the nth number in the sequence\n    return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    seq = [1, 1, 1, 1, 1]\n    for i in range(5, n + 1):\n        seq.append(seq[-1] + seq[-2])\n    return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 1\n\n    # Loop through the sequence\n    for i in range(1, n + 1):\n        # Calculate the next number in the sequence\n        next_number = (4 * a ** 2) - (4 * b ** 2) + a + b\n\n        # Update the variables\n        a = b\n        b = next_number\n\n        # Print the next number in the sequence\n        print(next_number)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    while a <= n:\n        print(a)\n        a, b = b, a + b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 0]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-2] + sequence[i-4])\n        else:\n            sequence.append(sequence[i-2] + sequence[i-3])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n-1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n    sequence = [1]\n    count = 0\n    while count < n:\n        next_sequence = [2*x - 1 for x in sequence]\n        sequence.extend(next_sequence)\n        count += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4*pi*r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * (r**3)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # formula for surface area of sphere\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r**2  # surface area formula\n    return s"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere is pi * r^2\n    surface_area = math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = (4/3) * pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of the sphere\n    surface_area = (4/3) * math.pi * r**3\n    \n    # Return the surface area of the sphere\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"The value of n should be a non-negative integer.\")\n\n    if n == 0:\n        return 0\n\n    a = 1\n    b = 6\n\n    for _ in range(1, n+1):\n        a = a + b\n        b = a - b\n\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        return n * ((3 * n - 1) ** 2) / 2\n    else:\n        return n * ((3 * n + 1) ** 2) / 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a, b = 1, 1\n    for i in range(1, n + 1):\n        print(a, end=' ')\n        a, b = b, a + b"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    # first, find the value of i such that n = 2^i - 1\n    i = 0\n    while (2**(i+1) - 1) < n:\n        i += 1\n    \n    # then, calculate the value of n\n    n = 2**(i+1) - 1 - n\n    \n    # finally, calculate the centered hexagonal number\n    hexagonal_num = n*(3*n - 1) // 2\n    \n    return hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 11\n    else:\n        num = 1\n        center = 1\n        while num <= n:\n            temp = num * center\n            if temp > n:\n                break\n            center += 1\n            num += 1\n        return temp"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Calculate the number of rows and columns required for the centered hexagonal number\n    num_rows = 1 + n // 2\n    num_cols = 1 + 2 * n // 3\n\n    # Initialize the result as 0\n    result = 0\n\n    # Iterate over the rows and columns to calculate the centered hexagonal number\n    for i in range(num_rows):\n        for j in range(num_cols):\n            result += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2*n*(n+1) - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    # Base and height of a centered hexagon\n    base = 2 * n + 1\n    height = 4 * n + 3\n    \n    # Calculate the number of squares needed to fill the hexagon\n    squares_needed = int(height / base)\n    \n    # Calculate the total number of squares in the hexagon\n    total_squares = (2 * squares_needed - 1) * squares_needed / 2\n    \n    # Calculate the starting square number of the hexagon\n    start_square = total_squares - squares_needed\n    \n    # Calculate the center square number of the hexagon\n    center_square = start_square + squares_needed // 2\n    \n    # Calculate the index of the nth centered hexagonal number\n    nth_centered_hexagonal = center_square - (squares_needed - n)\n    \n    return nth_centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the n-th centered hexagonal number.\n    \n    Args:\n    n (int): The position of the centered hexagonal number (n >= 1)\n    \n    Returns:\n    int: The centered hexagonal number\n    \n    Raises:\n    ValueError: If n is less than 1\n    \n    Example:\n    centered_hexagonal_number(5)\n    # Output: 19\n    \n    centered_hexagonal_number(10)\n    # Output: 150\n    \n    centered_hexagonal_number(15)\n    # Output: 2015\n    \n    centered_hexagonal_number(20)\n    # Output: 25255\n    '''\n    \n    if n < 1:\n        raise ValueError('n must be greater than or equal to 1')\n    \n    hexagonal_number = 1\n    for i in range(1, n+1):\n        hexagonal_number += i*i*i\n    \n    return hexagonal_number - (n-1)*i*i*i"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    num = 1\n    total = 0\n    side = 1\n    center = 0\n\n    # Calculate the total number of hexagons\n    total = (n-1) * (n-1) + (2 * n - 1) * (2 * n - 3) + n * n * n - (n-1) * n * n\n\n    # Calculate the side length of each hexagon\n    for i in range(1, n+1):\n        side = (num * (3 * i - 1)) // 2\n        center = (num * (3 * i - 1) + 1) // 2\n        if center % 2 == 0:\n            side -= 1\n        total += side\n\n    return total"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new dictionary to store the merged dictionaries\n    merged_dict = {}\n    \n    # Merge the first two dictionaries into the merged dictionary\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    \n    # Merge the third dictionary into the merged dictionary\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Merge dict1 and dict2 into a new dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    \n    # Merge merged_dict and dict3 into a new dictionary\n    merged_dict_three = merged_dict.copy()\n    merged_dict_three.update(dict3)\n    \n    return merged_dict_three"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    for k, v in dict1.items():\n        merged_dict[k].append(v)\n    for k, v in dict2.items():\n        merged_dict[k].append(v)\n    for k, v in dict3.items():\n        merged_dict[k].append(v)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in dict1 and key not in dict2:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # iterate over the list and update the frequency of each element in the dictionary\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    \n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    closest_num = N\n    for num in n_list:\n        if abs(num - N) < abs(closest_num - N):\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize the closest smaller number to be the input number itself\n    closest = N\n\n    # Initialize a boolean variable to keep track of whether the current number is closer to N\n    is_closer = True\n\n    # Iterate over all the numbers from 1 to N-1\n    for i in range(1, N):\n        # Calculate the difference between the current number and N\n        diff = N - i\n\n        # If the difference is closer to N than the current closest smaller number, update the closest smaller number\n        if abs(diff) < abs(closest - N):\n            closest = diff\n\n    # If the difference between N and the closest smaller number is still closer to N than to any other smaller number, return N\n    if abs(closest) == N:\n        return N\n\n    # Otherwise, return the closest smaller number\n    else:\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # initialize variables\n    smaller_num = float('inf')\n    closest_num = -1\n\n    # iterate through numbers from 1 to N\n    for num in range(1, N+1):\n\n        # calculate the difference between n and num\n        diff = abs(N - num)\n\n        # if the current difference is smaller than the previous smaller difference, update variables\n        if diff < smaller_num:\n            smaller_num = diff\n            closest_num = num\n\n    # return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    count = 0\n    min_diff
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    min_num = N\n    max_num = N\n    closest_num = N\n    \n    # loop through the range of numbers from 1 to N\n    for num in range(1, N+1):\n        # check if the number is smaller than the minimum number\n        if num < min_num:\n            min_num = num\n            closest_num = min_num\n        \n        # check if the number is larger than the maximum number\n        elif num > max_num:\n            max_num = num\n            closest_num = max_num\n        \n        # if the number is between the minimum and maximum numbers\n        else:\n            closest_num = min(min_num, max_num)\n            \n    # return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function finds the closest smaller number than n.\n    \"\"\"\n    if N == 0:\n        return 1\n    if N < 0:\n        return closest_num(-N)\n    smaller_num = closest_num(N-1)\n    return smaller_num if abs(N-smaller_num) <= abs(N-smaller_num+1) else smaller_num+1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #initialize variables\n    min_num = N\n    diff = N\n    closest_num = N\n    \n    #loop through numbers from 1 to N-1\n    for i in range(1, N):\n        if i < min_num:\n            diff = min_num - i\n            closest_num = i\n            min_num = i\n        elif i < closest_num:\n            diff = closest_num - i\n            closest_num = i\n\n    #return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Initialize the variables\n    smallest = float('inf')\n    smallest_diff = float('inf')\n    n = 1\n    \n    # Loop through all numbers from 1 to N\n    while n <= N:\n        # Check if the current number is smaller than the smallest number\n        if n < smallest:\n            # Update the smallest number and the smallest difference\n            smallest = n\n            smallest_diff = abs(N - n)\n        # Check if the difference between the current number and the smallest number is smaller than the current smallest difference\n        elif abs(N - n) < smallest_diff:\n            # Update the smallest difference\n            smallest_diff = abs(N - n)\n        # Increment the number\n        n += 1\n    \n    # Return the closest smaller number\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    closest = num_list[0]\n    for num in num_list:\n        if abs(num - N) < abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n\n    # Iterate through the numbers from 1 to N\n    for i in range(1, N+1):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(i - N)\n\n        # If the absolute difference is smaller than the current closest\n        if diff < closest:\n            # Update the closest number and set the flag variable to True\n            closest = diff\n            flag = True\n        else:\n            # If the absolute difference is not smaller, set the flag variable to False\n            flag = False\n\n        # If the flag variable is True, update the smallest number\n        if flag:\n            smallest = i\n\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    longest_word = 0\n    length = 0\n    \n    # loop through the list of words\n    for word in list1:\n        # check if the length of the word is greater than the current longest word\n        if len(word) > longest_word:\n            longest_word = len(word)\n            length = len(word)\n        # update the length of the longest word if the current word has the same length\n        elif len(word) == longest_word:\n            length = max(length, len(word))\n    \n    # return the length of the longest word\n    return length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    # Initialize variables to store the length of the longest word and the current word\n    max_len = 0\n    curr_len = 0\n    \n    # Loop through each word in the list\n    for word in list1:\n        # Add the length of the current word to the current length\n        curr_len += len(word)\n        # If the current length is greater than the maximum length, update the maximum length\n        if curr_len > max_len:\n            max_len = curr_len\n    \n    # Return the maximum length of any word in the list\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1) == list:\n        for item in str1:\n            if sub_str in item:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(lst, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub in lst for sub in sub_str)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        raise TypeError(\"First argument must be a list of strings.\")\n    if type(sub_str)!= str:\n        raise TypeError(\"Second argument must be a string.\")\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert the sub_str to a set to remove duplicate substrings\n    sub_str = set(sub_str)\n\n    # Iterate through the list of strings\n    for str_val in str1:\n        # Convert the current string to a set to remove duplicate characters\n        str_val = set(str_val)\n\n        # Check if the sub_str is present as a substring in the current string\n        if sub_str.issubset(str_val):\n            return True\n\n    # If the sub_str is not found in any of the strings, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # loop through the list of strings\n    for word in str1:\n        # if the substring is present in the current word, return True\n        if sub_str in word:\n            return True\n    # if the substring is not found in any word in the list, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list or type(sub_str)!= str:\n        return \"Please provide a list of strings and a substring.\"\n    \n    for item in str1:\n        if item.find(sub_str)!= -1:\n            return True\n    \n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert sub_str to a list\n    sub_list = list(sub_str)\n\n    # Check if the first character of str1 is same as the first character of sub_list\n    if str1[0] == sub_list[0]:\n        # Iterate through the string from the second character\n        for i in range(1, len(str1)):\n            # Check if the character at the current index is the same as the first character of sub_list\n            if str1[i] == sub_list[0]:\n                # If yes, check if the substring from the current index to the end of the sub_list is present in str1\n                if str1[i:] == sub_list:\n                    return True\n    # If no match is found, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Check if the given number is undulating.\n    '''\n\n    if n % 2 == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check for undulating numbers\n    if n % 2 == 0:\n        return \"The number is not undulating\"\n    else:\n        return \"The number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    elif n > 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0: \n        # If even, then it is not undulating\n        return False\n    else: \n        # If odd, then it is undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Check if the number is even or odd\n    if n % 2 == 0:\n        return False\n    else:\n        # Count the number of factors of 2\n        count = 0\n        while n % 2 == 0:\n            n //= 2\n            count += 1\n\n        # Check if the number is odd\n        if n % 4 == 1:\n            return True\n        else:\n            # Check if the number has more than one factor of 2\n            if count > 1:\n                return True\n            else:\n                return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 0:\n        return \"Number cannot be negative\"\n    elif n == 0:\n        return \"Number is 0\"\n    else:\n        for i in range(1, n + 1):\n            if n % i == 0:\n                return \"Number is not undulating\"\n        return \"Number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        for i in range(2, n+1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value (using the itemgetter function from the operator module)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = float('inf')\n    for index, value in enumerate(test_list):\n        if value[1] < min_value:\n            min_value = value[1]\n            min_index = index\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n\n    # sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Use the itemgetter function from the operator module to get only the second value of each tuple\n    test_list = [itemgetter(1)(x) for x in test_list]\n    # Sort the list of second values in ascending order\n    test_list = sorted(test_list)\n    # Return the first tuple in the list of tuples with the smallest second value\n    return test_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    if len(lst) == 0:  # base case\n        return 0\n    elif len(lst[0]) == 0:  # another base case\n        return 0\n    else:\n        return 1 + min(Find_Min_Length(x) for x in lst)"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for item in lst:\n        if len(item) < min_length:\n            min_length = len(item)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for i in lst:  \n        if len(i) < min_length:  \n            min_length = len(i)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize variables\n    min_length = len(lst[0])\n    min_list = lst[0]\n\n    # Loop through the list of lists\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_list = lst[i]\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    # Base case: if the list is empty, return 0\n    if len(lst) == 0:\n        return 0\n    \n    # Recursive case: find the length of the smallest list in the remaining sublists\n    min_len = 1000000   # initialize to a very large number\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Create a boolean list to mark all numbers from 2 to n as prime\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    \n    # Iterate over all numbers from 2 to sqrt(n)\n    for i in range(2, int(n**0.5)+1):\n        # If i is prime, then mark all multiples of i as not prime\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    \n    # Count the number of prime factors of n\n    count = 0\n    for i in range(2, n+1):\n        if is_prime[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # If the element is not in the dictionary, add it with a count of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n\n        # If the element is already in the dictionary, increment its count by 1\n        else:\n            freq_dict[element] += 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Flatten the list to one level\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Loop through the flattened list and count the frequency of each element\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = []\n    for sublist in list1:\n        flat_list.extend(sublist)\n    freq_dict = {}\n    for element in flat_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Helper function to flatten a list of lists\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n    \n    # Flatten the list\n    flattened = flatten(list1)\n    \n    # Initialize an empty dictionary to store the frequency\n    freq_dict = {}\n    \n    # Loop through the flattened list and update the frequency dictionary\n    for item in flattened:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store frequency of each element\n    freq_dict = {}\n    \n    # loop through the list of lists and add the elements to the dictionary\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    \n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to store the binary representation\n    binary = ''\n    # While n is greater than 0\n    while n > 0: \n        # Get the remainder when n is divided by 2\n        remainder = n % 2\n        # Add the remainder to the beginning of the binary string\n        binary = str(remainder) + binary\n        # Remove the last digit of n and divide it by 2\n        n = n // 2\n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty list to store the binary equivalent\n    binary = []\n    # loop while the decimal number is greater than 0\n    while n > 0:\n        # get the remainder when the decimal number is divided by 2\n        remainder = n % 2\n        # append the remainder to the binary list\n        binary.append(remainder)\n        # divide the decimal number by 2 to remove the least significant bit\n        n = n // 2\n    # reverse the binary list to obtain the binary equivalent\n    binary.reverse()\n    # convert the binary list to a string and return the result\n    return ''.join(map(str, binary))"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    binary_string = \"\"\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n = n // 2\n    return binary_string[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    binary = \"\"\n\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # initialize variables\n    is_palindrome = True\n    next_num = 0\n    # check if num is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num\n    # find the next smallest palindrome\n    for i in range(1, 10):\n        if is_palindrome:\n            next_num = num * 10 + i\n            is_palindrome = False\n        else:\n            next_num = num * 10 - i + 10\n            is_palindrome = True\n    # return the next smallest palindrome\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    \n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the number\n    num_str_reverse = num_str[::-1]\n    \n    # Add 1 to the reversed number and check if it is a palindrome\n    num_plus_one_str = str(int(num_str_reverse) + 1)\n    if num_plus_one_str == num_str_reverse:\n        return int(num_plus_one_str)\n    \n    # Check for the next smallest palindrome\n    for i in range(100, 999, -1):\n        num_plus_one_str = str(i) + num_str\n        if num_plus_one_str == num_str_reverse:\n            return int(num_plus_one_str)\n    \n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_num(n):\n        for i in range(2, 100):\n            if n+i > 1000000000000000000:\n                return n\n            if is_palindrome(n+i):\n                return n+i\n\n    n = int(num)\n    if is_palindrome(n):\n        return n\n\n    return next_num(n)\n\nif __name__ == \"__main__\":\n    num = input(\"Enter an integer: \")\n    try:\n        result = next_smallest_palindrome(num)\n        print(f\"Next smallest palindrome of {num} is: {result}\")\n    except ValueError:\n        print(f\"{num} is not a valid integer.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer\n    \"\"\"\n    # Check if the input number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n\n    # Convert the input number to a string\n    input_str = str(num)\n\n    # Find the smallest palindrome that is greater than the input number\n    smallest_palindrome = int(input_str[::-1]) + 1\n\n    # Check if the smallest palindrome is greater than the input number\n    while smallest_palindrome > num:\n        # Check if the smallest palindrome is a palindrome\n        if is_palindrome(smallest_palindrome):\n            return smallest_palindrome\n\n        # Otherwise, move to the next palindrome\n        smallest_palindrome += 1\n\n    # If the loop completes without finding a palindrome greater than the input number,\n    # there must be no such palindrome\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    largest_palindrome = 0\n    for i in range(10**(num-1), 10**num):\n        if is_palindrome(i):\n            largest_palindrome = i\n    return largest_palindrome + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # reverse the input integer\n    rev_num = int(str(num)[::-1])\n    # check if the reversed number is a palindrome\n    if str(rev_num) == str(rev_num)[::-1]:\n        # check if the reversed number is smaller than the input integer\n        if rev_num < num:\n            return num + 1\n        else:\n            return next_smallest_palindrome(num + 1)\n    else:\n        # if the reversed number is not a palindrome, check if it's smaller than the input integer\n        if rev_num < num:\n            # if it is, return the first palindrome greater than or equal to the input integer\n            for i in range(num, rev_num + 1):\n                if str(i) == str(i)[::-1]:\n                    return i\n            return rev_num + 1\n        else:\n            # if it's not, return the first palindrome greater than or equal to the input integer\n            for i in range(num, rev_num):\n                if str(i) == str(i)[::-1]:\n                    return i\n            return rev_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest_palindrome = 0\n    for i in range(1, num):\n        if is_palindrome(i) and i < smallest_palindrome:\n            smallest_palindrome = i\n    \n    return smallest_palindrome + 1\n\ndef is_palindrome(num):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    str_num = str(num)\n    for i in range(len(str_num)//2):\n        if str_num[i]!= str_num[-(i+1)]:\n            return False\n    return True"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 10\n    else:\n        next_num = num - 1\n        while next_num >= 10:\n            next_num = 0\n            for digit in str(num):\n                next_num += int(digit)\n                next_num += int(digit)\n        return next_num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is odd or even\n    if num % 2 == 0:\n        next_palindrome = num + 1\n    else:\n        next_palindrome = num + 2\n    \n    # check if the next palindrome is palindrome\n    temp = next_palindrome\n    while temp!= 0:\n        if temp % 10 == temp // 10:\n            temp //= 10\n        else:\n            temp = temp // 10 + temp % 10\n    if temp == 0:\n        return next_palindrome\n    else:\n        return next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = ''\n    for i in range(num):\n        palindrome += str(i)\n        if palindrome == palindrome[::-1]:\n            return int(palindrome)\n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a positive integer k as input, and returns the kth element in the array.\n    If the length of the array is less than k, this function will return None.\n    '''\n\n    # Ensure k is a positive integer\n    if not isinstance(k, int) or k <= 0:\n        return None\n\n    # Calculate the length of the array\n    n = len(arr)\n\n    # If the length of the array is less than k, return None\n    if n < k:\n        return None\n\n    # Initialize the first element to be returned\n    first = arr[0]\n\n    # Iterate through the remaining elements of the array\n    for i in range(1, n):\n\n        # If the current element is less than the kth element, set it as the new first element\n        if arr[i] < first:\n            first = arr[i]\n\n    # Return the kth element\n    return first"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return \"Invalid index\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return None\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == k:\n            right = mid\n        elif arr[mid] < k:\n            left = mid + 1\n        else:\n            right = mid\n    \n    if arr[left] == k:\n        return left\n    elif arr[right] == k:\n        return right\n    else:\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    if k == 1:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n\n    left = 1\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid - 1] < arr[mid] and arr[mid] < arr[mid + 1]:\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n        elif arr[mid - 1] < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        print(\"Invalid input: k is greater than the number of elements in the array.\")\n        return\n    \n    for i in range(1, n+1):\n        if i == k:\n            return arr[i-1]\n        elif i > k:\n            return kth_element(arr[i:], k)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert the array to a set to remove duplicates\n    arr = list(set(arr))\n    # Get the length of the array\n    n = len(arr)\n    # Calculate the index of the kth element\n    index = k - 1\n    # If k is greater than the length of the array, return None\n    if index >= n:\n        return None\n    # Initialize variables to keep track of the first and last indices of the subarray\n    first = 0\n    last = n - 1\n    # Loop until the first index is less than the last index\n    while first <= last:\n        # Calculate the middle index\n        mid = (first + last) // 2\n        # If the kth element is in the subarray, return its value\n        if arr[mid] == k:\n            return arr[mid]\n        # If the kth element is in the left subarray, update the last index\n        elif arr[mid] < k:\n            first = mid + 1\n        # If the kth element is in the right subarray, update the first index\n        else:\n            last = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    for i in range(len(arr)):\n        if i == k - 1:\n            return arr[i]\n    \n    return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    # Split the word into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n    \n    # Join the words into a camel case string\n    camel_case_word = ''.join(camel_words)\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for word in words:\n        if word.isupper():\n            camel_case += word\n        else:\n            camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = ''\n    for i in range(len(word)):\n        if i > 0 and word[i] == '_':\n            camel_word += word[i:i+2].upper()\n        else:\n            camel_word += word[i].upper()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    prev_char = \"\"\n    for char in word:\n        if char.isupper():\n            if prev_char.isupper():\n                camel_case += char\n            else:\n                camel_case += \"_\" + char\n        else:\n            camel_case += char\n        prev_char = char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i].capitalize()\n        else:\n            camel_case += words[i]\n    return camel_case.title()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_word += letter.lower()\n        elif i == len(word)-1 and letter.isupper():\n            camel_word += letter\n        else:\n            camel_word += letter.upper()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for i, char in enumerate(word):\n        if char.isupper():\n            result += char.lower() + \"_\"\n        else:\n            result += char.upper()\n    return result[:-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Base case\n    if n == 1:\n        return m\n    \n    # Recursive case\n    else:\n        return eulerian_num(n-1, m+n)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case: n=0, m=1\n    if n == 0 and m == 1:\n        return 1\n\n    # base case: n=1, m=1\n    elif n == 1 and m == 1:\n        return 2\n\n    # recursive case: n > 0, m > 1\n    else:\n        # calculate the value of n-1 and m-1\n        eulerian_num_n_minus_1_m_minus_1 = eulerian_num(n-1, m-1)\n\n        # calculate the value of n and m by summing the values of the two previous values\n        eulerian_num_n_m = eulerian_num_n_minus_1_m_minus_1 + eulerian_num_n_minus_1_m_minus_1 + 1\n\n        return eulerian_num_n_m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0]*m for _ in range(n)]\n    a[0][0] = 1\n    for i in range(1, n):\n        for j in range(1, m):\n            a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n    return a[n-1][m-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix\n    A = [[0 for j in range(m+1)] for i in range(n+1)]\n    # Fill the matrix with 1's\n    for i in range(1, n+1):\n        A[i][1] = 1\n    for j in range(2, m+1):\n        A[1][j] = 1\n    # Calculate the Eulerian number\n    for k in range(2, n+1):\n        for i in range(2, n+1):\n            for j in range(2, m+1):\n                # Check if the current cell has a 1 in it\n                if A[i][j] == 1:\n                    # Check if the cell above is also a 1\n                    if A[i-1][j] == 1:\n                        # Check if the cell to the left is also a 1\n                        if A[i][j-1] == 1:\n                            A[i][j] = 2\n                    # Check if the cell to the right is also a 1\n                    elif A[i][j+1] == 1:\n                        A[i][j] = 2\n    # Return the Eulerian number\n    return A[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the value of a(n, m) to 1\n    a = 1\n    \n    # Calculate the value of a(n, m) using the formula\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a = (a * i) // j\n    \n    # Return the value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n\n    # Loop until m is equal to 1\n    while m!= 1:\n        # Check if m is odd or even\n        if m % 2 == 0:\n            # Add a to b and divide m by 2\n            a += b\n            m //= 2\n        else:\n            # Subtract a from b and divide m by 2\n            b -= a\n            m //= 2\n\n    # Return a(n, m)\n    return a*n**m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 1 and m == 0:\n        return 1\n    elif n == 0 and m == 1:\n        return 1\n    elif n == 1 and m == 1:\n        return 2\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n\nn = int(input(\"Enter the value of n: \"))\nm = int(input(\"Enter the value of m: \"))\n\nprint(\"The Eulerian number a({}, {}) is: {}\".format(n, m, eulerian_num(n, m)))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Check if n and m are positive integers\n    if type(n)!= int or type(m)!= int or n <= 0 or m <= 0:\n        return None\n\n    # Initialize a(0, 0) to 1\n    a = [[1] * (m + 1) for _ in range(n + 1)]\n\n    # Fill in a(n, m) using recurrence relation\n    for i in range(n):\n        for j in range(m):\n            if j == 0 or i == 0:\n                a[i + 1][j + 1] = 1\n            else:\n                a[i + 1][j + 1] = a[i][j] + a[i][j + 1]\n\n    # Return the value of a(n, m)\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 2 * (m - 1) + 1\n    else:\n        return (n - 1) * (eulerian_num(n - 1, m)) + eulerian_num(n - 1, m)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the input_list\n    for sublist in input_list:\n        # convert the sublist to a list of strings\n        sublist_strings = [str(item) for item in sublist]\n        # sort the sublist of strings\n        sublist_strings.sort()\n        # convert the sorted list of strings back to a list of lists\n        sublist_strings_list = [list(map(int, sublist_string.split())) for sublist_string in sublist_strings]\n        # replace the sublist with the sorted list of lists\n        input_list[input_list.index(sublist)] = sublist_strings_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the input_list\n    for sublist in input_list:\n        # sort the sublist in alphabetical order\n        sublist.sort()\n    # return the sorted input_list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Append the list to the tuple\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new list to hold the concatenated values\n    new_list = []\n    \n    # iterate over the given lists and tuples\n    for item in test_list + test_tup:\n        # if the item is a list or tuple, recursively call the function\n        if isinstance(item, (list, tuple)):\n            new_list += add_lists(item, [])\n        else:\n            # otherwise, add the item to the new list\n            new_list.append(item)\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # Append the list to the tuple\n    test_tup = tuple(test_tup) + tuple(test_list)\n\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuple\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # Add the lists to the tuples\n    test_list_tup = test_list + test_tup\n    # Convert the tuple back to a list\n    test_list_tup = list(test_list_tup)\n    return test_list_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n\n    # Append the lists to the tuples\n    test_tup = test_tup + test_list\n\n    # Convert the tuples back to lists and return\n    return list(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list) # convert the list to a list\n    for i in range(len(test_tup)):\n        test_tup[i] = test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as input and returns a single sorted list.\n    \"\"\"\n    # Merge the three lists into a single list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Step 1: Merge two sorted lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Step 2: Sort the merged list using heap sort\n    heapq.heapify(merged_list)\n    sorted_list = [heapq.heappop(merged_list) for _ in range(len(merged_list))]\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge num1 and num2\n    num1_len = len(num1)\n    num2_len = len(num2)\n    merged_list = []\n    i = j = 0\n    while i < num1_len and j < num2_len:\n        if num1[i] <= num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    # Merge num3 and merged_list\n    num3_len = len(num3)\n    for i in range(num3_len):\n        if num3[i] <= merged_list[-1]:\n            merged_list[-1] = num3[i]\n        else:\n            heapq.heappush(merged_list, num3[i])\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i, j, k = 0, 0, 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            if num1[i] < num3[k]:\n                merged_list.append(num1[i])\n                i += 1\n            else:\n                merged_list.append(num3[k])\n                k += 1\n        elif num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input, and returns a single sorted list.\n    \"\"\"\n    # Using heapq module to merge the three lists\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Use a min heap to keep track of the three numbers\n    min_heap = []\n    heapq.heappush(min_heap, num1)\n    heapq.heappush(min_heap, num2)\n    heapq.heappush(min_heap, num3)\n\n    # Merge the three lists into a single sorted list\n    sorted_list = []\n    while len(min_heap) > 0:\n        top1 = heapq.heappop(min_heap)\n        top2 = heapq.heappop(min_heap)\n        top3 = heapq.heappop(min_heap)\n\n        # Combine the three numbers and add to the sorted list\n        sorted_num = top1 + top2 + top3\n        heapq.heappush(min_heap, sorted_num)\n        sorted_list.append(sorted_num)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Use a max heap to sort the list in ascending order\n    max_heap = []\n    for num in combined_list:\n        heapq.heappush(max_heap, num)\n    \n    # Combine the sorted elements of the max heap into a single sorted list\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(heapq.heappop(max_heap))\n        \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Use heapq to sort the combined list\n    heapq.heapify(combined_list)\n\n    # Extract the sorted elements and return them as a list\n    sorted_list = [heapq.heappop(combined_list) for _ in range(len(combined_list))]\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as input and returns a single sorted list.\n    '''\n\n    # Create a min-heap of the three input lists\n    min_heap = []\n    for i in num1:\n        heapq.heappush(min_heap, i)\n    for i in num2:\n        heapq.heappush(min_heap, i)\n    for i in num3:\n        heapq.heappush(min_heap, i)\n\n    # Merge the lists in the min-heap and return the sorted list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the input string to a binary string\n    binary_str = bin(int(s, 2))[2:]\n\n    # Check if the length of the binary string is odd\n    if len(binary_str) % 2 == 1:\n        # Append a 0 to make the length of the binary string even\n        binary_str = '0' + binary_str\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the binary string for the given number of rotations\n    for _ in range(n):\n        # Reverse the binary string\n        binary_str = binary_str[::-1]\n\n        # Count the number of odd numbers in the reversed binary string\n        for digit in binary_str:\n            if digit == '1':\n                count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize the count to 0\n    count = 0\n\n    # Loop through the binary string n times\n    for _ in range(n):\n        # Convert the binary string to a list of digits\n        s_list = [int(digit) for digit in s]\n\n        # Reverse the list of digits\n        s_list.reverse()\n\n        # Convert the reversed list of digits back to a binary string\n        s = ''.join([str(digit) for digit in s_list])\n\n        # Count the number of odd digits in the binary string\n        count += sum([1 for digit in s if int(digit) % 2!= 0])\n\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # check if the input string is a binary string or not\n    if not s.replace(' ', '').replace('\\n', '').replace('\\t', '').isalnum():\n        return \"The input string must contain only binary digits or letters.\"\n\n    # check if the input string contains only odd values\n    if all(ord(i) % 2 == 1 for i in s):\n        return \"The input string must not contain all odd values.\"\n\n    # count the number of odd values in the input string after rotating it n times\n    count = 0\n    temp = s\n    for i in range(n):\n        temp = ''.join(sorted(temp))\n        count += sum(int(j) for j in temp)\n        temp = temp[1:] + temp[0]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n): \n    # initialize an empty list to store the odd equivalents\n    odd_list = []\n\n    # loop through the binary string's' n times\n    for i in range(n):\n        # convert the binary string to an integer\n        num = int(s, 2)\n        # check if the remainder of num divided by 2 is odd\n        if num % 2 == 1:\n            # if it is, add it to the odd_list\n            odd_list.append(num)\n        # rotate the binary string to the left\n        s = format((num << 1) & 0x5555555555555555, '016b')\n\n    # return the length of the odd_list\n    return len(odd_list)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert the binary string to a list of bits\n    bits = [int(x) for x in s]\n    \n    # rotate the list of bits n times\n    for i in range(n):\n        # initialize the new list of bits with zeros\n        new_bits = [0] * len(bits)\n        # iterate over each bit in the list of bits\n        for j in range(len(bits)):\n            # shift the bit to the left by 1 and add it to the corresponding position in the new list of bits\n            new_bits[(j + 1) % len(bits)] += bits[j]\n        # update the list of bits with the new values\n        bits = new_bits\n    \n    # initialize the count of odd values to zero\n    count = 0\n    # iterate over each bit in the list of bits\n    for bit in bits:\n        # if the bit is odd, increment the count\n        if bit % 2!= 0:\n            count += 1\n    \n    # return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # converting the binary string to a list of characters\n    binary_list = list(s)\n    # finding the length of the binary string\n    binary_length = len(binary_list)\n    # finding the number of rotations\n    rotations = n % binary_length\n    # finding the number of elements to be rotated\n    rotation_length = binary_length // rotations\n    # finding the last element of the binary list after rotating the binary list\n    last_rotated_index = (binary_length - 1) - (rotations - 1)\n    # finding the number of odd elements in the last rotated binary list\n    odd_count = 0\n    for i in range(last_rotated_index, binary_length):\n        if binary_list[i] == '1':\n            odd_count += 1\n    # returning the count of odd elements in the last rotated binary list\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    # Convert the binary string to a list of digits\n    binary_list = [int(digit) for digit in s]\n\n    # Create a new list to store the rotated digits\n    rotated_list = []\n\n    # Rotate the binary list n times\n    for i in range(n):\n        # Append the first digit from the binary list to the rotated list\n        rotated_list.append(binary_list[0])\n\n        # Remove the first digit from the binary list and append the last digit\n        binary_list.pop(0)\n        rotated_list.append(binary_list[-1])\n\n    # Find the number of odd digits in the rotated list\n    count = 0\n    for digit in rotated_list:\n        if digit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[-1]+s[:-1]\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    \n    # initialize count variable to 0\n    count = 0\n    \n    # loop through the given number of times\n    for i in range(n):\n        # initialize current_num variable to 0\n        current_num = 0\n        \n        # loop through the binary string\n        for j in range(len(s)):\n            # if the jth bit of s is 1, add 1 to current_num\n            if int(s[j]):\n                current_num += 1\n        \n        # if the binary string contains an odd number, add 1 to count\n        if current_num % 2!= 0:\n            count += 1\n    \n    # return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    # create a binary string from the input string\n    binary_str = bin(int(s,2))[2:]\n\n    # create a list of the binary string\n    binary_list = list(binary_str)\n\n    # rotate the binary string n times\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n\n    # count the number of odd values in the rotated binary string\n    count = 0\n    for i in binary_list:\n        if int(i) % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common_elements:\n                    common_elements.remove(nestedlist[i][j][k])\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append(nestedlist[i])\n                break\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n            if nestedlist[j] in nestedlist[i]:\n                common_elements.append(nestedlist[j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        if i == 0:\n            common_elements = nestedlist[i]\n        else:\n            common_elements = list(set(common_elements) & set(nestedlist[i]))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set()\n    set2 = set()\n\n    for sublist in nestedlist:\n        for element in sublist:\n            set1.add(element)\n\n    for element in set1:\n        if element in set2:\n            return element\n\n    return None"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n\n    # Loop through each list in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is not already in the dictionary, add it\n            if element not in common_dict:\n                common_dict[element] = True\n\n    # Return the common elements as a list\n    return list(common_dict.keys())"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set for common elements\n    common = set()\n    # iterate through each list in the nested list\n    for lst in nestedlist:\n        # iterate through each element in the list\n        for item in lst:\n            # add the element to the common set if it's not already present\n            if item not in common:\n                common.add(item)\n    # return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common_elements.append(nestedlist[i] + nestedlist[j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Iterate through each element in the nested list and update the count in the dictionary\n    for element in nestedlist:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Initialize an empty set to store the common elements in the list\n    common_set = set()\n\n    # Iterate through each key in the count dictionary and add the element to the common set if it has a count of 1\n    for key, value in count_dict.items():\n        if value == 1:\n            common_set.add(key)\n\n    # Convert the common set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_set = set()\n    \n    # Loop through each element of the nested list\n    for element in nestedlist:\n        # Check if the element is also in the common set\n        if element in common_set:\n            # If it is, add it to the result list\n            result.append(element)\n        else:\n            # If it's not, add it to the common set\n            common_set.add(element)\n    \n    # Return the list of common elements\n    return common_set"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string can be converted to an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string contains only digits\n    if text.isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    all_empty = True\n    for i in list1:\n        if not i:\n            all_empty = False\n            break\n    return all_empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i.values():\n            if j:\n                return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty string to store the final integer\n    result = ''\n    \n    # loop through the tuple\n    for num in nums:\n        # convert each number to a string and concatenate it to the result string\n        result += str(num)\n    \n    # convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns the sum of all the integers in the tuple.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if type(nums) == tuple:\n        return sum(nums)\n    else:\n        return \"Invalid input type\""
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Convert each element of the list to an integer and sum them\n    result = sum(int(num) for num in nums_list)\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # iterate over each element in the list\n    for element in test_list:\n        # if the element is a list, recursively call the function\n        if isinstance(element, list):\n            list_to_float(element)\n        # if the element is an integer or a float, convert it to a float and append it to the result list\n        elif isinstance(element, (int, float)):\n            test_list.append(float(element))\n    # return the modified list of lists\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            new_list.append(list_to_float(item))\n        elif isinstance(item, str):\n            new_list.append(float(item))\n        elif isinstance(item, int):\n            new_list.append(float(item))\n        elif isinstance(item, float):\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, str)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist[test_list.index(sublist)] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for row in test_list:\n        for item in row:\n            if isinstance(item, (int, float)):\n                new_list.append(item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for row in test_list:\n        for element in row:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n            elif isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            # Recursively call the function to convert the sub-list to float\n            new_list.append(list_to_float(item))\n        elif isinstance(item, (int, float)):\n            # Convert the item to float if it is already a float or an integer\n            new_list.append(float(item))\n        else:\n            # Otherwise, leave the item unchanged\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    if arr[0] == arr[1]:\n        return arr[0]\n\n    if arr[-1] == arr[-2]:\n        return arr[-1]\n\n    for i in range(2, len(arr)-1):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a hash table to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n    \n    # iterate over the array again, looking for the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n    \n    # if we reach here, there was no element that appeared only once\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Find the first element with a count of 1\n    for num, count in count.items():\n        if count == 1:\n            return num\n    \n    # If no element has a count of 1, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Traverse the array from the first element to the second-to-last element\n    for i in range(len(arr)-1):\n        # If the current element is equal to the next element, return the current element\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    # If the loop completes without returning any element, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the counts of each element in the array\n    counts = {}\n\n    # Traverse the array and update the count of each element in the dictionary\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # Traverse the dictionary to find the element that appears only once\n    for num in counts:\n        if counts[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return \"No element found.\"\n    elif n == 1:\n        return arr[0]\n    else:\n        for i in range(n-1):\n            if arr[i] == arr[i+1]:\n                return arr[i]\n        return \"No element found.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Finding the first element that appears only once\n    for i in range(1, n):\n        if arr[i] == arr[0]:\n            return arr[i]\n\n    # If the first element appears only once, it must be the last element\n    return arr[-1]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    # Find the element that appears only once\n    for num in arr:\n        if count[num] == 1:\n            return num\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            count += 1\n            if count == 1:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return \"The element appears only once in the array.\"\n    else:\n        return arr[arr.index(max(arr))], arr[arr.index(max(arr)) + 1]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0] * list1[j][1])\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, pair_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the maximum absolute product and the current absolute product\n    max_product = -1\n    current_product = 1\n    # Loop through the list of tuples and calculate the maximum absolute product\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the two numbers and update the current product if it's greater\n            product = abs(list1[i][0]*list1[j][1])\n            if product > current_product:\n                current_product = product\n            # Update the maximum absolute product if the current product is greater\n            if current_product > max_product:\n                max_product = current_product\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    This function takes a limit number as input and returns the sum of all amicable numbers from 1 to the limit number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    '''\n    This function checks if a number is amicable or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    amicable_pairs = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_pairs.append(i)\n    return sum(amicable_pairs)\n\ndef is_amicable(n):\n    if n <= 1:\n        return False\n    a, b = 2, n\n    while a < b:\n        if b % a == 0:\n            return False\n        a += 1\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for i in range(1, limit+1):\n        if i!= sum(j for j in range(1, i) if i % j == 0):\n            amicable.append(i)\n    return sum(amicable)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i!= sum_of_squares(i) and i!= sum_of_squares(sum_of_squares(i)):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef sum_of_squares(n):\n    '''\n    Calculate the sum of squares of a number.\n    '''\n    sum_of_squares = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            sum_of_squares += i**2\n            if i!= n//i:\n                sum_of_squares += (n//i)**2\n    return sum_of_squares"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Checks if a given number is amicable or not.\n    \"\"\"\n    sum_of_divisors = sum([i for i in range(1, int(num**0.5) + 1) if num % i == 0])\n    return sum_of_divisors == num\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            sum += num\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit+1):\n        if i == sum_of_amicable_numbers:\n            continue\n        if is_prime(i) and is_prime(sum_of_amicable_numbers):\n            if i+sum_of_amicable_numbers == limit:\n                sum_of_amicable_numbers = i+sum_of_amicable_numbers\n                break\n        elif is_prime(i) and not is_prime(sum_of_amicable_numbers):\n            if i+sum_of_amicable_numbers == limit:\n                sum_of_amicable_numbers = i+sum_of_amicable_numbers\n                break\n    return sum_of_amicable_numbers\n\ndef is_prime(num):\n    \"\"\"\n    Write a function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    for num in range(1, limit + 1):\n        if num == sum_of_its_proper_divisors(num):\n            numbers.append(num)\n    return sum(numbers)\n\ndef sum_of_its_proper_divisors(num):\n    '''\n    Write a function to sum all proper divisors of a specified number.\n    '''\n    divisors = []\n    for i in range(1, num // 2 + 1):\n        if (num % i) == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable = 0\n    for i in range(1, limit + 1):\n        if i == 1:\n            continue  # Skip 1 because it is not amicable\n        elif i in [2, 3]:\n            continue  # Skip even and odd numbers because they are not amicable\n        else:\n            j = i\n            while j < limit:\n                if i == j or j == 1:\n                    break\n                if i % j == 0 and j % i == 0:\n                    break\n                j += 1\n            else:\n                sum_of_amicable += i\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function will return the sum of all the amicable numbers up to the given limit.\n    \"\"\"\n    amicable_set = set()\n    for i in range(1, limit + 1):\n        if i == 1:\n            amicable_set.add(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    amicable_set.add(i)\n                    break\n    \n    return sum(amicable_set)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_amicable_numbers(limit):\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(sum_of_proper_divisors(i)):\n            amicable_numbers.append((i, sum_of_proper_divisors(i)))\n    return sum(amicable_numbers, key=lambda x: x[0])\n\ndef sum_of_proper_divisors(n):\n    return sum(range(1, n + 1))\n\nlimit = int(input(\"Enter the limit: \"))\nresult = sum_of_amicable_numbers(limit)\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", result)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the complex number conjugate\n    conjugate = a + bj\n    # calculate the angle using the polar form of the complex number\n    angle = cmath.phase(conjugate)\n    # convert the angle from radians to degrees\n    angle = cmath.degrees(angle)\n    # return the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the complex number\n    c = a + b*1j\n    # Get the angle in radians\n    angle = cmath.phase(c)\n    # Convert the angle to degrees\n    angle = cmath.degrees(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle*180/cmath.pi,2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real = a.real\n    imag = a.imag\n    angle = cmath.phase(a+b*1j)\n    print(\"The angle of the complex number\", a, \"is\", angle, \"radians.\")"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    count_zeros = 0\n    count_ones = 0\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            count_zeros += 1\n            if count_ones > max_diff:\n                max_diff = count_ones\n        else:\n            count_ones += 1\n            if count_zeros > max_diff:\n                max_diff = count_zeros\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    # Convert the binary string to a list of 0s and 1s\n    binary_list = list(map(int, string))\n\n    # Initialize variables for the length of the binary string and the maximum difference between the number of 0s and number of 1s\n    length = len(binary_list)\n    max_diff = 0\n\n    # Iterate through all possible sub-strings of the binary string\n    for i in range(length):\n        for j in range(i, length):\n            # Calculate the number of 0s and 1s in the sub-string\n            num_0s = sum(1 for x in binary_list[i:j] if x == 0)\n            num_1s = sum(1 for x in binary_list[i:j] if x == 1)\n\n            # Calculate the maximum difference between the number of 0s and number of 1s in the sub-string\n            diff = num_0s - num_1s\n\n            # Update the maximum difference if the current sub-string is longer than the previous maximum difference\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    current_diff = 0\n    n = len(string)\n\n    # Traverse through the string and check for differences in the count of 0s and 1s\n    for i in range(n):\n        if string[i] == '0':\n            current_diff += 1\n        elif string[i] == '1':\n            current_diff -= 1\n        else:\n            raise ValueError('Invalid character in binary string.')\n\n        max_diff = max(max_diff, current_diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count_0 = 0\n            count_1 = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            diff = abs(count0 - count1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    prev_0s = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            prev_0s += 1\n        else:\n            if prev_0s == 0:\n                prev_0s = 1\n            else:\n                max_diff = max(max_diff, prev_0s)\n                prev_0s = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    for i in range(n):\n        if string[i] == '0':\n            dp[i][i] = 0\n        else:\n            dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if string[i] == '0' and string[j] == '1':\n                dp[i][j] = dp[i + 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(1, len(string)):\n        if string[i] == '0':\n            count = 0\n            for j in range(i-1, -1, -1):\n                if string[j] == '0':\n                    count += 1\n                else:\n                    break\n            max_diff = max(max_diff, i-j)\n        elif string[i] == '1':\n            count = 0\n            for j in range(i-1, -1, -1):\n                if string[j] == '1':\n                    count += 1\n                else:\n                    break\n            max_diff = max(max_diff, i-j)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n            else:\n                break\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = set()\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n        i += 1\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_divisors(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns their common divisors.\n    \"\"\"\n    divisors1 = []\n    divisors2 = []\n    for i in range(1, num1 + 1):\n        if num1 % i == 0:\n            divisors1.append(i)\n    for i in range(1, num2 + 1):\n        if num2 % i == 0:\n            divisors2.append(i)\n    common_div = []\n    for i in divisors1:\n        if i in divisors2:\n            common_div.append(i)\n    return common_div\n\n\ndef sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    common_div = common_divisors(a, b)\n    return sum(common_div)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b): \n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisors = [] # To store common divisors\n    \n    # Finding common divisors of a and b using a helper function\n    def find_divisors(num):\n        \"\"\"\n        This function takes a number as input and returns a list of its common divisors.\n        \"\"\"\n        div = []\n        i = 1\n        while i*i <= num:\n            if num % i:\n                i += 1\n            else:\n                num //= i\n                div.append(i)\n        if num > 1:\n            div.append(num)\n        return div\n    \n    # Using the helper function to find common divisors of a and b\n    div_a = find_divisors(a)\n    div_b = find_divisors(b)\n    \n    # Finding common divisors of a and b\n    common_divs = []\n    for num in div_a:\n        if num in div_b:\n            common_divs.append(num)\n    \n    # Calculating the sum of common divisors\n    total_sum = 0\n    for num in common_divs:\n        total_sum += num\n        \n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Calculate the set of divisors of a and b\n    divisors_a = set(get_divisors(a))\n    divisors_b = set(get_divisors(b))\n\n    # Find the intersection of the two sets of divisors\n    common_divisors = divisors_a.intersection(divisors_b)\n\n    # Calculate the sum of common divisors\n    sum_common = sum(common_divisors)\n\n    return sum_common\n\n\ndef get_divisors(n):\n    '''\n    Write a python function to calculate the set of divisors of a given number n.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of their common divisors.\n    If there are no common divisors, it will return 0.\n    '''\n    \n    # Find the set of common divisors\n    common_divisors = set()\n    for num in range(1, max(a, b) + 1):\n        if a % num == 0 and b % num == 0:\n            common_divisors.add(num)\n    \n    # Calculate the sum of common divisors\n    sum_of_common_divisors = 0\n    for num in common_divisors:\n        sum_of_common_divisors += num\n    \n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Finding the GCD of a and b\n    while b:\n        a, b = b, a % b\n\n    # Finding the common divisors of a and b\n    while a!= b:\n        a, b = b, a % b\n\n    return a\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisors_a = common_divisors(a)\n    divisors_b = common_divisors(b)\n    return sum(divisors_a, divisors_b)\n\n\ndef common_divisors(n):\n    \"\"\"\n    This function takes a number as input and returns a list of its common divisors.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n    if n > 1:\n        divisors.append(n)\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        '''\n        Write a python function to find the greatest common divisor of two given numbers.\n        '''\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    \n    def common_divisors(a, b):\n        '''\n        Write a python function to find the common divisors of two given numbers.\n        '''\n        divisors = []\n        for i in range(1, min(a, b)+1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    return sum(common_divisors(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #Function to find the common divisors of two numbers\n    def find_common_divisors(a,b):\n        divisors = []\n        for i in range(1,a+1):\n            if a%i==0 and b%i==0:\n                divisors.append(i)\n        return divisors\n\n    #Finding the common divisors of the two numbers\n    divisors_a = find_common_divisors(a,b)\n    divisors_b = find_common_divisors(b,a)\n\n    #Finding the sum of common divisors\n    sum_divisors = []\n    for i in divisors_a:\n        if i in divisors_b:\n            sum_divisors.append(i)\n\n    #Calculating the sum of common divisors\n    sum_common_divisors = sum(sum_divisors)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_divisor(a, b):\n    '''\n    Calculate the common divisor of two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return None\n    elif a == b:\n        return a\n    else:\n        for i in range(max(a, b), 0, -1):\n            if a % i == 0 and b % i == 0:\n                return i\n\ndef sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div = common_divisor(a, b)\n    return a + b - div * 2"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    for i in range(x):\n        product += y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Find words that are longer than n characters from a given list of words.\n    '''\n    # create an empty list to store the long words\n    long_list = []\n    # loop over each word in the input list\n    for word in words:\n        # check if the length of the word is longer than n\n        if len(word) > n:\n            # add the word to the long list\n            long_list.append(word)\n    # return the long list\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If the word is longer than n, add it to the long_words_list\n            long_words_list.append(word)\n\n    # Return the long_words_list\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes a list of words and a threshold value n and returns a list of words\n    that are longer than n characters.\n    \"\"\"\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list of words\n    for word in words:\n        # If the length of the word is greater than n, append it to the long_words_list\n        if len(word) > n:\n            long_words_list.append(word)\n\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes in a list of words and a value n and returns a list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # check if all elements in the matrix are distinct\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return False\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row1 = my_matrix[i]\n        row2 = [my_matrix[j][i] for j in range(len(my_matrix))]\n        row3 = [my_matrix[i][j] for j in range(len(my_matrix[0]))]\n        if row1!= row2 and row1!= row3 and row2!= row3:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize a counter for the number of rows in the matrix\n    count = 0\n    \n    # Loop through the rows of the matrix\n    for row in my_matrix:\n        # Initialize a counter for the number of elements in each row\n        row_count = 0\n        \n        # Loop through the elements in each row\n        for element in row:\n            # If the element is a duplicate, return False\n            if element in my_matrix:\n                return False\n            \n            # Increment the counter for the number of elements in each row\n            row_count += 1\n            \n            # If the counter for the number of elements in each row equals the number of rows, return True\n            if row_count == count:\n                return True\n        \n        # Increment the counter for the number of rows\n        count += 1\n    \n    # If all elements in the matrix have been used, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n\n    # Check if the matrix is a square\n    if n**2!= sum(sum(row) for row in my_matrix):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        row = my_matrix[i]\n        magic_sum = sum(row[j] for j in range(n))\n        if magic_sum!= i+1:\n            return False\n        if magic_sum!= n-i:\n            return False\n        for j in range(n):\n            if i!= j and magic_sum!= my_matrix[j][i]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # initialize a variable to store the sum of the rows\n    row_sum = 0\n    # iterate through each row of the matrix\n    for row in my_matrix:\n        # iterate through each element in the row\n        for element in row:\n            # add the element to the row_sum variable\n            row_sum += element\n        # reset the row_sum variable to zero for the next row\n        row_sum = 0\n    # if the row_sum variable is equal to the total sum of the matrix, then the matrix is a magic square\n    if row_sum == sum(range(1, len(my_matrix) + 1)):\n        return True\n    # otherwise, the matrix is not a magic square\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # calculate the sum of the diagonal\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # calculate the sum of the rows\n    row_sums = [sum(row) for row in my_matrix]\n\n    # calculate the sum of the columns\n    column_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n\n    # check if the diagonal sum is equal to the row sums and column sums\n    if diagonal_sum == row_sums[0] and row_sums == column_sums:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # calculate the sum of the elements in the matrix\n    sum_of_elements = sum(sum(row) for row in my_matrix)\n    \n    # check if the sum is a perfect square\n    is_perfect_square = (sum_of_elements ** 0.5) ** 2 == sum_of_elements\n    \n    # check if the matrix is a magic square\n    is_magic_square = False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= i + j + 1:\n                is_magic_square = True\n                break\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= (len(my_matrix) - i - j) + 1:\n                is_magic_square = True\n                break\n    \n    # return the results\n    return is_perfect_square and is_magic_square"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is square\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check if all elements in the matrix are different\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if i+j == len(my_matrix[i])-1 or i-j == len(my_matrix)-1:\n                if my_matrix[i][j]!= my_matrix[i][j+1] or my_matrix[i][j]!= my_matrix[i+1][j]:\n                    return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if each element in the matrix is a number between 1 and n\n    n = len(my_matrix)\n    for i in range(n):\n        for j in range(n):\n            if not (1 <= int(my_matrix[i][j]) <= n):\n                return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        # Check if the rows are magic squares\n        for j in range(n-3):\n            sum = int(my_matrix[i][j]) + int(my_matrix[i][j+1]) + int(my_matrix[i][j+2])\n            if not (1 <= sum <= n):\n                return False\n        # Check if the columns are magic squares\n        for j in range(n-3):\n            sum = int(my_matrix[j][i]) + int(my_matrix[j+1][i]) + int(my_matrix[j+2][i])\n            if not (1 <= sum <= n):\n                return False\n        # Check if the main diagonal is magic squares\n        for j in range(n-3):\n            sum = int(my_matrix[j][j]) + int(my_matrix[j+1][j+1]) + int(my_matrix[j+2][j+2])\n            if not (1 <= sum <= n):\n                return False\n        # Check if the anti-diagonal is magic squares\n        for j in range(n-3):\n            sum = int(my_matrix[j][n-j-1]) + int(my_matrix[j+1][n-j-2]) + int(my_matrix[j+2][n-j-3])\n            if not (1 <= sum <= n):\n                return False\n\n    # If all the checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Check if the matrix is a square matrix\n    if n!= len(my_matrix[0]):\n        return \"The matrix is not a square matrix.\"\n\n    # Check if the sum of the rows and columns is equal to n^2\n    row_sum = sum(my_matrix[i] for i in range(n))\n    col_sum = sum(my_matrix[:, j] for j in range(n))\n    if row_sum!= n * (n * n + 1) // 2 or col_sum!= n * (n * n + 1) // 2:\n        return \"The matrix is not a magic square.\"\n\n    # Check if the sum of the 2x2 submatrices is equal to n^2\n    for i in range(n - 1):\n        for j in range(n - 1):\n            sub_sum = my_matrix[i][j] + my_matrix[i][j + 1] + my_matrix[i + 1][j] + my_matrix[i + 1][j + 1]\n            if sub_sum!= n * n:\n                return \"The matrix is not a magic square.\"\n\n    return \"The matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    for i in range(rows):\n        # check rows\n        for j in range(cols):\n            if my_matrix[i][j]!= (i+j+1):\n                return False\n        # check cols\n        for j in range(cols):\n            if my_matrix[j][i]!= (i+j+1):\n                return False\n    # check diagonals\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= (rows*cols - (i+j+1)):\n                return False\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= (i+1):\n                return False\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [item for item, freq in freq.items() if freq == max_freq]\n    return max_items[0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with the maximum frequency.\n    '''\n\n    # Create a dictionary to store the count of each number\n    count_dict = defaultdict(int)\n\n    # Iterate through the list and update the count of each number in the dictionary\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the number with the maximum count in the dictionary\n    max_count = max(count_dict.values())\n\n    # Find the item with the maximum count\n    max_item = max(count_dict, key=count_dict.get)\n\n    # Return the maximum count and the item with the maximum count\n    return max_count, max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Initialize a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    # Iterate through the list of numbers\n    for num in nums:\n        # Increment the frequency of the current item by 1\n        freq_dict[num] += 1\n    # Find the item with the maximum frequency\n    max_item = max(freq_dict, key=freq_dict.get)\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Initialize a dictionary to store the frequency of each item\n    frequency = defaultdict(int)\n\n    # Iterate over each number in the list\n    for num in nums:\n        frequency[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_frequency = 0\n    for item, frequency in frequency.items():\n        if frequency > max_frequency:\n            max_item = item\n            max_frequency = frequency\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Count the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_item = num\n            max_freq = freq[num]\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = max(count.values())\n    max_item = None\n    for item in count:\n        if count[item] == max_count:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count_dict[num] += 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the item with the maximum frequency.\n    \"\"\"\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_freq = max(freq.values())\n    for item in freq:\n        if freq[item] == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_freq_items = [key for key, value in freq_dict.items() if value == max_freq]\n    return max_freq_items[0]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    reverse_str = ''\n    \n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reverse_str += str1[i]\n            vowel_count += 1\n            \n    if vowel_count == 0:\n        return str1\n    else:\n        return reverse_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"AEIOUaeiou\"\n    vowel_indices = []\n    vowel_count = 0\n    for i, char in enumerate(str1):\n        if char.lower() in vowels:\n            vowel_count += 1\n            vowel_indices.append(i)\n    if vowel_count == 0:\n        return str1\n    else:\n        new_str = \"\"\n        for i in range(len(str1)-1, -1, -1):\n            if i in vowel_indices:\n                new_str += str1[i]\n        return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result = str1[i] + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = []\n    result = \"\"\n\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n\n    for i in range(len(vowel_list)):\n        index = vowel_list.index(vowel_list[i])\n        result += str1[len(str1) - 1 - index]\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reverse_vowels = \"\"\n    for char in str1:\n        if char in vowels:\n            reverse_vowels = char + reverse_vowels\n        else:\n            reverse_vowels += char\n    return reverse_vowels[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_count += 1\n    if vowel_count == 0:\n        return str1\n    else:\n        result = ''\n        for i in range(len(str1) - 1, -1, -1):\n            if str1[i].lower() in vowels:\n                result += str1[i]\n        return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = str(tup1)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_tuple = \"\"\n    for i in range(len(tup1)):\n        string_tuple += str(tup1[i]) + \" \"\n    return string_tuple.strip()"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the number to the negative sum\n            neg_sum += num\n    # Return the negative sum\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate over the list of numbers\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the total\n            total += num\n    \n    # Return the total\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n * (n + 1)) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first three hexagonal numbers\n    h1 = 1\n    h2 = 6\n    h3 = 11\n\n    # Loop n-1 times to calculate the nth hexagonal number\n    for i in range(1, n):\n        # Calculate the new hexagonal number\n        h = (h1 + h2 + h3) / 2\n\n        # Update the values for h1, h2, and h3\n        h1 = h2\n        h2 = h3\n        h3 = h\n\n    # Return the nth hexagonal number\n    return h"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    \n    return (2 * n - 1) * (3 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 6*n*(n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n * (2 * n + 1)) // 2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) ** 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first two hexagonal numbers\n    a = 1\n    b = 6\n    \n    # Use the formula to find the nth hexagonal number\n    for i in range(n):\n        a, b = b, a + b\n    \n    # Return the nth hexagonal number\n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hex_helper(x):\n        if x == 0:\n            return 0\n        else:\n            return x + hex_helper(x - 1)\n\n    return hex_helper(n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n * hexagonal_num(n-1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n - 1) * 2 + 1"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the array to a set to remove duplicates\n    unique_nums = set(nums)\n    # count the number of zeroes and non-zeroes\n    zero_count = len(nums) - len(unique_nums)\n    non_zero_count = len(unique_nums)\n    # calculate the ratio of zeroes to non-zeroes\n    zero_to_non_zero_ratio = zero_count / non_zero_count\n    return zero_to_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # create an array to store the count of non-zeroes and zeros\n    count = array('i', [0, 0])\n\n    # iterate through the array and count the non-zeroes and zeros\n    for num in nums:\n        count[num] += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = count[0] / (count[0] + count[1])\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zero_count.itemset(0, zero_count.item(0) + 1)\n    non_zero_count = len(nums) - zero_count.item(0)\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to an array of type 'int'\n    nums_array = array('i', nums)\n\n    # Initialize count of zeros and non-zeros\n    zeros = 0\n    non_zeros = 0\n\n    # Iterate over each element of the array\n    for num in nums_array:\n        # If the element is zero, increment the count of zeros\n        if num == 0:\n            zeros += 1\n        # Otherwise, increment the count of non-zeros\n        else:\n            non_zeros += 1\n\n    # Return the ratio of zeros to non-zeros\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count_zeroes = sum(arr)\n    count_ones = len(arr) - count_zeroes\n    ratio = count_zeroes / count_ones if count_ones!= 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Count the number of non-zeroes and the number of zeroes\n    count_non_zero = 0\n    count_zero = 0\n    for num in nums:\n        if num!= 0:\n            count_non_zero += 1\n        else:\n            count_zero += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = count_zero / count_non_zero\n\n    # Return the ratio\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)  # convert list to array of integers\n\n    non_zeros = sum(arr)  # sum all non-zero integers in the array\n    zero_count = sum(1 for num in arr if num == 0)  # count the number of zeros in the array\n\n    ratio = zero_count / non_zeros\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the input array to an array object to allow sorting and counting\n    arr = array('i', nums)\n    # Sort the array in ascending order\n    arr.sort()\n    # Count the number of non-zero elements\n    non_zero_count = 0\n    # Count the number of zero elements\n    zero_count = 0\n    for i in arr:\n        if i!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    # Calculate the ratio of non-zero to zero elements\n    ratio = non_zero_count / zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes.\n    '''\n    non_zeros = sum(nums)\n    zeroes = len(nums) - non_zeros\n    ratio = zeroes / non_zeros if non_zeros!= 0 else 0\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is a power of 2\n    if n & (n-1) == 0:\n        return True\n    else:\n        # Check if the number is divisible by 2^i where i is the index of the least significant 1 bit in n\n        for i in range(31):\n            if n & (1 << i)!= 0:\n                if (n & (1 << i)) == (1 << i):\n                    # Check if the number can be represented as sum of non-zero powers of 2\n                    for j in range(i+1):\n                        if (n & (1 << j)) == 0:\n                            return False\n                    return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(num):\n        if num == 0:\n            return False\n        elif num == 1:\n            return True\n        else:\n            return num & (num - 1) == 0\n\n    def sum_of_powers_of_two(num):\n        if num == 0:\n            return 0\n        elif is_power_of_two(num):\n            return num\n        else:\n            return num ^ (2 ** (sum_of_powers_of_two(num - 1) + 1))\n\n    if sum_of_powers_of_two(n)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a variable to store the count of 2's in the number\n    count = 0\n    \n    # Loop through each bit of the number\n    while n!= 0:\n        # Check if the current bit is a 1\n        if n & 1:\n            count += 1\n        \n        # Right-shift the number by 1 and set the bit to 0\n        n >>= 1\n        \n    # Check if the count of 2's is equal to the number of bits in the number\n    return count == len(bin(n)[2:])"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 0: \n            count += 1\n            n = n >> 1\n        else: \n            n = n >> 1\n    if count > 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def sum_of_powers_of_two(n):\n        '''\n        Helper function to check for sum of non-zero powers of 2.\n        '''\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n    \n    def is_power_of_two(n):\n        '''\n        Helper function to check if n is a power of 2.\n        '''\n        return n & (n-1) == 0\n    \n    if is_power_of_two(n):\n        return True\n    \n    if n == 0:\n        return True\n    \n    return is_power_of_two(sum_of_powers_of_two(n))"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    \n    max_power = 0\n    while n > 0:\n        max_power += 1\n        n >>= 1\n    \n    for i in range(max_power-1, -1, -1):\n        if (n & (1<<i))!= 0:\n            return False\n            \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check for power of 2\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # create a dictionary to store the number of powers of 2 in the number\n    powers_of_2 = {}\n\n    # loop through the number and count the number of powers of 2\n    for i in range(1, n+1):\n        if n % i == 0 and i in powers_of_2:\n            powers_of_2[i] += 1\n        elif n % i == 0 and i not in powers_of_2:\n            powers_of_2[i] = 1\n\n    # check if the sum of non-zero powers of 2 is equal to the number\n    sum_of_powers = sum(powers_of_2.values())\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function takes an integer as input and returns True if the given number can be represented as sum of non-zero powers of 2 or False otherwise.\n    \"\"\"\n    \n    def is_power_of_two(num):\n        \"\"\"\n        This function takes an integer as input and returns True if the given number is a power of 2 and False otherwise.\n        \"\"\"\n        return num!= 0 and (num & (num - 1)) == 0\n    \n    def get_non_zero_powers_of_two(num):\n        \"\"\"\n        This function takes an integer as input and returns a list of non-zero powers of 2 in the given number.\n        \"\"\"\n        powers = []\n        while num!= 0:\n            if is_power_of_two(num):\n                powers.append(num)\n            num >>= 1\n        return powers\n    \n    def sum_of_non_zero_powers_of_two(num):\n        \"\"\"\n        This function takes an integer as input and returns the sum of non-zero powers of 2 in the given number.\n        \"\"\"\n        non_zero_powers = get_non_zero_powers_of_two(num)\n        return sum(non_zero_powers)\n    \n    def is_power_of_two_sum(num):\n        \"\"\"\n        This function takes an integer as input and returns True if the given number can be represented as sum of non-zero powers of 2 or False otherwise.\n        \"\"\"\n        if sum_of_non_zero_powers_of_two(num) == num:\n            return True\n        else:\n            return False\n    \n    if is_power_of_two_sum(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # approximate circumference\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Calculate the circumference using the formula pi * r^2\n    circumference = 2 * 3.14159 * r\n    # Return the value of circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n\n    Parameters:\n    r (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r  # formula for circumference of a circle"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    numbers = []\n    for sublist in test_list:\n        for num in sublist:\n            numbers.append(num)\n    return set(numbers)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n\n    # Helper function to swap two elements in the list\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to reverse the elements from i to j in the list\n    def reverse(arr, i, j):\n        while i < j:\n            swap(arr, i, j)\n            i += 1\n            j -= 1\n\n    # Helper function to find the maximum element in the list\n    def max_element(arr, i, j):\n        max_i = i\n        max_j = j\n\n        # Find the maximum element in the first sublist\n        for k in range(i, j):\n            if arr[k] > arr[max_i]:\n                max_i = k\n\n        # Find the maximum element in the second sublist\n        for k in range(i, j):\n            if arr[k] > arr[max_j] and k!= max_i:\n                max_j = k\n\n        return max_i, max_j\n\n    # Main function to perform the pancake sort algorithm\n    def sort(arr):\n        n = len(arr)\n\n        # Find the maximum element in each sublist\n        for start in range(n - 1):\n            i, j = max_element(arr, start, n - 1)\n\n            # Swap the maximum element with the first element of the sublist\n            swap(arr, start, i)\n\n            # Reverse the elements from i to j of the sublist\n            reverse(arr, start + 1, j)\n\n            # Reverse the elements from j to the end of the sublist\n            reverse(arr, i, n - 1)\n\n        return arr\n\n    # Call the main function to sort the list\n    sorted_nums = sort(nums)\n\n    # Return the sorted list\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n    \n    # Swap the elements of the first pancake\n    for i in range(n-1, 0, -1):\n        # Find the index of the next largest element in the remaining elements\n        j = 0\n        while j < i and nums[j] >= nums[i]:\n            j += 1\n        # Swap the elements\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    def merge(left, right):\n        result = []\n        while left and right:\n            if left[0] > right[0]:\n                result.append(left.pop(0))\n            else:\n                result.append(right.pop(0))\n        result.extend(left)\n        result.extend(right)\n        return result\n    \n    def merge_sort(nums):\n        if len(nums) <= 1:\n            return nums\n        \n        mid = len(nums) // 2\n        left = nums[:mid]\n        right = nums[mid:]\n        \n        left = merge_sort(left)\n        right = merge_sort(right)\n        \n        return merge(left, right)\n    \n    sorted_nums = merge_sort(nums)\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # Find the maximum element in the first i elements of the list\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the i-th element of the list\n        nums[max_idx], nums[i-1] = nums[i-1], nums[max_idx]\n\n        # Reverse the first i-1 elements of the list\n        for j in range(i-1, 0, -1):\n            nums[j], nums[j-1] = nums[j-1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using Pancake Sort.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Use the bubble sort algorithm to sort the array\n        for j in range(0, i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of numbers using the Pancake Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the element at the end of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Reverse the unsorted part of the list using pancake sort\n        pancake_sort_reverse(nums, i+1, n-1)\n    \n    return nums\n\ndef pancake_sort_reverse(nums, start, end):\n    \"\"\"\n    This function is used to reverse a portion of a list using the Pancake Sort algorithm.\n    \"\"\"\n    if start >= end:\n        return\n    \n    # Find the index of the largest element in the unsorted part of the list\n    max_idx = start\n    for i in range(start+1, end+1):\n        if nums[i] > nums[max_idx]:\n            max_idx = i\n    \n    # Swap the largest element with the element at the start of the unsorted part\n    nums[start], nums[max_idx] = nums[max_idx], nums[start]\n    \n    # Reverse the unsorted part of the list using pancake sort\n    pancake_sort_reverse(nums, start+1, end)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n\n    # Helper function to swap two elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to reverse a portion of the list\n    def reverse(nums, start, end):\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    # Main function\n    def sort(nums):\n        # Initialize the length of the list\n        n = len(nums)\n\n        # Implementing the pancake sort algorithm\n        for i in range(n - 1, 0, -1):\n            # Find the index of the largest element in the unsorted portion of the list\n            max_index = i\n            for j in range(i):\n                if nums[j] > nums[max_index]:\n                    max_index = j\n\n            # Swap the largest element with the first element of the unsorted portion of the list\n            swap(nums, i, max_index)\n\n            # Reverse the unsorted portion of the list to put the largest element at the end\n            reverse(nums, i + 1, n - 1)\n\n        return nums\n\n    # Call the main function\n    return sort(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the pancake sort algorithm.\n    '''\n\n    # Helper function to swap two elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to print the sorted list\n    def print_sorted(nums):\n        print(\"Sorted List: \", end=\"\")\n        for num in nums:\n            print(num, end=\" \")\n\n    # Helper function to get the maximum element in the list\n    def get_max(nums):\n        max_val = nums[0]\n        for num in nums:\n            if num > max_val:\n                max_val = num\n        return max_val\n\n    # Helper function to get the length of the list\n    def get_length(nums):\n        return len(nums)\n\n    # Helper function to reverse the list in place\n    def reverse(nums):\n        left = 0\n        right = get_length(nums) - 1\n        while left < right:\n            swap(nums, left, right)\n            left += 1\n            right -= 1\n\n    # Helper function to pancake sort the list using the given length\n    def pancake_sort_helper(nums, length):\n        max_val = get_max(nums)\n        for i in range(length):\n            max_idx = nums.index(max_val)\n            swap(nums, i, max_idx)\n            max_val = get_max(nums)\n\n    # Main function to sort the list using the pancake sort algorithm\n    def pancake_sort_main(nums):\n        length = get_length(nums)\n        while length > 1:\n            pancake_sort_helper(nums, length)\n            length = get_length(nums)\n\n    # Call the main function with the given list\n    pancake_sort_main(nums)\n\n    # Print the sorted list\n    print_sorted(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n\n    # Traverse through the list and reverse each sub-list\n    for i in range(n):\n        # Find the maximum element in the sub-list starting from i\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n\n    # Define a helper function to swap two elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Define a helper function to reverse a sublist in the list\n    def reverse(nums, start, end):\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    # Iterate over the list using a while loop and the pancake sort algorithm\n    while True:\n        # Find the maximum element in the list\n        max_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # If the maximum element is already at the end of the list, break the loop\n        if max_index == len(nums) - 1:\n            break\n\n        # Reverse the sublist starting from the maximum element up to the end of the list\n        reverse(nums, 0, max_index)\n\n        # Reverse the sublist starting from the end of the list up to the maximum element\n        reverse(nums, max_index, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n    list1: list - List 1\n    list2: list - List 2\n    list3: list - List 3\n\n    Returns:\n    count: int - Number of identical items in the same position of three lists.\n    \"\"\"\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        if list1[i] == list3[i]:\n            count += 1\n        if list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    # Loop through each item in the first list\n    for item1 in list1:\n        # Loop through each item in the second list\n        for item2 in list2:\n            # Check if the current item in the first list is identical to the current item in the second list\n            if item1 == item2:\n                # Loop through each item in the third list\n                for item3 in list3:\n                    # Check if the current item in the first list is identical to the current item in the third list\n                    if item1 == item3:\n                        count += 1\n                        # Break out of the inner loop after finding the first identical item\n                        break\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if isinstance(item, list):\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num = 0\n    for i in Input:\n        if type(i) == list:\n            num += 1\n    return num"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        # loop through the array starting from the next index\n        for j in range(i+1, len(arr)):\n            # calculate the absolute difference between the elements\n            diff = abs(arr[i] - arr[j])\n            # check if the difference is greater than the current max_diff\n            if diff > max_diff:\n                # update the max_diff\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    if len(arr) < 2:\n        return \"Array must have at least two elements\"\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = abs(arr[-1] - arr[0])\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i] - arr[i-1])\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation has two solutions\n    if (b*b - 4*a*n) < 0:\n        return None\n    else:\n        x1 = (-b + math.sqrt(b*b - 4*a*n)) / (2*a)\n        x2 = (-b - math.sqrt(b*b - 4*a*n)) / (2*a)\n        return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # check if the given equation is valid or not\n    if not (a!= 0 or b!= 0):\n        return None\n\n    # check if the given equation has a solution or not\n    if a == 0:\n        return None\n    elif b == 0:\n        return None\n\n    # check if the given equation has a unique solution or not\n    if a!= 0 and b!= 0:\n        x = -n // a\n        y = -n // b\n        if x == y:\n            return None\n\n    # find the unique solution using the Euclidean algorithm\n    d = b**2 - 4*a*n\n    if d >= 0:\n        x1 = (-b + (d**0.5)) // (2*a)\n        x2 = (-b - (d**0.5)) // (2*a)\n        y1 = (-b + (d**0.5)) // (2*a)\n        y2 = (-b - (d**0.5)) // (2*a)\n        if x1 == x2 and y1 == y2:\n            return (x1, y1)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        x = -n // b\n        y = a * x\n        if y == n:\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Initialize variables\n    x, y = 0, 0\n\n    # Iterate until solution is found\n    while x * a + y * b!= n:\n        x += 1\n\n    # Check if solution exists\n    if x * a + y * b == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a and b are zero\n    if a == 0 or b == 0:\n        return None\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*n\n\n    # If the discriminant is non-negative, there exists a solution\n    if disc >= 0:\n        x1 = (-b + disc**0.5) / (2*a)\n        x2 = (-b - disc**0.5) / (2*a)\n\n        return (int(x1), int(x2))\n\n    # If the discriminant is negative, there does not exist a solution\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    # Check if the given equation is solvable\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return (None, -n // b)\n    elif b == 0:\n        return (None, -n // a)\n    else:\n        # Calculate the quadratic formula to find the two solutions\n        delta = n**2 - 4*a*b\n        if delta < 0:\n            return None\n        elif delta == 0:\n            return (-n // (2*a), -n // (2*a))\n        else:\n            return (-n // (2*a) + (delta**0.5) // (2*b), -n // (2*a) - (delta**0.5) // (2*b))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find the discriminant\n    D = b**2 - 4*a*n\n    \n    # check if the discriminant is negative or zero\n    if D < 0:\n        return None\n    \n    # compute the two solutions\n    x1 = (-b + D**0.5) / (2*a)\n    x2 = (-b - D**0.5) / (2*a)\n    \n    # check if the solutions are distinct\n    if x1 == x2:\n        return None\n    \n    # sort the solutions in ascending order\n    x1, x2 = sorted((x1, x2))\n    \n    return x1, x2"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    \n    x1 = (-b + (n // b)) // a\n    x2 = (-b - (n // b)) // a\n    \n    if x1 * a + b * x1 == n:\n        return (x1, x1)\n    elif x2 * a + b * x2 == n:\n        return (x2, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # First, check if the equation is divisible by b\n    if a % b == 0:\n        return None\n\n    # Second, calculate the common divisor of a and b\n    gcd = gcd(a, b)\n\n    # Third, calculate the coefficients of the linear equation\n    x_coefficient = n // gcd\n    y_coefficient = (-a * x_coefficient) // gcd\n\n    # Fourth, check if the equation has a solution for x or y\n    if x_coefficient == 0 or y_coefficient == 0:\n        return None\n\n    # Fifth, calculate the values of x and y\n    x = x_coefficient // b\n    y = (-a * x_coefficient) // b\n\n    # Sixth, check if the equation has a solution for x and y\n    if x == 0 or y == 0:\n        return None\n\n    # Seventh, return the solution as a tuple\n    return (x, y)\n\ndef gcd(a, b):\n    '''\n    Calculate the greatest common divisor of two numbers using the Euclidean algorithm.\n    '''\n\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            x = n // b\n            y = 0\n            return (x, y)\n    else:\n        if b == 0:\n            x = 0\n            y = n // a\n            return (x, y)\n        else:\n            d = gcd(a, b)\n            x = (n // b) * (b // d)\n            y = (n // a) * (a // d)\n            return (x, y)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Check if the lists have the same length\n    if len(list1)!= len(list2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    # Remove elements from list1 present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    \n    # Print the updated list\n    print(\"Updated List:\", list1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Iterate over the first list and remove elements that are present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1\n\n    # Return the modified list\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list that will contain the result of removing elements from list1 present in list2\n    result = [x for x in list1 if x not in list2]\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Copying the first list to another list\n    new_list = list1[:]\n    \n    # Looping through the second list and removing the elements present in the first list\n    for elem in list2:\n        if elem in new_list:\n            new_list.remove(elem)\n    \n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += (n - 2*i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += n - 2 * i\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n//2):\n        total_sum += (n - 2*i)\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return 0\n    total = 0\n    i = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1: # check if n is odd or not\n        n -= 1 # since we are only interested in even terms\n\n    sum_value = 0\n    for i in range(0, n // 2 + 1):\n        sum_value += n - 2*i\n\n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    else:\n        result = 0\n        i = 0\n        while i <= n // 2:\n            result += n - 2 * i\n            i += 1\n        return result"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l + 1)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-1))/2 # Formula for area of a regular polygon\n    print(\"The area of the polygon is:\", area)\n    return area\n\ns = float(input(\"Enter the length of one side of the polygon: \"))\nl = int(input(\"Enter the number of sides of the polygon: \"))\narea_polygon(s, l)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(2 * pi * (i / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += (s / 2) * tan((i * 360) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of the polygon using the formula: A = (1/2)s(l-1)\n    A = (s * (l-1)) / 2\n    # calculate the perimeter of the polygon using the formula: P = 2sl\n    P = 2 * s * l\n    # calculate the area of the parallelogram formed by the base (l) and the angle formed by the sides of the polygon (s)\n    B = s * l * (1 + tan(pi/l)) / 2\n    # calculate the area of the parallelogram formed by the vertex (l) and the angle formed by the sides of the polygon (s)\n    C = (l-1) * s * (1 - tan(pi/l)) / 2\n    # calculate the area of the parallelogram formed by the vertex (l) and the angle formed by the sides of the polygon (s) (again)\n    D = l * s * (1 - tan(pi/l)) / 2\n    # calculate the area of the trapezoid formed by the two vertices (l) and (l-1)\n    T = (l+s) * ((1-tan(pi/l)) ** 2) / 2\n    # calculate the area of the triangle formed by the vertex (l) and the angle formed by the sides of the polygon (s)\n    H = l * (1 - tan(pi/l)) / 2\n    # calculate the area of the triangle formed by the base (l) and the angle formed by the sides of the polygon (s)\n    F = l * (1 + tan(pi/l)) / 2\n    # add all the areas and divide by 2 to get the overall area of the polygon\n    area = (A + B + C + D + T + H + F) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter\n    p = (s / 2) * l\n    \n    # Calculate the area using the formula: A = (s * l) / 2\n    area = (s * l) / 2\n    \n    # Calculate the height of the polygon\n    h = tan(pi / l) * s\n    \n    # Calculate the area of the parallelogram using the formula: A = B * h / 2\n    area_parallelogram = (s * h) / 2\n    \n    # Return the area of the polygon\n    return area, area_parallelogram, h"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using Heron's formula\n    area = 0.5 * s * (s + l * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, n):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(n):\n        area += (tan(pi/n) + tan(2*pi/n) +... + tan(n*pi/n)) * s\n    area *= 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(1, l+1):\n        r = s/tan(i*pi/l)\n        area += r\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Function to calculate divisors of a number\n    def calculate_divisors(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if num//i!= i:\n                    divisors.append(num//i)\n        return divisors\n\n    # Calculating the divisors of two numbers\n    div1 = calculate_divisors(n)\n    div2 = calculate_divisors(n)\n    \n    # Checking if the divisors are the same\n    if div1 == div2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of divisors of n \n    div = sum(set(math.factorize(n))) \n    # Check if the sum of divisors of n and n-1 are the same \n    if div == n*n-n: \n        return True \n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes in an integer and returns True if the sum of the divisors of that number is the same.\n    Otherwise, it returns False.\n    '''\n\n    # First, we calculate the sum of the divisors of n\n    div_sum = sum(set(map(int, str(n))))\n\n    # Then, we calculate the sum of the divisors of the square root of n\n    sqrt_n = int(math.sqrt(n))\n    div_sqrt_n = sum(set(map(int, str(sqrt_n))))\n\n    # Finally, we compare the two sums and return True if they are equal, otherwise False.\n    return div_sum == div_sqrt_n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Function to check if all the digits in a number are equal\n    def are_digits_equal(num):\n        return all(int(digit) == int(digit) for digit in str(num))\n\n    # Function to find the sum of all the divisors of a number\n    def sum_of_divisors(num):\n        div_list = []\n        for i in range(1, num+1):\n            if num % i == 0 and num!= i:\n                div_list.append(i)\n        return sum(div_list)\n\n    # Check if both numbers have equal number of digits\n    if not are_digits_equal(n) or not are_digits_equal(n+1):\n        return \"The numbers should have equal number of digits.\"\n\n    # Check if the sum of the divisors of the two numbers is equal\n    if sum_of_divisors(n) == sum_of_divisors(n+1):\n        return \"The sum of the divisors of the two numbers is equal.\"\n    else:\n        return \"The sum of the divisors of the two numbers is not equal.\""
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # initialize variables \n    div1 = 0\n    div2 = 0\n    div_sum = 0\n\n    # loop through all numbers between 1 and n\n    for i in range(1, n+1):\n        # check if the number is a divisor of n\n        if i == n:\n            div1 += i\n        elif i % n == 0:\n            div2 += i\n            div_sum += i\n\n    # check if the sum of the divisors is the same\n    if div_sum == div1 + div2:\n        print(\"The sum of the divisors is the same.\")\n    else:\n        print(\"The sum of the divisors is not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of divisors of n\n    sum_of_divisors = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Check if sum_of_divisors is equal to n\n    if sum_of_divisors == n:\n        print(\"The sum of the divisors of\", n, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the divisors of n using a loop \n    divisors = [] \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if n//i!= i: \n                divisors.append(n//i) \n\n    # Calculate the sum of the divisors using a loop \n    sum_div = 0 \n    for i in range(len(divisors)): \n        sum_div += divisors[i] \n\n    # Check if the sum of the divisors is the same as n \n    if sum_div == n: \n        print(\"The sum of the divisors of\", n, \"is\", sum_div) \n    else: \n        print(\"The sum of the divisors of\", n, \"is not\", sum_div) "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Calculate the sum of divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if i!= n//i:\n                div_sum += n//i\n\n    # Check if the sum of the divisors of n is the same as n\n    if div_sum == n:\n        print(f\"The sum of the divisors of {n} is the same as {n}.\")\n    else:\n        print(f\"The sum of the divisors of {n} is not the same as {n}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = [i for i in range(1, n+1) if n % i == 0] \n    div2 = [j for j in range(1, n+1) if n % j == 0] \n    return sum(div1) == sum(div2)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Get the sum of the divisors of n \n    div_sum = sum(math.factorial(i) for i in range(1, int(math.sqrt(n))+1))\n    \n    # Check if div_sum is equal to n \n    if div_sum == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if alphabet[i].lower() in str1.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Convert all characters in the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the counts of characters that occur at the same position in the English alphabet\n    char_counts = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is in the English alphabet\n        if char.isalpha():\n            # Get the corresponding English character\n            char_pos = ord(char) - 96\n\n            # If the character has a corresponding position in the English alphabet\n            if 0 <= char_pos < 26:\n                # Add the count of the character to the dictionary\n                if char_pos in char_counts:\n                    char_counts[char_pos] += 1\n                else:\n                    char_counts[char_pos] = 1\n\n    # Return the count of characters that occur at the same position in the English alphabet\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # Convert all characters in the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the position and frequency of each character\n    char_freq = {}\n\n    # Iterate over each character in the input string\n    for char in str1:\n        # If the character is a letter (both uppercase and lowercase), then increment its frequency in the dictionary\n        if char.isalpha():\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n\n    # Initialize a counter variable to keep track of the number of characters that occur at the same position in the English alphabet\n    count = 0\n\n    # Iterate over each character in the English alphabet\n    for char in \"abcdefghijklmnopqrstuvwxyz\":\n        # If the character is present in the dictionary, then increment the counter variable\n        if char in char_freq:\n            count += char_freq[char]\n\n    # Return the final count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the string\n    count_dict = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is an English alphabet, add its position to the count dictionary\n        if char.isalpha():\n            char_pos = ord(char) - ord('a')\n            count_dict[char_pos] = count_dict.get(char_pos, 0) + 1\n\n    # Return the count of characters at each position in the string\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].upper() == chr(ord('A') + i).upper():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize the count variable to 0\n    count = 0\n\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char.isalpha():\n            # Get the index of the character in the English alphabet\n            index = ord(char) - ord('a')\n\n            # Check if the index is already a key in the dictionary\n            if index in counts:\n                # Increment the count by the value of the key in the dictionary\n                count += counts[index]\n            else:\n                # Add the character to the dictionary with a value of 1\n                counts[index] = 1\n\n    # Return the count\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # create a dictionary to store the count of characters at each position\n    char_count = {}\n\n    # loop through each character in the string\n    for i in range(26):\n        # add the count of the character to the dictionary\n        char_count[chr(i+97)] = str1.count(chr(i+97))\n\n    # return the dictionary containing the count of characters at each position\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the position of each character in the English alphabet\n    position_dict = {}\n    for i in range(26):\n        position_dict[chr(ord('a')+i)] = i\n\n    # count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for char in str1:\n        if char.lower() in position_dict:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # convert both strings to lowercase\n    str1 = str1.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # count occurrences of each character in alphabet\n    char_count = [0] * 26\n    \n    for char in str1:\n        if char in alphabet:\n            index = alphabet.index(char)\n            char_count[index] += 1\n    \n    # print the result\n    for index, count in enumerate(char_count):\n        if count > 0:\n            print(alphabet[index], count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    count = {}\n    # Iterate through each character in the string\n    for i in range(26):\n        # If the character is a letter and it is not already in the dictionary, add it with a count of 1\n        if 'a' + chr(i) in str1 and str1.count('a' + chr(i)) == 1 and 'a' + chr(i) not in count:\n            count['a' + chr(i)] = 1\n    # Return the count of characters at each position in the alphabet\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pair_count += 1\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] % 2 == 0!= A[j] % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1 \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is already a power of 2\n    if n & (n - 1) == 0: \n        return n\n    \n    # set the binary representation of n\n    binary = bin(n)[2:]\n    \n    # iterate through the binary representation and set each bit to 1\n    for i in range(len(binary)): \n        binary[i] = 1\n        \n    # convert the binary representation back to an integer and return it\n    return int('0b' + ''.join(binary), 2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is a power of 2\n    if n & (n - 1) == 0:\n        # n is a power of 2\n        return n\n    else:\n        # find the next power of 2\n        power = 1\n        while power < n:\n            power <<= 1\n        return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        i = 1\n        while i <= n:\n            if i == n:\n                return i << 1\n            elif i < n:\n                i <<= 1\n        return 1  # This should never happen"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the power of 2 as 1\n    power_of_2 = 1\n    \n    # Loop through the power of 2 until it is greater than or equal to n\n    while power_of_2 < n:\n        # Increment the power of 2 by 1\n        power_of_2 = power_of_2 * 2\n        \n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Initialize the variable to store the power of 2\n    power_of_2 = 1\n\n    # While the power of 2 is less than or equal to n\n    while power_of_2 <= n:\n        # Increment the power of 2 by 1\n        power_of_2 <<= 1\n\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**(n.bit_length() + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n\n    # Loop through all the numbers up to n\n    while power_of_2 < n:\n        power_of_2 *= 2\n\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize the power of 2 to check\n    power = 1\n    \n    # loop until the power of 2 is greater than n\n    while power <= n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        while n > 1:\n            n >>= 1\n        return 2 << n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list of numbers `a` and a number `x` and returns the number of occurrences of `x` in `a`.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid input!\"\n    else:\n        sum_range = sum(list1[m:n+1])\n        return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the indices are within the range of the list\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        return \"Invalid indices\"\n\n    # Calculate the sum of the numbers in the specified range\n    total = sum(list1[m:n+1])\n\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_val = 0\n    for i in range(m, n+1):\n        sum_val += list1[i]\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_val = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_val += i\n    return sum_val"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    s = (5 * a) / 4\n\n    # Calculate the area of the pentagon\n    area = (5 * (s * s)) / 2\n\n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * s\n\n    # Return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of the diagonal of the pentagon\n    diagonal = 5 * a\n    # calculate the number of sides of the pentagon\n    sides = 5\n    # calculate the perimeter of the pentagon\n    perimeter = diagonal * sides\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    \"\"\"\n    This function counts the number of occurrences of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char =='s' or char == 't' or char == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    std_index = s.find('std')\n    while std_index!= -1:\n        count += 1\n        std_index = s.find('std', std_index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n        elif char == 't':\n            count += 1\n        elif char == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Find the first element of the tuple\n    first_element = test_tuple[0]\n    # Iterate over all the elements of the tuple\n    for element in test_tuple:\n        # Check if the element is of the same data type or not\n        if not isinstance(element, type(first_element)):\n            return False\n    # If all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a list to store the data types of the tuple elements\n    data_types = []\n    # loop through each element in the tuple\n    for element in test_tuple:\n        # check if the element is of any data type other than the first element\n        if isinstance(element, type(test_tuple[0])):\n            # if the element is of the same data type as the first element, add it to the list\n            data_types.append(type(element))\n        else:\n            # if the element is of a different data type, return False\n            return False\n    # if all elements have the same data type, return True\n    return len(set(data_types)) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if data_type!= type(test_tuple[i]):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the type of the first element in the tuple\n    first_elem_type = type(test_tuple[0])\n    # iterate over the remaining elements in the tuple\n    for elem in test_tuple[1:]:\n        # check if the type of the current element is same as the type of the first element\n        if type(elem)!= first_elem_type:\n            return False\n    # if the loop completes without returning False, all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    # get the data type of the first element in the tuple\n    first_element = type(test_tuple[0])\n    \n    # loop through all the elements in the tuple\n    for element in test_tuple:\n        # check if the data type of the current element is the same as the first element\n        if type(element)!= first_element:\n            # if not, return False\n            return False\n    \n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = []\n    for element in test_tuple:\n        types.append(type(element))\n    if len(set(types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize an empty list to store data types\n    data_types = []\n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # Check if the element data type is already in the list\n        if element.__class__ not in data_types:\n            # Add the element data type to the list\n            data_types.append(element.__class__)\n    # Check if all elements have the same data type\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Calculate the count of each element\n    counts = [0] * n\n    \n    # Loop over the array and increment the count for each element\n    for i in range(n):\n        counts[arr[i]] += 1\n    \n    # Check if the count for x is greater than n/2\n    if counts[x] > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count == n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count == n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    while n:\n        n &= n - 1 # clear the least significant set bit\n        count += 1\n    \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1 \n        n = n // 2 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes a positive integer as input and returns the number of set bits in it.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n\n    count = 0\n\n    # Traverse through each digit of the number\n    while n:\n        # If the digit is set (i.e., its binary representation has a 1), increment the count\n        if n & 1:\n            count += 1\n\n        # Shift the number to the right by 1 bit\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n\n    # Remove odd index values\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    # create a list of characters from the given string\n    chars = list(str)\n\n    # loop through the characters and create a new list with only the odd-indexed characters\n    odd_chars = [chars[i] for i in range(len(chars)) if i % 2!= 0]\n\n    # join the odd-indexed characters back into a string and return it\n    return ''.join(odd_chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # check if the inputs are valid\n    if not (isinstance(a, (int, float)) and \n            isinstance(b, (int, float)) and \n            isinstance(c, (int, float))):\n        return \"Inputs must be numbers.\"\n    # check if the inputs are positive or zero\n    if a <= 0 or b <= 0 or c <= 0:\n        return \"Inputs must be positive or zero.\"\n    # find the minimum of the three numbers\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n).count('1')!= 32:  # Counting unset bits\n            return False  # If any bit is set, function returns False\n        n &= ~(1 << i)  # Clearing the i-th bit of n\n\n    return True  # If all bits are unset in the given range, function returns True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the bitwise AND of all bits from l to r inclusive\n    mask = (1 << (r-l+1)) - 1\n\n    # Check if the bitwise AND of n with the mask is equal to 0\n    if (n & mask) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Iterate through each bit in the integer n\n    for i in range(32):\n        # If the current bit is set in n, increment the count variable\n        if n & (1 << i):\n            count += 1\n        # If the current bit is set in the range [l,r], decrement the count variable\n        elif l <= (n & (1 << i)) <= r:\n            count -= 1\n        # If the current bit is set outside the range [l,r], do nothing\n    # Return whether all the bits are unset in the given range or not\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range to binary\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n    # Get the number of bits in the binary range\n    n_bits = len(binary_r) - len(binary_l)\n    # Check if all bits are set\n    if bin(n)[2:].count('1') == n_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a variable to store the result of the function\n    result = True\n    # iterate over the range between l and r\n    for i in range(l, r+1):\n        # check if the i-th bit is set or unset in the number n\n        if (n & (1 << i)):\n            # if it is set, return False\n            return False\n    # if the function reaches here, all bits are unset in the range\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Get the number of set bits in the given range\n    num_set_bits = sum([int(i) << j for i in bin(n)[2:] for j in range(l, r+1)])\n\n    # If the number of set bits is equal to zero, then all the bits are set in the given range.\n    if num_set_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    # Initialize a variable to store the count of set bits in the range\n    count = 0\n\n    # Iterate through the bits of n from right to left\n    while n!= 0:\n        # Check if the current bit is set\n        if n & 1:\n            # Increment the count if the bit is set\n            count += 1\n\n        # Shift n one bit to the left\n        n >>= 1\n\n    # Check if all the bits in the given range are set\n    if count == r - l + 1:\n        # Return True\n        return True\n    else:\n        # Return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while l <= r:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n        l += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = 0\n    for i in range(l, r+1):\n        mask |= (1 << i)\n    for i in range(l, r+1):\n        if (mask & (1 << i))!= (1 << i):\n            return False\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Find the number of negative and positive elements in the array\n    neg_count = 0\n    pos_count = 0\n\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # Initialize the index variables\n    neg_index = 0\n    pos_index = n\n\n    # Move all negative elements to the beginning of the array\n    while neg_index < n:\n        arr[neg_index] = -arr[neg_index]\n        neg_index += 1\n\n    # Move all positive elements to the end of the array\n    while pos_index < len(arr):\n        arr[pos_index] = -arr[pos_index]\n        pos_index += 1\n\n    # Rearrange the remaining elements\n    for i in range(neg_count):\n        if i < neg_count // 2:\n            arr[n - 1 - i] = -arr[n - 1 - i]\n        else:\n            arr[n - 1 - i] = arr[n - 1 - i - neg_count // 2]\n\n    for i in range(pos_count):\n        if i < pos_count // 2:\n            arr[i] = -arr[i]\n        else:\n            arr[i] = arr[i - pos_count // 2]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # First, count the number of negative and positive elements in the array\n    neg_count = sum(1 for x in arr if x < 0)\n    pos_count = len(arr) - neg_count - n\n    # Then, re-arrange the array according to the desired order\n    neg_start = 0\n    for i in range(neg_count):\n        arr[neg_start + i], arr[neg_start + n + i] = arr[neg_start + n + i], arr[neg_start + i]\n    for i in range(n):\n        arr[neg_count + i], arr[neg_count + n + i] = arr[neg_count + n + i], arr[neg_count + i]\n    for i in range(neg_count):\n        arr[neg_count + n + n + i], arr[neg_start + n + i] = arr[neg_start + n + i], arr[neg_count + n + n + i]\n    # Finally, adjust the array indices for the remaining elements\n    for i in range(pos_count):\n        arr[neg_count + n + n + i] += n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negative_count = 0\n    positive_count = 0\n    negative_end = -1\n\n    # Count the number of negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            negative_count += 1\n            negative_end = i\n        elif arr[i] > 0:\n            positive_count += 1\n\n    # Move negative elements to the beginning of the array\n    for i in range(negative_count):\n        arr[negative_end-negative_count+i], arr[negative_end-negative_count+i+1] = arr[negative_end-negative_count+i+1], arr[negative_end-negative_count+i]\n\n    # Move positive elements to the end of the array\n    for i in range(positive_count):\n        arr[negative_end-negative_count+i+negative_count], arr[negative_end-negative_count+i+negative_count+1] = arr[negative_end-negative_count+i+negative_count+1], arr[negative_end-negative_count+i+negative_count]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg_arr = []\n    pos_arr = []\n\n    # Separating the array into negative and positive arrays\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    # Sorting the negative array in ascending order\n    neg_arr.sort()\n\n    # Combining the negative and positive arrays in a new array and re-arranging\n    arr = neg_arr + pos_arr\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos_arr = []\n    neg_arr = []\n    \n    for i in arr:\n        if i >= 0:\n            pos_arr.append(i)\n        else:\n            neg_arr.append(i)\n            \n    pos_arr = sorted(pos_arr)\n    neg_arr = sorted(neg_arr, reverse=True)\n    \n    for i in range(n):\n        if i < n-len(neg_arr):\n            arr[i] = neg_arr[i]\n        elif i == n-len(neg_arr):\n            arr[i] = pos_arr[0]\n            pos_arr.pop(0)\n        else:\n            arr[i] = neg_arr[-1]\n            neg_arr.pop(-1)\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Helper function to swap two elements in the given array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    # Helper function to check if a number is negative or not\n    def is_negative(num):\n        return num < 0\n    \n    # Helper function to sort the given array in ascending order\n    def sort_array(arr):\n        arr.sort()\n    \n    # Initialize two pointers i and j for iterating over the array\n    i = 0\n    j = n - 1\n    \n    # Iterate over the array and swap negative elements with positive ones until all negative elements have been moved to the beginning of the array\n    while i < j:\n        if is_negative(arr[i]):\n            # Swap negative and positive elements\n            swap(arr, i, j)\n            j -= 1\n        else:\n            i += 1\n    \n    # Sort the array after all negative elements have been moved to the beginning of the array\n    sort_array(arr[n:])\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n and re-arranges the first n elements of the given array\n    so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    pos_indices = []\n    neg_indices = []\n\n    # Find the indices of all positive and negative elements\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos_indices.append(i)\n        else:\n            neg_indices.append(i)\n\n    # Rearrange the indices based on the absolute values of the elements\n    pos_indices.sort(reverse=True)\n    neg_indices.sort()\n\n    # Combine the positive and negative indices into a single list\n    combined_indices = pos_indices + neg_indices\n\n    # Re-arrange the array based on the combined indices\n    rearranged_arr = [arr[i] for i in combined_indices]\n\n    return rearranged_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n    Args:\n    arr: The array to be re-arranged.\n    n: The number of elements to be re-arranged.\n\n    Returns:\n    The re-arranged array.\n    \"\"\"\n\n    # Initialize three variables to keep track of the negative, zero, and positive elements\n    neg = 0\n    zero = 0\n    pos = 0\n\n    # Iterate through the array and update the counts of negative, zero, and positive elements\n    for num in arr:\n        if num < 0:\n            neg += 1\n        elif num == 0:\n            zero += 1\n        else:\n            pos += 1\n\n    # Create a new array with the same number of elements as the original array\n    new_arr = [0] * n\n\n    # Re-arrange the elements of the array based on the counts of negative, zero, and positive elements\n    for num in arr:\n        if num < 0:\n            new_arr[neg] = num\n            neg += 1\n        elif num == 0:\n            new_arr[zero] = num\n            zero += 1\n        else:\n            new_arr[pos] = num\n            pos += 1\n\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # find the index of the first negative element\n    neg_index = None\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index = i\n            break\n    # if there are no negative elements, return the original array\n    if neg_index is None:\n        return arr\n    # swap the negative elements with the first n elements\n    for i in range(neg_index, n):\n        arr[i], arr[neg_index] = arr[neg_index], arr[i]\n    # sort the remaining elements in non-descending order\n    arr[neg_index:] = sorted(arr[neg_index:], reverse=True)\n    # return the reordered array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize variables to keep track of indices of negative and positive elements\n    neg_ind = 0\n    pos_ind = n - 1\n    \n    # loop through the array\n    for i in range(n):\n        \n        # if the current element is negative, increment the index of negative elements\n        if arr[i] < 0:\n            neg_ind += 1\n            \n            # if the current element is negative and there are still elements left in the array, swap the two elements\n            if neg_ind!= i:\n                arr[i], arr[neg_ind] = arr[neg_ind], arr[i]\n        \n        # if the current element is positive, decrement the index of positive elements\n        else:\n            pos_ind -= 1\n            \n            # if the current element is positive and there are still elements left in the array, swap the two elements\n            if pos_ind!= i:\n                arr[i], arr[pos_ind] = arr[pos_ind], arr[i]\n    \n    # return the modified array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    # Replace all blank spaces in the string with the character\n    new_str = str1.replace(\" \", char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    # convert the string to a list of characters\n    lst = list(str1)\n    # loop through each character in the list\n    for i in range(len(lst)):\n        if lst[i] =='':\n            lst[i] = char\n    # convert the list back to a string\n    return ''.join(lst)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Use replace() method to replace blank spaces with the character\n    str2 = str1.replace(' ', char)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \",\"\")\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    # replace all occurrences of blank spaces with the character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a max heap to keep track of the largest n items\n    max_heap = []\n    for item in list1:\n        # If the heap is full, remove the smallest item\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        # Otherwise, add the item to the heap\n        else:\n            if item > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, item)\n    # Return the largest n items from the heap\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert list to heap\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    \n    # pop elements from heap until heap is of size n\n    while len(heap) > n:\n        heapq.heappop(heap)\n    \n    # convert heap back to list and return\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in reverse order\n    list1.sort(reverse=True)\n    \n    # Return the first n largest items\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min-heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # extract the n largest items from the list\n    for i in range(n, len(list1)):\n        # check if the current item is larger than the smallest item in the heap\n        if list1[i] > heap[0]:\n            # if it is, replace the smallest item in the heap with the current item\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    \n    # return the largest n items from the heap\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    # Create a min heap of size n\n    min_heap = []\n    for _ in range(n):\n        heapq.heappush(min_heap, -heapq.heappushpop(min_heap))\n\n    # Use a while loop to extract n largest elements from the list\n    while len(min_heap) < len(list1):\n        # Pop the smallest element from the list and add it to the min heap\n        element = heapq.heappop(list1)\n        heapq.heappush(min_heap, -heapq.heappushpop(min_heap))\n\n    # Return the min heap as the result\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1.pop(0))\n    for i in range(len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*3.14159*(r**2)+(2*r*h)+(h**2)\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2)+(2*r*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return math.pi * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder using the formula:\n    lateral surface area = pi * r^2 * h\n    \n    Args:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    import math\n    \n    # Calculate lateral surface area using the given formula\n    lateral_surface_area = math.pi * r**2 * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    \n    Args:\n    r (float): the radius of the cylinder.\n    h (float): the height of the cylinder.\n    \n    Returns:\n    float: the lateral surface area of the cylinder.\n    \n    Example:\n    lateralsuface_cylinder(2.0, 5.0)\n    Output: 116.0\n    '''\n    \n    lateral_surface_area = 2 * 3.14159 * r * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*r**2 #calculating area using formula for a circle\n    lateral_surface = area*h #calculating lateral surface area using formula for a cylinder\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = math.pi*r**2*h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h  # Return the lateral surface area of the cylinder"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3  # formula for cube volume\n    print(\"The volume of a cube with side length\", l, \"is\", v)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(len(bin(n)) - 2): \n        if bin(n)[i:i+2] == '00': \n            bin(n)[i:i+2] = '10' \n    return int(bin(n), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a counter variable to keep track of how many even bits we have set\n    even_count = 0\n    \n    # Loop through each bit in the given number\n    while n > 0:\n        # Check if the current bit is even\n        if n % 2 == 0:\n            # If it is, set the corresponding bit in the result\n            n = n & ~(1 << even_count)\n        # Increment the counter for the even bits\n        even_count += 1\n        # Move on to the next bit in the number\n        n = n >> 1\n    \n    # Return the result\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n\n    # Iterate through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append 1 to the result string\n        if int(bit) % 2 == 0:\n            result += '1'\n        # If the bit is odd, append 0 to the result string\n        else:\n            result += '0'\n\n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a new number to store the result\n    result = 0\n    # Iterate through each bit in the input number\n    for i in range(32):\n        # If the i-th bit of the input number is even, set the corresponding bit in the result to 1\n        if n & (1 << i)!= 0:\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n\n    # Loop through each bit of n\n    for bit in bin(n)[2:]:\n        # If the bit is even (i.e. if it has a \"0\" as the second digit), append it to the list\n        if bit == \"00\":\n            even_bits.append(int(bit))\n\n    # Set all even bits to 1\n    n = 0\n    for bit in even_bits:\n        n = n | (1 << bit)\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n\n    # loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # if the current bit is even, set the corresponding bit in the result variable to 1\n        if int(bit) % 2 == 0:\n            result |= (1 << int(bit))\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # initialize a variable to store the result\n    result = 0\n\n    # loop through each bit in the number\n    for i in range(32):\n\n        # check if the bit is an even bit\n        if (n >> i) & 1 == 0:\n\n            # set the even bit to 1\n            result |= (1 << i)\n\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary string\n    binary = bin(n)[2:]\n    # Initialize an empty string to store the even bits\n    even_bits = ''\n    # Loop through each bit of the binary string\n    for bit in binary:\n        # If the bit is an even number (i.e., 0 or 2), set it to 1 and append it to the even_bits string\n        if int(bit) % 2 == 0:\n            even_bits += '1'\n        # If the bit is an odd number (i.e., 1 or 3), leave it as it is and append it to the even_bits string\n        else:\n            even_bits += bit\n    # Convert the even_bits string to an integer and return it\n    return int(even_bits, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the given number\n    for i in range(32):\n        # If the current bit is even, set it to 1\n        if (n & (1 << i))!= 0:\n            result |= (1 << i)\n            \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the result\n    result = 0\n    \n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, set it to 1\n        if int(bit) % 2 == 0:\n            result |= int(bit)\n            \n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    # Return the dictionary of count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to eliminate duplicates\n    unique_tuples = set(test_list)\n    # Use the Counter() class from the collections module to count the occurrences of each unique tuple\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Loop through the test list and update the count of each unique tuple in the dictionary\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n            \n    # Return the dictionary of count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a Counter object from the test_list\n    counter = Counter(test_list)\n    \n    # Create an empty dictionary to store the results\n    result = {}\n    \n    # Iterate over the Counter object and add each unique tuple to the result dictionary with its count\n    for key, value in counter.items():\n        result[key] = value\n    \n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each tuple\n    counts = Counter(test_list)\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Return a dictionary mapping each unique tuple to the number of times it occurs in the list\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    substrings = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the number of non-empty substrings.\n    '''\n\n    count = 0\n\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as input and returns the number of non-empty substrings of the string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(s):\n    # Initialize the count to 0\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Loop through each character in the substring starting from the current position\n        for j in range(i+1, len(s)+1):\n            # Add 1 to the count for each non-empty substring\n            if s[i:j]!= '':\n                count += 1\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    substrings = []\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substrings.append(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)+1): \n            if j-i > 1: \n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n:\n        return 0\n    \n    # Initialize the first row and column\n    row = [1] * (m+1)\n    col = [1] * (n+1)\n    \n    # Fill the rest of the rows and columns\n    for i in range(2, m+1):\n        for j in range(2, n+1):\n            if i <= 2*j <= m:\n                row[i] += col[j]\n            if j <= 2*i <= n:\n                col[j] += row[i]\n    \n    # Return the final row and column\n    return row[m], col[n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(s):\n        total = 0\n        for i in range(len(s)):\n            for j in range(i+1, min(len(s), i+n+1)):\n                if s[i] < s[j] <= s[j+1] <= s[i+1]:\n                    total += 1\n        return total\n\n    def is_valid(s):\n        for i in range(len(s)-1):\n            if s[i] >= s[i+1] * 2:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, m+1):\n        if is_valid([i]):\n            count += helper([i])\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(m, n):\n        if i >= 2 * m and i <= m:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(m, n+1):\n        if i >= 2*count and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(m):\n        for j in range(n):\n            total += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n, and returns the total number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    For example, if m = 10 and n = 4, then the function should return 11.\n    \"\"\"\n    # Initialize a variable to store the total number of sequences\n    total_sequences = 0\n\n    # Iterate through all possible sequences of length n\n    for i in range(n, m + 1):\n        # Check if each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m\n        if all(isinstance(x, int) and 0 < x <= m for x in range(2, i)):\n            # If the sequence is valid, increment the total number of sequences by 1\n            total_sequences += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(1, m):\n        for j in range(2, n+1):\n            if i >= 2*j and i <= m:\n                total_sequences += 1\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            if j <= m / 2 and j >= 2 * i:\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    current_sequence = [2]\n\n    for i in range(n):\n        for j in range(len(current_sequence)):\n            if current_sequence[j] < m and current_sequence[j] >= (2 * current_sequence[j - 1]):\n                current_sequence.append(current_sequence[j] + 1)\n\n        total_sequences += len(current_sequence)\n        current_sequence = [2]\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    # Initialize a list to store the count of all possible sequences of length n\n    sequence_count = [0] * (n+1) \n    sequence_count[0] = 1 # Base case: empty sequence is always possible\n\n    # Iterate through all possible sequences of length n-1\n    for i in range(1,m): \n        # Iterate through all possible sequences of length n-2\n        for j in range(i+2,m+1): \n            # Check if current sequence is valid\n            if j <= 2*i: \n                continue # Current element is less than or equal to twice the previous element, which is not valid\n            if j > m: \n                break # If current element is greater than m, the sequence is not valid\n            sequence_count[j] += sequence_count[i] # Count valid sequences as valid sequences of length n\n\n    return sequence_count[n] # Return the count of all possible sequences of length n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1.pop()\n    list1.extend(list2)\n    list1.append(last_element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    len1 = len(list1)\n    # Get the length of the second list\n    len2 = len(list2)\n    # Replace the last element of the first list with the elements of the second list\n    for i in range(len1-1, -1, -1):\n        list1[i] = list2[0]\n        # Remove the first element of the second list\n        list2.pop(0)\n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the lists\n    n1 = len(list1)\n    n2 = len(list2)\n    \n    # Check if the first list has enough elements to replace the last element\n    if n1 < n2:\n        print(\"The first list has not enough elements to replace the last element.\")\n        return\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    \n    # Print the updated list\n    print(\"Updated list:\", list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    print(\"The modified list is:\", list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for char in str1:\n        total_charac += 1\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n\n    Args:\n    str1 (str): The input string.\n\n    Returns:\n    int: The total number of characters in the input string.\n    \"\"\"\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def isPerfectSquare(num):\n        \"\"\"\n        Helper function to check if a number is a perfect square.\n        \"\"\"\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num * sqrt_num == num\n\n    def next_square(num):\n        \"\"\"\n        Helper function to find the next perfect square greater than a given number.\n        \"\"\"\n        sqrt_num = int(math.sqrt(num))\n        while True:\n            if sqrt_num * sqrt_num == num:\n                if sqrt_num * sqrt_num == N + 1:\n                    return sqrt_num * sqrt_num\n                sqrt_num += 1\n            else:\n                return sqrt_num * sqrt_num\n\n    def next_square_greater_than_N(N):\n        \"\"\"\n        Main function to find the next perfect square greater than a given number N.\n        \"\"\"\n        num = N + 1\n        while True:\n            if isPerfectSquare(num):\n                return next_square(num)\n            num += 1\n\n    return next_square_greater_than_N(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a Python function to find the next perfect square greater than a given number.\n\n    Args:\n    N (int): Given number\n\n    Returns:\n    int: Next perfect square greater than N\n    \"\"\"\n\n    def is_perfect_square(num):\n        \"\"\"\n        Check if a number is a perfect square.\n\n        Args:\n        num (int): Number to be checked\n\n        Returns:\n        bool: True if the number is a perfect square, False otherwise\n        \"\"\"\n        root = int(math.sqrt(num))\n        return root*root == num\n\n    def next_square(num):\n        \"\"\"\n        Find the next perfect square greater than a given number.\n\n        Args:\n        num (int): Given number\n\n        Returns:\n        int: Next perfect square greater than N\n        \"\"\"\n        if num < 0:\n            return 0\n        elif num == 1:\n            return 2\n        elif num == 2:\n            return 4\n        elif num == 3:\n            return 9\n        elif num == 4:\n            return 16\n        elif num == 5:\n            return 25\n        elif num == 6:\n            return 36\n        elif num == 7:\n            return 49\n        elif num == 8:\n            return 64\n        elif num == 9:\n            return 81\n        elif num == 10:\n            return 100\n        elif num == 11:\n            return 121\n        elif num == 12:\n            return 144\n        elif num == 13:\n            return 169\n        elif num == 14:\n            return 196\n        elif num == 15:\n            return 225\n        elif num == 16:\n            return 256\n        elif num == 17:\n            return 289\n        elif num == 18:\n            return 324\n        elif num == 19:\n            return 361\n        elif num == 20:\n            return 400\n        elif num == 21:\n            return 441\n        elif num == 22:\n            return 484\n        elif num == 23:\n            return 529\n        elif num == 24:\n            return 576\n        elif num == 25:\n            return 625\n        elif num == 26:\n            return 676\n        elif num == 27:\n            return 729\n        elif num == 28:\n            return 784\n        elif num == 29:\n            return 841\n        elif num == 30:\n            return 900\n        elif num == 31:\n            return 961\n        elif num == 32:\n            return 1024\n        elif num == 33:\n            return 1089\n        elif num == 34:\n            return 1156\n        elif num == 35:\n            return 1225\n        elif num == 36:\n            return 1296\n        elif num == 37:\n            return 1369\n        elif num == 38:\n            return 1444\n        elif num == 39:\n            return 1521\n        elif num == 40:\n            return 1600\n        elif num == 41:\n            return 1681\n        elif num == 42:\n            return 1764\n        elif num == 43:\n            return 1849\n        elif num == 44:\n            return 1936\n        elif num == 45:\n            return 2025\n        elif num == 46:\n            return 2116\n        elif num == 47:\n            return 2209\n        elif num == 48:\n            return 2304\n        elif num == 49:\n            return 2401\n        elif num == 50:\n            return 2500\n        elif num == 51:\n            return 2601\n        elif num == 52:\n            return 2704\n        elif num == 53:\n            return 2809\n        elif num == 54:\n            return 2916\n        elif num == 55:\n            return 3025\n        elif num == 56:\n            return 3136\n        elif num == 57:\n            return 3249\n        elif num == 58:\n            return 33"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Initialize variables\n    x = N\n    y = math.ceil(N/2)\n    is_square = False\n    \n    # Check if the given number is a perfect square\n    while not is_square:\n        x = y*y\n        if x == N:\n            is_square = True\n        elif x > N:\n            y = x\n    \n    # Check if the next perfect square is greater than the given number\n    while y*y <= N:\n        x = y*y\n        if x > N:\n            return y\n        y += 1\n    \n    # If no perfect square is found, return None\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # find the square root of N using math.sqrt()\n    sqrt_N = math.sqrt(N)\n\n    # add 1 to the square root to find the next perfect square\n    next_sqrt = sqrt_N + 1\n\n    # if the square root is an integer, find the next perfect square by adding 1 to the integer part\n    if sqrt_N.is_integer():\n        next_sqrt = next_sqrt + 1\n\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N > 0:\n        N = int(math.sqrt(N)) + 1\n    else:\n        N = 1\n    \n    while True:\n        if N**2 > N:\n            return N**2\n        N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function calculates the next perfect square greater than a given number.\n\n    Parameters:\n    N (int): The given number.\n\n    Returns:\n    int: The next perfect square greater than N.\n    \"\"\"\n\n    # Base case: if N is a perfect square, return N + 1\n    if math.isqrt(N) ** 2 == N:\n        return N + 1\n\n    # Find the next odd perfect square greater than or equal to N\n    i = 1\n    while True:\n        i += 1\n        is_perfect_square = math.isqrt(i) ** 2 == i\n        if is_perfect_square:\n            break\n\n    # Calculate the next perfect square greater than N\n    next_square = i + (N - 1) // (i - 1)\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Function to find the next perfect square greater than a given number\n    # Using the Newton's Method\n    \n    # Initialize variables\n    x = N\n    p = 1\n    n = 1\n    \n    # Check if the given number is already a perfect square\n    while p**2 <= x:\n        n += 1\n        p += 1\n    \n    # Calculate the next perfect square using Newton's Method\n    while p**2 <= x:\n        x = x - ((x - p**2) / (2 * p))\n        n += 1\n        p += 1\n    \n    return int(x)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        N += 1\n        sqrt_N = int(math.sqrt(N))\n        if sqrt_N**2 == N:\n            return N\n        else:\n            sqrt_N -= 1\n            N = sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the sqrt of N and round it up to the nearest integer\n    sqrt_N = int(math.ceil(math.sqrt(N)))\n    # initialize variable to keep track of the current square root\n    curr_sqrt = sqrt_N\n    \n    while True:\n        # calculate the next perfect square\n        next_square = curr_sqrt * curr_sqrt\n        \n        # check if the next square is greater than N and less than sqrt(N) + 1\n        if next_square > N and next_square < sqrt_N + 1:\n            return next_square\n        \n        # if not, increment the current square root and try again\n        curr_sqrt += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_square_helper(N):\n        i = 1\n        while i**2 <= N:\n            if is_prime(i**2):\n                return i**2\n            i += 1\n        return None\n\n    def next_prime_square(N):\n        if N <= 0:\n            return None\n        i = N\n        while i >= 1:\n            if is_prime(i):\n                return i\n            i -= 1\n        return None\n\n    def next_perfect_square(N):\n        if N <= 0:\n            return None\n        p = prime_square_helper(N)\n        if p is None:\n            return None\n        if p > N:\n            return p\n        return next_prime_square(p)\n\n    return next_perfect_square(N)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Initialize variables\n    prev = 0\n    curr = 0\n    max_sum = float('-inf')\n\n    # Iterate through array\n    for i in range(n):\n        if i % 2 == 0:\n            curr = arr[i] + prev\n        else:\n            curr = max(arr[i], prev)\n\n        # Update max_sum if curr is greater\n        if curr > max_sum:\n            max_sum = curr\n\n        prev = curr\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    # Initialize variables to store the maximum sum of a subsequence and its starting index\n    max_sum = float('-inf')\n    max_start = 0\n\n    # Iterate through the array and check if the current subsequence is bitonic\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            if arr[i] + arr[i + 1] > arr[max_start]:\n                max_sum = arr[i] + arr[i + 1]\n                max_start = i\n\n    # Return the maximum sum of a subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Find the first increasing subsequence\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] < arr[j-1]:\n            i = j\n            j += 1\n        else:\n            j += 1\n\n    # Find the second increasing subsequence\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] < arr[j-1]:\n            i = j\n            j += 1\n        else:\n            j += 1\n\n    # Calculate the maximum sum of the first and second increasing subsequences\n    max1 = arr[i] + arr[i+1] + arr[i+2]\n    max2 = arr[j] + arr[j+1] + arr[j+2]\n\n    # Check if the third increasing subsequence exists\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] < arr[j-1]:\n            i = j\n            j += 1\n        else:\n            j += 1\n\n    # If the third increasing subsequence exists, calculate the maximum sum of the first, second, and third increasing subsequences\n    if i < j:\n        max3 = arr[i] + arr[i+1] + arr[i+2]\n        max_sum = max(max1, max2, max3)\n    else:\n        max_sum = max(max1, max2)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables for the current and previous sum\n    current_sum = arr[0]\n    previous_sum = 0\n\n    # Loop through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n\n        # Update the maximum sum if the current sum is greater than the previous sum\n        if current_sum > previous_sum:\n            previous_sum = current_sum\n\n    return previous_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # sort the array in non-decreasing order\n    arr.sort()\n    \n    # initialize variables to store the maximum sum of increasing subsequence and the maximum sum of decreasing subsequence\n    max_sum_increasing = max_sum_decreasing = arr[0]\n    \n    # iterate through the array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # if the next element is greater than the previous one, add it to the increasing subsequence\n            max_sum_increasing += arr[i]\n        else:\n            # if the next element is less than or equal to the previous one, add it to the decreasing subsequence\n            max_sum_decreasing += arr[i]\n        \n        # update the maximum sum of the bitonic subsequence\n        max_sum = max(max_sum_increasing, max_sum_decreasing)\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    \n    # Initialize variables for the bitonic subsequence and the maximum sum found so far\n    bitonic_subseq = []\n    max_sum_so_far = float('-inf')\n    \n    # Loop through the array and check if the current element is increasing or decreasing\n    for i in range(len(arr)):\n        if i == 0 or arr[i] <= arr[i-1]:\n            # If the current element is increasing, add it to the bitonic subsequence and update the maximum sum found so far\n            if max_sum_so_far < arr[i]:\n                bitonic_subseq = [arr[i]]\n                max_sum_so_far = arr[i]\n            else:\n                bitonic_subseq.append(arr[i])\n        else:\n            # If the current element is decreasing, remove the smallest element from the bitonic subsequence and update the maximum sum found so far\n            if arr[i] < bitonic_subseq[0]:\n                bitonic_subseq = [arr[i]]\n                max_sum_so_far = arr[i]\n            else:\n                bitonic_subseq.remove(min(bitonic_subseq))\n                max_sum_so_far = max(bitonic_subseq) + arr[i]\n                \n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if not arr:\n        return 0\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] < arr[1]:\n        arr[0], arr[1] = arr[1], arr[0]\n    left_sum = arr[0]\n    right_sum = max(arr[0], arr[1])\n    max_sum = right_sum\n    for i in range(2, n):\n        if arr[i] < arr[i-1]:\n            left_sum += arr[i]\n        else:\n            right_sum += arr[i]\n        temp_sum = max(left_sum, right_sum)\n        max_sum = max(max_sum, temp_sum)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # create a list to store the cumulative sum\n    cum_sum = [0] * n\n    # calculate the cumulative sum of the array\n    for i in range(1, n):\n        cum_sum[i] = cum_sum[i-1] + arr[i-1]\n    # initialize variables to store the maximum sum and the minimum sum\n    max_sum = -float('inf')\n    min_sum = float('inf')\n    # loop through the array and find the maximum and minimum sums\n    for i in range(n):\n        # if the current element is increasing, update the maximum sum\n        if cum_sum[i] > max_sum:\n            max_sum = cum_sum[i]\n        # if the current element is decreasing, update the minimum sum\n        elif cum_sum[i] < min_sum:\n            min_sum = cum_sum[i]\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        return max(arr)\n\n    # Initialize variables\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here += arr[i]\n        else:\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            max_ending_here = arr[i]\n\n    if max_ending_here > max_so_far:\n        max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Helper function to determine if a subarray is bitonic or not\n    def is_bitonic(arr):\n        n = len(arr)\n        return arr[0] < arr[n-1] or arr[0] > arr[1] and arr[1] < arr[n-2]\n    \n    # Initialize variables to keep track of the maximum sum and the last bitonic subsequence\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    # Iterate through the array and update the variables as needed\n    for i in range(1, len(arr)):\n        if is_bitonic(arr[i:]):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n        else:\n            max_ending_here = arr[i]\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    i = 0\n    guess = 1.0\n    while abs(guess*guess - number) >= 0.0000001:\n        i += 1\n        guess = (guess + number/guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initialize variables\n    x0 = 1  # initial guess\n    x1 = 1  # next guess\n    diff = 1  # difference between x0 and x1\n    \n    # loop until difference between x0 and x1 becomes zero\n    while diff > 1e-10:\n        x0 = x1\n        x1 = (x0 + number/x0) / 2  # next guess\n        diff = abs(x1 - x0)\n        \n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    \n    # Initialize two variables: lower and upper bounds for the interval\n    lower = 0\n    upper = number\n    \n    # Initialize a variable to store the square root\n    result = 0\n    \n    # Calculate the number of iterations needed\n    iterations = 0\n    \n    # Start the iteration loop\n    while abs(result**2 - number) > 10**-15 and iterations < 1000:\n        # Calculate the midpoint of the interval\n        midpoint = (lower + upper) / 2\n        \n        # Update the result and bounds for the next iteration\n        result = midpoint\n        if result**2 < number:\n            lower = midpoint\n        else:\n            upper = midpoint\n        iterations += 1\n    \n    # Return the square root if it was found within the maximum number of iterations\n    if iterations < 1000:\n        return result\n    else:\n        return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess * guess - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    # Initial guess for the square root\n    x_0 = number / 2\n\n    # Maximum number of iterations\n    max_iterations = 100\n\n    # Check for convergence\n    for i in range(max_iterations):\n        # Calculate the next approximation\n        x_1 = (x_0 + number / x_0) / 2\n\n        # Check if the difference between the old and new approximations is less than 0.000001\n        if abs(x_1 - x_0) < 0.000001:\n            return x_1\n\n        # Update the current approximation\n        x_0 = x_1\n\n    # If the maximum number of iterations is reached, return None\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = 1\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            break\n        guess = new_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 0.001:\n            return next_guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2  # initial guess\n    epsilon = 0.001  # stopping condition\n    while True:\n        if guess**2 == number:\n            return guess  # found the square root\n        elif guess**2 < number:\n            guess = (guess + number/guess) / 2  # new guess\n        else:\n            guess = (guess + number/guess) / 2  # new guess\n        if abs(guess - number / guess) < epsilon:\n            return guess  # found the square root within the stopping condition"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"The input number must be non-negative\")\n    x = 1.0\n    y = number/x\n    i = 1\n    while abs(y-x) > 0.00001:\n        x = y\n        y = 1.0/(2.0*x*x) + number/(2.0*x*x*x)\n        i += 1\n    return x, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    \n    sqrt = 0\n    x = 1\n    \n    while abs(x**2 - number) > 0.000001:\n        x = (number / x) + x / 2\n        sqrt += 1\n    \n    return sqrt"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(string):\n    # initialize variables\n    max_len = 1\n    start = 0\n\n    # loop through the string\n    for i in range(1, len(string)):\n        # if characters match, check if it is a palindrome\n        if string[i] == string[i - 1]:\n            # if it is, update max_len and start\n            if i + 2 > len(string) or string[i] == string[i + 2]:\n                max_len = i + 1\n                start = i - 1\n\n        # check if current length is greater than max_len\n        if i + 1 > max_len:\n            max_len = i + 1\n            start = i - max_len\n\n    return max_len, start\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store length of longest palindromic subsequence ending at each index\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the base case of dp[i][i] as 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill in the dp table using dynamic programming\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            # If current character and the next character are same, then dp[i][i+1] = dp[i][i] + 2\n            dp[i][i + 1] = dp[i][i] + 2\n        else:\n            # If current character and the next character are different, then dp[i][i+1] = max(dp[i+1][j], dp[j][i+2])\n            dp[i][i + 1] = max(dp[i + 1][j] + 1, dp[j][i + 2] + 1)\n            for j in range(i - 1, -1, -1):\n                if str[j] == str[i + 1]:\n                    dp[i][i + 1] = max(dp[i][i + 1], dp[j + 1][i])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    LPS = [0] * n \n    LPS[0] = 1\n    max_len = 1\n    \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            LPS[i] = LPS[i-1] + 2\n            if LPS[i] > max_len: \n                max_len = LPS[i]\n        else: \n            LPS[i] = 1\n            \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n\n    # Create a 2D array to store the length of the longest palindromic subsequence ending at each index\n    # Initialize all values as 1\n    dp = [[1] * n for _ in range(n)]\n\n    # Check for odd length palindromes\n    for i in range(n):\n        if str[i] == str[i]:\n            dp[i][i] = 2\n\n    # Check for even length palindromes\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for longer palindromes\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    # create a 2D table to store the lengths of the longest palindromic subsequences ending at each position in the string\n    table = [[0 for _ in range(len(str))] for _ in range(len(str))] \n\n    # initialize the table with all 0s\n    for i in range(len(str)):\n        table[i][i] = 1\n\n    # fill the table using dynamic programming\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                table[i][j] = table[j][i-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[j][i])\n\n    # return the length of the longest palindromic subsequence ending at the last position in the string\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    # create a 2D table to store the lengths of longest palindromic subsequence for substrings of length i\n    table = [[0] * n for _ in range(n)]\n    # length of longest palindromic subsequence ending at i-th character\n    max_len = 0\n    # length of palindromic subsequence of length i that ends at j-th character\n    max_pal_len = 0\n\n    # fill the table\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                # if the characters are the same, then the longest palindromic subsequence ending at i-th character\n                # is the same as the longest palindromic subsequence ending at j-th character\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                # if the characters are different, then the longest palindromic subsequence ending at i-th character\n                # is the longest palindromic subsequence ending at j-th character\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # fill the max_len and max_pal_len variables\n    for i in range(n):\n        if table[0][i] > max_len:\n            max_len = table[0][i]\n            max_pal_len = i\n\n    return max_pal_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    # Initialize two variables to store the longest palindromic subsequence length and the starting index of the longest palindromic subsequence\n    longest_length = 1\n    start = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Initialize two variables to store the length of the longest palindromic subsequence ending at the current character and the starting index of the longest palindromic subsequence ending at the current character\n        temp_length = 1\n        temp_start = i\n\n        # Loop through each character from the current index to the end of the string\n        for j in range(i, len(str)): \n            # If the characters at the current index and the next index are the same, increase the length of the longest palindromic subsequence ending at the current character\n            if str[i] == str[j]: \n                temp_length += 1\n                temp_start = i\n\n            # If the length of the longest palindromic subsequence ending at the current character is greater than the longest palindromic subsequence found so far, update the longest palindromic subsequence length and starting index\n            if temp_length > longest_length: \n                longest_length = temp_length\n                start = temp_start\n\n    # Return the length of the longest palindromic subsequence\n    return longest_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # find length of the longest palindrome subsequence in substring str[i:j] \n    # from 0 to n-1 \n    # where str[i:j] is the substring of str from index i to j-1 \n    # and s[i:j] is the substring of str from index i to j \n    # (where s[i:j] is the reversed substring of str from index j to i) \n    # for all i <= j <= n-1. \n    # LPS of substring str[i:j] is the maximum length of \n    # LPS of str[i:j] and LPS of str[j:i] \n    # where LPS(s) denotes length of the longest palindromic subsequence of s. \n    LPS = [[0] * n for _ in range(n)] \n    # LPS[i][j] represents the length of the longest \n    # palindromic subsequence of str[i:j] \n    for i in range(n): \n        LPS[i][i] = 1 \n    # LPS[i][j] = max(LPS[i][k] + LPS[k+1][j] + 1 for k in range(i, j)) \n    # for all i <= j <= n-1 \n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1 \n            LPS[i][j] = max(LPS[i][k] + LPS[k+1][j] + 1 for k in range(i, j)) \n    return LPS[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # longest palindromic subsequence ending at i,j\n    def longest_palindrome(i, j):\n        if i >= j:\n            return 0\n        if i == j:\n            return 1\n        if dp[i+1][j-1] == 1:\n            return 2 + longest_palindrome(i+1, j-1)\n        else:\n            return max(longest_palindrome(i, j-1), longest_palindrome(i+1, j))\n\n    max_length = 0\n    start = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            length = longest_palindrome(i, j)\n            if length > max_length:\n                max_length = length\n                start = i\n\n    return s[start:start+max_length]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # Create a 2D array to store the lengths of the longest palindromic subsequence ending at each index\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize the base cases\n    table[0][0] = 1\n    table[0][1] = 1\n\n    # Fill the table\n    for i in range(2, n):\n        if str[i] == str[i-1]:\n            table[i][i] = table[i-2][i-1] + 2\n        else:\n            table[i][i] = max(table[i-1][j] for j in range(i))\n\n    # Return the length of the longest palindromic subsequence ending at the last index\n    return table[n-1][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (1 / n + 1 / (n - 1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n):\n        sum_of_squares += 1/i\n    return 2 * sum_of_squares"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_harmonic_numbers = 0\n    for i in range(1, n):\n        sum_of_harmonic_numbers += 1/i\n    return sum_of_harmonic_numbers"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # If n is even, sum of harmonic series is (n/2) + (n/2)\n    if n % 2 == 0:\n        return (n/2) + (n/2)\n    # If n is odd, sum of harmonic series is (1/n) + (1/n)^2 +... + (1/n)^n\n    else:\n        sum_series = 0\n        for i in range(1, n+1):\n            sum_series += 1/i\n        return sum_series"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        print('Invalid input. Please enter a number greater than 1.')\n        return\n    \n    # Calculate the sum of harmonic series up to n\n    harmonic_sum = 1 / (1/n + 1/n**2 + 1/n**3 +... + 1/n**(n-1))\n    \n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # create a set to store the intersection of array_nums1 and array_nums2\n    intersection_set = set()\n\n    # iterate through array_nums2 and add elements that have a frequency greater than zero to the intersection_set\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection_set.add(num)\n\n    # convert the intersection_set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set from the first array and then find the intersection of the two sets\n    intersection = set(array_nums1).intersection(set(array_nums2))\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #creating empty set to store the common elements\n    common = set()\n    #traversing both arrays\n    i = j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        #checking if current elements are equal\n        if array_nums1[i] == array_nums2[j]:\n            #adding current element to the common set\n            common.add(array_nums1[i])\n            #moving both pointers\n            i += 1\n            j += 1\n        #if current element in array1 is greater, move i pointer\n        elif array_nums1[i] > array_nums2[j]:\n            i += 1\n        #if current element in array2 is greater, move j pointer\n        else:\n            j += 1\n    #creating a list from the common set\n    result = list(common)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Find the intersection of the two arrays\n    intersection = list(set(array_nums1) & set(array_nums2))\n\n    # Sort the intersection array in ascending order\n    intersection.sort()\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Iterate through the first array\n    for num in array_nums1:\n        # If the number is present in the second array, add it to the set\n        if num in array_nums2 and num not in common_elements:\n            common_elements.add(num)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two lists of integers and returns a list of their intersection.\n    '''\n    # Create a set of unique elements in array_nums1\n    unique_nums1 = set(array_nums1)\n    \n    # Create an empty list to store the intersection\n    intersection = []\n    \n    # Iterate through array_nums2 and check if each element is in the set of unique elements in array_nums1\n    for num in array_nums2:\n        if num in unique_nums1:\n            intersection.append(num)\n    \n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input, array_nums1 and array_nums2, and returns a new array that contains only the elements that are present in both arrays.\n    \"\"\"\n    # initialize an empty list to store the intersection\n    intersection = []\n    # iterate through the first array\n    for num in array_nums1:\n        # if the number is present in the second array, add it to the intersection list\n        if num in array_nums2:\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Parameters:\n    array_nums1 (list): The first array of integers.\n    array_nums2 (list): The second array of integers.\n\n    Returns:\n    list: The intersection of the two arrays.\n    \"\"\"\n    # Create a set of the first array to remove duplicates and store the unique elements\n    set_nums1 = set(array_nums1)\n\n    # Create a new list to store the intersection of the two arrays\n    intersection = []\n\n    # Iterate over the second array and add elements to the intersection list that are in the set of first array\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(0, list[i])\n        result.insert(0, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts an element before each element in a list.\n    \"\"\"\n    return [elem] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Loop through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        try:\n            complex_number = complex(num)\n            r = abs(complex_number)\n            theta = cmath.phase(complex_number)\n            polar_coord = (r, theta)\n            print(polar_coord)\n        except ValueError:\n            print(\"Invalid input\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        print(f\"Real part: {real}\")\n        print(f\"Imaginary part: {imag}\")\n        print(f\"Magnitude: {magnitude}\")\n        print(f\"Angle: {angle}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # converting complex number to polar coordinates\n        r = abs(num)\n        phi = cmath.phase(num)\n        # printing the polar coordinates\n        print(\"({}, {})\".format(r, phi))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \n    Parameters:\n    numbers (list): a list of complex numbers\n    \n    Returns:\n    list: a list of polar coordinates (magnitude, angle)\n    \"\"\"\n    # loop over all complex numbers in the list\n    for n in numbers:\n        # convert to polar coordinates and append to result list\n        result = cmath.polar(n)\n        polar_list.append(result)\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # convert number to complex number\n        num_complex = complex(num)\n        \n        # calculate polar coordinates\n        polar = cmath.polar(num_complex)\n        \n        # extract real and imaginary parts of the complex number\n        real = polar[0]\n        imag = polar[1]\n        \n        # print result\n        print(\"Real part: \", real)\n        print(\"Imaginary part: \", imag)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples containing the real and imaginary parts of each complex number in polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        if isinstance(number, complex):\n            r, i = cmath.polar(number)\n            polar_coordinates.append((r, i))\n        else:\n            print(\"Input must be a list of complex numbers.\")\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            phi = cmath.phase(num)\n            result.append((r, phi))\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        try:\n            complex_numbers.append(cmath.polar(complex(number)))\n        except ValueError:\n            print(f\"Error: {number} is not a valid complex number.\")\n    return complex_numbers"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations (with repetition) of length n from the list\n    combinations = combinations_with_replacement(l, n)\n\n    # Convert each combination into a tuple and return as a list of tuples\n    return list(combinations)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, len(l) - n + 1):\n        combinations = combinations_with_replacement(l[i:i+n], n)\n        for combination in combinations:\n            result.append((combination,))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        result.append(tuple(l[i:i+n]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            comb = combinations_with_replacement(l[i:j], n)\n            for c in comb:\n                result.append(tuple(c))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n    # Loop through all possible combinations of length n with replacement of elements from the list\n    for c in combinations_with_replacement(l, n):\n        # Convert the combination to a tuple and append it to the list of combinations\n        combinations.append(tuple(c))\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return [tuple(combination) for combination in comb]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n):\n            result.append((l[i],) + j)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        color_combination = tuple(l[i:i+n])\n        color_combinations.append(color_combination)\n    return color_combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        flag = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative integer n as input and returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a given number is prime or not.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        flag = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a boolean list to mark all numbers as prime\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n\n    # Iterate over the numbers 2 to n\n    for i in range(2, int(n**0.5) + 1):\n        # If i is prime, mark all its multiples as composite\n        if is_prime[i]:\n            for j in range(i*i, n + 1, i):\n                is_prime[j] = False\n\n    # Count the number of prime numbers\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the first tuple has more elements than the second tuple\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem1 = max(test_tup1)\n    max_elem2 = max(test_tup2)\n    max_tup = (max_elem1, max_elem2)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n    if max_num1 > max_num2:\n        return test_tup1\n    elif max_num1 < max_num2:\n        return test_tup2\n    else:\n        return None"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of same length.\")\n        return\n\n    # Initialize variables for maximum value and index\n    max_value = test_tup1[0]\n    max_index = 0\n\n    # Loop through the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n            max_index = i\n        elif test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n            max_index = i\n\n    # Return the maximum value and its index\n    return max_value, max_index"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] >= test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the two tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length!\")\n        return None\n    \n    # compare the elements of the two tuples\n    max_val = max(test_tup1)\n    max_idx = test_tup1.index(max_val)\n    for i, val in enumerate(test_tup2):\n        if val > max_val:\n            max_val = val\n            max_idx = i\n    # return the max element and its index\n    return (max_val, max_idx)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Both tuples must have the same number of elements.\"\n    \n    # Initialize variables to hold the maximum elements\n    max1 = max2 = None\n    \n    # Loop through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if max1 is None or test_tup1[i] > max1:\n                max1 = test_tup1[i]\n        elif test_tup1[i] < test_tup2[i]:\n            if max2 is None or test_tup2[i] > max2:\n                max2 = test_tup2[i]\n    \n    # Return the maximum element(s)\n    if max1 is None:\n        return max2\n    elif max2 is None:\n        return max1\n    else:\n        return (max1, max2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and num > 1:\n            count += 1\n        num += 1\n\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    p = 2\n    prime = True\n    count = 0\n    \n    # Loop until n prime numbers are found\n    while count < n and prime:\n        # Check if p is prime\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                prime = False\n                break\n        else:\n            count += 1\n        p += 1\n        \n    # Return the nth prime number\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a list to store the prime numbers\n    prime_list = []\n\n    # Initialize the first prime number as 2\n    current_prime = 2\n\n    # Loop until we have found the nth newman\u2013shanks\u2013williams prime number\n    while len(prime_list) < n:\n        # Check if the current prime number is prime\n        is_prime = True\n        for i in range(2, int(current_prime ** 0.5) + 1):\n            if current_prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(current_prime)\n        # Increment the current prime number\n        current_prime += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime_list[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize a list to hold the newman-shanks-williams primes\n    p = []\n\n    # loop through the numbers 2 to n-1\n    for i in range(2, n):\n        # check if i is a newman-shanks-williams prime\n        if is_newman_prime(i):\n            # add i to the list of newman-shanks-williams primes\n            p.append(i)\n\n        # if p has n elements, exit the loop\n        if len(p) == n:\n            break\n\n    # return the nth newman-shanks-williams prime number\n    return p[n-1]\n\n\ndef is_newman_prime(n):\n    '''\n    Write a function to check if a number is a newman-shanks-williams prime.\n    '''\n    # check if n is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # loop through the numbers 5 to sqrt(n)\n    for i in range(5, int(n**0.5)+1, 6):\n        # check if n is divisible by any of the numbers in this range\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the count of primes to 0\n    count = 0\n    \n    # Start with 2 as the first prime\n    prime = 2\n    \n    # Loop through all numbers up to n\n    for i in range(3, n+1, 2):\n        # Check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            if count == n:\n                return prime\n            prime += 2\n            \n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 3  # Start with 3\n    while True:\n        if is_prime(i) and is_newman_prime(i):\n            n -= 1\n            if n == 0:\n                return i\n        i += 2  # Check odd numbers only\n\n\ndef is_prime(n):\n    '''\n    Check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_newman_prime(n):\n    '''\n    Check if a number is a newman\u2013shanks\u2013williams prime number or not.\n    '''\n    if is_prime(n) and n % 2!= 0:\n        return True\n    return False"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list of prime numbers\n    primes = [2]\n\n    # Check if the input is valid\n    if n <= 0:\n        return None\n\n    # Check if the first prime number is greater than or equal to 2\n    if n >= 2 and primes[-1] >= 2:\n        # Append 3 to the list of primes\n        primes.append(3)\n\n    # Loop through the remaining numbers\n    for i in range(5, n+1, 2):\n        # Check if the number is prime\n        is_prime = True\n        for j in range(5, int(i**0.5)+1, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If the number is prime, add it to the list of primes\n        if is_prime:\n            primes.append(i)\n\n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Base case: If n is 1, return 2.\n    if n == 1:\n        return 2\n    # Initialize a variable to keep track of the number of digits in n.\n    count = 0\n    # Iterate through the digits of n.\n    while n > 0:\n        # If the digit is greater than 1, add 1 to the count.\n        if n % 10 > 1:\n            count += 1\n        # Divide n by 10 to remove the last digit.\n        n //= 10\n    # Calculate the nth newman\u2013shanks\u2013williams prime number by adding\n    # the count of even digits of n to n.\n    return n + sum(2**i for i in range(count) if n % 2 == 0)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # first two newman\u2013shanks\u2013williams primes\n    ps = [2, 3]\n    \n    # loop through the remaining numbers up to n\n    for i in range(4, n+1):\n        # check if i is a newman\u2013shanks\u2013williams prime\n        is_prime = True\n        for j in range(2, i//2+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            ps.append(i)\n            \n    return ps"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize the count of primes found so far\n    count = 0\n\n    # loop through each number from 2 to n-1\n    for i in range(2, n): \n\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if i is prime, increment the count of primes found so far\n        if is_prime:\n            count += 1\n\n            # if we've found the nth prime, return i\n            if count == n:\n                return i\n\n    # if we've gone through all numbers and haven't found the nth prime, return None\n    return None"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Perform element-wise division of two tuples using zip function\n    div_tup = tuple(map(lambda x,y: x/y if y!=0 else float('inf'), test_tup1, test_tup2))\n    return div_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples should be the same\")\n    \n    # Initialize a new tuple to store the result\n    result_tup = ()\n    \n    # Perform element-wise division\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Perform element-wise division of the two tuples\n    result_tup = tuple(num1/num2 for num1, num2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of two tuples must be equal.\")\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Calculate the length of the tuples\n    length = len(test_tup1)\n    # Create a new tuple with the calculated length\n    result_tup = (0,) * length\n    # Perform element-wise division\n    for i in range(length):\n        result_tup[i] = test_tup1[i] / test_tup2[i]\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples should have the same length to perform element-wise division.\"\n    else:\n        result_list = []\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 0 or test_tup2[i] == 0:\n                result_list.append(\"Cannot perform element-wise division with zero value.\")\n            else:\n                result_list.append(test_tup1[i] / test_tup2[i])\n        return tuple(result_list)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if the given list is non-empty\n    if not list1:\n        raise ValueError(\"The given list is empty\")\n    # check if the given list has at least L elements\n    if len(list1) < L:\n        raise ValueError(\"The given list has less than L elements\")\n    # create the two parts and return them in a tuple\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(lst)\n    mid = n // 2\n    return (lst[:mid], lst[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is less than or equal to L\n    if len(list1) <= L:\n        return (list1, [])\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the two parts\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # return the resulting lists as a tuple\n    return (part1, part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is less than or equal to zero\n    if L <= 0:\n        return \"Error: Length L must be greater than zero.\"\n    \n    # Calculate the number of elements in the first part of the list\n    n = len(list1) // L\n    \n    # Calculate the number of elements in the second part of the list\n    m = len(list1) % L\n    \n    # Split the list into two parts\n    part1 = list1[:n]\n    part2 = list1[n:]\n    \n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts based on the length of L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n:\n        print(\"Error: L should be less than or equal to the length of the list\")\n        return None\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # find the length of the second part\n    second_part_length = len(list1) - L\n    \n    # create the first part of the list\n    first_part = list1[:L]\n    \n    # create the second part of the list\n    second_part = list1[L:]\n    \n    # return the resulting lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"List is too small to split into two parts\")\n    \n    # Split the list into two parts with the length of L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"What is your date of birth (YYYY-MM-DD)? \")\n    dob = datetime.datetime.strptime(dob, \"%Y-%m-%d\")\n    age = (datetime.datetime.now() - dob).days / 365\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * (h_age + 1)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    days_in_year = 365\n    dog_years = h_age * days_in_year\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 7 * h_age\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 0\n    months = h_age * 12\n    days = months // 365\n    if months % 365!= 0:\n        days += 1\n    years = days // 365\n    dog_years = years + h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (2 * h_age) + 2\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Function to convert hours to years\n    def hours_to_years(hours):\n        return hours * 7\n\n    # Calculate dog's years\n    dog_years = hours_to_years(h_age)\n\n    # Calculate dog's age in dog's years\n    dog_age = dog_years / 7\n\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 'young':\n        return 10\n    elif h_age == 'adult':\n        return 12\n    elif h_age == 'elderly':\n        return 14"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years based on human years\n    dog_age_years = h_age * 7\n    return dog_age_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the resulting lists\n    result = []\n    # loop through the input list and split it for every nth element\n    for i in range(0, len(S), step):\n        # create a new list containing the elements from the input list\n        new_list = S[i:i+step]\n        # append the new list to the result list\n        result.append(new_list)\n    # return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Loop through the input list and split it for every nth element\n    for i in range(0, len(S), step):\n        # Add the current sublist to the result list\n        result.append(S[i:i+step])\n\n    # Return the list of resulting lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # initialize empty list to store split lists\n    result = []\n    \n    # loop through each element of the input list\n    for i in range(0, len(S), step):\n        # create a new list with only the required elements\n        new_list = S[i:i+step]\n        # add the new list to the result list\n        result.append(new_list)\n    \n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = 6 * l * l\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes in the side length of a cube as input and returns the lateral surface area of the cube. \n    The lateral surface area of a cube is given by:\n\n    lateral surface area = 6 * l^2\n\n    where l is the length of the cube.\n\n    This function uses the formula to calculate the lateral surface area of the cube.\n    '''\n\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the area of a parallelogram with base l and height 1\n    area = 2*l*1\n\n    # return the lateral surface area of the cube\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # Initialize sum to zero\n    total = 0\n    \n    # Iterate through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the total sum\n        total += i*i\n        \n    # Return the total sum\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the square of the current odd natural number\n        square = i * (i+1)\n        # Add the square to the sum\n        sum += square\n    \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i ** 2  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # initialize the sum variable with 0\n    sum = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum variable\n        sum += i**2\n\n    # return the sum variable\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"1*\"\n    else:\n        return str(n) + \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize variables for the first two stars and the rest of the numbers\n    first_star = 1\n    second_star = 1\n    rest_of_numbers = 0\n    \n    # Calculate then'th star number\n    for i in range(1, n+1):\n        if i <= second_star:\n            first_star = second_star - i\n            second_star = second_star + 1\n        else:\n            rest_of_numbers = i - second_star\n            second_star = first_star + rest_of_numbers\n            first_star = second_star - rest_of_numbers\n    \n    # Return then'th star number\n    return first_star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize the variable to store the nth star number\n    nth_star_num = 0\n\n    # loop through each number from 1 to n\n    for i in range(1, n+1):\n\n        # if the current number is even, multiply it by 2\n        if i % 2 == 0:\n            nth_star_num += 2 * i\n        # if the current number is odd, multiply it by 3\n        else:\n            nth_star_num += 3 * i\n\n    # return the nth star number\n    return nth_star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * find_star_num(n-1) + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Find the number of stars\n    num_stars = n * 2 - 1\n    \n    # Find the number of spaces between each star\n    num_spaces = 5 * (n - 1)\n    \n    # Find the number of lines to print\n    num_lines = num_stars + num_spaces\n    \n    # Print the stars and spaces\n    print('*' * num_stars)\n    print(''* num_spaces + '*')\n    for i in range(num_lines - 4):\n        print(''* num_spaces + '*' * 2)\n    print('*' * num_stars)\n    \n    # Print the number of spaces between the number and the stars\n    print(''* (num_stars - len(str(n))))\n    \n    # Print the number itself\n    print(n)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    i = 1\n    num = 0\n    while i <= n:\n        num += i\n        i += 1\n    \n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0: \n        return None \n    if n == 1: \n        return \"*\"\n    else: \n        result = find_star_num(n-1) \n        return result + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * find_star_num(n-1) + 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ASCII value\n    ascii_value = ord(k)\n    # Print the ASCII value\n    print(\"The ASCII value of\", k, \"is\", ascii_value)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k)!= 1:\n        raise ValueError('The input must be a single character.')\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n    return even_sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    # initialize variables for sum and even index\n    sum = 0\n    even_index = -1\n    \n    # loop through list\n    for i in range(len(arr)):\n        # if element at current index is even\n        if arr[i] % 2 == 0:\n            # if even index has not been found yet, set even index to current index\n            if even_index == -1:\n                even_index = i\n            # if even index has been found, add element to sum\n            else:\n                sum += arr[i]\n                \n    # return sum of even numbers at even positions of list\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_count = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_count += 1\n    \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions.\n\n    Args:\n        arr (list of int): A list of integers.\n\n    Returns:\n        int: The sum of even numbers at even positions.\n    \"\"\"\n\n    # Initialize a variable to store the sum of even numbers at even positions\n    even_sum = 0\n\n    # Loop through the list and check if the current element is even and at an even index\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                count += 1\n                sum += arr[i]\n    return sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of first\", n, \"even natural numbers raised to the fifth power is:\", even_Power_Sum(n))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    i = 2\n    while i <= n:\n        if i**5 % 2 == 0:\n            total += i\n        i += 2\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the sum of the i^5\n        sum += i**5\n\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize the sum of even numbers raised to the fifth power to zero\n    power_sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the current even number raised to the fifth power to the power_sum\n        power_sum += i**5\n        \n    # return the power_sum\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tuple in test_list:\n        rear_elements.append(tuple[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list if x]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same length.\"\n    \n    # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the updated tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the length of both tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples should have the same length.\"\n\n    # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('The two tuples must have the same length.')\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f'{test_tup1[i]} is less than or equal to {test_tup2[i]}.')\n        else:\n            test_tup1[i] -= test_tup2[i]\n            print(f'{test_tup1[i]} - {test_tup2[i]} = {test_tup1[i] - test_tup2[i]}')"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return\n    \n    # loop through the tuples\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the indices from 0 to n-1\n    for i in range(n):\n        # Calculate the binomial coefficient for i and 2*i\n        coeff = math.comb(2*i, i)\n        # If the index is even, add the coefficient to the sum\n        if i % 2 == 0:\n            sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        # Initialize variables\n        sum_even = 0\n        k = 0\n        # Iterate until k reaches half of n\n        while k <= n/2:\n            # Calculate the binomial coefficient k choose 2k\n            binomial_coeff = math.comb(n, 2*k)\n            # Check if the index is even\n            if k % 2 == 0:\n                sum_even += binomial_coeff\n            k += 1\n        return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(n+1):\n        for j in range(2, n//2+1):\n            if (i+j) % 2 == 0:\n                coeff = math.comb(n, i+j)\n                sum_even_coeffs += coeff\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 0\n    \n    even_sum = 0\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_sum += math.comb(n, i)\n            \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, 2*n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2:\n        return \"Please enter a positive integer greater than or equal to 2.\"\n\n    sum_even_binomial_coeffs = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += math.comb(n, i)\n\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Please enter a positive integer.\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    sum_even_binomial_coeffs = 0\n    num_terms = 0\n\n    for i in range(2, n+1):\n        num_terms += 1\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += math.comb(n, i)\n\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        for j in range(i, n+1, i):\n            sum += (math.factorial(j) / (math.factorial(i) * math.factorial(j - i)))\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3)*3.14159*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r * r * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14*(r**2)*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14*(r**2)*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder\n    volume = 3.14159 * (r**2) * h\n    \n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3)*pi*(r**2)*h\n    return V\n\nr = float(input(\"Enter the radius of the cylinder: \"))\nh = float(input(\"Enter the height of the cylinder: \"))\n\nprint(\"The volume of the cylinder is:\", volume_cylinder(r, h))"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Create an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    \n    # Loop through the dictionary and add entries with values greater than or equal to n to the filtered_dict\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    \n    # Return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= test_tup.index(test_tup[i]):\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) // 2:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal = 0\n    num_rows = 1\n\n    # Calculate the number of rows\n    while num_rows <= n:\n        decagonal += (2 * (num_rows - 1))\n        num_rows += 1\n\n    # Return the nth decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 0\n    j = 0\n    count = 1\n    decagonal_number = 0\n    while i < n:\n        decagonal_number += j\n        i += 1\n        j += count\n        count += 1\n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        return is_num_decagonal(n-1) + (n-1)*is_num_decagonal(n-2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    def nth_decagonal(n):\n        \"\"\"\n        Return the nth decagonal number.\n        \"\"\"\n        return n * (n * 6 + 1) // 2\n    \n    if n == 1:\n        return True\n    else:\n        return nth_decagonal(n - 1) == n * (n - 1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # check if n is even\n    if n % 2 == 0:\n        return False\n    # calculate the sum of the squares of the numbers from 1 to n-1\n    sum_of_squares = sum([i**2 for i in range(1, n)])\n    # add n to the sum of the squares and return the result\n    return sum_of_squares + n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    while i * (3 * i - 1) // 2 < n:\n        i += 1\n    return i * (3 * i - 1) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # First, find the sum of the first n natural numbers\n    first_n_natural = sum(range(1, n+1))\n    \n    # Find the square root of the sum of the first n natural numbers\n    sqrt_sum_n = round(sum(range(1, n+1)) ** 0.5)\n    \n    # Return the n-th decagonal number\n    return (sqrt_sum_n * sqrt_sum_n) + (first_n_natural * (n - sqrt_sum_n))\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        print(i*(3*i-1)//2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Base case: n is 1 or n is 2\n    if n == 1 or n == 2:\n        return True\n    \n    # Base case: n is less than 1 or greater than 2\n    if n < 1 or n > 2:\n        return False\n    \n    # Recursive case: n is odd\n    if n % 2 == 1:\n        return is_num_decagonal(n+1)\n    \n    # Recursive case: n is even\n    return is_num_decagonal(n/2) + is_num_decagonal(n/2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Get the number of rows and columns in a square\n    rows = int(n**0.5) + 1\n    cols = rows\n\n    # Initialize variables\n    current_num = 1\n    decagonal_num = 1\n\n    # Loop through the rows and columns of the square\n    for i in range(1, rows+1):\n        for j in range(1, cols+1):\n\n            # If we're at the top-right corner of the square\n            if i == 1 and j == cols:\n                break\n\n            # If we're at the top row or left column\n            if i == 1 or j == 1:\n                current_num += 1\n                continue\n\n            # If we're in the middle of the square\n            current_num += 1\n\n            # Add the current number to the decagonal number\n            decagonal_num += current_num\n\n    # Return the decagonal number\n    return decagonal_num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes in a list of strings and returns a boolean value indicating whether all the elements in the list are unique or not.\n    '''\n    unique_list = set(test_list)\n    return len(unique_list) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n    # Check if the set has the same length as the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # loop through each element in the list\n    for element in test_list:\n        # if the element is not in the set, add it\n        if element not in unique_set:\n            unique_set.add(element)\n        # if the element is already in the set, return False\n        else:\n            return False\n    # if all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the length of the two lists are the same\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each element of the lists\n    for i in range(len(nums1)):\n        # Subtract the corresponding elements of the two lists\n        result.append(nums1[i] - nums2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    return [a-b for a,b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'Error: Lists must be of equal length.'\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Both lists must have same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must be of the same length')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # initialize frequency array with 10 digits\n    \n    # count frequency of digits\n    while n > 0:\n        freq[n%10] += 1\n        n //= 10\n    \n    # check if frequency of digits is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    for i in range(10):\n        freq[i] = 0\n    \n    # count the frequency of each digit in the integer\n    for d in str(n):\n        freq[int(d)] += 1\n    \n    # check if the frequency of each digit is less than or equal to its value\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # get the length of the integer\n    n_len = len(str(n))\n\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # loop through each digit in the integer\n    for i in range(n_len):\n        # convert the digit to an integer\n        digit = int(str(n)[i])\n\n        # increment the frequency of the digit in the dictionary\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # loop through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        # if the frequency of the i-th digit is greater than or equal to the i-th digit itself, return False\n        if freq[i] >= i:\n            return False\n\n    # if all the digits have a frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n    \n    # iterate over each digit in the integer\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # increment its frequency\n            freq[digit] += 1\n        else:\n            # add the digit and its frequency to the dictionary\n            freq[digit] = 1\n    \n    # iterate over the frequency dictionary\n    for digit in freq:\n        # check if the frequency of the digit is greater than the digit itself\n        if freq[digit] > digit:\n            # return False since the frequency of each digit is not valid\n            return False\n    \n    # if all digits pass the validation, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # loop through each digit in the integer and update the frequency of the digit in the dictionary\n    for i in str(n):\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # loop through each digit in the integer and check if the frequency of the digit is greater than or equal to the digit itself\n    for i in str(n):\n        if freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n    # loop through each digit in the integer\n    for i in str(n):\n        # check if the digit is already present in the dictionary\n        if i in freq:\n            # if it is, increment its count by 1\n            freq[i] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            freq[i] = 1\n    # loop through the keys of the frequency dictionary and check whether their frequency is greater than or equal to their value\n    for key, value in freq.items():\n        if value < value:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]  # convert integer to list of digits\n    freq_dict = {}  # create empty dictionary to store frequency of digits\n    \n    # count frequency of digits in integer\n    for digit in digits:\n        freq_dict[digit] = freq_dict.get(digit, 0) + 1\n    \n    # check frequency of digits\n    for digit in digits:\n        if freq_dict[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    frequency = {}\n    for digit in digits:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    for digit, count in frequency.items():\n        if count > digit:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"The given element is not present in the list.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    \n    return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 1:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, element):\n    '''\n    Check whether all elements in the list are equal to the given element.\n    '''\n    return all(lst[0] == element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        if all(x == element for x in list):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a\\1{2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b){2,3}')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r\"a(?:b{2}|[b-df-hj-np-tv-z]){2,3}\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array by repeating the given array k times\n    repeated_array = [a[i] for i in range(k)] + a\n    # Initialize the max sum and current sum variables\n    max_sum = repeated_array[0]\n    current_sum = repeated_array[0]\n\n    # Iterate through the repeated_array and find the maximum sum subarray\n    for i in range(1, len(repeated_array)):\n        current_sum = current_sum + repeated_array[i] - repeated_array[i - 1]\n        max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum of the subarray\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for i in range(n):\n        sub_array = []\n        for j in range(i, i+k):\n            sub_array.append(a[j])\n        max_sum_temp = max(sum(sub_array), max_sum)\n        max_sum = max_sum_temp\n        result.append(max_sum)\n    return result"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n - k):\n        sub_array_sum = 0\n        for j in range(i, i + k):\n            sub_array_sum += a[j]\n        if sub_array_sum > max_sum:\n            max_sum = sub_array_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize max_sum and current_sum to negative infinity\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # iterate over the array n times, and for each iteration:\n    for i in range(n):\n        # add the current element to current_sum\n        current_sum += a[i]\n        \n        # if current_sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # if current_sum is negative, remove the first element and add the next element\n        if current_sum < 0:\n            current_sum -= a[i]\n    \n    # multiply max_sum by k to get the final answer\n    return max_sum * k"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def repeated_array(n, k):\n        repeated_array = []\n        for i in range(k):\n            repeated_array += a\n        return repeated_array\n\n    repeated_array = repeated_array(n, k)\n    max_sum = max(a)\n    for i in range(n):\n        temp_sum = repeated_array[i] + a[i]\n        max_sum = max(max_sum, temp_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Pad the array with zeros to ensure that the sum of the first k elements is equal to 0\n    a = [0] * (k - len(a)) + a\n\n    # Initialize variables for the current sum and the maximum sum\n    current_sum = 0\n    max_sum = float('-inf')\n\n    # Iterate over the array and update the current sum and maximum sum\n    for i in range(k, n + 1):\n        current_sum += a[i - k]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    if n % k!= 0:\n        raise ValueError(\"Array length must be a multiple of k\")\n    max_sum = float('-inf')\n    for i in range(n // k):\n        sub_array_sum = 0\n        for j in range(k):\n            sub_array_sum += a[i * k + j]\n        if sub_array_sum > max_sum:\n            max_sum = sub_array_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Compute the sum of the given array\n    arr_sum = sum(a)\n    \n    # Initialize the maximum sum as the sum of the given array\n    max_sum = arr_sum\n    \n    # Initialize the sum of the modified array\n    modified_sum = 0\n    \n    # Iterate through the array k times\n    for i in range(k):\n        # Add the current element to the modified array\n        modified_sum += a[i]\n        \n        # Subtract the current element from the modified array to obtain the sum of the original array\n        original_sum = arr_sum - modified_sum\n        \n        # Update the maximum sum if the current modified sum is greater\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n        \n        # Update the sum of the modified array\n        modified_sum = 0\n        \n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if n % k!= 0:\n        raise ValueError(\"The length of the input array must be a multiple of k.\")\n    if k > n:\n        raise ValueError(\"k must be less than or equal to n.\")\n\n    # Create a modified array by repeating the input array k times\n    modified_array = [a[0]] * n\n    for i in range(1, n):\n        modified_array[i] = a[i % n]\n\n    # Initialize variables to store the maximum sum of a contiguous array in the modified array\n    max_sum = 0\n    max_sum_start = 0\n\n    # Loop through the modified array to find the maximum sum of a contiguous array\n    for i in range(1, n - k + 1):\n        current_sum = modified_array[i]\n        for j in range(k):\n            current_sum += modified_array[i + j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_start = i\n\n    return max_sum, max_sum_start"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # calculate the sum of the first n elements of the array\n    s = sum(a[:n])\n    \n    # calculate the maximum sum of any contiguous subarray\n    max_so_far = s\n    \n    # calculate the maximum sum of any contiguous subarray formed by repeating the first element\n    max_first_element = s\n    \n    # iterate through the remaining elements of the array\n    for i in range(n, len(a)):\n        # calculate the maximum sum of any contiguous subarray formed by repeating the element at index i\n        max_element = max(max_first_element, s)\n        # update the maximum sum of any contiguous subarray formed by repeating the first element\n        max_first_element = s\n        # update the maximum sum of any contiguous subarray\n        max_so_far = max(max_so_far, max_element)\n        # update the sum of the current element\n        s += a[i] - a[i-n]\n    \n    # return the maximum sum of any contiguous subarray\n    return max_so_far"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #initialize the sum to zero\n    sum_of_squares = 0\n    #iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        #add the square of the even natural number to the sum\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum_of_squares = 0\n    \n    # Check if n is even and greater than 0\n    if n % 2 == 0 and n > 0:\n        # Loop from 2 to n\n        for i in range(2, n+1, 2):\n            # Add the square of i to the sum_of_squares variable\n            sum_of_squares += i*i\n            \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_of_squares = 0\n    i = 2\n    while i <= n:\n        sum_of_squares += i ** 2\n        i += 2\n\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(max_lengths) == 0:\n            max_lengths = sublist\n        elif len(sublist) > len(max_lengths):\n            max_lengths = [sublist]\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(len(sublist))\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize variables\n    max_length_list = []\n    max_length = 0\n    \n    # Loop through each list in the list of lists\n    for lst in list1:\n        # Check if the length of the current list is greater than the maximum length found so far\n        if len(lst) > max_length:\n            # If it is, update the maximum length and add the current list to the max_length_list\n            max_length = len(lst)\n            max_length_list = [lst]\n        # If the length of the current list is less than or equal to the maximum length found so far, add it to the max_length_list\n        else:\n            max_length_list.append(lst)\n    \n    # Return the max_length_list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist > max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(max_lengths) == 0:\n            max_lengths = sublist\n        elif len(sublist) > len(max_lengths) and len(sublist) < len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(maxLength):\n            maxLength = list1[i]\n    return maxLength"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for item in list1:\n        if len(item) > max(max_lengths) or not max_lengths:\n            max_lengths.append(len(item))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # If n is less than or equal to 0, there is only 1 way to paint the fence with n posts and k colors.\n    if n <= 0:\n        return 1\n\n    # If k is less than or equal to 0, there is no way to paint the fence with n posts and k colors.\n    if k <= 0:\n        return 0\n\n    # If n is equal to 1, there is only one way to paint the fence with n posts and k colors.\n    if n == 1:\n        return k\n\n    # Initialize an array to store the number of ways to paint the fence with n-1 posts and k colors.\n    ways = [0]*k\n\n    # Initialize the number of ways to paint the fence with n-1 posts and k colors to 0.\n    for i in range(k):\n        ways[i] = 0\n\n    # If k is equal to 1, there is only one way to paint the fence with n-1 posts and k colors.\n    if k == 1:\n        ways[0] = 1\n\n    # Initialize the number of ways to paint the fence with n-1 posts and k-1 colors to 0.\n    for i in range(k-1):\n        ways[i] = 0\n\n    # Calculate the number of ways to paint the fence with n-1 posts and k-1 colors recursively.\n    for i in range(1, k):\n        ways[i] = ways[i-1] + ways[i]\n\n    # Calculate the number of ways to paint the fence with n-1 posts and k-1 colors for the last post.\n    ways[k-1] = 1\n\n    # Return the total number of ways to paint the fence with n posts and k colors.\n    return ways[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize the count to 0\n    count = 0\n    \n    # Iterate over all possible configurations of the fence\n    for i in range(2**k):\n        # Convert the binary representation of i to a list of integers\n        bin_list = [int(digit) for digit in bin(i)[2:]]\n        \n        # Initialize a set to keep track of the colors used so far\n        color_set = set()\n        \n        # Check if the last two colors used in the fence are same\n        if bin_list[-1] == bin_list[-2]:\n            # Increment the count if the condition is true\n            count += 1\n            \n        # Add the colors used in the fence to the set\n        for color in bin_list:\n            color_set.add(color)\n            \n        # Check if there are more than 2 colors used in the fence\n        if len(color_set) > 2:\n            # Decrement the count if there are more than 2 colors used in the fence\n            count -= 1\n            \n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    # base case: if n=0 or k=0, there is no possible way to paint the fence\n    if n == 0 or k == 0: \n        return 0\n    # base case: if n=1, there is only one possible way to paint the fence\n    if n == 1: \n        return 1\n    # base case: if k=1, there is only one possible way to paint the fence\n    if k == 1: \n        return n\n    # recursive case: there are two possible ways to paint the fence\n    # case 1: paint the first post with the first color\n    # case 2: paint the first post with the second color\n    # case 3: paint the second post with the first color\n    # case 4: paint the second post with the second color\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k) + count_no_of_ways(n, k-1) + count_no_of_ways(n, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n\n    # initialize a 2D array to store the number of ways to paint each post\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # initialize the first row and first column of the array\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n\n    for j in range(1, k + 1):\n        dp[0][j] = 0\n\n    # fill the rest of the array using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1 and j == 1:\n                dp[i][j] = 1\n            elif i == 1 and j > 1:\n                dp[i][j] = dp[i][j - 2]\n            elif j == 1 and i > 1:\n                dp[i][j] = dp[i - 2][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    # return the final value in the 2D array\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i] += dp[i-1] * dp[i-j]\n    \n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    # Base case: if fence consists of one post, it cannot be painted\n    if n == 1:\n        return 0\n    \n    # Initialize variables\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    ways[1] = 1\n    \n    # Iterate through each post\n    for i in range(2, n + 1):\n        # Iterate through each color\n        for j in range(1, k + 1):\n            # If the current color is same as the previous color, add another way to paint the fence\n            if i > 1 and j > 1 and (i - 1) % 2 == 0 and (j - 1) % 2 == 0:\n                ways[i] += ways[i - 1]\n    \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": ""
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the number of ways of painting the fence for each color.\n    color_count = {}\n    for i in range(k):\n        color_count[i] = 1\n\n    # Initialize a count variable to store the number of ways of painting the fence.\n    ways = 1\n\n    # Loop through the number of colors required.\n    for i in range(k):\n        # Calculate the number of ways of painting the fence for the remaining colors.\n        remaining_colors = k - i - 1\n        for j in range(n - remaining_colors):\n            ways *= (remaining_colors - j) // (j + 1)\n            ways //= (j + 1)\n\n        # Update the color count and number of ways of painting the fence for the current color.\n        color_count[i] += remaining_colors\n        ways *= remaining_colors\n\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def color_count(posts):\n        '''\n        Helper function to count the number of colors in a list of posts.\n        '''\n        count = {}\n        for post in posts:\n            if post not in count:\n                count[post] = 1\n            else:\n                count[post] += 1\n        return count\n    \n    def same_colors(posts, color_count):\n        '''\n        Helper function to check if two adjacent posts have the same color.\n        '''\n        for i in range(len(posts)-1):\n            if posts[i] == posts[i+1] and color_count[posts[i]] <= 1:\n                return False\n        return True\n    \n    def paint_fence(posts, color_count):\n        '''\n        Helper function to paint the fence using the color count.\n        '''\n        result = []\n        for post in posts:\n            if color_count[post] == 1:\n                result.append(post)\n                color_count[post] = 0\n        return result\n    \n    def count_ways(n, k, color_count):\n        '''\n        Main function to count the number of ways of painting the fence.\n        '''\n        result = []\n        posts = [i for i in range(1, n+1)]\n        for i in range(k):\n            fence = paint_fence(posts, color_count)\n            if same_colors(fence, color_count) and len(fence) <= 2:\n                result.append(len(fence))\n        return result\n    \n    return count_ways(n, k, color_count(range(1, n+1)))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # base case: if n is 1, there is only one way of painting the fence\n    if n == 1:\n        return 1\n\n    # base case: if k is 1, there is only one way of painting the fence\n    if k == 1:\n        return n\n\n    # base case: if k is n, there are no ways of painting the fence with k colors\n    if k == n:\n        return 0\n\n    # recursive case: there are (n+1) ways to paint the fence with k colors, and there are n-1 ways to paint the fence with k-1 colors\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n, k-1)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Base case: divide n by m and check if quotient is zero\n    if m == 0:\n        return 0\n    # Recursive case: divide n by m and add the quotient to the result of the recursive call\n    else:\n        return find(n-m, m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    # Calculate the quotient of n and m using the floor division operator //\n    quotient = n // m\n\n    # Return the rounded down quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Find the integer quotient of two numbers.\n\n    Args:\n        n: The numerator of the division.\n        m: The denominator of the division.\n\n    Returns:\n        The integer quotient of n and m, rounded down to the nearest integer.\n    \"\"\"\n    # Calculate the quotient using integer division\n    q = n // m\n\n    # Check if the quotient is in the range [-m, m]\n    if q < -m or q > m:\n        # If not, calculate the correct quotient using floating point division\n        q = (n * (1 / m) + (m - 1)) // m\n\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Returns the rounded down quotient of two numbers n and m.\n    \"\"\"\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if n % m!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    # Check if n is zero\n    if n == 0:\n        return 0\n\n    # Calculate the remainder of the division\n    remainder = n % m\n\n    # Calculate the quotient by adding the quotient of n to the quotient of m\n    quotient = (n // m) + (remainder // m)\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Check if the denominator is zero\n    if m == 0:\n        return \"Denominator cannot be zero.\"\n    \n    # Calculate the quotient and round it down to the nearest integer\n    quotient = n // m\n    \n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the length of the base and height of a right angled triangle,\n    and returns the length of the third side.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s*(s-w)*(s-h))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = w\n    c = h\n    \n    third_side = (a**2 - b**2 + c**2) ** 0.5\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the square root of the sum of the squares of the lengths of the other two sides\n    square_root = math.sqrt((w*w + h*h))\n    # Return the third side of the right angled triangle\n    return square_root"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w+h)/2\n    return math.sqrt(s*(s-w)*(s-h))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    if w == h:\n        return h\n    elif w > h:\n        return w + math.sqrt(w**2 - h**2)\n    else:\n        return h + math.sqrt(h**2 - w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the other two sides\n    s = math.sqrt(w ** 2 + h ** 2)\n    # Calculate the semi-perimeter of the triangle\n    a = (w + h + s) / 2\n    # Calculate the third side of the triangle\n    c = math.sqrt(a ** 2 - w ** 2)\n    # Return the third side\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter\n    s = (w+h)**2 / 4\n    \n    # calculate the square root of the semi-perimeter\n    c = math.sqrt(s)\n    \n    # calculate the third side\n    third_side = w*h / 2\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(w**2 + s**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle.\n    \n    Args:\n    w (float): the length of the first side of the triangle\n    h (float): the length of the second side of the triangle\n    \n    Returns:\n    float: the length of the third side of the triangle\n    '''\n    # calculate the cosine of the angle formed by the two sides\n    cos_theta = (w**2 + h**2 - w*h)**0.5 / (2*w)\n    # calculate the length of the third side of the triangle\n    side_length = math.sqrt(w**2 + h**2 - cos_theta**2)\n    return side_length"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in the width and height of a right-angled triangle and\n    returns the third side.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(w**2 + s**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # initialize the maximum value to the first value of the list\n    for i in range(1, len(listval)):  # iterate through the list starting from the second value\n        if listval[i] > max_val:  # if the current value is greater than the maximum value\n            max_val = listval[i]  # update the maximum value\n    return max_val  # return the maximum value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        maxval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n\n    # Initialize variables to keep track of the maximum value and its type\n    max_val = None\n    max_type = None\n\n    # Iterate over the list and compare each value with the current maximum value\n    for val in listval:\n        if val is None:\n            continue\n        if max_val is None or val > max_val:\n            max_val = val\n            max_type = type(val)\n\n    # Return the maximum value and its type\n    return max_val, max_type"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value to first value in list\n    max_val = listval[0]\n    # loop through rest of list\n    for i in range(1, len(listval)):\n        # if current value is greater than max value, update max value\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    Parameters:\n    listval (list): a list of mixed data types\n\n    Returns:\n    int: the maximum value in the list\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for val in listval:\n        if max_num is None:\n            max_num = val\n        elif val > max_num:\n            max_num = val\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function takes a list as input and returns the maximum value in the list.\n    \n    Args:\n        listval (list): The list of values to find the maximum value of.\n        \n    Returns:\n        int: The maximum value in the list.\n    \"\"\"\n    max_val = listval[0]\n    for i in listval[1:]:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value to None\n    maxval = None\n    # iterate through the list\n    for i in listval:\n        # if the current value is greater than maxval, update maxval\n        if i > maxval:\n            maxval = i\n    # return the maximum value\n    return maxval"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # initialize the sum to zero\n    total = 0\n\n    # loop through the range of numbers from 1 to the square root of the input number\n    for i in range(1, int(number ** 0.5) + 1):\n        # if the input number is divisible by the current number, add it to the sum\n        if number % i == 0:\n            total += i\n\n    # return the sum of the divisors\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize sum variable to zero\n    sum_div = 0\n\n    # Iterate through each number from 1 to the number itself\n    for i in range(1, number+1):\n        # If the number is divisible by i, add it to sum_div\n        if number % i == 0:\n            sum_div += i\n\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Initialize variables to count inversions\n    inv_count = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Initialize variables to keep track of the largest and second largest elements seen so far\n        largest = arr[i]\n        second_largest = float('-inf')\n\n        # Iterate through the remaining elements in the array\n        for j in range(i+1, len(arr)):\n            # If the current element is smaller than the largest, increment the inversion count\n            if arr[j] < largest:\n                inv_count += 1\n\n            # If the current element is smaller than the second largest, update the second largest element seen so far\n            elif arr[j] < second_largest:\n                second_largest = arr[j]\n\n        # If the current element is equal to the largest, update the second largest element seen so far\n        elif arr[j] == largest:\n            second_largest = arr[j]\n\n    # Return the final inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        inv_count += count_inversions(arr, 0, i)\n        inv_count += count_inversions(arr, i + 1, n - 1)\n    return inv_count\n\ndef count_inversions(arr, start, end):\n    '''\n    Helper function to count inversions in an array.\n    '''\n    i = start\n    j = end\n    temp = arr[start]\n\n    while i < j:\n        while i < j and arr[j] >= temp:\n            j -= 1\n        arr[i] = arr[j]\n\n        while i < j and arr[i] <= temp:\n            i += 1\n        arr[j] = arr[i]\n\n    arr[i] = temp\n    return i - start"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Initialize the variables for the inversion count and indices of the subarrays\n    count = 0\n    left = 0\n    right = len(arr) - 1\n\n    # Sort the array in ascending order using the merge sort algorithm\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            # Sort the left half\n            merge_sort(left_half)\n\n            # Sort the right half\n            merge_sort(right_half)\n\n            # Merge the sorted halves back together\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] <= right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    count += len(left_half) - i\n                    arr[k] = right_half[j]\n                    j += 1\n                k += 1\n\n            # Copy the remaining elements of the left half\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n\n            # Copy the remaining elements of the right half\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n\n    # Call the merge sort function on the input array\n    merge_sort(arr)\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    \n    # Divide the array into two halves \n    # until each half contains only one element \n    while n > 1: \n        i = 0\n        j = n - 1\n        \n        # While the left half is not empty \n        while i < j: \n            # Find the maximum element in the right half \n            max_index = i\n            \n            # Find the maximum element in the left half \n            for k in range(i, j): \n                if arr[k] > arr[max_index]: \n                    max_index = k\n            \n            # Swap the maximum element in the left and right half \n            arr[i], arr[max_index] = arr[max_index], arr[i]\n            \n            # Increment the inversion count if the left half is sorted \n            # in reverse order \n            inv_count += j - i + 1\n            \n            # Update the left half pointer \n            i += 1\n            \n            # Update the right half pointer \n            j -= 1\n        \n        # Reduce the size of the array by a factor of 2 \n        n = n // 2\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n\n    # Initialize variables to keep track of count and swaps\n    count = 0\n    n = len(arr)\n\n    # Sort the array using quick sort algorithm\n    quick_sort(arr, 0, n-1)\n\n    # Count inversions using a two-pointer approach\n    left = 0\n    right = n-1\n    while left < right:\n        if arr[left] > arr[right]:\n            count += right - left + 1\n            left += 1\n        else:\n            right -= 1\n\n    return count\n\n\ndef quick_sort(arr, low, high):\n    if low < high:\n        # Partition the array around a pivot\n        pivot = partition(arr, low, high)\n\n        # Recursively sort the left and right sub-arrays\n        quick_sort(arr, low, pivot-1)\n        quick_sort(arr, pivot+1, high)\n\n\ndef partition(arr, low, high):\n    # Choose a pivot element from the left sub-array\n    pivot = arr[low]\n\n    # Initialize two pointers to the left and right ends of the sub-array\n    i = low + 1\n    j = high\n\n    # Swap elements until i is greater than or equal to j\n    while True:\n        while arr[i] < pivot:\n            i += 1\n        while arr[j] > pivot:\n            j -= 1\n        if i >= j:\n            break\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Swap the pivot element with the element just before the pivot\n    arr[low], arr[j] = arr[j], arr[low]\n\n    # Return the index of the pivot element (after swapping)\n    return j"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Function to swap two elements in an array \n    def swap(arr, i, j): \n        arr[i], arr[j] = arr[j], arr[i] \n        return arr \n    # Function to divide the array into two halves \n    def divide(arr, low, high): \n        # Choose a pivot element from the array \n        pivot = arr[low] \n        i = low + 1 \n        j = high \n        while True: \n            while i <= j and arr[i] <= pivot: \n                i = i + 1 \n            while i <= j and arr[j] > pivot: \n                j = j - 1 \n            if i <= j: \n                swap(arr, i, j) \n            else: \n                break \n        swap(arr, low, j) \n        return j \n    # Recursive function to count inversions in an array \n    def count_inv(arr, low, high): \n        if low < high: \n            # Divide the array into two halves \n            mid = divide(arr, low, high) \n            # Count inversions in the left half \n            inv_l = count_inv(arr, low, mid) \n            # Count inversions in the right half \n            inv_r = count_inv(arr, mid+1, high) \n            # Return the sum of inversions in both halves \n            return inv_l + inv_r + (mid - low + 1) - (high - mid) \n        else: \n            # Base case: array is empty or has one element \n            return 0 \n    # Call the recursive function to count inversions in the array \n    inv_count = count_inv(arr, 0, n-1) \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n  \n    # Traverse the array twice \n    for i in range(n): \n        # Find the maximum element in the remaining unsorted part \n        max_idx = i \n        for j in range(i+1, n): \n            if arr[j] > arr[max_idx]: \n                max_idx = j \n        # Swap the found maximum element with the first element \n        arr[i], arr[max_idx] = arr[max_idx], arr[i] \n  \n        # Count the number of inversions \n        inv_count += n - i - 1 \n  \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n\n    # If the array has only one element or is empty, return 0\n    if n <= 1 or n == 0:\n        return 0\n\n    # Divide the array into two halves recursively\n    left_inv_count = get_Inv_Count(arr[:n//2])\n    right_inv_count = get_Inv_Count(arr[n//2:])\n\n    # Count the inversions in the two halves separately\n    left_inv = 0\n    right_inv = 0\n    i = 0\n    j = n//2 - 1\n\n    while i <= j:\n        if arr[i] > arr[j]:\n            left_inv += 1\n            i += 1\n        else:\n            right_inv += 1\n            j -= 1\n\n    # Combine the inversions from the two halves and the original array\n    inv_count = left_inv_count + right_inv_count + left_inv + right_inv\n\n    return inv_count\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes in a list and flattens it into a single list, without any duplicate elements.\n    '''\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return list(set(flat_list))\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list as input and flattens it into a single list.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize the dictionary to store the maximum aggregate and its frequency\n    max_agg_dict = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for agg, freq in stdata:\n        # Update the maximum aggregate in the dictionary\n        max_agg_dict[agg] = max(max_agg_dict[agg], freq)\n\n    # Find the maximum aggregate from the dictionary\n    max_agg = max(max_agg_dict.items(), key=lambda x: x[1])[0]\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg_dict = defaultdict(int)\n    for tup in stdata:\n        for i in range(len(tup)):\n            max_agg_dict[i] = max(max_agg_dict[i], tup[i])\n    max_agg = max(max_agg_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    st_map = defaultdict(int)\n    for i in range(len(stdata)):\n        st = stdata[i][0]\n        val = stdata[i][1]\n        st_map[st] += val\n        if st_map[st] > max_agg:\n            max_agg = st_map[st]\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        for i in range(len(item)):\n            max_aggr[i] = max(max_aggr[i], item[i])\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples of the form (customer_id, transaction_amount)\n    and returns the maximum aggregate value for all transactions made by a customer.\n    '''\n    # create a defaultdict to store the transaction amount for each customer\n    customer_transactions = defaultdict(int)\n\n    # iterate through the list of transactions and update the transaction amount for each customer\n    for customer_id, transaction_amount in stdata:\n        customer_transactions[customer_id] += transaction_amount\n\n    # find the maximum transaction amount for each customer\n    max_transactions = []\n    for customer_id, transaction_amount in customer_transactions.items():\n        if transaction_amount > max(max_transactions, default=0):\n            max_transactions = [transaction_amount]\n        elif transaction_amount == max(max_transactions, default=0):\n            max_transactions.append(transaction_amount)\n\n    # calculate the maximum aggregate value by summing the maximum transaction amount for each customer\n    max_aggregate_value = sum(max_transactions)\n\n    return max_aggregate_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each element\n    freq_dict = defaultdict(int)\n    for name, salary in stdata:\n        freq_dict[name] += 1\n\n    # Calculate the maximum aggregate by taking the maximum value in the defaultdict\n    max_agg = max(freq_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = 0\n    max_aggr_dict = defaultdict(int)\n    for tup in stdata:\n        item, price = tup\n        max_aggr_dict[item] += price\n        max_aggr = max(max_aggr, max(max_aggr_dict.values()))\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    # Initialize a dictionary to store the aggregate of each transaction\n    agg_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for tup in stdata:\n        # Update the aggregate of each transaction\n        agg_dict[tup[0]] += tup[1]\n    \n    # Find the maximum aggregate\n    max_agg = max(agg_dict.values())\n    \n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the number of times each customer has bought items\n    item_counts = defaultdict(int)\n\n    # Iterate through the list of tuples and update the item_counts defaultdict\n    for item, quantity in stdata:\n        item_counts[item] += quantity\n\n    # Create a defaultdict to store the total price for each item\n    item_prices = defaultdict(float)\n\n    # Iterate through the item_counts defaultdict and calculate the total price for each item\n    for item, quantity in item_counts.items():\n        item_prices[item] = item_prices[item] + item * quantity\n\n    # Calculate the maximum aggregate by finding the maximum value in the item_prices defaultdict\n    max_aggregate = max(item_prices.values())\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        name, price, quantity = item\n        max_dict[name] += price * quantity\n    return max(max_dict.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    for i in range(2**n):\n        if i % 2 == 0: # check if the sum of first n bits is even or odd\n            sum_first_n = sum(int(x) for x in format(i, f'0{n}b'))\n            if sum_first_n % 2 == 0: # check if the sum of first n bits is even or odd\n                sum_last_n = sum(int(x) for x in format((i>>n), f'0{n}b'))\n                if sum_last_n % 2 == 0: # check if the sum of last n bits is even or odd\n                    count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(~i)[2:].zfill(n)\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**n+2):\n        first_n = i >> (n-1)\n        last_n = i & ((1 << n) - 1)\n        if first_n + last_n == 2**n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    # Generate all possible binary sequences of length 2n\n    all_binary_seqs = []\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(2*n)\n        all_binary_seqs.append(binary_seq)\n\n    # Count the number of sequences that satisfy the conditions\n    count = 0\n    for i in range(len(all_binary_seqs)):\n        for j in range(i+1, len(all_binary_seqs)):\n            seq1 = all_binary_seqs[i]\n            seq2 = all_binary_seqs[j]\n            sum1 = int(seq1[:n], 2)\n            sum2 = int(seq2[:n], 2)\n            if sum1 == sum2:\n                count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(i+2**n-1)[2:].zfill(n)\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        temp = i\n        temp_sum = 0\n        while temp > 0:\n            temp_sum += temp % 2\n            temp //= 2\n        if temp_sum == (2**n-1 - i):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    def is_binary_sequence(seq):\n        \"\"\"\n        Check if a given sequence is a valid binary sequence.\n        \"\"\"\n        if len(seq) % 2 == 1:\n            return False\n        for digit in seq:\n            if digit not in ['0', '1']:\n                return False\n        return True\n\n    def binary_sum(seq):\n        \"\"\"\n        Calculate the sum of binary digits in a sequence.\n        \"\"\"\n        return int(''.join(map(str, seq)), 2)\n\n    def binary_subsequence(seq1, seq2):\n        \"\"\"\n        Find a subsequence of seq1 that is a subsequence of seq2.\n        \"\"\"\n        if len(seq1) > len(seq2):\n            seq1, seq2 = seq2, seq1\n        subseq = []\n        for i in range(len(seq2)):\n            if seq1.startswith(seq2[i:]):\n                subseq.append(seq2[i])\n                seq1 = seq1[len(seq2[i]):]\n        return ''.join(subseq)\n\n    count = 0\n    for i in range(2**n):\n        seq1 = bin(i)[2:].zfill(n)[::-1]\n        for j in range(2**n):\n            seq2 = bin(j)[2:].zfill(n)[::-1]\n            if binary_sum(seq1) == binary_sum(seq2) and binary_subsequence(seq1, seq2):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:] # converts binary representation to string and skips the first '0b' and converts it to a list of characters\n        last_n_bits = bin(i ^ (2**n-1))[2:] # XORs the binary representation with (2^n-1) and converts it to a list of characters\n        if sum(first_n_bits) == sum(last_n_bits): # checks if the sums of first n bits and last n bits are equal\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initializing two lists to store the binary sequences and their sums\n    sequences = []\n    sums = []\n\n    # initializing the count variable\n    count = 0\n\n    # loop to generate all possible binary sequences of length 2n\n    for i in range(2**n):\n        # converting the current binary sequence to a list\n        sequence = [int(digit) for digit in bin(i)[2:]]\n\n        # checking if the current sequence is a binary sequence of length 2n and if the sum of first n bits is same as the sum of last n bits\n        if len(sequence) == 2*n and sequence[:n].count(1) == sequence[-n:].count(1):\n            # appending the current binary sequence to the list of sequences and their sums\n            sequences.append(sequence)\n            sums.append(sum(sequence))\n\n            # incrementing the count variable\n            count += 1\n\n    # printing the count of binary sequences that satisfy the given conditions\n    print(\"The count of binary sequences of length 2n is:\", count)\n\n    # printing the list of binary sequences and their sums\n    print(\"The list of binary sequences and their sums are:\")\n    for i in range(len(sequences)):\n        print(sequences[i], sums[i])"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n), 2**n):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i)[-2-n:].zfill(n)\n        if int(first_n) == int(last_n):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 1\n        for key, value in d.items():\n            depth += dict_depth(value)\n        return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for k, v in d.items())\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = 1 + dict_depth(v)\n        elif isinstance(v, list):\n            depth = 1 + max(map(lambda x: dict_depth(x) if isinstance(x, dict) else 1, v))\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = max(dict_depth(value) for key, value in d.items()) + 1\n    else:\n        max_depth = 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        max_depth = 0\n        for value in d.values():\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth counter\n    depth = 0\n    # traverse through dictionary\n    for _ in d.values():\n        # increment depth counter\n        depth += 1\n    # return depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at a given index after a number of rotations.\n\n    :param arr: A list of integers.\n    :param ranges: A list of lists containing the start and end indices of each range.\n    :param rotations: A list of integers denoting the number of rotations to perform.\n    :param index: An integer denoting the index of the element to find after rotations.\n    :return: The element at the given index after the number of rotations.\n    \"\"\"\n\n    # Initialize the result variable to None\n    result = None\n\n    # Loop through each rotation\n    for rotation in rotations:\n        # Initialize a variable to keep track of the start and end indices of the range\n        start = 0\n        end = len(arr) - 1\n\n        # Loop through each range\n        for i, range_ in enumerate(ranges):\n            # If the rotation is within the range, update the start and end indices\n            if rotation >= range_[0] and rotation < range_[1]:\n                start = range_[0]\n                end = range_[1] - 1\n\n        # Shift the array to the left\n        if rotation % 2 == 1:\n            arr = arr[start:end] + arr[:start] + arr[end:]\n        else:\n            arr = arr[start:end] + arr[end:]\n\n        # Check if the element at the given index exists\n        if rotation % 2 == 0 and index < len(arr):\n            result = arr[index]\n            break\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, an array of ranges, a number of rotations, and an index. It returns the element at the given index after rotations.\n\n    Args:\n    arr (list): The input array.\n    ranges (list): An array of ranges that define the maximum values for each element in arr.\n    rotations (int): The number of rotations to perform on the input array.\n    index (int): The index of the element to find.\n\n    Returns:\n    The element at the given index after rotations.\n    \"\"\"\n\n    # Initialize variables\n    temp = arr[index]\n    current_index = index\n\n    # Perform the required rotations\n    for _ in range(rotations):\n        min_value = arr[current_index]\n        current_index = 0\n        for i in range(1, len(arr)):\n            if arr[i] < min_value:\n                min_value = arr[i]\n                current_index = i\n        temp, arr[current_index] = arr[current_index], temp\n\n    # Calculate the final index\n    final_index = (index - current_index) % len(arr)\n    if final_index < 0:\n        final_index += len(arr)\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Initialize variables\n    final_index = index\n\n    # Perform rotations\n    for i in range(rotations) :\n        final_index += ranges[i]\n        final_index %= len(arr)\n\n    # Return the element at final_index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the number of elements to be rotated\n    n = len(arr)\n    r = len(ranges)\n\n    # Calculate the number of rotations\n    k = n - rotations\n\n    # Find the indices of the elements to be rotated\n    for i in range(r):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            j = i\n            break\n\n    # Calculate the final index after rotations\n    final_index = (k + j + index - ranges[j][0]) % n\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    This function takes an array, a list of range tuples, number of rotations, and an index as input. \n    The function returns the element at the given index after the specified number of rotations. \n    '''\n\n    # Find the rotation index\n    rotIndex = 0\n    while rotIndex < rotations : \n        # Find the first element in the range that is greater than or equal to the element at the index\n        start = arr[0]\n        for i in range(1,len(arr)) : \n            if arr[i] >= start : \n                start = arr[i]\n        # Find the last element in the range that is less than or equal to the element at the index\n        end = arr[0]\n        for i in range(1,len(arr)) : \n            if arr[i] <= end : \n                end = arr[i]\n        # Update the index range for the next rotation\n        arr = arr[start:end]\n        rotIndex += 1\n\n    # Return the element at the given index after the specified number of rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n\n    # Get the element at index position\n    element = arr[index]\n\n    # Rotate the given element by the specified number of rotations\n    for i in range(rotations):\n        # Check if we have reached the end of the list\n        if index + i >= len(arr):\n            # If we have reached the end of the list, start from the beginning of the list\n            index = 0\n        else:\n            # If we have not reached the end of the list, increment the index by 1\n            index += 1\n        # Get the next element in the list\n        next_element = arr[index]\n        # Swap the element at the current index with the next element\n        arr[index], arr[index + 1] = arr[index + 1], arr[index]\n\n    # Find the next element after rotating the given element by the specified number of rotations\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            # If the given index falls in the range of the current rotation, find the next element after rotating the given element\n            next_index = index + rotations * (i + 1)\n            # Check if we have reached the end of the list\n            if next_index >= len(arr):\n                # If we have reached the end of the list, start from the beginning of the list\n                next_index = 0\n            else:\n                # If we have not reached the end of the list, increment the index by 1\n                next_index += 1\n            return arr[next_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    def rotate_array(arr, n):\n        for i in range(n):\n            arr.append(arr.pop(0))\n        return arr\n\n    for _ in range(rotations):\n        arr = rotate_array(arr, len(ranges))\n\n    for i in range(len(ranges) - 1, -1, -1):\n        if index >= ranges[i][0]:\n            index -= ranges[i][0]\n        else:\n            index = ranges[i][1] + (index - ranges[i][0])\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after rotating the array.\n\n    Args:\n    arr (list): list of integers\n    ranges (list): list of integers representing ranges of rotations\n    rotations (int): number of rotations\n    index (int): index at which we need to find the element\n\n    Returns:\n    int: The element at the given index after rotating the array.\n\n    Raises:\n    ValueError: If the index is out of range.\n    \"\"\"\n    # Check if the index is within range\n    if index < 0 or index >= len(arr):\n        raise ValueError(\"Index out of range\")\n\n    # Calculate the index after rotating\n    new_index = (index + rotations) % len(arr)\n\n    # Calculate the range of rotations needed to get to the new index\n    new_rotations = ranges[new_index]\n\n    # Calculate the element at the new index\n    element = arr[(new_index + rotations) % len(arr)]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    This function takes an array, a list of possible ranges, number of rotations and an index as input.\n    It returns the element at the given index after the given number of rotations.\n    '''\n    count = 0\n    for i in range(len(ranges)-1) :\n        count += ranges[i+1]-ranges[i]\n    count = count%rotations\n    result = arr[index-ranges[0]]\n    for i in range(count) :\n        result = (result-ranges[0]+ranges[-1])%rotations\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at the given index after rotating the array by the given number of rotations.\n    \"\"\"\n\n    # Calculate the sum of the rotations\n    total_rotations = sum(rotations)\n\n    # Calculate the index after the rotations\n    rotated_index = (index + total_rotations) % len(arr)\n\n    # Calculate the element at the rotated index\n    element = arr[rotated_index]\n\n    # Calculate the remaining rotations to remove the element from the array\n    remaining_rotations = rotations.count(element)\n\n    # Check if the remaining rotations are equal to the given rotations\n    if remaining_rotations == rotations:\n        # Return the element\n        return element\n    else:\n        # If the remaining rotations are less than the given rotations, find the element\n        # in the remaining part of the array\n        remaining_arr = arr[:rotated_index] + arr[rotated_index + 1:]\n        remaining_index = (index - rotated_index) % len(remaining_arr)\n        return find_Element(remaining_arr, ranges, remaining_rotations, remaining_index)"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            return (words[i], words[i+1])\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words_list = re.findall(pattern, words)\n    if len(words_list) == 2:\n        return words_list[0], words_list[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Use regular expression to find words starting with 'p'\n    pattern = r'^p'\n    matches = re.findall(pattern,''.join(words))\n    if len(matches) == 0:\n        return None\n    elif len(matches) == 1:\n        # Return the only match\n        return matches[0].split()[0], matches[0].split()[1]\n    else:\n        # Return two matches randomly\n        import random\n        return random.choice(matches[0].split()[0]), random.choice(matches[0].split()[1])"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = pattern.findall(words)\n    return matches[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*' # regex pattern to find words starting with letter 'p'\n    matches = re.findall(pattern, words) # find all matches in the list of words using regex pattern\n    return matches # return the two words matching the pattern"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.search(pattern, word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\b\\w*[Pp]\\w*\\b')\n    matches = pattern.findall(words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n        a (list): List of integers representing the array.\n        n (int): Length of the array.\n        index (int): Index of the current element.\n        k (int): Index of the kth element after index.\n\n    Returns:\n        int: Maximum sum of increasing subsequence from prefix until ith index and also including a given kth element.\n    \"\"\"\n\n    # If index is equal to k, return zero, as the kth element will not be included in the increasing subsequence.\n    if index == k:\n        return 0\n\n    # Initialize the sum and the maximum sum of increasing subsequence.\n    sum = a[index]\n    max_sum = sum\n\n    # Iterate over all previous elements to find the maximum sum of increasing subsequence.\n    for i in range(index):\n        if a[i] < a[index] and a[i] < a[k]:\n            sum = max(a[i] + max_sum_increasing_subseq(a, n, i, k), sum)\n\n        max_sum = max(sum, max_sum)\n\n    # Return the maximum sum of increasing subsequence.\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i-1], a[index] + dp[i-2])\n\n    max_sum = dp[n]\n\n    if k > n:\n        return max_sum\n    else:\n        prefix_sum = dp[index]\n        i = index\n\n        while i <= n:\n            if dp[i] > prefix_sum + a[i]:\n                prefix_sum = dp[i]\n                kth_element = a[i]\n\n            i += 1\n\n        return max(max_sum, prefix_sum) + kth_element\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == k:\n        return 0\n    if index == n:\n        return 0\n    if a[index] <= a[index + 1]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 2, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    \n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    \n    # Initialize variables\n    max_sum = 0\n    sum = a[index]\n    \n    # Check for increasing subsequences\n    for i in range(index + 1, n + 1):\n        if i > k:\n            break\n        if i == k:\n            sum += a[i]\n        else:\n            sum -= a[i - 1]\n        max_sum = max(max_sum, sum)\n        \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Given an array a[] of size n, find the maximum sum of increasing subsequence of size k such that the kth element of the subsequence is after the ith element.\n\n    The function returns the maximum sum and the indices of the first k elements of the increasing subsequence.\n\n    \"\"\"\n    # Create an array dp[] of size n to store the maximum sum of increasing subsequence ending at each index\n    dp = [0] * n\n\n    # Initialize the first element of dp[] as 0\n    dp[0] = 0\n\n    # Initialize the maximum sum of increasing subsequence as negative infinity\n    max_sum = float('-inf')\n\n    # Initialize the index of the maximum sum of increasing subsequence as -1\n    max_index = -1\n\n    # Traverse through all indices from 1 to n-1\n    for i in range(1, n):\n\n        # Consider the first k elements of the increasing subsequence ending at index i\n        for j in range(i, min(i+k-1, n-1)+1):\n\n            # If the sum of the first j elements of the increasing subsequence ending at index i is greater than the maximum sum seen so far, update the maximum sum and its index\n            if dp[i-j] + a[i-1] > dp[i-1]:\n                dp[i] = dp[i-j] + a[i-1]\n                max_sum = dp[i]\n                max_index = i - j + 1\n\n    # Return the maximum sum and the indices of the first k elements of the increasing subsequence\n    return max_sum, max_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables for max sum and current subsequence\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array starting from the given index\n    for i in range(index, n):\n        # If the current element is greater than k\n        if a[i] > k:\n            # If the current sum is greater than max sum so far\n            if curr_sum > max_sum:\n                # Update the max sum and current subsequence\n                max_sum = curr_sum\n                curr_sum = a[i]\n            # If the current sum is equal to max sum so far, add the current element to the current subsequence\n            else:\n                curr_sum += a[i]\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[index] = a[index]\n\n    for i in range(index+1, n):\n        if i > k:\n            dp[i] = max(dp[i], dp[i-1]+a[i])\n        else:\n            dp[i] = dp[i-1]+a[i]\n\n    return dp[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    \n    if a[index] <= a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k),\n                   max_sum_increasing_subseq(a, n, index+1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n    \n    dp = [0] * n\n    dp[0] = a[0]\n    \n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n    \n    max_sum = dp[n-1]\n    \n    for i in range(n-2, -1, -1):\n        if i >= k:\n            max_sum = max(max_sum, dp[i] + a[i] + a[k-1])\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k < index:\n        return 0\n    if index == 0:\n        if a[index] > k:\n            return 0\n        else:\n            return a[index]\n\n    prev_max = max_sum_increasing_subseq(a, n, index - 1, k)\n\n    if k == index:\n        return prev_max\n    if k > index:\n        return max(a[index] + prev_max, prev_max)\n\n    return prev_max"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[:i] + (tuplex[i],) + new_tuplex[i+1:]\n    for i in range(n):\n        new_tuplex = new_tuplex[:i+1] + (tuplex[-1],) + new_tuplex[i+1:]\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # reverse the first n elements of the tuple\n    tuplex_copy = tuplex_copy[::-1][:n]\n    # reverse the first m elements of the tuple\n    tuplex_copy = tuplex_copy[::-1][:m]\n    # create a colon from the first m elements of the tuple\n    colon = tuple(tuplex_copy[::-1])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return (tuplex[0],)\n    else:\n        return (tuplex[0],) + colon_tuplex(deepcopy(tuplex[1:]), m-1, n)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1:\n        return (tuplex[0],)\n    else:\n        return (tuplex[m-1],) + colon_tuplex(deepcopy(tuplex[1:]), m-1, n)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 1:\n        return (tuplex[0], )\n    else:\n        new_tuplex = deepcopy(tuplex)\n        new_tuplex[m-1], new_tuplex[n-1] = new_tuplex[n-1], new_tuplex[m-1]\n        return (colon_tuplex(new_tuplex[:m], m, n-1), colon_tuplex(new_tuplex[m:], m-1, n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple and returns a colon of that tuple.\n    It takes the tuple and the number of rows and columns as input.\n    The function creates a new tuple with the same elements as the input tuple\n    but in a colon format.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex_list = list(new_tuplex)\n    row_len = len(new_tuplex_list) // m\n    col_len = len(new_tuplex_list) // n\n\n    for i in range(m):\n        for j in range(n):\n            new_tuplex_list.insert(i*row_len+j, new_tuplex_list[row_len*i+j])\n\n    colon_tuplex = tuple(new_tuplex_list)\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    for i in range(m):\n        tuplex[i] = (tuplex[i][0], tuplex[i][1])\n    for i in range(m):\n        for j in range(n):\n            tuplex[i][j] = (tuplex[i][j][0], tuplex[i][j][1])\n    return tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n    # get the first element of the new tuple\n    first = new_tuplex[0]\n    # slice the new tuple from index m to n-1 and concatenate with first element\n    colon = first[:m] + new_tuplex[m:n] + first[n:]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        result.append(tuplex[i])\n        for j in range(n):\n            result.append(tuplex[i][j])\n    return tuple(result)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    for i in range(len(colon)):\n        for j in range(n):\n            if j > i:\n                colon[i] = None\n                break\n            elif j < i:\n                colon[j] = None\n    return tuple(colon)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the largest products lists\n    largest1 = []\n    largest2 = []\n    # Sort the two lists\n    nums1.sort()\n    nums2.sort()\n    # Loop through the first N numbers of both lists\n    for i in range(N):\n        # Calculate the largest product of the two lists\n        product1 = nums1[i] * nums2[-1]\n        product2 = nums2[i] * nums1[-1]\n        # Update the largest products lists\n        if product1 > largest1[-1]:\n            largest1.append(product1)\n        if product2 > largest2[-1]:\n            largest2.append(product2)\n    # Return the largest products lists\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables to store the largest products\n    largest_product1 = nums1[0] * nums2[0]\n    largest_product2 = nums1[0] * nums2[N-1]\n    largest_product3 = nums1[N-1] * nums2[0]\n    largest_product4 = nums1[N-1] * nums2[N-1]\n    \n    # Find the largest products\n    for i in range(1, N):\n        # Calculate the product of the first i numbers of nums1 and the first i numbers of nums2\n        product1 = nums1[0] * nums1[1] * nums1[2] *... * nums1[i]\n        \n        # Calculate the product of the last N-i numbers of nums1 and the last N-i numbers of nums2\n        product2 = nums1[N-i-1] * nums1[N-i] * nums1[N-i-2] *... * nums1[N-1]\n        \n        # Update the largest products\n        if product1 > largest_product1:\n            largest_product1 = product1\n        if product2 > largest_product2:\n            largest_product2 = product2\n        \n        # Calculate the product of the first i numbers of nums2 and the first i numbers of nums1\n        product3 = nums2[0] * nums2[1] * nums2[2] *... * nums2[i]\n        \n        # Calculate the product of the last N-i numbers of nums2 and the last N-i numbers of nums1\n        product4 = nums2[N-i-1] * nums2[N-i] * nums2[N-i-2] *... * nums2[N-1]\n        \n        # Update the largest products\n        if product3 > largest_product3:\n            largest_product3 = product3\n        if product4 > largest_product4:\n            largest_product4 = product4\n    \n    # Return the largest products\n    return largest_product1, largest_product2, largest_product3, largest_product4"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in non-decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize two variables to store the maximum and minimum products found\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    # Iterate through the first N elements of the sorted lists and calculate the maximum and minimum products\n    for i in range(N):\n        max_product = max(max_product, nums1[i] * nums2[i])\n        min_product = min(min_product, nums1[i] * nums2[i])\n        \n    # Return the maximum and minimum products\n    return max_product, min_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if N % 2!= 0:\n        print(\"The number of products to find must be even.\")\n        return\n    largest_products = []\n    for i in range(N // 2):\n        # Find the largest product of the first list and one of the second list\n        product1 = max(nums1) * max(nums2)\n        # Find the largest product of the second list and one of the first list\n        product2 = max(nums2) * max(nums1)\n        largest_products.append(max(product1, product2))\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the maximum value of the largest product\n    largest_product = float('-inf')\n    \n    # Iterate through the first N elements of each list\n    for i in range(N):\n        \n        # Calculate the product of the current element of nums1 and the largest element of nums2\n        current_product1 = nums1[i] * nums2[-1]\n        \n        # Calculate the product of the current element of nums2 and the largest element of nums1\n        current_product2 = nums2[i] * nums1[-1]\n        \n        # Update the maximum value of the largest product\n        largest_product = max(largest_product, current_product1, current_product2)\n        \n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            factor1 = max(nums1[:i+1])\n            factor2 = max(nums2[:j+1])\n            product = factor1 * factor2\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # find the maximum value of each list\n    max1, max2 = max(nums1), max(nums2)\n\n    # initialize the output list with zeros\n    result = [0] * N\n\n    # iterate over the specified number of products to find\n    for i in range(N):\n        # calculate the product of the two largest values from each list\n        product = max1 * max2\n\n        # find the index of the largest value in the first list\n        index1 = nums1.index(max1)\n\n        # find the index of the largest value in the second list\n        index2 = nums2.index(max2)\n\n        # remove the largest value from each list\n        nums1.pop(index1)\n        nums2.pop(index2)\n\n        # update the output list with the new product\n        result[i] = product\n\n    # return the output list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return \"Invalid input: N must be <= the length of the smaller list.\"\n\n    # Calculate the product of the two lists, then take the N largest products\n    product = 1\n    for num in nums1 + nums2:\n        product *= num\n\n    largest_products = [0] * N\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i + j + 1 > N:\n                break\n            largest_products[i + j] = max(nums1[i] * nums2[j], largest_products[i + j])\n\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the maximum products for each combination of factors\n    max_products = []\n\n    # Loop through each combination of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the product of the selected factors\n            product = nums1[i] * nums2[j]\n\n            # If this is the largest product found so far, add it to the list of maximum products\n            if product > max_products[-1] or (product == max_products[-1] and i < len(nums1) and j < len(nums2)):\n                max_products.append(product)\n\n    # Sort the list of maximum products in descending order\n    max_products.sort(reverse=True)\n\n    # Return the N largest products\n    return max_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables for largest product and count of products\n    largest_product = 0\n    product_count = 0\n\n    # Loop through each pair of elements in the two lists\n    for i in range(N):\n        # Calculate the product of the two largest elements in each list\n        product = nums1[i] * nums2[i]\n\n        # If the product is greater than the current largest product, update the largest product and count of products\n        if product > largest_product:\n            largest_product = product\n            product_count = 1\n        # If the product is the same as the current largest product, increment the count of products\n        elif product == largest_product:\n            product_count += 1\n\n    return largest_product, product_count"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the maximum number.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 10)) # Output: 10"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of those two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(str1)\n    # Convert the list of characters to a tuple\n    tup = tuple(str_list)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Set the leftmost unset bit in a given number.\n    \"\"\"\n    # Convert binary string to integer\n    n = int(n, 2)\n    # Initialize the leftmost unset bit position to -1\n    left_most_unset_bit = -1\n    # Iterate through each bit in the binary string\n    for i in range(len(bin(n)[2:])): \n        # If the current bit is set, set the leftmost unset bit position to i\n        if n & (1 << i): \n            left_most_unset_bit = i\n            # Break out of the loop\n            break\n    # If no unset bit was found, set the leftmost unset bit position to the length of the binary string\n    if left_most_unset_bit == -1: \n        left_most_unset_bit = len(bin(n)[2:])\n    # Convert the leftmost unset bit position to binary string and set the leftmost unset bit\n    left_most_unset_bit_bin = bin(left_most_unset_bit)[2:]\n    n |= (1 << int(left_most_unset_bit_bin, 2))\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    while n & 1 == 0: # check if n is a power of 2\n        n >>= 1 # shift right by 1\n\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the mask variable with all 1s\n    mask = 1 << 31\n    \n    # Iterate through all bits in the number until the leftmost unset bit is found\n    while mask & n:\n        mask = mask << 1\n    \n    # Set the leftmost unset bit to 1\n    n = n | mask\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # Initialize the result variable to 0\n    result = 0\n    \n    # Initialize the bitwise AND operator as 1\n    and_operator = 1\n    \n    # Iterate over the bits of n\n    for i in range(32):\n        \n        # Check if the leftmost bit of n is unset (i.e. 0)\n        if n & and_operator == 0:\n            \n            # Set the result to the value of the current bit\n            result = n\n            \n            # Exit the loop as we have found the left most unset bit\n            break\n        \n        # Shift the bitwise AND operator to the left\n        and_operator <<= 1\n        \n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the left most unset bit to -1\n    left_most_unset_bit = -1\n    # iterate through all possible bits (starting from 0)\n    for bit in range(32):\n        # check if the current bit has a 1 in it\n        if n & (1 << bit):\n            # if a 1 is found, update the left most unset bit\n            if left_most_unset_bit == -1:\n                left_most_unset_bit = bit\n            # if the current bit is smaller than the left most unset bit, update it\n            elif bit < left_most_unset_bit:\n                left_most_unset_bit = bit\n    # return the left most unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the mask with all 1's\n    mask = 0xffffffff\n    # Get the first bit set in the mask\n    first_bit_set = mask & -mask\n    # Shift the mask to the right by the first bit set\n    mask >>= first_bit_set\n    # If the mask is 0, return the first bit set\n    if mask == 0:\n        return first_bit_set\n    # Perform a bitwise AND operation with the input number n to get the rightmost unset bit\n    unset_bit = n & mask\n    # If the unset bit is 0, return the first bit set\n    if unset_bit == 0:\n        return first_bit_set\n    # Return the unset bit as the result\n    return unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    i = 0\n    while i < 32:\n        if n & (1 << i):\n            return i\n        i += 1\n    return None"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Find the leftmost unset bit\n    leftmost_unset_bit = 0\n    while (1 << leftmost_unset_bit) & n == 0:\n        leftmost_unset_bit += 1\n\n    # Set the leftmost unset bit\n    return n | (1 << leftmost_unset_bit)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the index of the leftmost unset bit\n    unset_bit_index = n.bit_length() - n.bit_length().count(0)\n    \n    # Set the unset bit to 1\n    n |= 1 << unset_bit_index\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the count of unset bits\n    count = 0\n    # Loop through each bit of the binary representation of n\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            count += 1\n        else:\n            break\n    # Check if the left most bit is already set\n    if (n >> count) & 1 == 1:\n        count += 1\n    # Shift the binary representation of n left by the count of unset bits\n    shifted = n << count\n    # Return the shifted value\n    return shifted"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone using the formula V = (1/3) * \u03c0 * r^2 * h\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula: V = (1/3) * pi * r^2 * h\n    \n    Parameters:\n        r (float): the radius of the cone\n        h (float): the height of the cone\n        \n    Returns:\n        float: the volume of the cone\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Calculate the volume of the cone using the formula V=1/3*\u03c0r^2h\n    V = 1/3 * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with given radius r and height h.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two parameters, r (radius) and h (height), and calculates the volume of a cone using the formula V = \u03c0r\u00b2h, where V is the volume of the cone and r is the radius of the base and h is the height of the cone.\n    '''\n    pi = math.pi\n    V = (pi * r**2 * h)\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest < n:\n        highest *= 2\n    return highest - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    power = 0\n    while n > 1:\n        power += 1\n        n >>= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Initialize variable to store the highest power of 2 \n    highest = 0\n    \n    # Loop until the highest power of 2 is greater than n \n    while highest < n: \n        highest = highest * 2\n    \n    # Return the highest power of 2 \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2 less than or equal to n\n    highest_power = 0\n    \n    # Loop through all numbers from 1 to n (excluding n)\n    for i in range(1, n+1):\n        # Check if i is a power of 2\n        if i & (i-1) == 0:\n            # If i is a power of 2, check if it's greater than the current highest power\n            if i > highest_power:\n                highest_power = i\n    \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n    for i in range(1, int(n**0.5)+1): \n        if n % i == 0: \n            return i \n    return n "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 found to be 1\n    highest_pow_of_2 = 1\n    \n    # loop through all powers of 2 up to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # if n is a multiple of the power of 2, update highest_pow_of_2\n        if n % i == 0:\n            highest_pow_of_2 = i\n    \n    # return the highest power of 2 found\n    return highest_pow_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while n > 1:\n        highest_power += 1\n        n >>= 1\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0\n    while n > highest:\n        highest = highest << 1\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while n > 1:\n        highest_power += 1\n        n >>= 1\n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Base cases\n    if n == 0 or n == 1:\n        return n\n    # Recursive case\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize the first two lucas numbers\n    lucas_1 = 2\n    lucas_2 = 1\n\n    # Calculate the nth lucas number\n    for i in range(2, n + 1):\n        lucas_temp = lucas_1 + lucas_2\n        lucas_1 = lucas_2\n        lucas_2 = lucas_temp\n\n    return lucas_2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # initialize the first two lucas numbers\n    a, b = 2, 1\n    # iterate through the desired number of iterations\n    for i in range(n):\n        # calculate the next lucas number\n        c = a + b\n        # update the values of a and b for the next iteration\n        a = b\n        b = c\n    # return the nth lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function will find the nth Lucas number.\n    \"\"\"\n\n    # Initialize the first two Lucas numbers\n    lucas = [0, 1]\n\n    # Loop through the rest of the Lucas numbers\n    for i in range(2, n+1):\n        # Compute the next Lucas number by adding the two previous ones\n        lucas.append(lucas[i-1] + lucas[i-2])\n\n    # Return the nth Lucas number\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Base cases\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(lst, string):\n    '''\n    This function takes a list and a string as input and applies the given format string to all the elements of the list.\n    '''\n    for i in range(len(lst)):\n        lst[i] = string.format(lst[i])\n    return lst"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Args:\n        list_ (list): List of strings to apply the format string to.\n        string (str): Format string to apply to all elements of the list.\n\n    Returns:\n        list: A new list with the applied format string.\n    \"\"\"\n    formatted_list = [string.format(x) for x in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Loop through each element in the list\n    for element in list_:\n        # Apply the format string to the element and print the result\n        print(string.format(element))\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        for j in range(len(l3)):\n            nested_dict[l1[i]][l3[j]] = l3[j+len(l2)]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        if isinstance(l1[i], list):\n            # nested list\n            d[l1[i]] = convert_list_dictionary(l2[i], l3[i])\n        else:\n            # non-nested list\n            d[l1[i]] = l2[i]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # loop through each list and add it to the dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n\n    # loop through each list and add it to the dictionary as a list\n    for j in range(len(l3)):\n        if l3[j] not in nested_dict:\n            nested_dict[l3[j]] = [l2[i] for i in range(len(l2))]\n        else:\n            nested_dict[l3[j]].append(l2[j])\n\n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert the first list to a dictionary\n    d1 = dict(zip(l1, l2))\n    \n    # Convert the third list to a dictionary\n    d3 = dict(zip(l1, l3))\n    \n    # Combine the two dictionaries\n    d = {**d1, **d3}\n    \n    # Return the final dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create empty dictionary\n    result = {}\n    \n    # Loop through each list and convert to nested dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                key = str(l1[i]) + str(l2[j]) + str(l3[k])\n                value = [l1[i], l2[j], l3[k]]\n                result[key] = value\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Creating an empty dictionary\n    result = {}\n    \n    # Iterating over the lists and adding the elements to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]]['sublist'] = l3[i]\n        \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the result\n    result = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Loop through each element in the list\n        for j in range(len(l1[i])):\n            # Add the element to the corresponding key in the result dictionary\n            result[l2[i][j]] = l3[i][j]\n    # Return the resulting dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            if type(item) == list:\n                if i not in result:\n                    result[i] = {}\n                if j not in result[i]:\n                    result[i][j] = []\n                for subitem in item:\n                    result[i][j].append(subitem)\n            else:\n                if i not in result:\n                    result[i] = {}\n                if j not in result[i]:\n                    result[i][j] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create a dictionary to store the data\n    data = {}\n\n    # Loop through each list and add items to the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {}\n        data[l1[i]][l2[i]] = l3[i]\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create empty dictionary\n    d = {}\n    # loop through each list and add items to the dictionary\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l1[i]].append(l3[i])\n    return d"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case for the recursion\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    # Check for factors of 5\n    if n % 5 == 0:\n        return get_max_sum(n // 5)\n    \n    # Check for factors of 3\n    if n % 3 == 0:\n        return get_max_sum(n // 3)\n    \n    # Check for factors of 2\n    if n % 2 == 0:\n        return get_max_sum(n // 2)\n    \n    # If none of the above conditions are met, divide the number by 5 and add 1 to get the maximum sum\n    max_sum = get_max_sum(n // 5) + 1\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        if n == 1:\n            return n\n        elif n == 2:\n            return 4\n        else:\n            return f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5)\n\n    return max(f(n), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # calculate the maximum sum for the first n/5 terms\n    max_sum_5 = n/5 * (n/5 + n/4 + n/3 + n/2 + n)\n    \n    # calculate the maximum sum for the remaining n/5 terms\n    max_sum_remaining = n % 5 * (n % 5 + n % 4 + n % 3 + n % 2 + n)\n    \n    # calculate the maximum sum by taking the maximum of the two sums\n    max_sum = max(max_sum_5, max_sum_remaining)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    elif n == 2:\n        return 2\n    \n    elif n == 3:\n        return 6\n    \n    elif n == 4:\n        return 24\n    \n    elif n == 5:\n        return 120\n    \n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        max1 = get_max_sum(n//2)\n        max2 = get_max_sum(n//3)\n        max3 = get_max_sum(n//4)\n        max4 = get_max_sum(n//5)\n        max5 = get_max_sum(n)\n        return max(max1, max2, max3, max4, max5) + n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for element in input_list:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_list = [element]\n        elif length == max_length:\n            max_list.append(element)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # Find the length of all elements in the input list\n    lengths = [len(element) for element in input_list]\n\n    # Find the maximum length of the input list\n    max_length = max(lengths)\n\n    # Create a new list to store the elements of the input list\n    result = []\n\n    # Iterate through the input list and add elements of the maximum length to the result list\n    for element in input_list:\n        if len(element) == max_length:\n            result.append(element)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize the maximum length to 0\n    max_length = 0\n    \n    # Loop through each list in the input list\n    for sublist in input_list:\n        # Get the length of the current sublist\n        current_length = len(sublist)\n        \n        # Update the maximum length if the current sublist has a greater length\n        if current_length > max_length:\n            max_length = current_length\n    \n    # Return the list with the maximum length\n    return input_list[input_list.index(max_length)]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to keep track of the maximum and minimum lengths\n    max_length = 0\n    min_length = float('inf')\n    \n    # Loop through the list and update the minimum and maximum lengths\n    for item in input_list:\n        length = len(str(item))\n        if length > max_length:\n            max_length = length\n        if length < min_length:\n            min_length = length\n    \n    # Create a new list containing only the items with the maximum length\n    result_list = []\n    for item in input_list:\n        length = len(str(item))\n        if length == max_length:\n            result_list.append(item)\n    \n    # Return the result list\n    return result_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = []\n    for item in input_list:\n        lengths.append(len(item))\n    return input_list[lengths.index(max(lengths))]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Initialize an empty set to store unique elements of the tuple\n    unique_set = set()\n    # Iterate through the tuple elements\n    for element in test_tup:\n        # If the element is not already in the set, add it to the set\n        if element not in unique_set:\n            unique_set.add(element)\n        # If the element is already in the set, the tuple contains duplicates\n        else:\n            return False\n    # If no duplicates were found, the function returns True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store the unique values in the tuple\n    unique_vals = set(test_tup)\n    \n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_vals) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set(test_tup)\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store the elements of the tuple\n    set_of_elements = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(set_of_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store the unique elements\n    unique_set = set()\n\n    # iterate over the tuple elements and add them to the set\n    for element in test_tup:\n        unique_set.add(element)\n\n    # check if the set is empty, which means there were no duplicates in the original tuple\n    if not unique_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes in a string and returns the first non-repeating character.\n\n    :param str1: A string.\n    :return: The first non-repeating character in the string or None if all characters are repeating.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n\n    Parameters:\n        str1: string - The given string.\n\n    Returns:\n        char: string - The first non-repeated character in the given string.\n\n    Example:\n        str1 = \"abcde\"\n        first_non_repeating_character(str1) # returns \"c\"\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n    \n    Args:\n        str1: A string.\n\n    Returns:\n        The first non-repeated character in the string. If no such character exists, it returns None.\n    \"\"\"\n    \n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    \n    # Loop through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Loop through the string again and return the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char, count in count.items():\n        if count == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_set = set() # to store the characters in the string\n    for char in str1:\n        if char not in char_set: # if the character is not already in the set\n            char_set.add(char)\n            return char # return the first non-repeated character\n    \n    return None # if no non-repeated character is found, return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    This function takes a string as input and returns True if it starts and ends with the same character.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Determine the median based on the length of the list\n    if len(sorted_numbers) % 2 == 0:\n        # The numbers have an equal number of elements\n        midpoint = len(sorted_numbers) // 2\n        median = (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint]) / 2\n    else:\n        # The numbers have an odd number of elements\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Calculate the sum of the three numbers\n    total = numbers[0] + numbers[1] + numbers[2]\n    \n    # Calculate the average of the three numbers\n    average = total / 3\n    \n    # Find the median of the three numbers\n    if len(numbers) % 2 == 0:\n        median = (numbers[1] + numbers[2]) / 2\n    else:\n        median = numbers[1]\n    \n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Check if the length of the list is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If it's even, the median is the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # If it's odd, the median is just the middle number\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        # Find the median of two even numbers\n        return (numbers[n//2 - 1] + numbers[n//2]) / 2\n    else:\n        # Find the median of one odd number\n        return numbers[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    middle = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2\n    else:\n        return sorted_numbers[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(sorted_nums)\n    if n % 2 == 0:\n        median = (sorted_nums[n//2 - 1] + sorted_nums[n//2]) / 2\n    else:\n        median = sorted_nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_sorted = sorted([a, b, c])\n    if len(a_sorted) % 2 == 0:\n        median = (a_sorted[len(a_sorted)//2] + a_sorted[len(a_sorted)//2-1])/2\n    else:\n        median = a_sorted[len(a_sorted)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import random\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\ndef quick_select(arr, low, high, k):\n    if low == high:\n        return arr[low]\n\n    pivot_index = partition(arr, low, high)\n\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quick_select(arr, low, pivot_index - 1, k)\n    else:\n        return quick_select(arr, pivot_index + 1, high, k)\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    arr.sort()\n    n = len(arr)\n    median = quick_select(arr, 0, n - 1, n // 2)\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        sum_ = 0\n        while num > 0:\n            digit = num % 10\n            sum_ += digit\n            num //= 10\n        total += sum_\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    \n    for num in nums:\n        # convert the number to a string and loop through each character\n        # convert each character to an integer and add to the sum\n        digit_sum += int(str(num)[::-1])\n    \n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        # convert the number to a string and split it into digits\n        digits = [int(digit) for digit in str(num)]\n        # compute the sum of digits and add it to the total sum\n        total_sum += sum(digits)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    sum_of_digits_list = []\n    \n    # Iterate over each number in the input list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        \n        # Add the sum of digits of each number to the list\n        sum_of_digits_list.append(sum(digits))\n    \n    # Return the list of sum of digits\n    return sum_of_digits_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the first element of the first tuple\n    result_tup = (test_tup1[0], )\n    # Iterate through the remaining elements of both tuples\n    for i in range(1, len(test_tup1)):\n        # Perform the bitwise xor operation on the current element and the previous result\n        result_tup = (result_tup[0] ^ test_tup1[i], )\n    # Iterate through the remaining elements of both tuples\n    for i in range(1, len(test_tup2)):\n        # Perform the bitwise xor operation on the current element and the previous result\n        result_tup = (result_tup[0] ^ test_tup2[i], )\n    # Return the final result\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result = (0, 0)\n\n    # Iterate over each element in both tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the corresponding elements of the tuples\n        result[i] = test_tup1[i] ^ test_tup2[i]\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # loop through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to lists so that we can perform bitwise operations on them\n    list_tup1 = list(test_tup1)\n    list_tup2 = list(test_tup2)\n    \n    # Perform bitwise xor operation on the lists\n    xor_list = [a ^ b for a, b in zip(list_tup1, list_tup2)]\n    \n    # Convert the list back to a tuple and return it\n    return tuple(xor_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the number of unique tuples.\n    \"\"\"\n    # Create an empty dictionary to store unique tuples\n    unique_tuples = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in unique_tuples:\n            # If it is, increment the count by 1\n            unique_tuples[tup] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            unique_tuples[tup] = 1\n    \n    # Return the total count of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in it.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The number of unique tuples in the input list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates, then back to a list.\n    unique_tuples = list(set(test_list))\n\n    # Return the length of the unique_tuples list.\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    import itertools\n    freq_set = set()\n    for tup in test_list:\n        freq_set.add(tup)\n    return len(freq_set)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store unique tuples\n    unique_tuples = set()\n    # iterate over each tuple in the list\n    for i in test_list:\n        # if the tuple is not already in the set, add it\n        if i not in unique_tuples:\n            unique_tuples.add(i)\n    # return the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    # Using set to get unique tuples\n    unique_tuples = set(tuple(test_list))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for elem in test_list:\n        if tuple(elem) in freq_dict:\n            freq_dict[tuple(elem)] += 1\n        else:\n            freq_dict[tuple(elem)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n    \n    # Loop through each tuple in the list and increment the frequency count for each tuple\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    \n    # Return the sum of the values in the dictionary, which is the total number of unique tuples\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty set to store unique tuples\n    unique_tuples = set()\n    # loop through the list and add unique tuples to the set\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            unique_tuples.add((test_list[i], test_list[j]))\n    # return the length of the unique_tuples set\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup_sum = tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i]))\n        result.append(tup_sum)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row1 = test_tup1[i]\n        row2 = test_tup2[i]\n        for j in range(len(row1)):\n            result.append(row1[j] + row2[j])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n                add_nested_tuples(test_tup1[i], test_tup2[i])\n            elif isinstance(test_tup1[i], tuple) or isinstance(test_tup2[i], tuple):\n                raise TypeError(\"Both tuples must be nested or non-nested\")\n            else:\n                test_tup1[i] += test_tup2[i]\n    else:\n        raise ValueError(\"Both tuples must have same length\")"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two given tuples must have the same length.\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Initialize an empty list to store the result\n    result_list = []\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        \n        # Initialize a variable to store the sum of the corresponding elements in the first and second tuples\n        current_sum = 0\n        \n        # Loop through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            \n            # Add the corresponding elements of the two tuples and store the result in the current_sum variable\n            current_sum += test_tup1[i][j] + test_tup2[i][j]\n        \n        # Append the current_sum variable to the result_list\n        result_list.append(current_sum)\n    \n    # Return the result_list as the result\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result of each tuple addition\n    result_list = []\n    # loop through the first tuple and perform addition in each index\n    for i in range(len(test_tup1)):\n        # add the current element of the first tuple and the current element of the second tuple\n        result_list.append(test_tup1[i] + test_tup2[i])\n    # return the list of result of each tuple addition\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        sub_result = []\n        for j in range(len(test_tup1[i])):\n            sub_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(sub_result)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    return a if a < b else b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a Python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            print(f\"{element} exists in {tuple1}\")\n            return True\n    print(f\"{tuplex} does not exist in {tuple1}\")\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes two arguments - tuplex and tuple1 - \n    and checks whether an element exists within a tuple.\n    '''\n    # Loop through the tuple1 and check whether each element exists in the tuple\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    # If no element is found in the tuple1, return False\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for elem in tuple1:\n        if elem in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two parameters: a tuple of elements to be searched for in a larger tuple, and a tuple to be searched.\n    It returns a boolean value indicating whether the element exists in the larger tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): a tuple containing elements to search for\n    tuple1 (tuple): a tuple of elements to search within tuplex\n\n    Returns:\n    bool: True if an element in tuple1 exists within tuplex, False otherwise\n    \"\"\"\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    \"\"\"\n    This function takes a number x as input and returns True if the parity of x is odd, and False otherwise.\n    \"\"\"\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns True if the parity of that number is odd,\n    and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the number is even or odd\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    largest_digit = max(digits)\n    for i in range(len(digits)):\n        if digits[i] < largest_digit:\n            digits[i], digits[largest_digit] = digits[largest_digit], digits[i]\n            largest_digit = i\n    return int(\"\".join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            break\n    return int(''.join(str(x) for x in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the input number to a string\n    str_n = str(n)\n    \n    # create a list to store the digits of the input number\n    digits = []\n    \n    # loop through each digit of the input number and add it to the list\n    for digit in str_n:\n        digits.append(int(digit))\n    \n    # loop through the digits of the input number\n    for i in range(len(digits)):\n        # loop through the digits of the input number to find the next digit to be swapped with the current digit\n        for j in range(i+1, len(digits)):\n            # if the next digit is larger than the current digit, swap them\n            if digits[j] > digits[i]:\n                digits[i], digits[j] = digits[j], digits[i]\n                # convert the list of digits back to a string and convert it back to an integer and return it\n                return int(''.join(map(str, digits)))\n    \n    # if no such number exists, return the input number itself\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Define a function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Define a function to check if a number is a power of 2\n    def is_power_of_2(num):\n        return num!= 0 and (num & (num - 1)) == 0\n\n    # Define a function to reverse a number\n    def reverse(num):\n        reversed_num = 0\n        while num!= 0:\n            reversed_num = reversed_num * 10 + num % 10\n            num //= 10\n        return reversed_num\n\n    # Initialize variables\n    largest_power_of_2 = 0\n    prev_largest_power_of_2 = 0\n    power_of_2 = 1\n\n    # Iterate through all possible numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the current number is a palindrome\n        if is_palindrome(i):\n            # Check if the current number is a power of 2\n            if is_power_of_2(i):\n                # Update largest power of 2 and previous largest power of 2\n                largest_power_of_2 = i\n                prev_largest_power_of_2 = largest_power_of_2 - 1\n                power_of_2 = 1\n            else:\n                # Update largest power of 2 and previous largest power of 2\n                largest_power_of_2 = i\n                prev_largest_power_of_2 = largest_power_of_2 - power_of_2\n                power_of_2 <<= 1\n                # Reverse the number and check if it is a palindrome\n                if is_palindrome(reverse(largest_power_of_2)):\n                    # Return the rearranged number\n                    return largest_power_of_2\n        else:\n            # Check if the current number is a power of 2\n            if is_power_of_2(i):\n                # Update largest power of 2 and previous largest power of 2\n                largest_power_of_2 = i\n                prev_largest_power_of_2 = largest_power_of_2 - 1\n                power_of_2 = 1\n            else:\n                # Update largest power of 2 and previous largest power of 2\n                largest_power_of_2 = i\n                prev_largest_power_of_2 = largest_power_of_2 - power_of_2\n                power_of_2 <<= 1\n\n    # If no valid number is found, return None\n    return None"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize the result\n    result = 0\n\n    # iterate through the digits of n\n    for digit in str(n):\n        # if the digit is 9, increment the result by 1\n        if digit == '9':\n            result += 10\n            continue\n\n        # if the digit is 0, decrement the result by 1\n        if digit == '0':\n            result -= 1\n            continue\n\n        # if the digit is 1, decrement the result by 1\n        if digit == '1':\n            result -= 1\n            continue\n\n        # if the digit is 2, decrement the result by 2\n        if digit == '2':\n            result -= 2\n            continue\n\n        # if the digit is 3, decrement the result by 2\n        if digit == '3':\n            result -= 2\n            continue\n\n        # if the digit is 4, decrement the result by 2\n        if digit == '4':\n            result -= 2\n            continue\n\n        # if the digit is 5, decrement the result by 2\n        if digit == '5':\n            result -= 2\n            continue\n\n        # if the digit is 6, decrement the result by 2\n        if digit == '6':\n            result -= 2\n            continue\n\n        # if the digit is 7, decrement the result by 2\n        if digit == '7':\n            result -= 2\n            continue\n\n        # if the digit is 8, decrement the result by 2\n        if digit == '8':\n            result -= 2\n            continue\n\n        # if the digit is 9, increment the result by 2\n        if digit == '9':\n            result += 2\n            continue\n\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Reconstruct the number from the sorted digits\n    next_bigger = int(''.join(map(str, digits)))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def swap_digits(num):\n        return int(''.join(sorted(str(num), reverse=True)))\n    \n    next_bigger = swap_digits(n)\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert integer to a string\n    num_str = str(n)\n\n    # find the position of the smallest digit\n    min_pos = num_str.index(min(num_str))\n\n    # reverse the digits before the smallest digit\n    if min_pos == 0:\n        num_str = num_str[::-1]\n    else:\n        num_str = num_str[::-1][:min_pos] + num_str[min_pos:][::-1]\n\n    # convert the reversed digits back to an integer\n    new_num = int(num_str)\n\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_list = list(str(n))\n    max_num = max(num_list)\n    min_num = min(num_list)\n    \n    if max_num == min_num:\n        return n + 1\n    \n    if max_num > min_num:\n        for i in range(len(num_list)):\n            if num_list[i] == max_num:\n                num_list[i] = min_num\n                break\n        \n        num_list.append(max_num)\n    else:\n        for i in range(len(num_list)-1, -1, -1):\n            if num_list[i] == max_num:\n                num_list[i] = min_num\n                break\n        \n        num_list.insert(0, max_num)\n    \n    return int(''.join(num_list))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            elif (num1 + num2) < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n    return [(val[1][0], val[1][1]) for val in heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function finds the k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Sort both arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the result list\n    result = []\n\n    # Initialize the minimum heap for the first array\n    heap = []\n\n    # Initialize the minimum heap for the second array\n    heap2 = []\n\n    # Loop through the elements of the first array\n    for num in nums1:\n\n        # If the heap is not empty and the minimum element from the heap is greater than the current element,\n        # we remove it from the heap and add the current element to the heap\n        while heap and heap[0] > num:\n            heapq.heappop(heap)\n\n        # If the heap is not empty and the current element is greater than the minimum element from the heap,\n        # we add the current element to the heap\n        while heap and heap[0] < num:\n            heapq.heappush(heap, heap[0])\n            heapq.heappop(heap2)\n\n        # If the heap is empty or the current element is less than or equal to the minimum element from the heap,\n        # we add the current element to the heap\n        heapq.heappush(heap, num)\n        heapq.heappush(heap2, -heap[0])\n\n        # If the size of the result list is less than k, we add the current pair to the result list\n        if len(result) < k:\n            result.append((num, -heap[0]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            elif nums1[i] + nums2[j] < min_heap[0][0]:\n                heapq.heappushpop(min_heap, (nums1[i] + nums2[j], (i, j)))\n    result = []\n    for _ in range(k):\n        result.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = [(nums1[0], (0, 0))]\n    count = 0\n    \n    while count < k:\n        smallest = heapq.heappop(heap)[1]\n        left, right = smallest\n        \n        if right < len(nums2) - 1:\n            heapq.heappush(heap, (nums1[0], (left + 1, right + 1)))\n        count += 1\n        \n        if right < len(nums2) - 1:\n            heapq.heappush(heap, (nums1[0], (left, right + 1)))\n        count += 1\n        \n        if left > 0:\n            heapq.heappush(heap, (nums1[0], (left - 1, right)))\n        count += 1\n        \n        if left > 0:\n            heapq.heappush(heap, (nums1[0], (left, right)))\n        count += 1\n    \n    result = []\n    while heap:\n        smallest = heapq.heappop(heap)[1]\n        left, right = smallest\n        result.append((nums1[left], nums2[right]))\n    \n    result.sort(key=lambda x: (x[0], x[1]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of tuples (distance, (i, j))\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(min_heap, (-abs(nums1[i] - nums2[j]), (i, j)))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Extract the k smallest distances from the heap and create the final output\n    result = []\n    while min_heap:\n        _, (i, j) = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        if i > 0:\n            heapq.heappush(min_heap, (-abs(nums1[i-1] - nums2[j]), (i-1, j)))\n        if j > 0:\n            heapq.heappush(min_heap, (-abs(nums1[i] - nums2[j-1]), (i, j-1)))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Heapify the first array\n    nums1.sort()\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Heapify the second array\n    nums2.sort()\n    min_heap = []\n    for num in nums2:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Find the k smallest pairs\n    min_heap = []\n    for i in range(k):\n        if len(min_heap) == 0:\n            heapq.heappush(min_heap, (nums1[i], nums2[i]))\n        elif (nums1[i] < min_heap[0][0]) or ((nums1[i] == min_heap[0][0]) and (nums2[i] < min_heap[0][1])):\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (nums1[i], nums2[i]))\n    \n    # Extract the k smallest pairs\n    result = []\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pq = []\n    heapq.heapify(pq)\n    \n    # Add all elements of nums1 to pq\n    for num in nums1:\n        heapq.heappush(pq, -num)\n    \n    # Add all elements of nums2 to pq\n    for num in nums2:\n        heapq.heappush(pq, num)\n    \n    # Initialize the result list with empty tuples\n    result = []\n    \n    # Find k pairs\n    for i in range(k):\n        # Pop the smallest element from pq and add it to result\n        num1 = -heapq.heappop(pq)\n        num2 = heapq.heappop(pq)\n        result.append((num1, num2))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap to store the pairs\n    pairs_heap = []\n\n    # loop through the first array\n    for num1 in nums1:\n\n        # loop through the second array\n        for num2 in nums2:\n\n            # add the current pair to the min heap if the size of the heap is less than k\n            if len(pairs_heap) < k:\n                heapq.heappush(pairs_heap, (num1, num2))\n\n            # if the size of the heap is equal to k, compare the current pair with the smallest pair in the heap\n            else:\n                if num1 + num2 < pairs_heap[0][0] + pairs_heap[0][1]:\n                    heapq.heappop(pairs_heap)\n                    heapq.heappush(pairs_heap, (num1, num2))\n\n    # return the pairs in the heap\n    return pairs_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the smallest pairs found so far\n    min_heap = []\n\n    # iterate through both arrays and add the smallest pairs to the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                # add the smallest pair to the heap\n                heapq.heappush(min_heap, (num1, num2))\n            elif (num1 + num2) < min_heap[0][0]:\n                # replace the smallest pair in the heap if the current pair is smaller\n                heapq.heapreplace(min_heap, (num1, num2))\n\n    # extract the k smallest pairs from the heap and return them as a list\n    return [heapq.heappop(min_heap) for i in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Combine the two lists into one list of tuples, where each tuple contains a pair of elements from nums1 and nums2\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n\n    # Sort the pairs in ascending order based on their sum\n    pairs.sort(key=lambda x: x[0] + x[1])\n\n    # Keep track of the current set of pairs that we have found\n    result = []\n\n    # Use a heap to keep track of the pairs that we have not yet added to the result set\n    heapq.heapify(pairs)\n\n    # Iterate over the first k pairs in the sorted pairs list\n    for i in range(k):\n        # Extract the smallest pair from the heap (the pair with the lowest sum)\n        pair = heapq.heappop(pairs)\n\n        # If the current pair is not already in the result set, add it to the result set and update the heap\n        if pair not in result:\n            result.append(pair)\n            heapq.heappush(pairs, (pair[0] + nums2[pair[1]] if pair[1] < len(nums2) - 1 else float('inf'), pair[1] + 1 if pair[1] < len(nums2) - 1 else 0))\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product of two tuples in a list.\n    \"\"\"\n    lst.sort()\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of the pairs of tuples within the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n\n    # Sort the list of tuples in ascending order of the first element of each tuple\n    list1 = sorted(list1, key=lambda x: x[0])\n\n    # Initialize variables to store the minimum and maximum values of the first element of each tuple\n    min1 = float('inf')\n    max1 = float('-inf')\n\n    # Initialize variable to store the minimum product\n    min_prod = float('inf')\n\n    # Iterate through the list of tuples and calculate the minimum product from the pairs of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][1] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n\n            # Update the minimum and maximum values of the first element of each tuple\n            if list1[i][0] < min1:\n                min1 = list1[i][0]\n            if list1[j][0] > max1:\n                max1 = list1[j][0]\n\n    # Return the minimum product\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product to a large number\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i] * list1[j]\n\n            # Update the minimum product if this is the new minimum\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Create an empty list to store the minimum products\n    min_products = []\n    \n    # Iterate through each tuple in the list\n    for tup in list1:\n        # Calculate the product of all pairs of elements in the tuple\n        product = 1\n        for i in range(len(tup)-1):\n            product *= tup[i] * tup[i+1]\n        # Append the minimum product to the list\n        min_products.append(product)\n    \n    # Find the minimum product in the list\n    min_product = min(min_products)\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Update the minimum product if necessary\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list as input and returns the minimum product of pairs of tuples within the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] * list1[j] < min_product:\n                min_product = list1[i] * list1[j]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Finding the minimum product of the pairs of tuples in the given list\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list as an argument and returns the minimum value in the list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to the first element of the list\n    min_val = listval[0]\n\n    # iterate over the remaining elements of the list\n    for i in range(1, len(listval)):\n        # if the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"List is empty\")\n    \n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n            \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError('The list cannot be empty')\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if min_value > listval[i]:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = min_val(listval[1:])\n        if isinstance(listval[0], (int, float)):\n            if isinstance(min_val, (int, float)):\n                if listval[0] < min_val:\n                    return listval[0]\n            else:\n                return min_val\n        elif isinstance(min_val, (int, float)):\n            return listval[0]\n        else:\n            return listval[0]"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(lst):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(lst) == 0:\n        raise ValueError('The list is empty.')\n    min_val = lst[0]\n    for i in lst[1:]:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of mixed values and returns the minimum value.\n    '''\n    if not listval:\n        # if the list is empty, return None\n        return None\n    min_value = listval[0]\n    for val in listval:\n        if val < min_value:\n            min_value = val\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return \"List is empty.\"\n    else:\n        minval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the given word into a list of words\n    words = word.split('_')\n\n    # Initialize an empty string to store the camel case string\n    camel_case = ''\n\n    # Iterate over the list of words and append each word to the camel case string\n    for word in words:\n        if word.isupper():\n            camel_case += word.lower()\n        else:\n            camel_case += word\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\w+', word)\n    # Convert each word to camel case\n    camel_words = [word.capitalize() for word in words]\n    # Join the camel case words back into a single string\n    camel_string = ''.join(camel_words)\n    return camel_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace snake case with camel case\n    camel_word = re.sub('([a-z])([A-Z])', r'\\1_\\2', word).lower()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_(.?)'\n    sub = lambda match: match.group(1).upper()\n    return re.sub(pattern, sub, word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert all spaces to underscores\n    word = re.sub(r'(\\s+)', '_', word)\n    # Convert the first letter to lowercase\n    word = word.capitalize()\n    # Replace underscores with camel case\n    camel_word = ''\n    for char in word:\n        if char == '_':\n            camel_word += char\n        else:\n            camel_word += char.lower()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # replace all underscores with spaces\n    word = re.sub('_','', word)\n    # split the string into words\n    words = word.split()\n    # capitalize the first letter of each word and join them with an underscore\n    return '_'.join([word.capitalize() for word in words])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the word into words\n    words = re.findall(r'\\w+', word)\n    \n    # Convert each word to camel case\n    camel_case = ''.join([word.title() for word in words])\n    \n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)', re.IGNORECASE)\n    return pattern.sub(lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    parts = re.findall(r'_(.)', word)\n    return ''.join(word[i].upper() + p.lower() for i, p in enumerate(parts))"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # iterate over the list\n    for i in range(len(l)):\n        # if the number is odd, remove it\n        if l[i] % 2!= 0:\n            del l[i]\n    # return the list without odd numbers\n    return l"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as an argument and returns a new list with only the even numbers from the original list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"List is not long enough to extract element!\")\n        return\n    \n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize a variable to store the extracted element\n    extracted_element = None\n    \n    # Iterate over the list of tuples\n    for tup in list1:\n        # If we have found the nth element, store it\n        if tup[0] == n:\n            extracted_element = tup[1]\n            break\n    \n    # Return the extracted element\n    return extracted_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError(\"n is greater than the length of the list.\")\n    \n    for i in range(len(list1)-1, -1, -1):\n        if i == n-1:\n            return list1[i][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return None\n    \n    # Check if the index is valid\n    if n >= len(list1):\n        return None\n    \n    # Return the nth element from the list\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list) or not all(isinstance(i, tuple) for i in list1):\n        raise TypeError(\"The input should be a list of tuples\")\n\n    if n < 1 or n > len(list1):\n        raise ValueError(\"The value of n should be between 1 and the length of the list\")\n\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        raise TypeError('Input must be a list')\n    if not isinstance(n, int):\n        raise TypeError('Second argument must be an integer')\n    if n < 1:\n        raise ValueError('Second argument must be greater than or equal to 1')\n    if len(list1) < n:\n        raise ValueError('Input list must have at least n elements')\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # create an empty list to store the elements\n    result = []\n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        # check if the current index is equal to n-1\n        if i == n-1:\n            # append the nth element to the result list\n            result.append(list1[i][n-1])\n        # if the current index is less than n-1, append all the elements up to the nth element\n        elif i < n-1:\n            result.append(list1[i][i])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n - 1:\n            print(list1[i])\n            return"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n        list1: List or tuple of values to be checked.\n        list2: List or tuple of values to be checked.\n\n    Returns:\n        Boolean value indicating whether any value in list1 exists in list2 or not.\n    \"\"\"\n    if not isinstance(list1, (list, tuple)) or not isinstance(list2, (list, tuple)):\n        raise TypeError(\"Both lists must be lists or tuples.\")\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Create an empty set to store the values of list1\n    set1 = set(list1)\n\n    # Check whether any value in list2 exists in set1\n    for value in list2:\n        if value in set1:\n            return True\n\n    # If no values in list2 exist in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Combine the two lists into a single list\n    combined_list = list1 + list2\n    \n    # Check whether any value in the combined list exists in either list or not\n    for value in combined_list:\n        if value in list1 and value in list2:\n            return True\n        elif value in list1:\n            return True\n        elif value in list2:\n            return True\n    \n    # If no value is found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list2:  \n        if value in list1:  \n            return True  \n            break  \n    return False  "
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i, \"exists in both lists.\")\n        else:\n            print(i, \"does not exist in both lists.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is a common value in both lists, and False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr.sort()  # Sort the array in descending order\n    max1 = max2 = arr[0]  # Initialize max1 and max2 as the first element of the array\n    \n    for i in range(1, len(arr)):\n        if arr[i] * arr[i-1] < max1 * max2:  # Check if the product of the current element and the previous element is smaller than the current max product\n            max1, max2 = arr[i] * arr[i-1], max1 * max2  # Update max1 and max2 if the product is smaller\n        \n        elif arr[i] * arr[i-1] > max1 * max2:\n            max2, max1 = arr[i] * arr[i-1], max2 * max1  # Update max2 and max1 if the product is larger\n            \n    return max(max1, max2)  # Return the maximum value of max1 and max2 as the pair with highest product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n\n    max1, max2, min1, min2 = arr[0], arr[0], arr[0], arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables to store the maximum and minimum product found so far\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_pair = (float('-inf'), float('-inf'))\n    min_pair = (float('inf'), float('inf'))\n\n    # Loop through the array and find the maximum and minimum products\n    for num in arr:\n        if num > max_product:\n            max_product = num\n            max_pair = (num, min_product)\n        elif num < min_product:\n            min_product = num\n            min_pair = (max_product, num)\n\n    # Return the pair with the maximum product\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (-float('inf'), -float('inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_pair[0]*max_pair[1]:\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # sort the array in non-decreasing order\n    arr.sort()\n    \n    # find the maximum and minimum values of the array\n    max_val = arr[-1]\n    min_val = arr[0]\n    \n    # find the maximum product of two elements in the array\n    max_product = max_val * min_val\n    \n    # find the second maximum element\n    for i in range(len(arr)-1):\n        if arr[i] > max_val and arr[i+1] < min_val:\n            max_product = max(max_product, arr[i] * arr[i+1])\n    \n    # find the second minimum element\n    for i in range(len(arr)-1):\n        if arr[i] < min_val and arr[i+1] > max_val:\n            min_product = min(min_product, arr[i] * arr[i+1])\n    \n    # return the pair with highest product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    # Initialize variables\n    max1 = float('-inf')\n    max2 = float('-inf')\n    max3 = float('-inf')\n    max4 = float('-inf')\n    max5 = float('-inf')\n    max6 = float('-inf')\n    \n    # Iterate over the array and update the maximums\n    for num in arr:\n        if num > max1:\n            max6 = max5\n            max5 = max4\n            max4 = max3\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max6 = max5\n            max5 = max4\n            max4 = max3\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max6 = max5\n            max5 = max4\n            max4 = max3\n            max3 = num\n        elif num > max4:\n            max6 = max5\n            max5 = max4\n            max4 = num\n        elif num > max5:\n            max6 = max5\n            max5 = num\n        elif num > max6:\n            max6 = num\n    \n    # Return the maximum product pair\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                current_product = arr[i] * arr[j]\n                if current_product > max_product:\n                    max_product = current_product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    # Initialize max_product and min_product to negative infinity\n    max_product = -float('inf')\n    min_product = float('inf')\n\n    # Iterate over the array and update max_product and min_product\n    for i in range(len(arr)):\n        max_product = max(max_product*arr[i], arr[i], min_product*arr[i])\n        min_product = min(min_product*arr[i], arr[i], max_product*arr[i])\n\n    # Return the pair with highest product\n    return max(max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    max_pair = [0, 0] # Initialize a tuple with two zeros\n    max_product = float('-inf') # Initialize a variable with negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product: # If the product is greater than the current max_product\n                max_pair = [arr[i], arr[j]] # Update the max_pair\n                max_product = product # Update the max_product\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = ''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_element = Input[i][0]\n                return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = []\n    for tuple in Input:\n        if tuple[0] not in common_first:\n            common_first.append(tuple[0])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if len(set([x[0] for x in i])) == 1:\n            if common_element is None:\n                common_element = i[0]\n            else:\n                common_element = None\n                break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if i[0] == common_element:\n            continue\n        else:\n            common_element = i[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in Input:\n        first_element = i[0]\n        count = 1\n        for j in Input:\n            if first_element == j[0]:\n                count += 1\n        if count == len(Input):\n            print(\"Common first element:\", first_element)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_list = []\n    for tup in Input:\n        if tup[0] in common_list:\n            common_list.append(tup[0])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Find the first element of each tuple in the input list\n    first_elements = [x[0] for x in Input]\n\n    # Find the common elements of the first elements of the tuples\n    common_elements = set(first_elements[0]) & set(first_elements[1:])\n\n    # Return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_tuple = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if common_tuple is None:\n                    common_tuple = Input[i]\n                else:\n                    common_tuple = (Input[i][0], min(Input[i][1], Input[j][1]))\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_tuple = None\n    for item in Input:\n        if not common_tuple:\n            common_tuple = item\n            continue\n        if common_tuple[0] == item[0]:\n            common_tuple = (common_tuple[0], item[1])\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for tuple_ in Input:\n        first_element = tuple_[0]\n        if common_element is None:\n            common_element = first_element\n        elif common_element!= first_element:\n            break\n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n\n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_len = 0\n    max_elem = \"\"\n\n    for elem in lst:\n        len_elem = len(elem)\n\n        if len_elem > max_len:\n            max_len = len_elem\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list as an argument and finds the element of the list\n    having the maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and finds the element with maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_elem = lst[i]\n\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(i) for i in lst) \n    max_elem = [i for i in lst if len(i) == max_len][0] \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having the maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    \n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize max_length variable to 0 \n    max_length = 0\n    # Initialize max_element variable to None \n    max_element = None\n    \n    # Iterate through each element of the list \n    for i in lst: \n        # If the length of the current element is greater than max_length \n        if len(str(i)) > max_length: \n            # Update max_length and max_element \n            max_length = len(str(i))\n            max_element = i\n    \n    # Return the maximum element \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    max_length = 0\n    max_element = None\n\n    for i in range(len(lst)): \n        if len(str(lst[i])) > max_length: \n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(x) for x in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        sum += list1[i]\n    total_sum = sum * len(list1)\n    print(\"The total sum multiplied by the length of the list is:\", total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to keep track of the sum of cubes\n    cube_sum = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the even natural number\n        cube = i ** 3\n        # Add the cube to the sum of cubes\n        cube_sum += cube\n        \n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 2\n    while i <= n:\n        cube_sum += i**3\n        i += 2\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(2, n+1, 2): \n        sum += i*i*i \n    return sum "
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2): \n        sum += i**3 \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n        count += 1\n    return cube_sum, count"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-2]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_str = delimiter.join(str(x) for x in test_tup)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return ', '.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-2]  # remove the last delimiter\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += item + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    cube_sum = 0\n    count = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n        count += 1\n    average = cube_sum / count\n    print(\"The average of the cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n    return sum_of_cubes / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cube = sum_cubes / n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i ** 3)\n    return sum(cubes) / len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n    average_cube = sum_cube/n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        if i < len(test_tuple)-1:\n            rear_elements.append(test_tuple[i][-1])\n        else:\n            rear_elements.append(test_tuple[i])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [string[-1] for string in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_indices.append(i)\n    return [test_tuple[i] for i in rear_indices[::-1]]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        rear_indices.append(len(string) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == list:\n            count += count_element_in_list(i, x)\n        elif i == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Use a list comprehension to filter out odd numbers from the input list\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Filter the odd numbers\n    odd_nums = [num for num in nums if num % 2!= 0]\n    \n    # Return the filtered list\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})'\n    dd_mm_yyyy = r'(?P<day>\\d{2})-(?P<month>\\d{2})-(?P<year>\\d{4})'\n    date_pattern = re.compile(yyyy_mm_dd)\n    match = date_pattern.match(dt)\n    if match:\n        day, month, year = match.group('day'), match.group('month'), match.group('year')\n        formatted_date = f\"{day}-{month}-{year}\"\n        return formatted_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use the re.sub() function to replace the year, month, and day values with day, month, and year values respectively\n    formatted_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return formatted_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(date_format, dt)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re.sub() function to replace the pattern with the desired format\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    \n    # Return the new date in the desired format\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.sub() to replace the date format with the new one\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    # Return the new date in the new format\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = '{}-{}-{}'\n    return re.sub(pattern, new_format.format(dt.group(3), dt.group(2), dt.group(1)), dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the regex pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # compile the regex pattern\n    regex = re.compile(pattern)\n\n    # match the date in the input string\n    match = regex.match(dt)\n\n    # check if the date was matched\n    if match:\n        # extract the parts of the date\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # format the date as dd-mm-yyyy\n        new_date = f\"{day}-{month}-{year}\"\n\n        # return the new formatted date\n        return new_date\n\n    # if the date was not matched, return the original input string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regex pattern to match yyyy-mm-dd format\n    pattern = r\"^\\d{4}-\\d{2}-\\d{2}$\"\n    # use re.search() method to match the pattern in the input date\n    match = re.search(pattern, dt)\n    if match:\n        # split the date into its components\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # reverse the order of the month and day\n        new_date = day + \"-\" + month + \"-\" + year\n        return new_date\n    else:\n        # if the input date does not match the pattern, return the original input\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date format to dd-mm-yyyy\n    dt = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\2-\\1', dt)\n    # Add hyphens to the date string if it doesn't have them already\n    if '-' not in dt:\n        dt = re.sub(r'(\\d{2})(\\d{2})(\\d{4})', r'\\1-\\2-\\3', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Step 1: Calculate the increment sequence\n    inc_seq = [n//2] * (n//2 + 1)\n    inc_seq[0] = 1\n\n    # Step 2: Sort the array by applying the increment sequence\n    for i in range(inc_seq[0], n//2 + 1):\n        gap = inc_seq[i]\n        while gap < n//2 + 1:\n            for j in range(gap, n-gap):\n                temp = my_list[j]\n                k = j\n                while k >= gap and my_list[k-gap] > temp:\n                    my_list[k] = my_list[k-gap]\n                    k -= gap\n                my_list[k] = temp\n            gap *= 3\n\n    # Step 3: Print the sorted array\n    print(my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap = gap // 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Calculate the gap\n    gap = n // 2\n    while gap > 0:\n        # Iterate over the array using gap as the step size\n        for i in range(gap, n):\n            # Shift the elements that are greater than the current element\n            # by the gap size\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # calculate the gap sequence\n    gap = len(my_list) // 2\n    while gap > 0:\n        # move the gap to the next position\n        gap = gap // 2\n        \n        # iterate over the list and sort the elements\n        for i in range(gap, len(my_list)):\n            # calculate the current element and its correct position\n            current = my_list[i]\n            position = i\n            \n            # iterate over the sub-list\n            while position >= gap and my_list[position - gap] > current:\n                # shift the sub-list to the right\n                my_list[position] = my_list[position - gap]\n                position -= gap\n            # place the current element in its correct position\n            my_list[position] = current"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # step is the increment by which the sub-arrays are divided in each step\n    step = n // 2\n    while step > 0:\n        # move all elements of the sub-array of size step to one position ahead of their current position\n        for i in range(step, n):\n            # compare the current element with the elements in the sub-array of size step\n            j = i\n            while j >= step and my_list[j] < my_list[j - step]:\n                # swap the elements if they are in the wrong order\n                my_list[j], my_list[j - step] = my_list[j - step], my_list[j]\n                j -= step\n            # if the element is already in its correct position, do nothing\n        step //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup = and_tup + (test_tup1[i],)\n    return and_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns their elementwise and tuples.\n    '''\n    # initialize an empty list to hold the elementwise and tuples\n    and_tup_list = []\n    # loop through the two tuples, comparing each pair of elements\n    for i in range(len(test_tup1)):\n        # check if the corresponding elements are both True\n        if test_tup1[i] and test_tup2[i]:\n            # if so, add the element to the and_tup_list\n            and_tup_list.append(test_tup1[i])\n    # return the and_tup_list as the result\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples must have the same length'\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    else:\n        return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] & test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and tuples of the two input tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    and_tup_list = []\n\n    # loop through the two input tuples\n    for i in range(len(test_tup1)):\n        # perform the elementwise and operation on the corresponding elements of the two input tuples\n        and_tup = test_tup1[i] & test_tup2[i]\n        # add the and_tup to the and_tup_list\n        and_tup_list.append(and_tup)\n\n    # return the and_tup_list\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant == 0:\n        return \"The directrix is equal to \" + str(round(b/(2*a), 2))\n    else:\n        x1 = (-b + determinant**(1/2))/(2*a)\n        x2 = (-b - determinant**(1/2))/(2*a)\n        return \"The directrix is between \" + str(round(x1, 2)) + \" and \" + str(round(x2, 2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the determinant of the matrix\n    det = a * b**2 - 4 * a * c\n    \n    # Check if the determinant is zero\n    if det == 0:\n        # If yes, then the directrix is undefined\n        return \"Directrix undefined\"\n    \n    # If the determinant is not zero, then calculate the directrix\n    directrix = (-b + (b**2 - 4 * c**2)**0.5) / 2 / a\n    \n    # Return the directrix\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"There are no real roots\")\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The directrix is equal to\", x)\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is\", x1, \"or\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Define the quadratic equation of the parabola\n    quadratic_equation = a**2 + b**2 - 4*c\n\n    # Calculate the root of the quadratic equation\n    root1 = (-b + quadratic_equation**0.5)/(2*a)\n    root2 = (-b - quadratic_equation**0.5)/(2*a)\n\n    # Find the midpoints of the roots and their corresponding values\n    midpoint1 = (root1 + root2)/2\n    midpoint2 = (root1 - root2)/2\n\n    # Find the direction of the line from the point of intersection to the midpoints\n    direction1 = (midpoint1 - a, midpoint1 - b)\n    direction2 = (midpoint2 - a, midpoint2 - b)\n\n    # Calculate the slope of the line\n    slope = (direction1[0]/direction1[1], direction2[0]/direction2[1])\n\n    # Return the midpoint and slope of the line as the directrix of the parabola\n    return midpoint1, slope"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "y = (c) / (2a) - (b) / (4a^2)."
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b**2 - 4*a*c\n    if D < 0:\n        print(\"There is no real root.\")\n    else:\n        x1 = (-b + D**0.5)/(2*a)\n        x2 = (-b - D**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", x1)\n        print(\"There are two real roots:\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Use the quadratic formula to find the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is negative, there are no real roots\n    if disc < 0:\n        return None\n    \n    # If the discriminant is positive, there is a complex root\n    elif disc > 0:\n        root1 = (-b + (disc**0.5))/(2*a)\n        root2 = (-b - (disc**0.5))/(2*a)\n        \n        return root1, root2\n    \n    # If the discriminant is zero, there is only one real root\n    else:\n        root = -b/(2*a)\n        \n        return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is: {}\".format(x1))\n        print(\"The directrix of the parabola is: {}\".format(x2))\n    else:\n        print(\"The parabola does not have a real directrix.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        return \"No solution exists for this equation.\"\n    else:\n        x1 = (-b + ((-b ** 2) + 4 * a * c) ** 0.5) / (2 * a)\n        x2 = (-b - ((-b ** 2) + 4 * a * c) ** 0.5) / (2 * a)\n        return x1, x2"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common_elements = []\n    for item in list1:\n        if item in list2:\n            common_elements.append(item)\n    if common_elements:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set from each list\n    list1_set = set(list1)\n    list2_set = set(list2)\n    # find the intersection of the two sets\n    intersection = list1_set.intersection(list2_set)\n    # check if the intersection is not empty\n    if not intersection:\n        return False\n    # return True if there is at least one common element\n    return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of all elements in the first list\n    set1 = set(list1)\n    # iterate over all elements in the second list\n    for elem in list2:\n        # if the element is in the set of the first list, return True\n        if elem in set1:\n            return True\n    # if no common elements were found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Create a set of elements from both lists\n    common_set = set(list1) & set(list2)\n    \n    # Check if the set has any elements in it\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # create a set of elements in both lists\n    common_set = set(list1) & set(list2)\n\n    # check if the set is empty (i.e. no common elements)\n    if len(common_set) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # check if both lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # loop through both lists\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n\n    # if the loop completes without returning True, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # creating a set from both lists to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # checking if any element in set1 is also in set2\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Initialize a set to store the elements in list1\n    set1 = set(list1)\n    # Initialize a set to store the elements in list2\n    set2 = set(list2)\n    # Check if any element in set1 is also in set2\n    for element in set1:\n        if element in set2:\n            return True\n    # If we make it through the loop without finding a common element, return False\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the first half of the trapezium\n    half_base1 = base1 / 2\n    half_height = height / 2\n\n    # Calculate the length of the second half of the trapezium\n    half_base2 = base2 / 2\n    half_height = height / 2\n\n    # Calculate the length of the trapezium\n    trapezium_length = half_base1 + half_base2\n\n    # Calculate the length of the median of the trapezium\n    median_length = trapezium_length / 2\n\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # calculate the length of the base of the trapezium\n    base = (base1 + base2) * 0.5\n    \n    # calculate the length of the sides of the trapezium\n    side1 = base1 * 0.5\n    side2 = base2 * 0.5\n    \n    # calculate the height of the trapezium\n    h = height * 0.5\n    \n    # calculate the length of the top and bottom of the trapezium\n    top = area / (2 * h)\n    bottom = area / (2 * (h - side1 - side2))\n    \n    # calculate the area of the top and bottom half of the trapezium\n    area_top = top * (h - side1 - side2)\n    area_bottom = bottom * (h - side2)\n    \n    # calculate the area of the trapezium's base\n    area_base = base * h\n    \n    # calculate the median area of the trapezium\n    area_median = (area_top + area_bottom + area_base) / 3\n    \n    # calculate the length of the median side of the trapezium\n    length_median = area_median / (2 * area_median)\n    \n    # return the median length of the trapezium\n    return length_median * 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    median = 0.5 * area * (base1 + base2) / height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    area_top = 0.5 * height * base1\n    area_bottom = 0.5 * height * base2\n    median_area = (area + area_top + area_bottom) / 3\n\n    return median_area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) / 2\n    return 2 * height / area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    base_sum = base1 + base2\n    trapezium_area = base1 * height + base2 * height\n    return 0.5 * (base_sum + trapezium_area)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the length of each half of the trapezium\n    half1 = 0.5 * (base1 + base2)\n    half2 = (base1 + base2) * height\n\n    # Sort the two halves of the trapezium by length\n    if half1 > half2:\n        temp = half1\n        half1 = half2\n        half2 = temp\n\n    # Calculate the lengths of the two halves of the trapezium\n    half1_length = half1 * height\n    half2_length = half2 * height\n\n    # Calculate the median length of the trapezium\n    if area > (half1_length + half2_length):\n        median_length = half1_length\n    else:\n        median_length = half2_length\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    base = 0.5 * (base1 + base2)\n\n    # Calculate the upper and lower boundaries of the trapezium\n    lower_bound = 0\n    upper_bound = 0.5 * area\n\n    # Iterate over the possible values of the height of the trapezium\n    while lower_bound < upper_bound:\n        mid_height = (lower_bound + upper_bound) / 2\n        mid_area = 0.5 * base * mid_height + 0.5 * base2 * (0.5 * area - mid_height)\n\n        # Update the upper and lower boundaries of the trapezium based on the area\n        if mid_area > area:\n            upper_bound = mid_height\n        else:\n            lower_bound = mid_height\n\n    # Return the median height based on the area\n    return 0.5 * area - lower_bound"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the smaller base\n    small_base = min(base1, base2)\n\n    # Calculate the length of the larger base\n    large_base = max(base1, base2)\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the length of the trapezium\n    trapezium_length = (area / (large_base + small_base)) ** 0.5\n\n    # Return the median length\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of the sides of the trapezium\n    s1 = base1 + base2\n    s2 = height / 2\n\n    # Calculate the area of the trapezium\n    area = (base1 * height) + (base2 * height)\n\n    # Calculate the lengths of the sides of the semi-perimeter of the trapezium\n    s3 = (area / 2) - (s1 + s2)\n    s4 = (area / 2) - (s1 + s2)\n\n    # Calculate the lengths of the side of the trapezium with the longer side as its base\n    if base1 > base2:\n        s5 = height\n    else:\n        s5 = base2\n\n    # Calculate the lengths of the other two semi-perimeters of the trapezium\n    s6 = s1 - s5\n    s7 = s2 - s5\n\n    # Find the median length of the trapezium by finding the length of the side of the trapezium\n    # that is longer than the midpoint of the semi-perimeter.\n    if s3 > s4:\n        median = s3\n    else:\n        median = s4\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(f\"{number} is greater than {num}.\")\n            return\n    print(f\"{number} is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater_than_number = []\n    for i in arr:\n        if i > number:\n            greater_than_number.append(i)\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if number > num:\n            print(\"The number is greater than\", num)\n            break\n    else:\n        print(\"The number is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = []\n    for element in arr:\n        if element > number:\n            greater_than.append(element)\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=.*b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a\\w*b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    return pattern.match(text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,}b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a{1,}b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'\\b[a]*b\\b')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # Extract the last digit of the number using integer division\n    last_digit = n % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # converting the number to a string\n    str_num = str(n)\n    # getting the length of the string\n    len_str = len(str_num)\n    # returning the last character of the string\n    return str_num[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0:\n        return n % 10\n    else:\n        return 0"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an argument and returns a list of the negative numbers in the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers and returns a list of negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for num in list1:\n        if num < 0:\n            neg_num.append(num)\n    return neg_num"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns the negative numbers in the list.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as an argument and returns a list containing the negative numbers in the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a list of all negative numbers in the input list.\n    '''\n    neg_list = []\n    for i in lst:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function returns the negative numbers in a given list.\n    \"\"\"\n    neg = []\n    for num in lst:\n        if num < 0:\n            neg.append(num)\n    return neg"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters from a string.\n    \"\"\"\n    odd_characters = ''\n    for char in string:\n        if int(char) % 2!= 0:\n            odd_characters += char\n    return odd_characters"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if char.isalnum())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isdigit() or x % 2 == 0, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if char % 2!= 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    '''\n    This function removes odd characters from a given string.\n    '''\n    # Convert the string to a list of characters\n    string_list = list(string)\n    \n    # Loop through each character in the list and remove odd characters\n    for i in range(len(string_list)):\n        if string_list[i] % 2 == 0:\n            del string_list[i]\n    \n    # Convert the list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the output\n    output = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, add it to the output string\n            output += char\n    # Return the output string\n    return output"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and (test_list[i][0] == test_list[j][1] or test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    # Initialize counters\n    counter1 = 0\n    counter2 = 0\n\n    # Iterate over the list and check if the elements are in pairs\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                counter1 += 1\n                if test_list[j] in test_list[:i]:\n                    counter2 += 1\n\n    # Return the final counters\n    return counter1, counter2"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        temp = multiple_to_single(L[1:])\n        return L[0] * temp"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for num in L:\n        single_integer = single_integer * 10 + num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        if i < 0:\n            result += i * (-1)\n        else:\n            result += i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate through the list of integers\n    for num in L:\n        # Check if the current number is a multiple of 10\n        if num % 10 == 0:\n            # Add 10 to the result variable\n            result += 10\n    \n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for i in range(len(L)):\n        result *= L[i]\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop over each integer in the list\n    for num in L:\n        # If the integer is not a multiple of 5, add it to the total\n        if num % 5!= 0:\n            total += num\n    \n    # Return the total as a single integer\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result variable to zero\n    result = 0\n    # iterate through the list of integers\n    for num in L:\n        # if the current integer is greater than zero, add it to the result variable\n        if num > 0:\n            result += num\n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w*[a-z]*[A-Z]*[a-z]*\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Iterate through the matches and print the adverb and its position in the sentence\n    for i, match in enumerate(matches):\n        print(f'{match}: {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(\\w+)(\\w+)-(\\w+)(\\w+)', text)\n    adverbs = [adverb for adverb in adverbs if adverb[1] == 'adverb']\n    adverb_positions = [m.start() for m in re.finditer(r'\\b(\\w+)(\\w+)-(\\w+)(\\w+)', text)]\n    return adverbs, adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b\\w+ly\\b'\n\n    # Find all occurrences of adverbs in the text\n    matches = re.findall(adverb_pattern, text)\n\n    # If no adverbs are found, return None\n    if not matches:\n        return None\n\n    # Sort the matches by their position in the sentence\n    sorted_matches = sorted(matches, key=lambda x: text.find(x))\n\n    # Extract the first adverb and its position\n    first_adverb = sorted_matches[0]\n    first_position = text.find(first_adverb)\n\n    # Create a dictionary to store the adverb and its position\n    adverb_positions = {first_adverb: first_position}\n\n    # Loop through the remaining adverbs and their positions and add them to the dictionary\n    for adverb in sorted_matches[1:]:\n        adverb_position = text.find(adverb)\n        adverb_positions[adverb] = adverb_position\n\n    # Return the dictionary of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b([a-z]+) ([A-Z]+)\\b'\n    \n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    \n    # If there are matches, print the adverb and its position in the sentence\n    if matches:\n        for match in matches:\n            print(f\"{match[0]}: {match[1]}\")\n    \n    # If there are no matches, print a message\n    else:\n        print(\"No adverbs found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(adverb)\\b'\n\n    # Use the regular expression to find all adverbs in the sentence\n    matches = re.findall(pattern, text)\n\n    # Create a dictionary to store the adverb and its positions in the sentence\n    adverb_position = {}\n\n    # Iterate through all the matches and store the adverb and its position in the dictionary\n    for i, match in enumerate(matches):\n        adverb_position[match] = i\n\n    return adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r\"(?<![a-zA-Z])(?:adv|advantage)s?(?![a-zA-Z])\"\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs.append((position, adverb))\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all occurrences of the word \"adverb\" in the given sentence\n    matches = re.findall(r'\\b(?:adverb)\\b', text, re.IGNORECASE)\n    \n    # Check if there is at least one match\n    if not matches:\n        print(\"No adverb found in the sentence.\")\n        return\n    \n    # Find the position of each adverb in the sentence\n    positions = []\n    for match in matches:\n        positions.append(text.lower().find(match.lower()))\n        \n    # Sort the positions in ascending order\n    sorted_positions = sorted(positions)\n    \n    # Print the first adverb and its position\n    print(f\"{matches[0]}: {sorted_positions[0]}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define the pattern for adverbs\n    pattern = r'\\b\\w+\\b\\s*([-]?\\s*[a-z][a-z])\\b'\n    \n    # Find all matches of the pattern in the given sentence\n    matches = re.findall(pattern, text)\n    \n    # Check if there are matches\n    if len(matches) == 0:\n        return None\n    \n    # Extract the first match from the list of matches\n    first_match = matches[0]\n    \n    # Split the first match into its components\n    first_word, first_adverb = first_match.split()\n    \n    # Convert the first adverb to lowercase\n    first_adverb = first_adverb.lower()\n    \n    # Extract the positions of the adverbs in the sentence\n    positions = [m.start() for m in re.finditer(r'\\b\\w+\\b\\s*([-]?\\s*[a-z][a-z])\\b', text)]\n    \n    # Find the index of the first adverb\n    first_index = positions.index(first_match.start())\n    \n    # Return a tuple containing the first adverb and its position\n    return (first_adverb, first_index)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all the adverbs in the text\n    matches = re.findall(r'\\b\\w*[a-z][A-Z]*\\b', text, re.IGNORECASE)\n\n    # sort the matches based on their positions in the sentence\n    sorted_matches = sorted(matches, key=lambda x: text.index(x))\n\n    # return the first adverb and its position\n    if sorted_matches:\n        return sorted_matches[0], sorted_matches.index(sorted_matches[0])\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w*[a-zA-Z]+\\b'\n\n    # Find all occurrences of adverbs in the given text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store adverb and their positions\n    adverbs = []\n\n    # Iterate through all matches and add them to the adverb list along with their positions\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs.append((adverb, position))\n\n    # Sort the adverbs by their positions in the sentence\n    adverbs = sorted(adverbs, key=lambda x: x[1])\n\n    # Return the adverb and their positions\n    return adverbs"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l * l * l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l + 12*l + 8 # Formula for surface area of a cube"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n\n    positive_ratio = 0\n    if positive_count > 0:\n        positive_ratio = positive_count / (positive_count + negative_count + zero_count)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i') # initialize an integer array to store positive numbers\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num) # append positive numbers to the array\n    if len(pos_nums) == 0:\n        return 0 # if the array is empty, return 0\n    else:\n        return pos_nums.count(0) / len(pos_nums) # calculate the ratio of positive numbers to total numbers"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    # Create a new array to store the positive numbers\n    pos_nums = array('i')\n    # Iterate through the input array and append only the positive numbers to the new array\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n    # Calculate the ratio of positive numbers to all numbers in the array\n    ratio = len(pos_nums) / len(nums)\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    neg = 0\n    zero = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg += 1\n        else:\n            zero += 1\n    pos_ratio = pos/len(nums)\n    neg_ratio = neg/len(nums)\n    zero_ratio = zero/len(nums)\n    return [pos_ratio, neg_ratio, zero_ratio]"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Convert array to list\n    nums_list = list(nums)\n    # Initialize count of positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n    # Iterate over the list and count positive and negative numbers\n    for num in nums_list:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    # Calculate the ration of positive and negative numbers\n    if pos_count == 0:\n        return 0\n    else:\n        return neg_count / pos_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create a new array to store the positive numbers\n    positive_nums = array('i')\n\n    # loop through each number in the input array\n    for num in nums:\n        # if the number is positive, add it to the positive_nums array\n        if num > 0:\n            positive_nums.append(num)\n\n    # calculate the positive number count\n    pos_count = len(positive_nums)\n\n    # calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums)\n\n    # return the result as a float\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    pos_ratio = pos_count / len(nums)\n    return pos_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = -float('inf')  # initialize maximum negative number to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg:  # if current number is negative and greater than the current maximum negative number\n            max_neg = num  # update the maximum negative number to current number\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an argument and returns the largest negative number in the list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Find the largest negative number in the list.\n    \"\"\"\n    largest_neg = None\n    for num in lst:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]  # initialize largest to the first element of the list\n    for i in range(1, len(list1)):  # loop through the rest of the list\n        if list1[i] < 0 and list1[i] > largest:  # check if the current element is negative and larger than largest\n            largest = list1[i]  # update largest to be the current element\n    return largest  # return the largest negative number found"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst): \n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    # Initialize a variable to keep track of the largest negative number\n    largest_neg_num = None\n    \n    # Iterate over each element in the list\n    for num in lst:\n        # Check if the current number is negative\n        if num < 0:\n            # If it is, compare it to the current largest negative number\n            if largest_neg_num is None or num > largest_neg_num:\n                # If it's larger, update the largest negative number\n                largest_neg_num = num\n    \n    # Return the largest negative number\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = -float('inf')\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in it.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(i) for i in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j < len(test_list[i]) - 1:\n                test_list[i] = test_list[i][:j] + test_list[i][j+1:]\n            else:\n                test_list[i] = ()\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j > K:\n                del test_list[i][j]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function takes in a list of tuples and a number K. It then trims each tuple by K in the list and returns the trimmed list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        new_tuple = tuple(test_list[i][j:j+K] for j in range(len(test_list[i])-K+1))\n        trimmed_list.append(new_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create an empty list to store the trimmed tuples\n    trimmed_list = []\n    # loop through each tuple in the given list\n    for tup in test_list:\n        # loop through each element in the tuple\n        for i in range(len(tup)):\n            # add the element to a new list if it's not in the tuple k positions away from the first element\n            if i <= K:\n                continue\n            else:\n                new_tup = tup[:i-K] + tup[i:]\n                # append the new tuple to the trimmed list\n                trimmed_list.append(new_tup)\n    # return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j+K>=len(test_list[i]):\n                test_list[i] = test_list[i][:j]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if i >= K - j:\n                break\n            test_list[i] = (test_list[i][0],) + test_list[i][K - j:]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    \n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    \n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[K:])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_list = []\n    for i in range(len(test_tup1)):\n        multiplication_list.append(test_tup1[i]*test_tup2[i])\n    return multiplication_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for item in tup:\n        if item in count:\n            result.append(count[item])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a dictionary to store the count of each element in the tuple\n    count = Counter(tup)\n\n    # create a dictionary to store the count of each element in the list\n    count_lst = Counter(lst)\n\n    # combine the two dictionaries and return the final result\n    return dict(count.items() + count_lst.items())"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_lst = []\n    \n    for elem in lst:\n        if elem in count_dict:\n            count_lst.append(count_dict[elem])\n    \n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a dictionary to store the count of each element of list in tup\n    dict_count = Counter(tup)\n    # create a new list to store the element of list in tup that appear more than once\n    new_lst = []\n    # loop through each element of list in tup and check if it appears more than once in dict_count\n    for elem in lst:\n        if elem in dict_count and dict_count[elem] > 1:\n            # add the element to new_lst if it appears more than once in dict_count\n            new_lst.append(elem)\n    # return the new_lst containing the element of list in tup that appear more than once\n    return new_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup) \n    for i in lst: \n        if i in c: \n            c[i] += 1 \n        else: \n            c[i] = 1 \n    return c "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert tuple to list\n    lst = list(tup)\n\n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = {}\n\n    # Iterate through each element in the list and count the occurrence in the tuple\n    for elem in lst: \n        count_dict[elem] = count_dict.get(elem, 0) + 1\n\n    # Return the dictionary with the counts\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for element in lst:\n        count_dict[element] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    for key, value in counter.items():\n        if key in tup:\n            tup[tup.index(key)] = value\n    return tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple into a set and then back to a list to remove any duplicates\n    unique_lst = list(set(tup))\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    # Loop through each element in the list\n    for elem in lst: \n        # If the element is present in the unique_lst, increment its count in the dictionary\n        if elem in unique_lst: \n            count_dict[elem] = count_dict.get(elem, 0) + 1\n    # Return the dictionary containing the count of each element in the list\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # create a new list to store the cubes\n    cubes = []\n    # loop through each element in the original list\n    for num in nums:\n        # calculate the cube of the current element\n        cube = num ** 3\n        # append the cube to the cubes list\n        cubes.append(cube)\n    # return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    # loop through each element in the list\n    for num in nums:\n        # calculate the cube of the element\n        cube = num ** 3\n        # print the result\n        print(cube)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # iterate over each element in the list\n    for num in nums:\n        # cube the number and append it to a new list\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Use a list comprehension to cube each element in the list\n    cubes = [num**3 for num in nums]\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = 0\n    for i in range(1, n+1):\n        perrin_num += i**3\n    return perrin_num"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = []\n    for i in range(1, n+1):\n        perrin_list.append(sum(i))\n    return sum(perrin_list)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * (2 * i - 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # loop through perrin numbers from 1 to n\n    for i in range(1, n+1):\n        # multiply i by i+1 and add it to the sum variable\n        sum += i*i\n    # return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    perrin_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 21, 24, 27, 30]\n    for num in perrin_nums:\n        sum += num\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    p = 0\n    for i in range(1, n+1):\n        p += i\n        p += 2*i**2\n    return p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\n    sum_of_perrin = 0\n    for num in perrin_numbers:\n        if num <= n:\n            sum_of_perrin += num\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    total = 0\n    for i in range(1, n+1):\n        total += 1/p\n        p += 1/p\n    return total\n\nn = 5\nprint(cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (i ** 3)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += (i * (i + 1)) // 2\n        i += 1\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            output.append(l[i][:l[i]])\n        else:\n            output.append(l[i])\n    return output"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts the specified size of strings from a given list of string values.\n    \"\"\"\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings and an integer 'l' as input. It iterates through the list and returns a list of strings of length 'l'.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in l:\n        if len(string) >= l[0][0]:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a size as input and returns a new list of\n    extracted strings.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as input and returns a new list containing the extracted strings.\n    \"\"\"\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a size as input.\n    It returns a list of strings containing the specified size of strings from the input list.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        extracted_strings.append(l[i][:l[i].index(str)])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in str_list]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove all whitespaces from the string using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    \n    # Remove leading and trailing whitespaces from the string\n    text3 = text2.strip()\n    \n    # Return the cleaned string\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function removes all whitespaces from the given string using the re module.\n    \"\"\"\n    # Use the re.sub() function to replace all whitespace characters with an empty string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale.\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (actual_cost - sale_amount) / sale_amount * 100\n    if loss_percentage <= 10:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n): \n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    \n    # find all even factors of n\n    evenFactors = [i for i in range(2, int(math.sqrt(n))+1, 2) if n%i == 0]\n    \n    # find the sum of even factors\n    evenSum = sum(evenFactors)\n    \n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    def sieveOfEratosthenes(n):\n        primes = [True] * (n+1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(math.sqrt(n))+1):\n            if primes[i]:\n                for j in range(i*i, n+1, i):\n                    primes[j] = False\n        return primes\n    \n    def sumOfEvenFactors(n):\n        primes = sieveOfEratosthenes(n)\n        sum = 0\n        for i in range(2, n+1):\n            if primes[i] and i % 2 == 0:\n                sum += i\n        return sum\n    \n    return sumOfEvenFactors(n)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize variables\n    sum = 0\n    i = 2\n    \n    # Loop until we reach the square root of n\n    while i*i <= n:\n        # Check if i is even\n        if i % 2 == 0:\n            # Add i to sum\n            sum += i\n        \n        # Move on to the next even number\n        i += 2\n    \n    # Add the last odd factor to sum\n    sum += n\n    \n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of the even factors of n.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize the sum to 0\n    sum = 0\n\n    # loop through all the numbers up to the square root of the input number\n    for i in range(2, int(math.sqrt(n))+1):\n        # if the input number is divisible by i\n        if n % i == 0:\n            # if i is even\n            if i % 2 == 0:\n                # add it to the sum\n                sum += i\n\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and n%2 == 0:\n            evenSum += i\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    i = 2\n    while i <= n:\n        if n % i == 0 and i % 2 == 0:\n            total += i\n        i += 1\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]+z\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b' # matches a word containing 'z'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # Define a regular expression pattern that matches a word containing the letter 'z'\n    pattern = r'\\w*z\\w*'\n    \n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 1:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 3:\n        return True\n    elif monthnum == 4:\n        return True\n    elif monthnum == 5:\n        return True\n    elif monthnum == 6:\n        return True\n    elif monthnum == 7:\n        return True\n    elif monthnum == 8:\n        return True\n    elif monthnum == 9:\n        return True\n    elif monthnum == 10:\n        return True\n    elif monthnum == 11:\n        return True\n    elif monthnum == 12:\n        return True\n    elif monthnum == 13:\n        return True\n    elif monthnum == 14:\n        return True\n    elif monthnum == 15:\n        return True\n    elif monthnum == 16:\n        return True\n    elif monthnum == 17:\n        return True\n    elif monthnum == 18:\n        return True\n    elif monthnum == 19:\n        return True\n    elif monthnum == 20:\n        return True\n    elif monthnum == 21:\n        return True\n    elif monthnum == 22:\n        return True\n    elif monthnum == 23:\n        return True\n    elif monthnum == 24:\n        return True\n    elif monthnum == 25:\n        return True\n    elif monthnum == 26:\n        return True\n    elif monthnum == 27:\n        return True\n    elif monthnum == 28:\n        return True\n    elif monthnum == 29:\n        return True\n    elif monthnum == 30:\n        return True\n    elif monthnum == 31:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the given month number is valid\n    if not 1 <= monthnum2 <= 12:\n        return False\n    \n    # Check if the month has 31 days or not\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 % 2 == 0 and monthnum2 % 100!= 0 or monthnum2 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if is_leap_year(year):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n\ndef is_leap_year(year):\n    '''\n    A helper function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes a month number as an input and returns whether it contains 31 days or not.\n    '''\n\n    # List of month names in English\n    month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    # Check if the month number is a valid month number between 1 and 12\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        # Return True if the month number contains 31 days, False otherwise\n        if month_names[monthnum2-1] in ['March', 'May', 'July', 'August', 'October', 'December']:\n            return True\n        else:\n            return False\n    else:\n        # Raise an error message if the input is not a valid month number between 1 and 12\n        raise ValueError(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days and False otherwise.\n    '''\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum in (4, 6, 9, 11):\n        return False\n    else:\n        return True"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate over each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for item in stringlist:\n        reversed_item = item[::-1]\n        new_list.append(reversed_item)\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # reverse the string\n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    This function will find the sublist having minimum length from a given list.\n    '''\n    min_len = float('inf')  # initialize minimum length as infinity\n    min_sublist = None  # initialize minimum sublist as none\n    \n    # iterate through the list\n    for sublist in lst:\n        # calculate the length of the sublist\n        length = len(sublist)\n        \n        # check if the length of the sublist is less than the minimum length\n        if length < min_len:\n            # if yes, update the minimum length and the minimum sublist\n            min_len = length\n            min_sublist = sublist\n    \n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n\n    # Initialize a variable to store the minimum length of any sublist\n    min_len = float('inf')\n\n    # Initialize a variable to store the index of the minimum length sublist\n    min_index = None\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n\n        # Calculate the length of the current sublist\n        cur_len = len(lst[i])\n\n        # If the current sublist has a shorter length than the current minimum length, update the minimum length and index\n        if cur_len < min_len:\n            min_len = cur_len\n            min_index = i\n\n    # Return the sublist with minimum length\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize minimum length to be 1000\n    min_len = 1000\n\n    # Initialize minimum sublist to be an empty list\n    min_sublist = []\n\n    # Iterate through the list\n    for i in range(len(lst)):\n\n        # Get the length of the current sublist\n        cur_len = len(lst[i])\n\n        # If the current sublist has a smaller length than the minimum, update the minimum length and the minimum sublist\n        if cur_len < min_len:\n            min_len = cur_len\n            min_sublist = lst[i]\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    min_sublist = []\n    for i in range(len(lst)):\n        count = 1\n        for j in range(i+1, len(lst)):\n            if lst[j] == lst[i]:\n                count += 1\n                if count > len(min_sublist):\n                    min_sublist = [lst[i]]\n                elif count == len(min_sublist):\n                    min_sublist.append(lst[i])\n            else:\n                break\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_len = float('inf')\n    min_sublist = []\n    \n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = i\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    sublists = [] # empty list to store sublists\n    \n    for i in range(len(lst)): # loop through each element of the list\n        for j in range(i+1,len(lst)): # loop through each element from the next index\n            sublist = lst[i:j+1] # create a sublist from the current index to the next index\n            sublists.append(sublist) # add the sublist to the list\n    \n    min_sublist = min(sublists, key=len) # find the sublist with the minimum length\n    return min_sublist # return the sublist with the minimum length"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes in two arguments, l and b, representing the length and width of a rectangle, respectively.\n    It returns the area of the rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    # Find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Remove each uppercase substring from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # find all uppercase substrings in the given string\n    matches = re.findall(pattern, str1)\n\n    # loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n\n    Parameters:\n    str1 (str): A string to remove uppercase substrings from.\n\n    Returns:\n    str: A string with uppercase substrings removed.\n    \"\"\"\n    uppercase_pattern = re.compile(r'(?i)\\b[A-Z]+\\b')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regex to find all uppercase substrings\n    uppercase_pattern = re.compile(r'[A-Z]+')\n\n    # Find all uppercase substrings in the given string\n    uppercase_substrings = re.findall(uppercase_pattern, str1)\n\n    # Remove all uppercase substrings from the given string\n    new_str = ''\n    for char in str1:\n        if char not in uppercase_substrings:\n            new_str += char\n\n    # Return the new string\n    return new_str"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expressions to match uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n    # Finding all the uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # Removing all the uppercase substrings from the string\n    str2 = re.sub(pattern, '', str1)\n    # Returning the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it using regular expressions.\n    '''\n    pattern = r'(?i)[A-Z][a-z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern for uppercase substrings\n    pattern = r'[A-Z]+'\n    # use re.findall() to find all uppercase substrings in the given string\n    uppercase_substrings = re.findall(pattern, str1)\n    # create a list to store the lowercase substrings\n    lowercase_substrings = []\n    # loop through the uppercase substrings and add them to the lowercase_substrings list\n    for substring in uppercase_substrings:\n        for char in substring:\n            lowercase_substrings.append(char.lower())\n    # join the lowercase_substrings list into a single string\n    result = ''.join(lowercase_substrings)\n    # return the resulting string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an argument and returns a new list that contains the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.extend([sublist[0]])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            if len(sublist) > 0:\n                result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        print(sublist[0]) "
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        if type(sublist) == list:\n            res.append(sublist[0])\n        else:\n            res.append(sublist)\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as input and returns a list containing all possible combinations of the elements of the input list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            res.append(list1[i:j])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize a list to store the combinations\n    combinations = []\n\n    # Sort the given list in ascending order\n    list1.sort()\n\n    # Initialize two pointers for the loop\n    i = 0\n    j = 0\n\n    # Loop through all possible pairs of elements in the list\n    while j < len(list1):\n        # Add the current pair to the combinations list\n        combinations.append((list1[i], list1[j]))\n        # Increment the pointers for the next pair\n        i += 1\n        j += 1\n\n    # Return the combinations list\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store the combinations\n    combinations = []\n    \n    # sort the input list\n    list1.sort()\n    \n    # loop through the original list and find all possible combinations\n    for i in range(len(list1)):\n        # use a loop to find all possible combinations of the remaining elements\n        for j in range(i+1, len(list1)+1):\n            # append the combination to the list of combinations\n            combinations.append(list1[i:j])\n    \n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    res = []\n    for i in range(1, n+1):\n        for j in range(i):\n            res.append([list1[j], list1[i-1]])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n\n    Args:\n    list1 (list): A list of elements to generate combinations for.\n\n    Returns:\n    A list of tuples containing all possible combinations of the elements of `list1`.\n    \"\"\"\n\n    result = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(tuple(list1[i:j]))\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Base case: if the list is empty, there are no combinations\n    if len(list1) == 0:\n        return []\n\n    # Base case: if the list contains only one element, there is only one combination\n    if len(list1) == 1:\n        return [list1]\n\n    # Recursive case: generate all possible combinations of the elements of the list\n    # by recursively calling the function on the list without the last element\n    rest = combinations_list(list1[:-1])\n    # and appending the last element of the original list to each combination\n    result = []\n    for combo in rest:\n        result.append([list1[-1]] + combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Using recursion to generate all combinations\n    def combination_helper(i, current_combination, result):\n        if i == len(list1):\n            result.append(current_combination[:])\n            return\n        combination_helper(i+1, current_combination, result)\n        combination_helper(i+1, current_combination+[list1[i]], result)\n\n    result = []\n    combination_helper(0, [], result)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Generate all combinations of the elements in the list.\n\n    :param lst: A list of items to choose from.\n    :return: A list of all possible combinations of the elements in the list.\n    \"\"\"\n    def backtrack(start, current_combination):\n        \"\"\"\n        Recursive helper function to generate all possible combinations of the elements in the list.\n\n        :param start: The index of the first element in the current combination.\n        :param current_combination: The current combination being generated.\n        \"\"\"\n        if start == len(lst):\n            result.append(current_combination[:])\n            return\n\n        backtrack(start + 1, current_combination)\n        backtrack(start + 1, current_combination + [lst[start]])\n\n    result = []\n    backtrack(0, [])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    end = 0\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n            if current_product > max_product:\n                max_product = current_product\n                start = i\n                end = i\n        else:\n            current_product = 1\n\n    for i in range(len(arr) - 1, start - 1, -1):\n        if arr[i] > 0:\n            current_product *= arr[i]\n            if current_product > max_product:\n                max_product = current_product\n                start = i\n                end = i\n\n    if max_product == float('-inf'):\n        return 0\n    else:\n        return arr[start:end+1]"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n    previous_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        previous_product = max(previous_product, current_product)\n        max_product = max(max_product, previous_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here *= arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # update max_ending_here\n        if arr[i] < 0:\n            max_ending_here = 1\n        else:\n            max_ending_here *= arr[i]\n            \n        # update current_product and max_product\n        if max_ending_here > current_product:\n            current_product = max_ending_here\n            \n    return current_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        count += 1\n        if count!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    if len(value) == 1:\n        return True\n    elif len(value) == n:\n        for i in value:\n            if value.count(i)!= 1:\n                return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if i == 0:\n            value = dict[i]\n        else:\n            if dict[i]!= value:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    value = list(dict.values())[0]\n    for i in dict.values():\n        if i!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.keys()) == 1:\n        return True\n    else:\n        for i in dict.values():\n            if i!= dict.values()[0]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    return len(set(values)) == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return \"The dictionary is empty.\"\n    elif len(dict)!= n:\n        return \"The dictionary does not have the same number of values as n.\"\n    else:\n        values = set(dict.values())\n        if len(values) == 1:\n            return True\n        else:\n            return \"The values are not the same.\""
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    # Loop through all values in the dictionary\n    for i in dict.values():\n        # If the count is less than n, increment count\n        if count < n:\n            count += 1\n        # If the count is equal to n, return True, indicating that all values are same\n        elif count == n:\n            return True\n    # If the loop completes without returning True, return False, indicating that not all values are same\n    return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k: v for k, v in dict1.items() if v is not None}\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num > 0:\n            current_product *= num\n        else:\n            max_product = max(max_product, current_product)\n            current_product = 1\n    max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    n = len(arr)   \n    max_product_so_far = arr[0]   \n    max_product_ending_here = arr[0]   \n    min_ending_here = arr[0]   \n    for i in range(1, n):   \n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])   \n        min_ending_here = min(arr[i], min_ending_here * arr[i])   \n        max_product_so_far = max(max_product_so_far, max_product_ending_here)   \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    if len(arr) < 3:\n        return 0\n\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if min_ending_here < min_so_far:\n            min_so_far = min_ending_here\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    dp = [1]*n\n    \n    # base case: if the array is of length 1, the maximum product is the array element itself\n    if n == 1:\n        return arr[0]\n    \n    # base case: if the array has only one element, the maximum product is the array element itself\n    if n == 2:\n        return arr[0] * arr[1]\n    \n    # fill in the dynamic programming table\n    for i in range(n-1):\n        dp[i+1] = max(arr[i] * dp[i], arr[i+1] * dp[i+1])\n    \n    # find the maximum product\n    max_product = max(dp[0], dp[1])\n    \n    # return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num > 0:\n            current_product *= num\n            max_product = max(max_product, current_product)\n        else:\n            current_product = 1\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Initialize variables\n    max_prod = float('-inf')\n    current_prod = 1\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current element is the smallest one\n        if i == 0 or arr[i] < arr[i-1]:\n            current_prod = arr[i]\n        else:\n            # Calculate the maximum product between the current element and the smallest one\n            current_prod = max(arr[i], arr[i-1]) * arr[i]\n        \n        # Update the maximum product found so far\n        max_prod = max(max_prod, current_prod)\n        \n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n        else:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    max_product = float('-inf')\n    for i in range(n):\n        dp[i][i] = arr[i]\n        max_product = max(max_product, arr[i])\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            dp[i][j] = max(dp[i][j], dp[i+1][j], dp[i][j-1], dp[i+1][j-1])\n            max_product = max(max_product, arr[i]*arr[i+1]*arr[j]*arr[j-1]*dp[i][j])\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"The input tuple should have at least two elements.\")\n    \n    result = []\n    for i in range(1, len(test_tup)):\n        result.append(test_tup[i] + test_tup[i-1])\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Error: The input tuple must have at least two elements.\"\n    else:\n        result = 0\n        for i in range(len(test_tup) - 1):\n            result += test_tup[i] + test_tup[i+1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n\n    # initialize variables to keep track of the sum of the current element and the sum of the next element\n    current_sum = test_tup[0]\n    next_sum = test_tup[1]\n\n    # loop through the rest of the tuple, adding the current sum and the next sum\n    for i in range(2, len(test_tup)):\n        current_sum += next_sum\n        next_sum = test_tup[i]\n\n    # return the final sum\n    return current_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"The given tuple should have at least two elements.\"\n\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # use zip() to iterate over the tuple\n    # and accumulate the sum of the next pair of elements\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    result = []\n    for i in range(length-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n-1):\n        test_tup[i] += test_tup[i+1]\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return add_pairwise(test_tup[1:]) + test_tup[0]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        if i == 0:\n            result.append(test_tup[i] + test_tup[i+1])\n        elif i == len(test_tup)-1:\n            result.append(test_tup[i-1] + test_tup[i])\n        else:\n            result.append(test_tup[i-1] + test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n-1):\n        test_tup = (test_tup[i] + test_tup[i+1], test_tup[i+1])\n    return test_tup[0]"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in two arguments:\n    - arr: a list of integers\n    - n: an integer\n    \n    The function calculates the product of the array multiplication modulo n, and returns the result.\n    '''\n    \n    # Convert the list to a numpy array\n    arr_np = np.array(arr)\n    \n    # Calculate the product of the array and modulo n\n    result = (arr_np * arr_np.T) % n\n    \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result variable to 1\n    result = 1\n    \n    # Iterate through each element in the array\n    for i in arr:\n        # Calculate the current element modulo n\n        current = i % n\n        \n        # Multiply the result by the current element and store it in a new variable\n        new_result = (result * current) % n\n        \n        # Update the result to be the new value\n        result = new_result\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array arr and a number n as input and returns the remainder of the product of the array elements modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product*arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize product as 1\n    product = 1\n\n    # Loop through each element in the array\n    for element in arr:\n        # Multiply the current element with the product\n        product = (product * element) % n\n\n    # Return the product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input and returns the product of the array multiplication modulo n.\n    '''\n\n    # Initialize variables\n    product = 1\n    remainder = 0\n\n    # Iterate through the array and compute the product\n    for i in arr:\n        product = (product * i) % n\n\n    # Return the remainder\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if the list is empty or has only one element\n    if len(l) < 2: \n        return False\n    \n    # Initialize two variables to keep track of the first and second elements of the list\n    first = l[0]\n    second = l[1]\n    \n    # Loop through the rest of the list\n    for i in range(2, len(l)): \n        # Check if the current element is greater than the previous element\n        if l[i] > second: \n            # If so, reset the first variable to the current element\n            first = l[i]\n            # If not, increment the second variable by 1\n            second += 1\n        else: \n            # If the current element is less than or equal to the previous element, \n            # return False because there are consecutive numbers\n            return False\n    \n    # If the loop completes without returning False, there are no consecutive numbers in the list\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l) - 1: \n        if l[i] + 1 == l[i+1]: \n            return True\n        i += 1\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Initialize variables to keep track of the current and previous numbers\n    current = None\n    previous = None\n\n    # Loop through each number in the list\n    for num in l:\n\n        # If the current number is not the same as the previous number, it is a consecutive number\n        if num!= previous:\n            return True\n\n        # Update the previous number to the current number\n        previous = num\n\n    # If no consecutive numbers were found, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            count += 1\n    if count == len(l)-1: \n        print(\"The list contains consecutive numbers.\")\n    else: \n        print(\"The list does not contain consecutive numbers.\")"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1] - 1: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l) \n    if n == 0: \n        return True \n    for i in range(n-1): \n        if l[i] + 1!= l[i+1]: \n            return False \n    return True "
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_set = set(test_list1) & set(test_list2)\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # Create a set from the first list to get unique elements\n    set1 = set(test_list1)\n    # Create a set from the second list to get unique elements\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list and sort the elements\n    sorted_intersection = sorted(list(intersection))\n    # Return the sorted intersection list\n    return sorted_intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    for element in set1.intersection(set2):\n        intersection.append(element)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty set to store the common elements\n    common_elements = set()\n    # iterate through the first list\n    for element in test_list1:\n        # check if the element exists in the second list\n        if element in test_list2:\n            # if it does, add it to the set of common elements\n            common_elements.add(element)\n    # convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create an empty set to store the unique elements of the intersection of the two lists\n    unique_intersection = set()\n\n    # Loop through the elements of the first list\n    for element in test_list1:\n\n        # Check if the element is in the second list and if it's unique in the set\n        if element in test_list2 and element not in unique_intersection:\n            unique_intersection.add(element)\n\n    # Convert the set to a list and return it\n    return list(unique_intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for item in test_list1:\n        if all(item in sublist for sublist in test_list2):\n            intersection.append(item)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns the tuple intersection of the elements.\n    The tuple intersection is defined as the elements that are present in both the tuple lists.\n    \"\"\"\n    # Create a set of all elements in both tuple lists\n    all_elements = set(test_list1 + test_list2)\n\n    # Find the intersection of the sets\n    intersection = all_elements.intersection(set(test_list1), set(test_list2))\n\n    # Return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of the first list to remove duplicates and sort the elements\n    set1 = sorted(set(test_list1))\n    # Create a set of the second list to remove duplicates and sort the elements\n    set2 = sorted(set(test_list2))\n    # Create an empty list to store the intersection elements\n    intersection = []\n    # Loop through the smaller set\n    for element in set1:\n        # Check if the element exists in the larger set\n        if element in set2:\n            # If it does, add it to the intersection list\n            intersection.append(element)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes in two list of tuples and finds the tuple intersection of elements in the two lists irrespective of their order.\n    \"\"\"\n    # Sort both the lists of tuples in ascending order based on the length of tuples\n    test_list1 = sorted(test_list1, key=len)\n    test_list2 = sorted(test_list2, key=len)\n\n    # Create two empty sets to store the common elements of the sorted lists of tuples\n    common_set1 = set()\n    common_set2 = set()\n\n    # Iterate over the first sorted list of tuples\n    for tup1 in test_list1:\n        # Check if the tuple is present in the second sorted list of tuples\n        if tup1 in test_list2:\n            # Add the tuple to the common set\n            common_set1.add(tup1)\n\n    # Iterate over the second sorted list of tuples\n    for tup2 in test_list2:\n        # Check if the tuple is present in the first sorted list of tuples\n        if tup2 in test_list1:\n            # Add the tuple to the common set\n            common_set2.add(tup2)\n\n    # Return the common elements of the two sets as a new list of tuples\n    return list(common_set1.intersection(common_set2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of all elements in the first tuple list\n    set1 = set(test_list1)\n    # Create a set of all elements in the second tuple list\n    set2 = set(test_list2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # Convert the set back to a tuple and return it\n    return tuple(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The original string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old character.\n\n    Returns:\n    The modified string with the old character replaced by the new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character with a new character in a given string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    :param str1: The string to be processed.\n    :param ch: The character to be replaced.\n    :param newch: The new character to be inserted.\n\n    :return: The modified string with replaced characters.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    chars = list(str1)\n\n    # Loop through each character in the list\n    for i in range(len(chars)):\n        # If the character matches the input character, replace it with the new character\n        if chars[i] == ch:\n            chars[i] = newch\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # split the string into a list of characters\n    chars = list(str1)\n    \n    # loop through each character in the list\n    for i in range(len(chars)):\n        # check if the current character is equal to the specified character\n        if chars[i] == ch:\n            # replace the character with the new character\n            chars[i] = newch\n            \n    # join the list of characters into a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Create a new dictionary with the sorted items\n    sorted_dict = {}\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by value\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert dictionary to list of tuples of (value, key)\n    lst = [(v, k) for k, v in dict1.items()]\n    # Sort the list by value in descending order\n    lst.sort(key=lambda x: x[0], reverse=True)\n    # Create a dictionary from the sorted list\n    sorted_dict = dict(lst)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    This function takes in an array of integers and returns the sum of the largest and smallest value in the array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        min_val = nums[0]\n        max_val = nums[0]\n        for num in nums:\n            if num < min_val:\n                min_val = num\n            elif num > max_val:\n                max_val = num\n        return min_val + max_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n    \n    # find the largest and smallest values\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    # calculate the sum of the largest and smallest value\n    sum_largest_smallest = nums[0] + nums[-1]\n    # return the sum\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case\n    lower_string = string.lower()\n    # Return the lower case string\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the string\n    str1 = re.sub('(?i)[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all substrings of length 1 that are lowercase\n    str1 = re.sub('([a-z])\\1', '', str1)\n    \n    # Remove all substrings of length 2 that are lowercase\n    str1 = re.sub('([a-z]{2})', '', str1)\n    \n    # Remove all substrings of length 3 that are lowercase\n    str1 = re.sub('([a-z]{3})', '', str1)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    # Use regex to match all lowercase substrings and replace them with empty string\n    pattern = re.compile(r'[a-z]+')\n    string = pattern.sub('', string)\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Create a regular expression to match lowercase substrings\n    lowercase_pattern = re.compile(r'[a-z]+')\n    # Find all lowercase substrings in the string\n    lowercase_substrings = lowercase_pattern.findall(str1)\n    # Remove all lowercase substrings from the string\n    for sub in lowercase_substrings:\n        str1 = str1.replace(sub, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    pattern = re.compile(r'[a-z]+') # compiles regular expression pattern to match lowercase substrings\n    result = pattern.sub('', string) # replaces all matches with empty string in the given string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove all lowercase substrings from a given string.\n    '''\n    # Create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n\n    # Find all lowercase substrings in the string\n    substrings = pattern.findall(string)\n\n    # Replace all lowercase substrings with empty string\n    for substring in substrings:\n        string = string.replace(substring, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use a regular expression to remove all lowercase substrings from the string\n    pattern = re.compile(r'([a-z]+)')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all lowercase substrings in the string\n    substrings = pattern.findall(str1)\n    # Remove all lowercase substrings from the string\n    result = ''.join([char for char in str1 if char not in substrings])\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+')\n    return lowercase_pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 1000000"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the input number to string\n    num = str(n)\n    # Extract the first digit of the string and convert it to integer\n    first_digit = int(num[0])\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    first_digit = n // 10**(len(str(n))-1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the first digit of the number.\n    \"\"\"\n    # Dividing the number by 10 and storing the remainder\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    str_n = str(n)\n    # Return the first character of the string\n    return str_n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # Find the length of the number\n    length = len(str(n))\n\n    # Find the first digit\n    digit = n // 10**length\n\n    # Return the first digit\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # find the length of the string\n    length = len(num_str)\n    # return the first digit of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers in the original list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    natural_sum = sum(i for i in range(1, n+1))\n    return abs(cubes_sum - natural_sum)\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # Calculating the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculating the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Returning the difference\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n = list(range(1, n+1))\n    first_n_cubes = [i**3 for i in first_n]\n    sum_of_first_n_cubes = sum(first_n_cubes)\n    sum_of_first_n = sum(first_n)\n    return sum_of_first_n_cubes - sum_of_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # calculate sum of cubes of first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate sum of first n natural numbers\n    sum_first_n = 0\n    for i in range(1, n+1):\n        sum_first_n += i\n\n    # calculate the difference between the two sums\n    difference = sum_cubes - sum_first_n\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    def sum_of_cubes(n):\n        \"\"\"\n        Helper function to find the sum of cubes of the first n natural numbers.\n        \"\"\"\n        total = 0\n        for i in range(1, n+1):\n            total += i**3\n        return total\n\n    def sum_of_natural_numbers(n):\n        \"\"\"\n        Helper function to find the sum of the first n natural numbers.\n        \"\"\"\n        total = 0\n        for i in range(1, n+1):\n            total += i\n        return total\n\n    sum_of_cubes_n = sum_of_cubes(n)\n    sum_of_natural_numbers_n = sum_of_natural_numbers(n)\n    difference_n = sum_of_cubes_n - sum_of_natural_numbers_n\n    return difference_n\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_natural_numbers = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural_numbers += i\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables\n    odd_pair_count = 0\n    xor_value = 0\n\n    # Loop through the array A\n    for i in range(N):\n        # Calculate the XOR value of the current element with all the other elements in the array\n        xor_value = xor_value ^ A[i]\n\n        # If the XOR value is odd, increment the odd_pair_count\n        if xor_value & 1 == 1:\n            odd_pair_count += 1\n\n    # Return the count of odd pairs\n    return odd_pair_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through the list A and check if the current element is odd\n    for i in range(N):\n        # Check if the current element is odd\n        if A[i] % 2!= 0:\n            # Loop through the remaining elements of A and check if their xor value is odd\n            for j in range(i+1, N):\n                if A[j] % 2!= 0:\n                    # If the xor value is odd, increment the count variable\n                    count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor = A[i] ^ (A[(i + 1) % N])\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes two lists A and N and returns the number of pairs\n    whose xor value is odd.\n\n    Parameters:\n    A: list\n        A list of integers.\n    N: list\n        A list of integers.\n\n    Returns:\n    int\n        The number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(N)):\n            if A[i] ^ N[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor_val = A[i] ^ A[(i+1)%N]\n        if xor_val % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the character is a lowercase letter, convert it to uppercase\n        if string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # If the character is an uppercase letter, convert it to lowercase\n        elif string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n    # Return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # check if the character is uppercase\n        if string[i].isupper():\n            # convert it to lowercase\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # check if the character is lowercase\n        elif string[i].islower():\n            # convert it to uppercase\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # check if the character is neither uppercase nor lowercase\n        else:\n            # do nothing, just move on to the next character\n            continue\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the toggled string\n    toggled_string = \"\"\n    \n    # Loop through each character in the input string\n    for char in string:\n        # If the character is uppercase, convert it to lowercase\n        if char.isupper():\n            toggled_string += char.lower()\n        # If the character is lowercase, convert it to uppercase\n        else:\n            toggled_string += char.upper()\n    \n    return toggled_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    total_sum = 0\n    for i in range(10):\n        digit_sum = abs(n1 % 10 - n2 % 10)\n        total_sum += digit_sum\n        n1 //= 10\n        n2 //= 10\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n\n    # Initialize a variable to store the sum of differences\n    sum_diff = 0\n\n    # Iterate through the lists of digits and add the per-digit difference to the sum\n    for i in range(len(n1_list)):\n        diff = abs(int(n1_list[i]) - int(n2_list[i]))\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    total_sum = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        n1_digit = n1 // (10 ** i) % 10\n        n2_digit = n2 // (10 ** i) % 10\n        if n1_digit!= n2_digit:\n            total_sum += abs(n1_digit - n2_digit)\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # get the number of digits in both numbers\n    n1_digits = len(str(n1))\n    n2_digits = len(str(n2))\n\n    # if the numbers have different numbers of digits, return 0\n    if n1_digits!= n2_digits:\n        return 0\n\n    # initialize variables to store the sum of differences\n    sum_diff = 0\n\n    # loop through the digits of both numbers\n    for i in range(n1_digits):\n        # calculate the difference between the digits\n        digit_diff = abs(n1 // 10**i - n2 // 10**i)\n\n        # add the difference to the sum of differences\n        sum_diff += digit_diff\n\n    # return the total sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    distance = 0\n    for i in range(len(str(n1))):\n        distance += abs(ord(str(n1)[i]) - ord(str(n2)[i]))\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to strings and split them into individual digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize variables to keep track of the sum and the current digit distance\n    sum_distance = 0\n    current_distance = 0\n\n    # Loop through each digit of the first number\n    for i in range(len(n1_str)):\n        # Convert the current digit to an integer and subtract it from the corresponding digit of the second number\n        diff = int(n1_str[i]) - int(n2_str[i])\n        # Increment the current distance if the difference is non-zero\n        if diff!= 0:\n            current_distance += 1\n            # Update the sum of the distance if the current distance is greater than or equal to 2\n            if current_distance >= 2:\n                sum_distance += current_distance - 1\n                current_distance = 0\n\n    # Add the remaining distance to the sum if it's greater than zero\n    if current_distance > 0:\n        sum_distance += current_distance\n\n    # Return the sum of the distances\n    return sum_distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Calculate the length of the strings\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    # Initialize the sum to 0\n    sum_of_diff = 0\n\n    # Iterate over the digits of the numbers\n    for i in range(min(n1_len, n2_len)):\n        # Calculate the per-digit difference between the i-th digit of the two numbers\n        diff = abs(int(n1_str[i]) - int(n2_str[i]))\n\n        # Add the per-digit difference to the sum\n        sum_of_diff += diff\n\n    # If the numbers have different lengths, calculate the sum of the differences\n    if n1_len!= n2_len:\n        for i in range(min(n1_len, n2_len), max(n1_len, n2_len)):\n            diff = abs(int(n1_str[i]) - int(n2_str[i]))\n            sum_of_diff += diff\n\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    # Initialize variables to store the sum and difference of each digit\n    sum_diff = 0\n    diff_sum = 0\n\n    # Convert each number to a string to iterate over its digits\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # Iterate over the digits of each number and calculate the difference and sum of the differences\n    for digit in str_n1:\n        diff_sum += abs(ord(digit) - ord('0'))\n\n    for digit in str_n2:\n        diff_sum += abs(ord(digit) - ord('0'))\n\n    # Calculate the difference between the two numbers\n    diff = abs(n1 - n2)\n\n    # Add the sum of the differences to the sum of differences\n    sum_diff = diff_sum + diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a list to store the differences\n    differences = []\n    # Convert both numbers to strings to iterate over each digit\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Iterate over each digit of both numbers\n    for digit1, digit2 in zip(n1_str, n2_str):\n        # Calculate the absolute difference between the digits\n        difference = abs(int(digit1) - int(digit2))\n        # Add the difference to the list of differences\n        differences.append(difference)\n    # Return the sum of the differences\n    return sum(differences)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two integers to a list of digits\n    num1_digits = [int(d) for d in str(n1)]\n    num2_digits = [int(d) for d in str(n2)]\n    # calculate the per-digit difference between the two lists of digits\n    digit_diff = [abs(d1 - d2) for d1, d2 in zip(num1_digits, num2_digits)]\n    # calculate the sum of the per-digit difference\n    sum_diff = sum(digit_diff)\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    end = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n            end = i\n        elif curr_sum < 0:\n            curr_sum = 0\n            start = i\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        elif max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the list\n    for i in range(size):\n        # Update the current subarray sum\n        current_sum += a[i]\n\n        # Update the maximum subarray sum if the current subarray sum is greater than the maximum subarray sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current subarray sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes in a list a and a size n and returns the sum of the largest contiguous sublist of size n.\n\n    Example:\n    max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 3)\n    Output: 15\n\n    \"\"\"\n    if size > len(a):\n        return 0\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(len(a) - size + 1):\n        current_sum = sum(a[i:i + size])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate both tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    # Use a set to remove duplicates and sort the list in ascending order\n    unique_list = sorted(set(combined_list))\n    # Print the sorted list\n    print(unique_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union = sorted(list(set(union)))\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a new empty set to store the unique elements from both tuples\n    unique_set = set()\n    # add the elements of the first tuple to the set\n    for element in test_tup1:\n        unique_set.add(element)\n    # add the elements of the second tuple to the set\n    for element in test_tup2:\n        unique_set.add(element)\n    # convert the set back to a list and sort it\n    union_list = sorted(list(unique_set))\n    # return the union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Find the unique elements in the combined tuple\n    unique_elements = list(set(combined_tup))\n    \n    # Sort the unique elements and output them\n    unique_elements.sort()\n    for element in unique_elements:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n\n    # Sort the combined tuple in ascending order\n    sorted_tup = sorted(combined_tup)\n\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Initialize an empty set to store the union\n    union = set()\n\n    # Add all elements from the first tuple to the set\n    for elem in test_tup1:\n        union.add(elem)\n\n    # Add all elements from the second tuple to the set\n    for elem in test_tup2:\n        union.add(elem)\n\n    # Convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union))\n\n    # Output the union in sorted order\n    for elem in union_list:\n        print(elem)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Find the unique elements in the combined tuple\n    unique_elements = list(set(combined_tup))\n    \n    # Sort the unique elements\n    unique_elements.sort()\n    \n    # Output the sorted unique elements\n    print(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # create a set of all the unique elements in both tuples\n    unique_elements = set(test_tup1 + test_tup2)\n\n    # convert the set back to a list and sort it in ascending order\n    sorted_unique_elements = sorted(list(unique_elements))\n\n    # print the sorted list of unique elements\n    print(sorted_unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the sets\n    union_set = set1 | set2\n    # convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert the tuples to lists to avoid issues with mutable data types\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # Initialize the result list\n    result_list = []\n\n    # Find the union of the two lists\n    for element in tup1_list + tup2_list:\n        if element not in result_list:\n            result_list.append(element)\n\n    # Sort the result list in ascending order\n    result_list.sort()\n\n    # Convert the result list back to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the maximum length of a sublist\n    max_length = 0\n\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Initialize a variable to store the current length of the sublist\n        current_length = 0\n\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Increment the current length of the sublist\n            current_length += 1\n            # Update the maximum length if the current length is greater\n            if current_length > max_length:\n                max_length = current_length\n\n    # Return the maximum length of the longest sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            length = j - i\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize maximum length to zero\n    max_length = 0\n\n    # Loop through each element in the list\n    for i in range(len(lst)):\n        # Initialize current length to zero\n        current_length = 1\n\n        # Loop through each element after the current element\n        for j in range(i+1, len(lst)):\n            # Check if the length of the sublist starting from the current element and ending with the next element is longer than the current maximum length\n            if j+1 < len(lst):\n                if len(lst[j+1:]) > current_length:\n                    current_length = len(lst[j+1:])\n\n            # Update maximum length if the current length is greater than the maximum length\n            if current_length > max_length:\n                max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):  \n        if lst[i] == lst[i-1]:  \n            current_length += 1  \n        else:  \n            if current_length > max_length:  \n                max_length = current_length  \n            current_length = 1  \n    if current_length > max_length:  \n        max_length = current_length  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            current_length = j - i + 1\n            if current_length > max_length:\n                max_length = current_length\n                \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    This function takes a list of sublists and finds the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i+1, len(lst)):\n            sublist += lst[j]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    max_length = 0  \n    length = 0  \n    for i in range(len(lst)):  \n        length += 1  \n        if length > max_length:  \n            max_length = length  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = []\n    for i in range(len(lst)):\n        longest_sublist.append(max(lst[i:]))\n    return max(longest_sublist)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \n    Args:\n    text (str): The input string.\n    \n    Returns:\n    list: A list of extracted values.\n    \"\"\"\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"[^\"]*\"'\n    # Use the re.findall() function to extract all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Create a new list to store the extracted values\n    values = []\n    # Iterate over the matches and remove the quotation marks from each match\n    for match in matches:\n        # Remove the first and last characters of the match (i.e., the quotes)\n        value = match[1:-1]\n        # Append the extracted value to the values list\n        values.append(value)\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define regular expression pattern for finding values between quotation marks\n    pattern = r'\\\"([^\\\"]*)\\\"'\n    \n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    \n    # Extract values between quotation marks and return them as a list\n    return [match[1] for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"' # matches strings between double quotes\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"[^\"]*\"'\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.group()[1:-1])\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.group(1))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values\n\ntext = \"I'm looking for a job that involves 'data analysis' and 'programming'.\"\nvalues = extract_values(text)\nprint(values)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs\n    where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    arr (list): A list of integers\n    n (int): The length of the list\n\n    Returns:\n    int: The number of pairs that satisfy the given condition\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n >= 10:\n        n = sum(int(digit) for digit in str(n))\n    return n"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through each digit of the integer\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        \n        # Add the digit to the sum\n        sum += digit\n        \n        # Remove the last digit of the integer\n        n = n // 10\n    \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    # loop through each digit in the number\n    while n > 0:\n        # get the last digit in the number\n        digit = n % 10\n        # add it to the sum\n        sum += digit\n        # remove the last digit from the number\n        n //= 10\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        digit = n % 10  # get last digit of n\n        total += digit  # add digit to total\n        n //= 10  # remove last digit from n\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit of the input number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        # Add it to the sum variable\n        sum += digit\n        # Remove the last digit from the number\n        n //= 10\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through each digit of the number\n    while n > 0:\n        # add the current digit to the sum\n        sum += n % 10\n        \n        # remove the current digit from the number\n        n //= 10\n        \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Convert the input number to a string\n    num_str = str(n)\n    \n    # Loop through each character in the string and add its integer value to the sum\n    for char in num_str:\n        sum += int(char)\n    \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input integer to a string and then use the built-in sum function to get the sum of the digits\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Using two pointers to traverse the list\n    i = 1\n    while i < len(list1):\n        if list1[i-1] > list1[i]:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    return all(list1[:-1] < list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n\n    Args:\n    list1 (list): A list to be checked for sorting.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        for i in range(1, len(list1)):\n            if list1[i-1] > list1[i]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # initialize a variable to store the length of the list\n    n = len(list1)\n\n    # loop through the list from the second element to the last element\n    for i in range(1, n):\n        # check if the current element is less than or equal to the previous element\n        if list1[i] <= list1[i-1]:\n            return False\n\n    # if no elements are less than or equal to the previous element, the list is sorted\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n    length (int): The number of dictionaries to create in the list.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Create a list to store the sorted sublists\n    sorted_sublists = []\n\n    # Loop through each sublist of the list\n    for sublist in list1:\n\n        # Sort the sublist using the sorted() function and append the sorted sublist to the sorted_sublists list\n        sorted_sublist = sorted(sublist)\n        sorted_sublists.append(sorted_sublist)\n\n    # Return the sorted_sublists list\n    return sorted_sublists"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty dictionary to store unique numbers and their indices\n    unique_nums = {}\n    \n    # iterate over each list in the input list\n    for i in range(len(nums)):\n        # iterate over each number in the current list\n        for j in range(len(nums[i])):\n            # if the current number is not already in the dictionary, add it\n            if nums[i][j] not in unique_nums:\n                unique_nums[nums[i][j]] = [i, j]\n                \n    # create a new list to store the unique numbers\n    unique_nums_list = []\n    \n    # iterate over each number in the dictionary and add it to the new list\n    for num in unique_nums:\n        # add the number to the new list\n        unique_nums_list.append(num)\n    \n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set()\n    # Loop through each list in the input\n    for lst in nums:\n        # Loop through each number in the list\n        for num in lst:\n            # If the number is not already in the set, add it to the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    return reduce(lambda x, y: x * y, unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # convert the list to a set and get the unique elements\n    product = 1\n    for number in unique_numbers: # iterate over the unique numbers\n        product *= number # multiply the product by the number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))  # remove duplicates from list_data\n    unique_product = 1  # initialize the product as 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    \n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    unique_list = []\n    product = 1\n\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n            product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers in the given list\n    unique_nums = set(list_data)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data))  # Get a list of unique numbers from the input list\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the area of the base\n    area_base = 2 * pi * r * r\n    # calculate the surface area of the cylinder\n    area_cylinder = 2 * pi * r * r + 2 * pi * r * h + pi * r * r + 2 * pi * pi\n    # calculate the surface area of the top\n    area_top = pi * r * r + pi * r * h\n    # add up all the areas\n    surface_area = area_base + area_cylinder + area_top\n    # return the result\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n\n    # Calculate the surface area of the cylinder\n    area = 2 * r * h\n\n    # Return the surface area of the cylinder\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r ** 2 + 2 * 3.14 * r * h + 2 * 3.14 * h ** 2 - 2 * 3.14 * r * h + 2 * 3.14 * r ** 2 + 2 * 3.14 * h ** 2 + 2 * 3.14 * r ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Calculate the surface area of a cylinder with the given radius and height.\n    \"\"\"\n    return 2*3.14*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2+h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2*3.14159265359)*r*(h)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r**2"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # Initialize variables\n    i = 0\n    j = 0\n    \n    # Iterate through the list B and check if it's a sublist of A\n    while j < len(B):\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n            \n    # If i reaches the end of the list B, it means it's a sublist of A\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i] == B[j]:\n            i+=1\n            j+=1\n        else:\n            i=i-j\n            j=0\n    if j==len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        A = sorted(A)\n    i,j = 0,0\n    while j < len(B):\n        if i == len(A):\n            return True\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if A[0:len(B)-i] == B[i:]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B and returns True if A is a sublist of B, False otherwise.\n    \"\"\"\n    # If the length of A is greater than or equal to B, then it cannot be a sublist of B.\n    if len(A) >= len(B):\n        return False\n    \n    # Check whether the elements of A are present in B or not.\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    \n    # If the above checks pass, then A is a sublist of B.\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    This function checks whether a list is sublist of another or not.\n    '''\n    # Check if B is a sublist of A\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            if i == len(A):\n                return True\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n//10)*10 + (n%10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return (n % 10) * last_Digit_Factorial(n // 10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Finding factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Finding last digit of factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # Calculate the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # Extract the last digit of the factorial\n    last_digit = fact % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        \n    # Find the last digit in the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Check if input is valid integer\n    if not isinstance(n, int):\n        return \"Input must be an integer.\"\n    \n    # Calculate factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Finding the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Calculating the last digit of factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # convert number to string and split into digits\n    num_str = str(n)\n    num_digits = [int(d) for d in num_str]\n\n    # calculate the last digit\n    last_digit = num_digits[-1]\n\n    # find the factorial of the number with the last digit\n    factorial = 1\n    for i in range(1, last_digit + 1):\n        factorial *= i\n\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize result variable\n    result = 0\n    \n    # find last digit of factorial of n\n    while n > 0:\n        result = n % 10\n        n = n // 10\n        \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Iterate over each index of the first list\n    for i in range(len(list1)):\n        # Add the i-th element from each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = list1 + list2 + list3\n    # Flatten the combined list into a single list\n    flat_list = [item for sublist in combined_list for item in sublist]\n    # Return the flattened list\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    list1_set = set(list1)\n    list2_set = set(list2)\n    list3_set = set(list3)\n    \n    # Combine the sets into a single set of tuples\n    combined_set = set(zip(list1_set, list2_set, list3_set))\n    \n    # Convert the set of tuples back to a list of lists\n    interleaved_list = [list(t) for t in combined_set]\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns a single flat list that contains all the elements of the input lists.\n    '''\n    # Concatenate all the input lists into a single list\n    all_lists = list1 + list2 + list3\n    \n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n    \n    # Loop through the concatenated list and append each element to the interleaved list\n    for element in all_lists:\n        interleaved_list.append(element)\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    i = 0\n    j = 0\n    k = 0\n    flat_list = []\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] and list1[i] <= list3[k]:\n            flat_list.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n            flat_list.append(list2[j])\n            j += 1\n        else:\n            flat_list.append(list3[k])\n            k += 1\n    while i < len(list1):\n        flat_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        flat_list.append(list2[j])\n        j += 1\n    while k < len(list3):\n        flat_list.append(list3[k])\n        k += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n    list1 (list): List of integers.\n    list2 (list): List of integers.\n    list3 (list): List of integers.\n\n    Returns:\n    list: Flat list of interleaved integers.\n    \"\"\"\n    flat_list = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through both tuples\n    for i in range(len(test_tup1)):\n        # If the values are different, add the element to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # find the intersection of the two tuples\n    intersection = set(test_tup1) & set(test_tup2)\n\n    # find the elements that are in test_tup1 but not in test_tup2\n    dissimilar1 = set(test_tup1) - set(test_tup2)\n\n    # find the elements that are in test_tup2 but not in test_tup1\n    dissimilar2 = set(test_tup2) - set(test_tup1)\n\n    # combine the dissimilar elements into a set\n    dissimilar = dissimilar1.union(dissimilar2)\n\n    # return the intersection and dissimilar sets\n    return intersection, dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through the tuples\n    for i in range(len(test_tup1)):\n        # If the element at the same position in both tuples is different, add it to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Define two empty lists to store the dissimilar elements\n    dissimilar_list1 = []\n    dissimilar_list2 = []\n\n    # Iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        # If the elements are not equal, add them to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list1.append(test_tup1[i])\n            dissimilar_list2.append(test_tup2[i])\n\n    # Return the two dissimilar lists\n    return (dissimilar_list1, dissimilar_list2)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a dictionary to store the count of each element in the first tuple\n    freq_dict1 = {}\n    for elem in test_tup1:\n        if elem in freq_dict1:\n            freq_dict1[elem] += 1\n        else:\n            freq_dict1[elem] = 1\n    \n    # create a dictionary to store the count of each element in the second tuple\n    freq_dict2 = {}\n    for elem in test_tup2:\n        if elem in freq_dict2:\n            freq_dict2[elem] += 1\n        else:\n            freq_dict2[elem] = 1\n    \n    # calculate the absolute difference between the frequency counts in the two tuples\n    diff_count = 0\n    for elem in set(test_tup1) & set(test_tup2):\n        if freq_dict1[elem]!= freq_dict2[elem]:\n            diff_count += 1\n            \n    # return the dissimilar elements in the two tuples\n    return diff_count"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar.append(elem)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1).symmetric_difference(set(test_tup2))\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Define a set to store the dissimilar elements in both tuples\n    dissimilar = set()\n    # Loop through each element in both tuples\n    for i in range(len(test_tup1)):\n        # If the elements are not equal\n        if test_tup1[i]!= test_tup2[i]:\n            # Add it to the dissimilar set\n            dissimilar.add(test_tup1[i])\n    # Return the dissimilar set\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Combine the two tuples into a list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Find the common elements in the list\n    common_elements = list(set(combined_list) & set(test_tup1)) + list(set(combined_list) & set(test_tup2))\n    # Find the dissimilar elements by subtracting the common elements from the original list\n    dissimilar_elements = [elem for elem in combined_list if elem not in common_elements]\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.extend(even_fnc(item))\n        else:\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_list.extend(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                even_list.append(i)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def remove_uneven(lst):\n        '''\n        Helper function to remove uneven elements from a nested list.\n        '''\n        return list(filter(lambda x: x % 2 == 0, lst))\n\n    def remove_uneven_nested(nested_list):\n        '''\n        Helper function to remove uneven elements from a nested list.\n        '''\n        return [remove_uneven(sub_list) for sub_list in nested_list]\n\n    def remove_even_elements(lst):\n        '''\n        Helper function to remove even elements from a list.\n        '''\n        return list(filter(lambda x: x % 2 == 1, lst))\n\n    def remove_even_elements_nested(nested_list):\n        '''\n        Helper function to remove even elements from a nested list.\n        '''\n        return [remove_even_elements(sub_list) for sub_list in nested_list]\n\n    def remove_even_unnested(nested_list):\n        '''\n        Main function to remove even elements from a nested list.\n        '''\n        return [remove_even_elements(sub_list) for sub_list in nested_list]\n\n    return remove_even_unnested(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for element in test_tuple:\n        if not even_fnc(element):\n            uneven_elements.append(element)\n    return uneven_elements\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_list = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            result_list.append(even_ele(element, even_fnc))\n        else:\n            if even_fnc(element):\n                result_list.append(element)\n    return result_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_elem = even_ele(elem, even_fnc)\n            if even_fnc(new_elem):\n                new_tuple.append(new_elem)\n        elif even_fnc(elem):\n            new_tuple.append(elem)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for sublist in test_tuple:\n        new_sublist = []\n        for item in sublist:\n            if even_fnc(item):\n                new_sublist.append(item)\n        new_list.append(new_sublist)\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple: \n        if isinstance(item, tuple): \n            result.extend(even_ele(item, even_fnc)) \n        elif even_fnc(item): \n            result.append(item) \n    return result "
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the input is a nested tuple or not\n    if isinstance(test_tuple, tuple):\n        # Iterate over each element of the tuple\n        for i in range(len(test_tuple)):\n            # If the element is a tuple, call the even_fnc function recursively\n            if isinstance(test_tuple[i], tuple):\n                test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n            # If the element is not a tuple, apply the even_fnc function to it\n            else:\n                test_tuple[i] = even_fnc(test_tuple[i])\n    # If the input is not a nested tuple, return it as is\n    else:\n        return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        for elem in sub_tuple:\n            if even_fnc(elem):\n                new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the surface area of the pyramid by using Heron's formula\n    # a = b*s/2\n    # h = sqrt(3)*b*s/2\n    a = b*s/2\n    h = (2*b*s**2)**0.5\n    \n    # Calculate the area of each of the four triangles in the pyramid\n    # Triangle 1: a triangle with side length equal to b\n    # Triangle 2: a triangle with side length equal to s and base equal to b\n    # Triangle 3: a triangle with side length equal to s and base equal to h\n    # Triangle 4: a triangle with side length equal to h and base equal to b\n    \n    # Triangle 1: area = b*b*s/2\n    area_t1 = b*b*s/2\n    \n    # Triangle 2: area = s^2 * (b + s/2)\n    area_t2 = (s**2 * (b + s/2))\n    \n    # Triangle 3: area = s^2 * (2*b*s^2 + s^2)\n    area_t3 = (s**2 * (2*b*s**2 + s**2))\n    \n    # Triangle 4: area = h^2 * (b + h/2)\n    area_t4 = (h**2 * (b + h/2))\n    \n    # Add up all the areas to get the total surface area of the pyramid\n    total_area = area_t1 + area_t2 + area_t3 + area_t4\n    \n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the pyramid\n    surface = (1/2) * b * b + (1/2) * b * s + s * s\n    print(\"The surface area of the square pyramid is:\", surface)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*2 + (s**2)*4\n    print(\"The surface area of the pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the area of each side of the square pyramid\n    base_area = b**2\n    top_area = s**2\n\n    # Calculate the total surface area of the pyramid\n    surface_area = 2*base_area + 2*top_area\n\n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the side length of the square pyramid\n    h = b / 2\n\n    # Calculate the surface area of the square pyramid\n    surface_area = 6 * b * s + 2 * b * (b - 2 * h) + 6 * (b - 2 * h) * s\n\n    # Return the surface area of the square pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*b*s + 2*b + 2*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 2 * (b * s) ** 2 + 6 * (b ** 2) + 6 * (b ** 2) * s + 6 * (b ** 2) * s ** 2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the area of the base using Heron's formula\n    area = 0.5 * b * s\n    print(\"The area of the base is\", area)\n\n    # Calculate the area of the pyramid using Heron's formula\n    area = 0.5 * b * s * (s+b)\n    print(\"The area of the pyramid is\", area)\n\n    # Calculate the surface area of the pyramid using Heron's formula\n    surface_area = area + area + area\n    print(\"The surface area of the pyramid is\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s**2) + (b**2 * s) + ((b**2 - b * s**2) * (b + s))"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*b*(b+s) + 2*b*b + 2*b*s + 2*s*(s+b) + b*s*s\n    return area\n"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty!\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) + (2*n-1) * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan_sum = 0\n        for i in range(1, num+1):\n            catalan_sum += 1/(i*(i+1))\n        return catalan_sum"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (4 * n - 2) // (n - 1) + catalan_number(n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    # Compute the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Compute the numerator of the nth Catalan number\n    numerator = factorial // (n*(n-1))\n\n    # Compute the denominator of the nth Catalan number\n    denominator = factorial // (n*(n+1)*(2*n+1))\n\n    # Return the nth Catalan number\n    return numerator / denominator"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (factorial(2*n) // (factorial(n) * factorial(n-2)))\n\ndef factorial(n):\n    '''\n    This function returns the factorial of n.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Calculate the number of elements in the Catalan triangle\n    n = num + 1\n\n    # Calculate the catalan number recursively\n    catalan = [1] * n\n    catalan[0] = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Define the catalan numbers\n    catalan_numbers = [0] * (num + 1)\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n\n    # Calculate the nth catalan number\n    for i in range(2, num + 1):\n        catalan_numbers[i] = (4 * catalan_numbers[i-1] / (i + 1)) + (4 * catalan_numbers[i] / (i + 1))\n\n    return catalan_numbers[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return binomial(2*n, n)\n\ndef binomial(n, k):\n    \"\"\"\n    This function calculates the binomial coefficient.\n    \"\"\"\n    if n < 0 or k < 0 or k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial(n-1, k-1) + binomial(n-1, k)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Calculate the Catalan number using recursion\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (4*num-2)/(2*num)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b([a-zA-Z]+)ly\\b'\n\n    # Find all non-overlapping matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Iterate through the matches and return the adverb and its positions in the text\n    for match in matches:\n        return match"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\b\\w+(ly)\\b'\n\n    matches = re.finditer(pattern, text)\n\n    for match in matches:\n        adverb = match.group(0)\n        pos = match.start()\n        adverbs.append((adverb, pos))\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text, re.IGNORECASE)\n    positions = [m.start() for m in re.finditer(r'\\bly\\b', text, re.IGNORECASE)]\n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the pattern for adverbs ending with ly\n    pattern = r'\\b(ly|is|are|was|were|be|being|been|am|isn\\'t|aren\\'t|wasn\\'t|weren\\'t|being|been|am)\\b'\n    # use the re.findall() function to find all occurrences of the pattern in the input text\n    adverbs = re.findall(pattern, text)\n    # create a list of tuples containing the adverb and its position in the text\n    result = [(adverb, text.find(adverb)) for adverb in adverbs]\n    # return the list of tuples\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding the first adverb ending with ly\n    pattern = r'\\b\\w+(ly|ed|ing)\\b'\n    # Use the re.search() function to search for the pattern in the given string\n    match = re.search(pattern, text)\n    # If the pattern is found, return the matched text and its positions\n    if match:\n        return match.group(), match.start(), match.end()\n    # If the pattern is not found, return an empty string and 0 as positions\n    else:\n        return \"\", 0, 0"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use regular expressions to find all adverbs ending with ly\n    adverbs = re.findall(r'\\bly\\b', text)\n    # Find the positions of the adverbs\n    positions = []\n    for adverb in adverbs:\n        positions.append(text.index(adverb))\n    # Return the adverbs and their positions\n    return adverbs, positions\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use the re.findall() function to find all the adverbs in the given string\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the adverb and its position in the string\n    return [(m, text.find(m)) for m in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\bly\\b'\n    matches = re.findall(adverb_pattern, text)\n    if len(matches) == 0:\n        print(\"No adverbs found.\")\n        return\n    else:\n        print(\"Adverbs found:\")\n        for match in matches:\n            print(match)\n            start_index = text.index(match)\n            end_index = start_index + len(match)\n            print(\"Start index:\", start_index)\n            print(\"End index:\", end_index)\n            print(\"String between the adverbs:\", text[start_index:end_index])\n            print(\"=\"*100)\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with \"ly\"\n    pattern = r'(?<=\\b)(\\w+ly\\b)'\n    \n    # Find all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    \n    # Iterate over the matches and add their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    \n    # If no adverbs were found, return an empty list\n    if not positions:\n        return []\n    \n    # Sort the positions list in ascending order\n    positions.sort()\n    \n    # Return the sorted list of positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    for match in matches:\n        print(match.group(), match.start(), match.end())"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Initialize an empty heap with negative values\n    heap = []\n\n    # Iterate through the items and add them to the heap with negative values\n    for item in items:\n        heapq.heappush(heap, -item)\n\n    # Return the n most expensive items from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n or item[1] > heap[0][1]:\n            heapq.heappush(heap, item)\n        elif item[1] == heap[0][1]:\n            heapq.heappushpop(heap, item)\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    items: A list of tuples, where each tuple contains an item and its price.\n    n: An integer, the number of items to find.\n\n    Returns:\n    A list of tuples, where each tuple contains an item and its price. The n most expensive items.\n    \"\"\"\n    # Create a min-heap of n items.\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Extract the n most expensive items from the min-heap.\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function finds the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # sort the items in decreasing order of price\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # initialize a min heap to store the n most expensive items\n    min_heap = []\n    # add the first n items to the min heap\n    for item in sorted_items[:n]:\n        heapq.heappush(min_heap, item)\n    # iterate over the remaining items in the sorted list and add them to the heap\n    for item in sorted_items[n:]:\n        if item['price'] < heapq.heappop(min_heap)['price']:\n            heapq.heappush(min_heap, item)\n    # return the n most expensive items in the min heap\n    return [item for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap of size n\n    min_heap = []\n\n    # Iterate through the dataset\n    for item in items:\n        # If the heap is full, remove the minimum element\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n\n        # Add the current item to the heap\n        heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): a list of items with prices\n\n    Returns:\n    (list): the n most expensive items\n\n    '''\n\n    # create a min heap to store the top n most expensive items\n    min_heap = []\n\n    # add the first n items to the min heap\n    for item in items[:n]:\n        heapq.heappush(min_heap, -item)\n\n    # pop the min heap n times and store the resulting list of n most expensive items\n    result = []\n    for _ in range(n):\n        item = -heapq.heappop(min_heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    \n    Args:\n    - items: a list of (price, item) tuples, where price is a float and item is a string\n    - n: an integer, the number of most expensive items to find\n    \n    Returns:\n    - a list of the n most expensive items in the dataset\n    '''\n    \n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for price, item in items:\n        if not heap or price < heap[0][0]:\n            heapq.heappush(heap, (price, item))\n        elif len(heap) < n:\n            heapq.heappushpop(heap, (price, item))\n    \n    # Extract the n most expensive items from the heap and return them as a list\n    return [item for _, item in heap[:n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n\n    # Add the first part of the list to the end of the right part\n    l.extend(left)\n\n    # Return the updated list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l[0:]\n    else:\n        return l[:n] + split_Arr(l[n:], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        split_point = l[n]\n        new_list = l[:n] + l[n+1:]\n        return new_list + [split_point]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Splitting the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n\n    # Adding the first part to the end\n    l = part1 + part2\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n < 0 or n >= len(l):\n        return \"Invalid index\"\n    else:\n        temp = l[n:]\n        l = l[:n]\n        l += temp\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # If n is greater than the length of the list, return the list as is\n    if n > len(l):\n        return l\n    \n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Add the first part to the end of the second part\n    l_new = first_part + second_part\n    \n    return l_new"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is greater than n\n    if len(l) > n:\n        # Split the list at the nth element\n        first_part = l[:n]\n        second_part = l[n:]\n        # Add the first part to the end of the second part\n        return second_part + first_part\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is less than the nth element\n    if len(l) < n:\n        print(\"The length of the list should be greater than or equal to the nth element\")\n        return\n    \n    # split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    \n    # add part1 to part2 and return the result\n    result = part1 + part2\n    return result"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in descending order\n    nums.sort(reverse=True)\n    # find the difference between the largest and smallest values\n    diff = nums[0] - nums[1]\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List should contain at least two values.\"\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Return the difference between the largest and smallest value\n    return abs(nums[-1] - nums[0])"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    # Calculate the difference between the maximum and minimum values\n    diff = max_num - min_num\n    # Return the difference as the output\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    else:\n        # Find the minimum value in the list\n        min_val = min(nums)\n        # Find the maximum value in the list\n        max_val = max(nums)\n        # Calculate the difference between the minimum and maximum value\n        diff = max_val - min_val\n        return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        square = i * i\n        perfect_squares.append(square)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    \n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    num = a\n    while num <= b:\n        num = num * 2\n        count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i*i == a:\n            perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i and i**2 not in squares:\n            squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Calculate the number of squares between a and b\n    n = 0\n    while b - a > 0:\n        a += a\n        n += 1\n    return n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            yield square"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Check if a is greater than b\n    if a > b:\n        # Swap the values of a and b\n        a, b = b, a\n    \n    # Initialize variables for the two sides of the square\n    side_1 = a\n    side_2 = b\n    \n    # Initialize the count of perfect squares\n    count = 0\n    \n    # Loop until the side_2 is less than or equal to the square root of side_1\n    while side_2 <= side_1:\n        # Increment the count of perfect squares\n        count += 1\n        \n        # Calculate the new side of the square using the Pythagorean theorem\n        side_3 = (side_1 + side_2) / 2\n        \n        # If side_3 is a perfect square, increment the count again\n        if side_3 ** 2 == side_1:\n            count += 1\n        \n        # Update the values of side_1, side_2, and side_3\n        side_1 = side_2\n        side_2 = side_3\n    \n    # Return the count of perfect squares\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # check if the numbers are within range\n    if a < 1 or b < 1 or a > 10000 or b > 10000:\n        return \"Please enter numbers between 1 and 10000.\"\n\n    # iterate over all integers between a and b\n    for n in range(a, b + 1):\n        # check if n is a perfect square\n        root = int(n**0.5)\n        if root**2 == n:\n            return \"The square of {} is {}\".format(n, root**2)\n\n    # no perfect square found\n    return \"There is no perfect square between {} and {}.\".format(a, b)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n\n    :param r: radial coordinate (distance from origin)\n    :type r: float\n    :param theta: angle (in radians)\n    :type theta: complex\n    :return: rectangular coordinate\n    :rtype: tuple\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Parameters\n    ----------\n    r : float\n        The radius of the circle.\n    theta : float\n        The angle in radians.\n    \n    Returns\n    -------\n    tuple of floats\n        The coordinates in the form (x, y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert polar coordinates to rectangular coordinates using complex numbers\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    rect_x = r*cmath.cos(phi)\n    rect_y = r*cmath.sin(phi)\n\n    # Print the results\n    print(\"Polar coordinates:\", (x,y))\n    print(\"Rectangular coordinates:\", (rect_x,rect_y))\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r: radius\n        theta: angle\n\n    Returns:\n        (x, y): tuple of rectangular coordinates\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Using slicing to access the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    # Using list comprehension to interchange the first and last elements of the list\n    newList = [last] + [first] + newList[:-1]\n    # Return the new list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length < 2:\n        print(\"List must have at least 2 elements.\")\n        return newList\n    else:\n        # swapping the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) < 2: \n        return newList\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        return [newList[-1], newList[0]] + newList[:-1]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the list has more than one element\n    if len(newList) > 1:\n        # Interchange the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"Error: List must have more than one element.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # Find the index of the first and last elements\n    firstIndex = 0\n    lastIndex = len(newList) - 1\n    \n    # Swap the first and last elements\n    newList[firstIndex], newList[lastIndex] = newList[lastIndex], newList[firstIndex]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"The list should have at least 2 elements to swap.\")\n        return\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum to 0\n    total = 0\n    # initialize a list to store the binomial coefficients\n    coef_list = []\n    # calculate the binomial coefficient for k=0\n    coef_list.append(1)\n    # calculate the binomial coefficient for k=1\n    coef_list.append(n)\n    # calculate the binomial coefficient for k>1\n    for i in range(2, k+1):\n        coef_list.append(coef_list[i-1] * (n-i+1))\n    # calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(0, n+1):\n        total += coef_list[i]\n    return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the number of ways to choose k items from n items\n    ways = 1\n    for i in range(1,k+1):\n        ways *= n-i+1\n    ways //= k\n    ways *= (1-1/k) ** (n-k)\n    \n    # Calculate the sum of the product of consecutive binomial co-efficients\n    result = 0\n    for i in range(k):\n        result += ((i+1)*(n-i+1)) // (i+1)\n    \n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n        n (int): the value of n in the binomial coefficient summation\n        k (int): the value of k in the binomial coefficient summation\n\n    Returns:\n        int: the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    :param n: int, the number of terms in the binomial series.\n    :param k: int, the degree of the binomial series.\n\n    :return: int, the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    sum_product = 0\n\n    for i in range(k+1):\n        sum_product += binomial_coefficient(n, i) * binomial_coefficient(n-k+i, k)\n\n    return sum_product\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Write a python function to find the binomial coefficient of n and k.\n\n    :param n: int, the number of terms in the binomial series.\n    :param k: int, the degree of the binomial series.\n\n    :return: int, the binomial coefficient of n and k.\n    \"\"\"\n\n    if k > n // 2:\n        k = n - k\n\n    result = 1\n    for i in range(1, k+1):\n        result *= n - i + 1\n        result //= i\n\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_product = 0\n\n    # calculating the first term in the sum\n    first_term = (n + 1) * 1\n    for i in range(1,k+1):\n        first_term *= (n - i + 1) / i\n\n    # calculating the remaining terms in the sum\n    for i in range(k+1,n+1):\n        sum_product += first_term\n        first_term *= (n - i + 1) / i\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum and the product to 0\n    sum_product = 0\n    product = 1\n\n    # Loop through the range of k values from 0 to n-k\n    for i in range(k, n + 1):\n        # Calculate the factorial of i\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        # Calculate the factorial of (n-i+1)\n        factorial_n_minus_i_plus_1 = 1\n        for j in range(1, (n - i + 1) + 1):\n            factorial_n_minus_i_plus_1 *= j\n        # Calculate the product of the factorials\n        product *= factorial_n_minus_i_plus_1\n        # Add the product to the sum\n        sum_product += product\n        # Update the product to the next value\n        product = 1\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * binomial_Coeff(n-i, k-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # If k is greater than n, the binomial coefficient is 0\n    if k > n:\n        return 0\n    # Initialize the sum variable\n    result = 0\n    # Loop through all possible values of k\n    for i in range(k+1):\n        # Calculate the binomial coefficient\n        coeff = (n+1) // 2**i\n        # Multiply it with the product of the remaining values of k\n        result += coeff * binomial_Coeff(n-i,k-i)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes\n    ip = re.sub(r'^0+([0-9]+)$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # remove leading zeroes from each octet\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        ip_list[i] = re.sub('^0+', '', ip_list[i])\n    # join the octets with dots\n    ip = '.'.join(ip_list)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define a regular expression pattern for matching ip addresses\n    pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n\n    # match the pattern with the ip address and return the result\n    return re.sub(pattern, r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    match = pattern.match(ip)\n    if match:\n        ip_without_zeroes = ''.join(match.group(0).split('.')[::-1])\n        return ip_without_zeroes\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet\n    ip = re.sub(r'([0-9])([0-9]{2})', r'\\1\\2', ip)\n    # Remove leading zeroes from the entire ip address\n    ip = re.sub(r'([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})', r'\\1\\2\\3\\4', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expressions to remove leading zeroes from the ip address\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        ip = re.sub(r'^\\d+\\.', '', ip)\n        return ip\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # check if the list has at least two elements\n    if len(list1) < 2:\n        return \"List should have at least two elements\"\n\n    # find the first even number\n    even_found = False\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_found = True\n            break\n    if not even_found:\n        return \"List should have at least one even number\"\n\n    # find the first odd number\n    odd_found = False\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd_found = True\n            break\n    if not odd_found:\n        return \"List should have at least one odd number\"\n\n    # calculate the difference between the even and odd numbers\n    diff = list1[0] - list1[1]\n\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n\n    if even_num is None or odd_num is None:\n        return \"List does not have even or odd numbers\"\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    \n    if even % 2 == 0 and odd % 2 == 1:\n        return even - odd\n    else:\n        return \"The given list does not have even and odd numbers.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if the list is not empty\n    if not list1:\n        return 'List is empty.'\n    \n    # find the first even number\n    even_index = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index = i\n            break\n    \n    # find the first odd number\n    odd_index = 0\n    for i in range(even_index, len(list1)):\n        if list1[i] % 2!= 0:\n            odd_index = i\n            break\n    \n    # calculate the difference\n    diff = odd_index - even_index\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num -= num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num -= num\n    if even_num is None or odd_num is None:\n        return \"No even or odd numbers found in the list\"\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = -1\n    odd_number = -1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if even_number == -1:\n                even_number = list1[i]\n            else:\n                even_number = min(even_number, list1[i])\n        else:\n            if odd_number == -1:\n                odd_number = list1[i]\n            else:\n                odd_number = min(odd_number, list1[i])\n\n    return even_number - odd_number"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    if even_num is None or odd_num is None:\n        return None\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the difference of the first even and first odd numbers of the list.\n    '''\n    # convert the list to a set to remove any duplicate elements\n    lst = set(lst)\n    \n    # find the even number and remove it from the set of numbers\n    even_num = next((num for num in lst if num % 2 == 0), None)\n    if even_num is not None:\n        lst.remove(even_num)\n        \n    # find the odd number and remove it from the set of numbers\n    odd_num = next((num for num in lst if num % 2!= 0), None)\n    if odd_num is not None:\n        lst.remove(odd_num)\n        \n    # return the difference of even and odd numbers\n    return lst - set([even_num, odd_num])"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the given binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Find the maximum and minimum values of the binary numbers\n    max_val = max(num1, num2)\n    min_val = min(num1, num2)\n\n    # Calculate the number of swaps required to convert the binary numbers\n    swaps = 0\n\n    # Loop through all possible binary numbers between max_val and min_val\n    for i in range(max_val, min_val - 1, -1):\n        # Calculate the binary number that is equal to the current i\n        temp_num = i ^ num1 ^ num2\n\n        # Check if the temp_num is equal to num1\n        if temp_num == num1:\n            # If it is, calculate the number of swaps required to convert str1 to str2\n            swaps += i - num1 + 1\n\n        # Check if the temp_num is equal to num2\n        elif temp_num == num2:\n            # If it is, calculate the number of swaps required to convert str2 to str1\n            swaps += i - num2 + 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the two binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Convert the integers to binary strings\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n    \n    # Compare the binary strings\n    i = 0\n    while i < len(bin1) and i < len(bin2):\n        if bin1[i]!= bin2[i]:\n            break\n        i += 1\n        \n    # Return the minimum number of swaps required\n    return i"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = 0\n\n    # Iterate through each bit of the binary numbers\n    for i in range(31, -1, -1):\n        # If the bit at index i in num1 is different from the bit at index i in num2\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            # Increment the minimum number of swaps\n            min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for the swaps and xor values\n    swaps = 0\n    xor_values = [0, 0]\n\n    # Iterate over the bits of the binary numbers\n    for i in range(32):\n        # If the bits are not equal, swap them and increment the swap count\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n            swaps += 1\n\n        # XOR the corresponding bits of the original numbers\n        xor_values[0] ^= (num1 & (1 << i))\n        xor_values[1] ^= (num2 & (1 << i))\n\n    # Count the number of 1s in the xor_values\n    num_ones = xor_values.count(1)\n\n    # If num_ones is odd, there was an even number of swaps\n    if num_ones % 2 == 1:\n        swaps -= 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * 3 for _ in range(n + 1)]\n\n    # Initialize base cases\n    dp[0][0] = 0\n    dp[0][1] = 0\n    dp[0][2] = 0\n\n    for i in range(1, n + 1):\n        dp[i][0] = min(dp[i - 1][0], dp[i - 1][1] + 1)\n        dp[i][1] = min(dp[i - 1][1], dp[i - 1][2] + 1)\n        dp[i][2] = min(dp[i - 1][2], dp[i - 1][0] + 1)\n\n    return dp[n][2]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # initialize swap count as zero\n    swap_count = 0\n\n    # find the length of the input strings\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # find the maximum length of the input strings\n    max_len = max(n1, n2)\n\n    # initialize a boolean list to store the presence of a 1 in the corresponding position in both strings\n    presence1 = [False] * max_len\n    presence2 = [False] * max_len\n\n    # iterate over the input strings and check for presence of 1 in each position\n    for i in range(max_len):\n        if str1[i] == '1':\n            presence1[i] = True\n        if str2[i] == '1':\n            presence2[i] = True\n\n    # iterate over the input strings again and update the swap count based on the presence of a 1 in each position\n    for i in range(max_len - 1, -1, -1):\n        if presence1[i] and not presence2[i]:\n            swap_count += 1\n        if presence2[i] and not presence1[i]:\n            swap_count += 1\n\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    swaps = 0\n    i = j = 0\n    while i < n and j < n:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        elif str1[i] < str2[j]:\n            i += 1\n            swaps += n - i\n        else:\n            j += 1\n            swaps += n - j\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to binary and calculate the XOR of both binary strings\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n    xor = ''.join([str(int(x1) ^ int(x2)) for (x1, x2) in zip(binary1, binary2)])\n\n    # Initialize variables to store the count of 0's and 1's in each binary string\n    count0 = 0\n    count1 = 0\n\n    # Iterate through the XOR string and count the number of 0's and 1's\n    for digit in xor:\n        if digit == '0':\n            count0 += 1\n        else:\n            count1 += 1\n\n    # Calculate the minimum number of swaps required\n    if count0 > count1:\n        return count0\n    else:\n        return count1 - count0"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize a dictionary to store the count of each character in str1 and str2\n    count_dict = {}\n    for char in str1 + str2:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    # Initialize a variable to store the count of each character in the common substring of str1 and str2\n    common_count = 0\n    for char in count_dict:\n        if count_dict[char] in [str1.count(char), str2.count(char)]:\n            common_count += 1\n\n    # Count the number of swaps required to convert one binary number to another\n    swaps = 0\n    for char in count_dict:\n        if count_dict[char]!= common_count:\n            swaps += abs(count_dict[char] - common_count)\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    # Converting binary strings to integers\n    int1 = int(str1,2)\n    int2 = int(str2,2)\n    \n    # swapping bits until they become equal\n    swaps = 0\n    while int1!= int2:\n        if int1 < int2:\n            # swapping 1 with 0\n            int1 = int1 ^ 1 << swaps\n            swaps += 1\n        else:\n            # swapping 0 with 1\n            int2 = int2 ^ 1 << swaps\n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of each tuple.\n    '''\n    total_size = 0\n    for tuple_obj in tuple_list:\n        total_size += sys.getsizeof(tuple_obj)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setrecursionlimit(100000)\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(tuple_list, tuple):\n        print(\"Error: Input is not a tuple\")\n        return None\n    \n    # Calculate the size of the tuple in bytes\n    size_bytes = sys.getsizeof(tuple_list)\n    \n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to a string and count the number of bytes in the string\n    size_in_bytes = sys.getsizeof(str(tuple_list))\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # get the size of the tuple using sys.getsizeof()\n    size = sys.getsizeof(tuple_list)\n    # return the size in bytes\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n    if k == 1:\n        return arr2[-1]\n    else:\n        return arr1[-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize the index of the first array\n    i = 0\n    # Initialize the index of the second array\n    j = 0\n    # Initialize the result\n    result = []\n\n    # While both indices are less than k, continue\n    while i < len(arr1) and j < len(arr2) and len(result) < k:\n        # If the element at index i of first array is smaller than or equal to the element at index j of second array,\n        # add it to the result and increment the index of first array\n        if arr1[i] <= arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        # If the element at index i of first array is greater than the element at index j of second array,\n        # add it to the result and increment the index of second array\n        else:\n            result.append(arr2[j])\n            j += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    count = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            count += 1\n            i += 1\n            j += 1\n\n        if count == k:\n            return arr1[i-1]\n\n    if count == k:\n        return arr2[j-1]\n    else:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize two pointers for each array\n    i, j = 0, 0\n\n    # Iterate until one of the pointers reaches the end of the array\n    while i < len(arr1) and j < len(arr2):\n        # If the elements at the current pointers are equal, move both pointers ahead\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        # If arr1[i] is smaller, move the left pointer ahead\n        elif arr1[i] < arr2[j]:\n            i += 1\n        # If arr2[j] is smaller, move the right pointer ahead\n        else:\n            j += 1\n\n    # If the left pointer has not reached k, it means kth element is in arr2\n    if i < len(arr1):\n        return arr2[j]\n    # If the right pointer has not reached k, it means kth element is in arr1\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and k as arguments and\n    returns the kth element from the two arrays. If there are less than k\n    elements in either array, the function returns None.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Find the total number of elements in both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the minimum number of elements to be considered\n    min_elements = min(n1, n2)\n\n    # Initialize two pointers, one for each array\n    i = 0\n    j = 0\n\n    # Initialize a variable to store the kth element\n    kth_element = None\n\n    # Traverse both arrays k times\n    while i < min_elements and j < min_elements:\n        if arr1[i] < arr2[j]:\n            # If the element in arr1 is smaller, move the pointer to the right\n            i += 1\n        elif arr1[i] > arr2[j]:\n            # If the element in arr2 is smaller, move the pointer to the left\n            j += 1\n        else:\n            # If the element in both arrays is the same, count it as a kth element\n            kth_element = arr1[i]\n            i += 1\n            j += 1\n\n    # If the first array has less elements than k, it means all remaining elements in arr1\n    # are smaller than all elements in arr2\n    if i == min_elements:\n        kth_element = arr1[i]\n\n    # If the second array has less elements than k, it means all remaining elements in arr2\n    # are smaller than all elements in arr1\n    elif j == min_elements:\n        kth_element = arr2[j]\n\n    # If the kth element is not found, set it as None\n    if kth_element is None:\n        kth_element = \"Not found\"\n\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1  # swap arrays to make them sorted in ascending order\n\n    l, r = 0, len(arr2) - 1\n    while l <= r:\n        mid = l + (r - l) // 2  # calculate the middle index of arr2\n\n        # if the sum of elements before and after the middle element of arr2 is less than or equal to k,\n        # then the kth element will be in the left half of arr2\n        if k - arr2[mid] <= arr1[r]:\n            r = mid - 1  # move the right pointer to the left half of arr2\n        else:\n            l = mid + 1  # move the left pointer to the right half of arr2\n\n    return arr2[l]  # return the kth element from arr2"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize the first array to start with\n    arr = arr1\n\n    # Initialize the index to 0\n    index = 0\n\n    # Iterate until we reach k\n    while index < k:\n\n        # If the current index is less than the length of the first array,\n        # add the element to the result array and increment the index\n        if index < len(arr1):\n            arr.append(arr1[index])\n            index += 1\n\n        # If the current index is less than the length of the second array,\n        # add the element to the result array and increment the index\n        elif index < len(arr2):\n            arr.append(arr2[index])\n            index += 1\n\n    # Return the result array\n    return arr"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize variable to store sum of cubes of digits\n    cube_sum = 0\n    # Convert the number to a string\n    num_str = str(number)\n    # Iterate through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum of cubes\n        cube_sum += int(digit) ** 3\n    # Check if the sum of cubes of digits equals the original number\n    if cube_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Get the length of the number\n    length = len(str(number))\n\n    # Calculate the sum of the squares of the digits\n    armstrong_sum = sum([int(digit)**length for digit in str(number)])\n\n    # Return True if the number is armstrong and False otherwise\n    return armstrong_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function takes a number as input and returns True if it is an Armstrong number, else False.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Check if a number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string and calculate the sum of the cubes of its digits.\n    digits = [int(digit) for digit in str(number)]\n    sum_of_cubes = sum([digit**3 for digit in digits])\n\n    # Return True if the sum of the cubes of the digits is equal to the original number,\n    # and False otherwise.\n    return sum_of_cubes == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function checks whether the given number is Armstrong or not.\n    \"\"\"\n    num_str = str(num)\n    sum = 0\n    power = len(num_str)\n    for digit in num_str:\n        digit = int(digit)\n        sum += digit ** power\n    return num == sum\n\nnum = int(input(\"Enter a number: \"))\nif is_armstrong(num):\n    print(num, \"is an Armstrong number.\")\nelse:\n    print(num, \"is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    # Initialize the sum of the digits to 0\n    sum_of_digits = 0\n    # Loop through the digits of the number\n    for digit in number_str:\n        # Convert each digit to an integer and add it to the sum\n        digit_int = int(digit)\n        sum_of_digits += digit_int ** 3\n    # Compare the sum of the digits to the original number\n    if number == sum_of_digits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    This function checks if a given number is an Armstrong number or not.\n    \"\"\"\n    num = int(num)\n    total = 0\n    power = 0\n    \n    while num > 0:\n        digit = num % 10\n        total += digit ** power\n        num //= 10\n        power += 1\n    \n    return total == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num = str(number)\n    if len(num)!= len(set(num)):\n        return False\n    sum = 0\n    for i in range(len(num)):\n        power = len(num) - i - 1\n        digit = int(num[i])\n        sum += digit ** power\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    n = int(n)\n    return str(n) == str(n)[::-1] and len(str(n)) == len(str(n)[::-1])"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the given number to a string\n    number_str = str(number)\n\n    # Initialize a variable to hold the sum of the digits of the number\n    sum_of_digits = 0\n\n    # Loop through each digit of the number and add it to the sum\n    for digit in number_str:\n        digit = int(digit)\n        sum_of_digits += digit ** len(number_str)\n\n    # Check if the sum of the digits is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize variables\n    total = 0\n    count = 0\n    # loop through the numbers and add them to the total\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    # calculate the sum and average\n    sum_value = total\n    average = sum_value/count\n    # return the sum and average\n    return sum_value, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of first n natural numbers and its average.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        # initialize variables\n        sum = 0\n        count = 0\n        # iterate n times and add each number to sum\n        for i in range(1, n+1):\n            sum += i\n        # calculate average and return it as a tuple\n        return (sum, sum/n)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum / number\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i+1\n        count += 1\n    average = sum/count\n    print(f\"Sum of first {number} natural numbers is: {sum}\")\n    print(f\"Average of first {number} natural numbers is: {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = []\n    for i in range(number):\n        sum_list.append(i+1)\n    sum_of_numbers = sum(sum_list)\n    average_of_numbers = sum_of_numbers/number\n    return sum_of_numbers, average_of_numbers\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < n:\n        total += count\n        count += 1\n    return total, total / n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n) :\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n%2==0 :\n        return \"The number is even\"\n    else :\n        return \"The number is odd\""
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as an argument and returns True if it is even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n            \n    # Initialize a variable to store the first repeated character\n    repeated_char = None\n    \n    # Iterate over each character in the string again\n    for char in str1:\n        # If the character is already in the dictionary and its frequency is 1, update the repeated character\n        if char in freq and freq[char] == 1:\n            repeated_char = char\n            break\n            \n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    if len(str1) == 0:\n        return None\n    else:\n        char_set = set()\n        for char in str1:\n            if char in char_set:\n                return char\n            char_set.add(char)\n        return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j-1]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it and set its count to 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character in the string\n    first_repeated = None\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary and its count is greater than 1, update the first repeated character\n        if char in char_count and char_count[char] > 1:\n            first_repeated = char\n            break\n    \n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n            \n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first repeated character in the dictionary\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        if i == lucid_numbers[-1] + 2:\n            lucid_numbers.append(i)\n            i += 2\n        elif i <= lucid_numbers[-1] + 4:\n            lucid_numbers.append(i)\n            i += 1\n        elif i == lucid_numbers[-1] + 6:\n            lucid_numbers.append(i)\n            i += 4\n        else:\n            lucid_numbers.append(i)\n            i += 2\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if sum(int(digit) for digit in str(i)) == 1:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n\n    for i in range(1, n + 1):\n        if all(int(digit) == i for digit in str(i)):\n            lucid_numbers.append(i)\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid = []\n    for i in range(1, n+1):\n        lucid.append(i)\n\n    while True:\n        # Try to find a lucid number\n        for i in range(2, len(lucid)+1):\n            # Check if the lucid number is already in the list\n            if lucid[i-2] == lucid[i-1] + lucid[i-3]:\n                # If it is, move the last element in the list to the current position\n                lucid[i-2], lucid[i-1] = lucid[i-1], lucid[i-2]\n                break\n        else:\n            # If we found a valid lucid number, we're done\n            break\n\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n\n    # Create a list of all lucid numbers\n    lucid = []\n    for i in range(2, n + 1):\n        if prime[i]:\n            lucid.append(i)\n\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_lucid(num):\n    '''\n    Check if a number is a lucid number or not.\n    '''\n    # First check if the number is divisible by 2\n    if num % 2 == 0:\n        return False\n    \n    # Then check if the number is divisible by 3\n    if num % 3 == 0:\n        return True\n    \n    # If the number is not divisible by 2 or 3, it is not a lucid number\n    return False"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            if len(lucid_numbers) == 0 or lucid_numbers[-1]!= i-2:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0 and i % 4 == 0:\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        if i == 2 and is_lucid(i):\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            j = i + 1\n            while j <= n:\n                if is_lucid(j):\n                    lucid_numbers.append(j)\n                j += 1\n        else:\n            j = i - 1\n            while j >= 1:\n                if is_lucid(j):\n                    lucid_numbers.append(j)\n                j -= 1\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    '''\n    if n < 10:\n        return True\n    if n % 2 == 0:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            ludic.append(i)\n        else:\n            continue\n    return ludic"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n\n    # Join the reversed words back together into a string\n    reversed_s = \" \".join(reversed_words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into a list of words\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1]) # reverse the word and append it to the list\n    return \" \".join(reversed_words) # join the reversed words into a string separated by spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string into words\n    reversed_words = [word[::-1] for word in words] # reverse each word\n    return''.join(reversed_words) # join the reversed words back into a string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse the words\n    reversed_words = words[::-1]\n    # join the reversed words back into a string and return\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word)\n    return''.join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string by spaces\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = ''\n        for char in word[::-1]:\n            reversed_word += char\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the list of words in place\n    words.reverse()\n    # join the reversed list of words into a string with spaces\n    reversed_s =''.join(words)\n    # return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # Split the string into words\n    reversed_words = words[::-1] # Reverse the list of words\n    return \" \".join(reversed_words) # Join the reversed words back into a string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number and False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function searches for a regex pattern in a given string and returns the matching substring, a start index and an end index.\n    \"\"\"\n    # Use re.search() to search for pattern in text and return a match object\n    match = re.search(pattern, text)\n    \n    # If a match is found, return the substring, start index, and end index\n    if match:\n        return match.group(), match.start(), match.end()\n    \n    # If no match is found, return None for all three values\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function takes a string and a regular expression pattern as input and returns a tuple containing the matched literal, start index, and end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    \n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2]\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        start = matches[0].start()\n        end = matches[-1].end()\n        return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        match = matches[0]\n        start = text.find(match)\n        end = start + len(match)\n        return match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        match = matches[0]\n        start_index = text.index(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2**n - 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * (n - 1)) + bell_Number(n - 1)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * bell_Number(n//2) + 1\n    else:\n        return 2 * bell_Number(n//2) + 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_Number(n//2) + bell_Number(n//2)\n    else:\n        return bell_Number((n-1)//2) + bell_Number((n-1)//2) + 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_number = 0\n    for i in range(n+1):\n        bell_number += (n-i) * (2*i-1) * (2*i-2) * 1/factorial(2*i-1)\n    return bell_number\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell_numbers = [0] * (n + 1)\n    for i in range(1, n + 1):\n        bell_numbers[i] = (i ** 2) * (i - 1) / 2\n    return bell_numbers[n]\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return []\n    else:\n        list1.pop(L-1)\n        return remove_kth_element(list1, L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list2 = list1[:] # making a copy of the original list\n    del list2[L-1] # removing the kth element from the copy\n    return list2 # returning the modified list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    while k < len(list1)-1:\n        list1[k] = list1[k+1]\n        k += 1\n    list1 = list1[:L-1]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1 = list(set(list1)) # Remove duplicate elements from the list\n    k = L # Set the value of k\n    return list1[:k-1] + list1[k:] # Return the new list with k'th element removed"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # If the length of the list is less than or equal to k, then return the list as it is\n    if len(list1) <= L:\n        return list1\n\n    # Create a new list without the k'th element\n    new_list = list1[:L-1]\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(lst, L):\n    '''\n    This function takes a list and L as input and removes the element at index L from the list.\n    '''\n    return lst[:L] + lst[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    if L > n or L <= 0:\n        return \"Error: L should be a positive integer and not greater than the length of the list.\"\n    elif L == 1:\n        return list1[:-1]\n    else:\n        return [x for i, x in enumerate(list1) if i!= L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # copy the list\n    new_list = list1.copy()\n    # remove the kth element from the list\n    del new_list[L-1]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize maximum value and index to 0\n    max_val = 0\n    max_index = 0\n    \n    # loop through each row of the matrix\n    for row in test_list:\n        # if then'th column value is greater than current maximum, update max value and index\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n            max_index = test_list.index(row)\n    \n    # return the maximum value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    for i in range(n):\n        max_val = max(test_list[j][i] for j in range(len(test_list)))\n        print(f\"The max value of the {N}th column of the matrix is: {max_val}\")"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the list\n    length = len(test_list)\n    # Initialize a variable to store the max value\n    max_val = 0\n    # Loop through the rows of the matrix\n    for i in range(length):\n        # Get the value of then'th column\n        nth_col = test_list[i][N-1]\n        # If the nth column value is greater than the max value, update the max value\n        if nth_col > max_val:\n            max_val = nth_col\n    # Return the max value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of columns in the matrix\n    num_cols = len(test_list[0])\n    \n    # Initialize the variable to store the max value\n    max_val = 0\n    \n    # Loop through each column in the matrix\n    for col in range(num_cols):\n        # Initialize the variable to store the current column value\n        current_val = 0\n        \n        # Loop through each row in the matrix\n        for row in range(len(test_list)):\n            # If the row is not in then'th column, skip it\n            if row % N!= 0:\n                continue\n            \n            # Add the value at the current row and column to the current value\n            current_val += test_list[row][col]\n        \n        # If the current value is greater than the max value, update the max value\n        if current_val > max_val:\n            max_val = current_val\n    \n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the first row in the list\n    length = len(test_list[0])\n    # Initialize the max value to be the first element of the list\n    max_val = test_list[0][N-1]\n    # Loop through the rest of the list\n    for row in test_list:\n        # If then'th element is greater than the max value, update the max value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the input list is a matrix\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input list must be a matrix\")\n    \n    # Get the length of the matrix\n    m = len(test_list)\n    \n    # Check if the n is valid\n    if N < 1 or N > m:\n        raise ValueError(\"n must be between 1 and the number of rows in the matrix\")\n    \n    # Initialize the result to be the maximum value in the first row\n    max_val = test_list[0][0]\n    \n    # Loop through the matrix and find the maximum value of then'th column\n    for i in range(1, m):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize variables\n    max_val = float('-inf')\n    max_index = None\n    col_index = 0\n    row_index = 0\n    \n    # Iterate through the matrix\n    while row_index < len(test_list):\n        # Check if the current value is greater than the current max value\n        if test_list[row_index][N] > max_val:\n            # Update the max value and its index\n            max_val = test_list[row_index][N]\n            max_index = col_index\n        \n        # Increment the column index and reset the row index\n        col_index += 1\n        row_index = 0\n    \n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_num = max(test_list[i][N-1], test_list[i][N-2], test_list[i][N-3], test_list[i][N-4])\n        test_list[i][N-1] = max_num\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col = []\n    for i in range(len(test_list)):\n        col.append(test_list[i][N-1])\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    \n    # iterate over the rows of the matrix\n    for row in test_list:\n        # check if the current row contains then'th column\n        if N in row:\n            # check if the value in then'th column is greater than the current max value\n            if row[row.index(N)] > max_value:\n                max_value = row[row.index(N)]\n    \n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    merged_lst = []\n    for sublist in lst:  \n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Initialize an empty list to store the merged list\n    merged_lst = []\n\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the sublist to the first list of the merged list\n        merged_lst.append([sublist[0], sublist[1]])\n\n    # Return the merged list\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # initialize the cumulative sum to 0\n    cumulative_sum = 0\n\n    # iterate over each element of the tuple list\n    for i in test_list:\n        # if the element is a number, add it to the cumulative sum\n        if isinstance(i, (int, float)):\n            cumulative_sum += i\n\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        if len(tup) > 1:\n            for val in tup:\n                cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumsum = 0\n    for val in test_list:\n        cumsum += val\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to hold the cumulative sum\n    cum_sum = 0\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if test_list[i] is not None:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize an empty list to store the cumulative sum\n    cum_sum = []\n    # loop through the tuple list\n    for tup in test_list:\n        # append the current sum to the cum_sum list\n        cum_sum.append(tup[0] + cum_sum[-1])\n    # return the cum_sum list\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for i in nums:\n        # Initialize a variable to store the sum of the tuple values\n        sum_val = 0\n        # Loop through each value in the tuple\n        for j in i:\n            # Add the value to the sum\n            sum_val += j\n        # Divide the sum by the length of the tuple and append the result to the average list\n        avg_list.append(sum_val / len(i))\n    # Return the average list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        sum_of_nums = sum(num_tuple)\n        average = sum_of_nums / len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # Convert the input tuple of tuples to a list of lists\n    nums_list = []\n    for num in nums:\n        nums_list.append(list(num))\n\n    # Calculate the average value for each tuple in the list\n    avg_list = []\n    for i in range(len(nums_list)):\n        avg = sum(nums_list[i]) / len(nums_list[i])\n        avg_list.append(avg)\n\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        count += 1\n        for j in i:\n            total += j\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_list = []\n    for i in range(len(nums)):\n        avg = sum(nums[i]) / len(nums[i])\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    averages = []\n    for num_tuple in nums:\n        num_list = []\n        for num in num_tuple:\n            num_list.append(num)\n        averages.append(sum(num_list) / len(num_list))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to hold the average values\n    avg_list = []\n    \n    # Loop through each tuple in the input list\n    for num in nums:\n        # Calculate the average value for the current tuple\n        avg = sum(num) / len(num)\n        # Append the average value to the avg_list\n        avg_list.append(avg)\n    \n    # Return the average values as a list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        averages.append(sum(num_tuple)/len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        average = total / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averaged_tuples = []\n    for i in range(len(nums)):\n        if isinstance(nums[i], tuple):\n            averaged_tuples.append(sum(nums[i])/len(nums[i]))\n    return averaged_tuples"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of same length.\")\n        return None\n    else:\n        modulo_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n        return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length')\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # loop through both tuples and perform modulo\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n    return modulo_result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two arguments: steps, which is the number of steps required to reach the point (d, 0) from origin, and d, which is the target distance.\n    The function returns the minimum number of jumps required to reach the point (d, 0) from origin.\n    '''\n    jumps = 0\n    current_position = 0\n    end_position = d\n    while current_position <= end_position:\n        if current_position + steps >= end_position:\n            end_position = current_position + steps - end_position\n        else:\n            jumps += 1\n        current_position += steps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    if steps < d:\n        return -1\n\n    if d == 1:\n        return 1\n\n    max_distance = (steps // 2) + 1\n    min_jumps = 0\n\n    for i in range(2, max_distance+1):\n        min_jumps += min(i, steps//i)\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # list of possible distances from origin\n    distances = [i for i in range(steps+1)]\n    \n    # minimum number of jumps required to reach (d, 0) from origin\n    min_jumps = 0\n    \n    # iterate through all possible distances from origin\n    for i in range(len(distances)):\n        \n        # if distance is greater than d, number of jumps required to reach (d, 0) from origin is 0\n        if distances[i] > d:\n            min_jumps = 0\n        else:\n            # if distance is less than or equal to d, number of jumps required to reach (d, 0) from origin is i+1\n            min_jumps = i+1\n        \n        # check if minimum number of jumps required is greater than previous minimum\n        if min_jumps > min_jumps_last:\n            min_jumps_last = min_jumps\n    \n    # return the minimum number of jumps required to reach (d, 0) from origin\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Step 1: Count the number of jumps required to reach (d, 0) from (0, 0)\n    jumps = 0\n    current_position = (0, 0)\n    while current_position!= (d, 0):\n        if current_position == (steps, 0):\n            break\n        current_position = (current_position[0] + 1, current_position[1])\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    last_pos = (0, 0)\n    jumps = 0\n    # Iterate through the list of steps\n    for step in steps:\n        # Calculate the next position and jump count\n        new_pos = (last_pos[0] + step[0], last_pos[1] + step[1])\n        jump_count = abs(new_pos[0] - d) + abs(new_pos[1])\n        # Update the last position and jump count\n        last_pos = new_pos\n        jumps += jump_count\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    dp = [float('inf')] * (steps+1)\n    dp[0] = 0\n    \n    # Iterate through the steps\n    for i in range(1, steps+1):\n        # Check if we can reach (d, 0)\n        if i <= d:\n            dp[i] = 1\n        else:\n            # Check if we can reach (0, i-d)\n            for j in range(1, min(i-d+1, steps-i)+1):\n                dp[i] = min(dp[i], dp[i-j]+1)\n                \n    return dp[steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    curr_pos = (0, 0)  # Current position\n    num_jumps = 0  # Number of jumps made\n\n    # Loop through steps\n    for i in range(steps):\n        # Find the adjacent positions\n        next_pos = (curr_pos[0] + d, curr_pos[1])\n        next_pos = (next_pos[0], 0) if next_pos[0] > 0 else (0, 0)  # Check if next position is valid\n\n        # If next position is valid, update curr_pos and increment num_jumps\n        if next_pos == (0, 0):\n            curr_pos = next_pos\n            num_jumps += 1\n        else:\n            # If next position is not valid, update curr_pos without incrementing num_jumps\n            curr_pos = next_pos\n\n    # Return the number of jumps made\n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    # create a 2D array of size (steps+1, d+1) with all values as infinity\n    dp = [[float('inf')] * (d+1) for _ in range(steps+1)]\n\n    # initial values\n    dp[0][0] = 0\n\n    # filling the array using dynamic programming\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            # if the current position is at the end of the road\n            if j == d:\n                dp[i][j] = 0\n\n            # if the current position is at the starting point\n            elif i == 1:\n                dp[i][j] = 1\n\n            # if the current position is in the middle\n            else:\n                # if the distance from the current position to the end of the road is less than d\n                if j > d:\n                    # then we can reach the end of the road by jumping 1 step in the first row or 2 steps in the second row\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n\n                # if the distance from the current position to the end of the road is equal to d\n                else:\n                    # then we can reach the end of the road by jumping 1 step in the first row or 2 steps in the second row\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n\n    # finding the minimum number of jumps required\n    min_jumps = dp[steps][d]\n\n    # printing the minimum number of jumps required\n    print(\"Minimum number of jumps required:\", min_jumps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d == 0:\n        return steps\n    elif d < 0:\n        return -1\n    elif d == 1:\n        return min_Jumps(steps-1, d-1) + 1\n    else:\n        return min_Jumps(steps-1, d-1) + min_Jumps(steps-1, d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Step 1: Create a list of tuples containing the point and the number of jumps required to reach that point\n    points = [(0, 0)]\n    for i in range(1, steps + 1):\n        new_point = (i * d, 0)\n        points.append(new_point)\n\n    # Step 2: Create a list to store the number of jumps required to reach each point in the list\n    jumps = [0] * len(points)\n\n    # Step 3: Check if the first point is the goal point\n    if points[0] == (d, 0):\n        return 1\n\n    # Step 4: Check if the first point is the only point in the list\n    if len(points) == 1:\n        return 1\n\n    # Step 5: Find the minimum number of jumps required to reach each point\n    for i in range(len(points) - 1):\n        x, y = points[i]\n        dx, dy = points[i + 1] - points[i]\n        min_jump = abs(y - dy)\n        if dx > 0:\n            min_jump = min(min_jump, abs(x - dx))\n        jumps[i] = min_jump\n\n    # Step 6: Return the minimum number of jumps required to reach the goal point\n    return min(jumps[-1], jumps[-2])"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains\n    the element-wise division of the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append(float('inf'))\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables to store the numbers and the non-numbers\n    nums = \"\"\n    chars = \"\"\n    # iterate through the string\n    for char in test_str:\n        # if the character is a number, add it to the nums variable\n        if char.isdigit():\n            nums += char\n        # otherwise, add it to the chars variable\n        else:\n            chars += char\n    # concatenate the numbers and non-numbers variables\n    result = nums + chars\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to list of characters\n    char_list = list(test_str)\n\n    # Initialize variables to keep track of number and non-number characters\n    num_count = 0\n    non_num_count = 0\n\n    # Iterate through the list of characters\n    for char in char_list:\n        # If the character is a number, increment the number count\n        if char.isdigit():\n            num_count += 1\n        # If the character is not a number, increment the non-number count\n        else:\n            non_num_count += 1\n\n    # Move all the numbers to the end of the list\n    for i in range(num_count, len(char_list)):\n        char_list[i], char_list[i-num_count] = char_list[i-num_count], char_list[i]\n\n    # Join the list of characters into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = re.findall(r'\\d+', test_str)\n    new_str = ''.join(numbers) + test_str.replace(numbers[0], '')\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store the numbers\n    nums = []\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the nums list\n        if char.isdigit():\n            nums.append(char)\n\n    # Reverse the nums list so that the numbers are in the correct order\n    nums.reverse()\n\n    # Join the list of numbers into a single string\n    result = ''.join(nums)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Find all the numbers in the string\n    nums = re.findall(r'\\d+', test_str)\n    # Remove all the numbers from the string\n    test_str = re.sub(r'\\d+', '', test_str)\n    # Add all the numbers to the end of the string\n    test_str = test_str + nums\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    str_list = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add it to the number list\n            num_list.append(char)\n        else:\n            # add it to the string list\n            str_list.append(char)\n\n    # loop through each number in the number list and append it to the end of the string list\n    for num in num_list:\n        index = str_list.index(num)\n        str_list.insert(index, num)\n\n    # join the string list and return the result\n    return ''.join(str_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Find all numbers in the string\n    numbers = re.findall(r'\\d+', test_str)\n    # Reverse the order of numbers in the list\n    numbers.reverse()\n    # Join the numbers back into the string and return it\n    return ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    str_list = []\n    # split the string into a list of characters and numbers\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            str_list.append(char)\n    # join the list of characters and numbers together into a new string\n    result_str = ''.join(num_list + str_list)\n    # return the result string\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = \"\".join(num_list)\n    num_list = list(num_str)\n    num_list.reverse()\n    return \"\".join(num_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * (n + 1)\n    max_len = 0\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] % a[j - 1] == 0:\n                dp[j] = dp[j] + dp[i - 1]\n            else:\n                dp[j] = dp[j - 1]\n        if dp[n] > max_len:\n            max_len = dp[n]\n            \n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # create a set of pairs of numbers\n    pairs = set(zip(a, a[1:]))\n\n    # find the size of the largest subset of divisible pairs\n    max_size = 0\n    for pair in pairs:\n        sub_set = set(pair)\n        if sub_set.issubset(pairs) and len(sub_set) > max_size:\n            max_size = len(sub_set)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * n  # Initialize a list of 1's of length n\n    max_size = 1  # Initialize the maximum size as 1\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                dp[j] = dp[j] + dp[i]\n                max_size = max(max_size, dp[j])\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    This function takes a list of numbers as input and returns the size of the largest subset of the numbers such that every pair is divisible by 2.\n    '''\n    # Initialize variables\n    n = len(a)\n    dp = [0] * (2 * n + 1)\n    max_size = 0\n    current_size = 0\n    \n    # Fill the memoization table\n    for i in range(1, 2 * n + 1):\n        for j in range(i):\n            if a[j] % 2 == 0 and a[j] % 2 == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n            elif a[j] % 2 == 0:\n                dp[i] = max(dp[i], dp[j])\n    \n    # Find the size of the largest subset\n    for i in range(1, 2 * n + 1):\n        if dp[i] > max_size:\n            max_size = dp[i]\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        a (list of int): List of integers to find the largest subset of.\n\n    Returns:\n        int: The size of the largest subset that meets the condition.\n    \"\"\"\n    a.sort() # sort the list of numbers\n    n = len(a) # number of elements in the list\n    max_size = 1 # initialize the maximum subset size to 1\n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0: # check if a[i] is divisible by a[i-1]\n            max_size += 1 # increment the maximum subset size\n\n    return max_size # return the maximum subset size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables\n    count = 0\n    max_count = 0\n    subset_size = 0\n    \n    # Iterate through the sorted list\n    for i in range(len(a)):\n        # Initialize variables for the current subset\n        current_count = 1\n        current_size = 0\n        \n        # Check if the current number is divisible by the next number\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                current_count += 1\n                current_size += 1\n                \n        # Update the maximum count and size found so far\n        if current_count > max_count:\n            max_count = current_count\n            subset_size = current_size\n        elif current_count == max_count:\n            subset_size = max(subset_size, current_size)\n            \n    # Return the size of the largest subset found\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n    # initialize a variable to store the size of the largest subset\n    max_size = 0\n    # initialize a variable to store the indices of the largest subset\n    max_indices = []\n    # iterate through the list\n    for i in range(len(a)-1):\n        # if the difference between the current element and the next element is less than or equal to 1, then add it to the current largest subset\n        if a[i+1]-a[i] <= 1:\n            max_indices.append(i)\n        else:\n            # if the current largest subset is larger than the current maximum size, update the maximum size and maximum indices\n            if len(max_indices) > max_size:\n                max_size = len(max_indices)\n                max_indices = [i]\n            # reset the maximum indices and size\n            else:\n                max_indices = [i]\n    # if the current largest subset is larger than the current maximum size, update the maximum size and maximum indices\n    if len(max_indices) > max_size:\n        max_size = len(max_indices)\n        max_indices = [len(a)-1]\n    # return the maximum size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    size = 1\n    max_size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            size += 1\n        else:\n            size = 1\n        if size > max_size:\n            max_size = size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # create a dictionary to store the frequency of each number in the list\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # sort the dictionary by the frequency of each number in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # initialize variables to store the size of the largest subset and the indices of the numbers in the subset\n    max_size = 1\n    start = 0\n    end = 0\n    \n    # loop through the sorted dictionary and find the largest subset of numbers that are divisible\n    for i in range(len(sorted_freq)):\n        if sorted_freq[i][0] % sorted_freq[i][1] == 0:\n            max_size += 1\n        else:\n            break\n        \n        if max_size > end - start + 1:\n            start = i - max_size + 1\n            end = i\n    \n    # return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize a set to store the largest subset\n    largest_set = set()\n\n    # Sort the list of numbers\n    a.sort()\n\n    # Initialize variables for the size of the largest subset and the current number\n    largest_size = 0\n    current_num = a[0]\n\n    # Iterate through the sorted list\n    for i in range(1, len(a)):\n        # Check if the current number is divisible by the current number in the set\n        if a[i] % current_num == 0:\n            # If it is divisible, add it to the set and update the largest_size\n            current_num = a[i]\n            largest_set.add(a[i])\n        # If the current number is not divisible, reset the current_num and set the largest_size to the length of the set\n        else:\n            largest_size = max(largest_size, len(largest_set))\n            current_num = a[i]\n            largest_set.clear()\n            largest_set.add(a[i])\n\n    # Check if there are any remaining numbers in the set that are not divisible by the current number\n    if current_num > 1:\n        largest_size = max(largest_size, len(largest_set))\n\n    return largest_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Sort the two arrays\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n\n    # Find the midpoint of the arrays\n    midpoint1 = len(sorted_arr1) // 2\n    midpoint2 = len(sorted_arr2) // 2\n\n    # Find the median of the two arrays\n    if n % 2 == 0:\n        median = (sorted_arr1[midpoint1] + sorted_arr2[midpoint2]) / 2\n    else:\n        median = sorted_arr1[midpoint1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Calculate the indices for the two middle elements\n    mid1 = n // 2\n    mid2 = n // 2\n    \n    # Get the elements at the middle indices of the two lists\n    elem1 = arr1[mid1]\n    elem2 = arr2[mid2]\n    \n    # Check if the median is between the two middle elements\n    if arr1[mid1-1] > arr2[mid2+1] and arr1[mid1+1] < arr2[mid2-1]:\n        return (elem1 + elem2) / 2\n    else:\n        # Calculate the indices for the elements that are less than the median\n        if arr1[mid1-1] > arr2[mid2]:\n            less1 = mid1\n        else:\n            less1 = mid1 + 1\n        if arr1[mid1] < arr2[mid2-1]:\n            less2 = mid2\n        else:\n            less2 = mid2 - 1\n        \n        # Calculate the indices for the elements that are greater than the median\n        if arr1[mid1+1] < arr2[mid2]:\n            more1 = mid1 + 1\n        else:\n            more1 = mid1\n        if arr1[mid1] > arr2[mid2+1]:\n            more2 = mid2 + 1\n        else:\n            more2 = mid2\n        \n        # Calculate the indices for the elements that are between the two medians\n        if arr1[less1-1] > arr2[more2+1] and arr1[less1+1] < arr2[more2-1]:\n            return (arr1[less1] + arr2[more2]) / 2\n        else:\n            if arr1[more1-1] > arr2[less2+1] and arr1[more1+1] < arr2[less2-1]:\n                return (arr1[more1] + arr2[less2]) / 2\n            else:\n                return (elem1 + elem2) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two arrays\n    merged_array = arr1 + arr2\n    \n    # Sort the merged array\n    sorted_array = sorted(merged_array)\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # If the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return sorted_array[median_index]\n    \n    # Otherwise, return the average of the middle two elements\n    else:\n        return (sorted_array[median_index] + sorted_array[median_index - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Initialize two pointers for each list\n    i = j = 0\n    \n    # Iterate through both lists and compare the elements\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    # If the first list has less elements, return the median of that list\n    if i == n:\n        return arr1[(n // 2)]\n    else:\n        return arr2[(n // 2)]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.extend(arr2)\n    arr1.sort()\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2])/2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # combine the two sorted lists into a single sorted list\n    combined_list = arr1 + arr2\n\n    # find the middle index of the combined list\n    mid = n // 2\n\n    # if the length of the combined list is odd, the median is the middle element\n    if n % 2 == 1:\n        return combined_list[mid]\n\n    # if the length of the combined list is even, the median is the average of the middle two elements\n    else:\n        return (combined_list[mid - 1] + combined_list[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted arrays and their size and returns the median of the merged array.\n    \"\"\"\n    # Merge the two arrays into a single sorted array\n    merged_arr = arr1 + arr2\n\n    # Find the median index\n    mid = n // 2\n\n    # If the length of the array is odd, the median is in the middle element\n    if n % 2 == 1:\n        return merged_arr[mid]\n    # If the length of the array is even, the median is the average of the middle two elements\n    else:\n        return (merged_arr[mid] + merged_arr[mid - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Combine the two lists into a single list\n    combined = arr1 + arr2\n\n    # Sort the combined list\n    combined.sort()\n\n    # Find the middle index\n    mid = n // 2\n\n    # If the combined list has an odd number of elements, the middle index is the median index\n    if n % 2 == 1:\n        return combined[mid]\n    # If the combined list has an even number of elements, the average of the two middle indices is the median\n    else:\n        return (combined[mid - 1] + combined[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays into one\n    arr = arr1 + arr2\n    # Sort the concatenated array\n    arr.sort()\n    # Find the median\n    if n % 2 == 0:\n        # If n is even, take the average of the two middle elements\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        # If n is odd, take the middle element\n        median = arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays into a single array\n    arr = arr1 + arr2\n\n    # Sort the merged array\n    arr.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_list = []\n    for num in nums:\n        power_list.append(num ** n)\n    return power_list"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    # create a new list to store the results\n    results = []\n    # loop through each number in the input list\n    for num in nums:\n        # compute the n-th power of the number\n        result = num ** n\n        # append the result to the results list\n        results.append(result)\n    # return the results list\n    return results"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is all uppercase or not.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    uppercase_chars = set(string.upper())\n    return len(uppercase_chars) == len(string)"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    # Convert the string to uppercase\n    string = string.upper()\n    # Return the converted string\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has less than two elements\n    if length < 2:\n        return newList\n\n    # Interchange the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # checking if the list is empty\n    if not newList: \n        return \"List is empty\"\n\n    # swapping the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # returning the updated list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) > 1:\n        # Swap the first and last elements\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    else:\n        print(\"List must contain at least 2 elements\")\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"List must have at least two elements.\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return None\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    if len(newList) >= 2:\n        # Interchange the first and last elements in the list\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"List must have at least two elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Checking if the list is empty or not\n    if len(newList) < 2:\n        return newList\n    else:\n        # Setting the first and last element of the list as new variables\n        first = newList[0]\n        last = newList[-1]\n        # Interchanging the first and last element using list slicing\n        newList = newList[:1] + newList[2:]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2: \n        return \"The list must have at least two elements.\"\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    # Check if the list is not empty\n    if len(newList) > 0:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return \"Error: the list is empty\""
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    \n    # Using Heron's formula to find the semi-perimeter\n    s = 2*r\n    perimeter = 4*pi*r**2\n    \n    # Using Heron's formula to find the semi-area\n    area = math.sqrt(s*perimeter)\n    \n    # Finding the length of the longest side of the triangle\n    longest_side = area/2\n    \n    # Finding the base of the triangle\n    base = longest_side**2/perimeter\n    \n    # Finding the height of the triangle\n    height = longest_side/math.sin(math.acos(1/2))\n    \n    # Returning the area of the triangle\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = 3.14159\n    return (3*r**2)/4\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(3):\n        s = (i*i + 1) * r\n        area = max(area, (s / (i+1)) ** 0.5)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the area of a square\n    def square_area(side):\n        return side**2\n    \n    # Calculate the perimeter of a square\n    def square_perimeter(side):\n        return 4*side\n    \n    # Calculate the area of a triangle\n    def triangle_area(base, height):\n        return 0.5*base*height\n    \n    # Calculate the perimeter of a triangle\n    def triangle_perimeter(base, height):\n        return base + height + base\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    def inscribed_area(r):\n        # Calculate the semi-circle radius\n        h = r/2\n        \n        # Calculate the length of the longest edge of the square that can be formed by inscribing a square with the semi-circle radius\n        a = square_perimeter(h)\n        \n        # Calculate the length of the shortest edge of the square that can be formed by inscribing a square with the semi-circle radius\n        b = square_perimeter(h)\n        \n        # Calculate the length of the longest edge of the triangle that can be formed by inscribing a triangle with the semi-circle radius\n        c = triangle_perimeter(h, h)\n        \n        # Calculate the length of the shortest edge of the triangle that can be formed by inscribing a triangle with the semi-circle radius\n        d = triangle_perimeter(h, h)\n        \n        # Calculate the area of the square that can be formed by inscribing a square with the semi-circle radius\n        area_square = square_area(h)\n        \n        # Calculate the area of the triangle that can be formed by inscribing a triangle with the semi-circle radius\n        area_triangle = triangle_area(h, h)\n        \n        # Calculate the area of the largest triangle that can be inscribed in a semicircle\n        largest_area = max(area_square, area_triangle)\n        \n        return largest_area\n    \n    # Call the function with the given radius\n    area = inscribed_area(r)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # Calculate the semi-circle circumference\n    c = 2 * math.pi * r\n\n    # Calculate the area of a triangle with sides of length c\n    a = (c ** 2) / 4\n\n    # Calculate the area of the largest triangle inscribed in the semicircle\n    largest_area = a * math.sin(math.acos(c / (2 * r)))\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # Formula to find the area of a triangle given the semi-perimeter\n    def area_formula(s):\n        return 0.5 * s * (s - r)\n\n    # Calculate the semi-perimeter of the largest triangle that can be inscribed in a semicircle\n    semi_perimeter = (r ** 2) / (math.sin(math.pi / 3))\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    area = area_formula(semi_perimeter)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area = 0.5 * r * (1 - math.cos(pi))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    angle = 0\n    while angle <= 2 * math.pi:\n        s = r * math.sin(angle)\n        area = max(area, s * (math.sin(angle) + math.sin(angle + math.pi/3)))\n        angle += math.pi/3\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # Find the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n\n    # Use Heron's formula to find the area of the largest triangle that can be inscribed in the semicircle\n    a = 0.5 * s * (s - r) ** 0.5\n    b = 0.5 * s * (s + r) ** 0.5\n\n    # Find the area of the largest triangle\n    area = max(a, b)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate the area of the semicircle\n    a = 2 * r * math.sin(math.pi / 6)\n\n    # calculate the perimeter of the largest triangle\n    b = 2 * r * math.sin(math.pi / 3)\n\n    # calculate the area of the largest triangle\n    c = math.sqrt(3) * a\n\n    # find the largest triangle's area\n    area = max(a, b, c)\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \n    :param array: A sorted list of natural numbers.\n    :param start: The starting index of the array. Default is 0.\n    :param end: The ending index of the array. If not provided, then the function will consider the last index of the array. Default is None.\n    :return: The smallest missing number from the sorted array.\n    \"\"\"\n    \n    if not end:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index of the search. Defaults to 0.\n        end (int, optional): The ending index of the search. Defaults to None.\n\n    Returns:\n        int: The smallest missing number.\n    \"\"\"\n\n    # Check if the array is sorted\n    if start > end:\n        raise ValueError(\"start cannot be greater than end.\")\n\n    if end is None:\n        end = len(array) - 1\n\n    # Find the largest and smallest numbers in the array\n    largest = array[-1]\n    smallest = array[0]\n\n    for num in array:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    # Initialize variables to keep track of the missing number and its index\n    missing_num = smallest\n    missing_index = array.index(smallest)\n\n    # Iterate through the array from the start index to the end index\n    for i in range(start, end + 1):\n        if i!= missing_index:\n            # Check if the current number is greater than the missing number\n            if array[i] > missing_num:\n                # If it is, update the missing number and its index\n                missing_num = array[i]\n                missing_index = i\n                break\n\n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    \n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    :param array: A sorted list of natural numbers.\n    :param start: The starting index of the search range. Default is 0.\n    :param end: The ending index of the search range. Default is None, which means the search range goes up to the last index of the array.\n    :return: The smallest missing number from the given sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i] == i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the input array is sorted in ascending order\n    if array[0] > array[-1]:\n        return \"The input array must be sorted in ascending order.\"\n\n    # If the end index is not specified, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the smallest missing number variable\n    smallest_missing = None\n\n    # Loop through the array from the start index to the end index\n    for i in range(start, end + 1):\n        # Check if the current number is missing\n        if array[i]!= i + 1:\n            # If the current number is missing, set the smallest missing number to the current number\n            smallest_missing = i + 1\n            # Break the loop since we found the smallest missing number\n            break\n\n    # Return the smallest missing number if it was found, otherwise return None\n    return smallest_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if array is sorted in ascending order\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n    # If all elements in the array are present\n    return len(array) + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number.\n    If the array is already sorted, the function returns None.\n\n    Args:\n    array (list): A list of natural numbers.\n\n    Kwargs:\n    start (int): The starting index of the range to check for missing numbers. Defaults to 0.\n    end (int): The ending index of the range to check for missing numbers. Defaults to the length of the array.\n\n    Returns:\n    int: The smallest missing number in the range [start, end] or None if the array is already sorted.\n    \"\"\"\n\n    # Check if the array is already sorted\n    if array == sorted(array):\n        return None\n\n    # Check if the start index is valid\n    if start < 0:\n        start = 0\n    if start > len(array) - 1:\n        start = len(array) - 1\n\n    # Check if the end index is valid\n    if end is None:\n        end = len(array) - 1\n    if end < start:\n        end = start\n    if end > len(array) - 1:\n        end = len(array) - 1\n\n    # Check if the range is valid\n    if start >= end:\n        return None\n\n    # Initialize the missing number and the loop counter\n    missing_num = start\n    loop_count = 0\n\n    # Iterate through the range [start, end]\n    while loop_count < len(array):\n        if missing_num in array:\n            missing_num += 1\n        else:\n            return missing_num\n        loop_count += 1\n\n    # If the loop finishes without finding a missing number, return None\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid + 1:\n            start = mid + 1\n        elif array[mid] < mid + 1:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list containing only the even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a new list containing only even numbers from the input list.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    sub.append(ele)\n    if len(sub) == 2:\n        return [tuple(sub)]\n    else:\n        adj = []\n        for i in range(len(sub)):\n            for j in range(i+1, len(sub)):\n                adj.append((sub[i][0] + sub[j][0], sub[i][1] + sub[j][1]))\n        return adj + adjac(tuple(sub), sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if (dx, dy)!= (0, 0)]\n    sub.append(adjacent)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Initialize the adjacent coordinates list\n    adj = []\n    # Iterate over the adjacent coordinates\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # If the adjacent coordinates are within the board boundaries, add them to the list\n            if 0 <= i+ele[0] < 9 and 0 <= j+ele[1] < 9:\n                if (i, j) not in sub:\n                    adj.append((i+ele[0], j+ele[1]))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) not in sub and (i, j)!= (x, y):\n                adjacent.append((i, j))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    x, y = ele\n    if x < 0 or x >= 8 or y < 0 or y >= 8:\n        return sub\n    sub.append((x - 1, y))\n    sub.append((x, y - 1))\n    sub.append((x + 1, y))\n    sub.append((x, y + 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    \n    # Add adjacent coordinates to the list\n    if x > 0:\n        adj_coords.append((x-1, y))\n    if x < 25:\n        adj_coords.append((x+1, y))\n    if y > 0:\n        adj_coords.append((x, y-1))\n    if y < 25:\n        adj_coords.append((x, y+1))\n    \n    # Add adjacent coordinates to the sublist\n    for coord in adj_coords:\n        if coord not in sub:\n            sub.append(coord)\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    \n    # adjacent coordinates in row direction\n    if row > 0:\n        sub.append((row-1, col))\n    if row < 9:\n        sub.append((row+1, col))\n    \n    # adjacent coordinates in column direction\n    if col > 0:\n        sub.append((row, col-1))\n    if col < 9:\n        sub.append((row, col+1))\n        \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    row, col = ele\n    adj = []\n\n    # Find all the adjacent cells in the 8 directions\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    for d in directions:\n        r, c = row + d[0], col + d[1]\n        if 0 <= r < len(sub) and 0 <= c < len(sub[0]):\n            adj.append((r, c))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple):\n        if len(ele) == 2:\n            return [ele[0]-1, ele[0]+1, ele[1]-1, ele[1]+1]\n        elif len(ele) == 3:\n            return [ele[0]-1, ele[0]+1, ele[1]-1, ele[1]+1, ele[2]-1, ele[2]+1]\n    elif isinstance(ele, list):\n        return [e for sublist in ele for e in adjac(sublist)]\n    else:\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n\n    if x > 0: \n        if y > 0: \n            sub.append((x-1, y-1))\n        elif y < 0: \n            sub.append((x-1, y+1))\n        else:\n            sub.append((x-1, y))\n\n    if x < 9: \n        if y > 0: \n            sub.append((x+1, y-1))\n        elif y < 0: \n            sub.append((x+1, y+1))\n        else:\n            sub.append((x+1, y))\n\n    if y > 0: \n        sub.append((x, y-1))\n\n    if y < 9: \n        sub.append((x, y+1))\n\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")  # replace spaces with underscores\n    text = text.replace(\"_\", \" \")  # replace underscores with spaces\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert spaces to underscores\n    text = text.replace(' ', '_')\n    \n    # Convert underscores to spaces\n    text = text.replace('_','')\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Define a dictionary to map spaces to underscores and vice versa\n    space_map = {' ': '_', '_':''}\n\n    # Iterate over each character in the string\n    for i in range(len(text)):\n        # Check if the character is a space\n        if text[i] =='':\n            # Replace the space with an underscore\n            text = text[:i] + space_map[text[i]] + text[i+1:]\n        elif text[i] == '_':\n            # Replace the underscore with a space\n            text = text[:i] + space_map[text[i]] + text[i+1:]\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if the input string contains only alphabets\n    if text.isalpha():\n        # Replace spaces with underscores\n        new_text = text.replace(\" \", \"_\")\n        # Replace underscores with spaces\n        new_text = new_text.replace(\"_\", \" \")\n        return new_text\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            break\n        i += 1\n    if i!= len(num_list):\n        num_list[i], num_list[-1] = num_list[-1], num_list[i]\n        move_zero(num_list)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    non_zero_index = []\n    \n    # Find all indices of zeroes in the list\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index.append(i)\n    \n    # Sort the indices of zeroes in ascending order\n    zero_index.sort()\n    \n    # Reverse the order of zeroes and non-zeroes in the list\n    num_list[zero_index] = [0] * len(zero_index)\n    num_list[non_zero_index] = [i for i in range(len(num_list)) if i not in zero_index]\n    \n    # Remove the zeroes from the original list\n    num_list = [num for num in num_list if num!= 0]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    for num in num_list:\n        if num!= 0:\n            num_list[i] = num\n            i += 1\n    while i < len(num_list):\n        num_list[i] = 0\n        i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function will move all zeroes to the end of the given list.\n    \"\"\"\n    # Traverse through the list\n    i = 0\n    while i < len(num_list):\n        # Check if the current element is zero\n        if num_list[i] == 0:\n            # If it is, move the element to the end of the list\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            # Reduce the length of the list by 1\n            len(num_list) -= 1\n        else:\n            # If it's not, move on to the next element\n            i += 1\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = [x for x in num_list if x!= 0] + [0] * sum(1 for x in num_list if x == 0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # use two pointers to iterate through the list\n    i = 0\n    j = 0\n    while j < len(num_list):\n        # move non-zero values to the left of the list\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    # move all zero values to the end of the list\n    while i < len(num_list):\n        num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n        i += 1\n        j -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize a new list to store non-zero numbers\n    non_zero_list = []\n    \n    # Iterate through the given list and add non-zero numbers to the non_zero_list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # Add all zeroes to the end of the non_zero_list\n    zero_list = [0] * (len(num_list) - len(non_zero_list))\n    new_list = non_zero_list + zero_list\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # initialize two pointers to track the first and last non-zero elements\n    i = 0\n    j = 0\n\n    # loop through the list and move all non-zero elements to the end of the list\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Iterate through the list and move all zeroes to the end\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            # swap the current element with the last non-zero element\n            j = i + 1\n            while j < len(num_list) and num_list[j]!= 0:\n                j += 1\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # move the current element to the end of the list\n            for k in range(i, j-1):\n                num_list[k+1] = num_list[k]\n            i = j\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of XOR of all pairs of numbers.\n    '''\n    # XOR of all numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n\n    # XOR of all numbers pairs in the list\n    for i in range(n-1):\n        xor_sum = xor_sum ^ arr[i] ^ arr[i+1]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function takes a list and returns the sum of the xor of all pairs of numbers in the list.\n    \"\"\"\n    # Initialize a variable to store the sum\n    xor_sum = 0\n\n    # Iterate through the list of numbers\n    for i in range(n):\n        # Iterate through the list of numbers again\n        for j in range(i+1, n):\n            # Add the xor of the two numbers together\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of the first and last elements of the list\n    xor_of_first_last = arr[0]^arr[-1]\n    # XOR of the first and second elements of the list\n    xor_of_first_second = arr[0]^arr[1]\n    # XOR of the second and third elements of the list\n    xor_of_second_third = arr[1]^arr[2]\n    # XOR of the third and fourth elements of the list\n    xor_of_third_fourth = arr[2]^arr[3]\n    # XOR of the fourth and fifth elements of the list\n    xor_of_fourth_fifth = arr[3]^arr[4]\n    \n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through the list and add the XOR of each pair of elements to the sum\n    for i in range(n-1):\n        sum += xor_of_first_last + xor_of_first_second + xor_of_second_third + xor_of_third_fourth + xor_of_fourth_fifth\n        # Shift the XOR values to the right by one position\n        xor_of_first_last = xor_of_first_second\n        xor_of_first_second = xor_of_second_third\n        xor_of_second_third = xor_of_third_fourth\n        xor_of_third_fourth = xor_of_fourth_fifth\n    \n    # Add the last XOR value to the sum\n    sum += xor_of_first_last + xor_of_first_second + xor_of_second_third + xor_of_third_fourth + xor_of_fourth_fifth\n    \n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and returns a new list in ascending order using the heap sort algorithm.\n    '''\n    hq.heapify(iterable)  # create a max-heap from the iterable\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))  # pop and add max-heap root to the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [None] * (len(iterable) // 2)\n    for i in range(len(heap)):\n        heap[i] = iterable[i]\n    for i in range(len(iterable) // 2, len(iterable)):\n        if iterable[i] > iterable[0]:\n            if i == len(iterable) // 2:\n                heapq.heappushpop(heap, iterable[i])\n            else:\n                heapq.heappush(heap, iterable[i])\n        else:\n            if i == len(iterable) // 2:\n                heapq.heappushpop(heap, iterable[i])\n            else:\n                heapq.heappop(heap)\n    return [x for x in heap if x is not None]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list to make it mutable\n    iterable = list(iterable)\n    # Build a max-heap from the iterable using heapify\n    hq.heapify(iterable)\n    # Convert the max-heap back to an iterable\n    heap_list = hq.heappop(iterable)\n    # Rebuild the max-heap by repeatedly calling heappush and heappop\n    while iterable:\n        hq.heappush(iterable, hq.heappop(iterable))\n    # Convert the iterable back to a list and return the sorted list\n    return list(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = [None] * len(iterable)\n    for i, x in enumerate(iterable):\n        heap[i] = x\n        hq.heapify(heap[:i+1])\n\n    # sort the heap\n    sorted_heap = []\n    while heap:\n        sorted_heap.append(heapq.heappop(heap))\n\n    # convert the sorted heap back to a list\n    return sorted_heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list so that we can modify it in place\n    lst = list(iterable)\n    \n    # Build a max heap from the list\n    hq.heapify(lst)\n    \n    # Sort the heap by extracting elements from the max heap and appending them to a new list\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(hq.heappop(lst))\n    \n    # Reverse the sorted list to get the sorted order\n    return sorted_lst[::-1]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Build heap\n    hq.heapify(iterable)\n\n    # Extract elements from heap\n    sorted_list = []\n    while hq.heapq:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using the heap sort algorithm.\n    \"\"\"\n    # Convert the iterable to a list, since heapq can only work with lists.\n    lst = list(iterable)\n    # Build a max heap from the list.\n    heapq.heapify(lst)\n    # Extract the largest element from the heap and append it to the result list.\n    result = []\n    while lst:\n        result.append(heapq.heappop(lst))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [value for value in iterable]\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the given list to a max-heap\n    heap = hq.heapify(iterable)\n\n    # Iterate over the list and extract max-heap elements\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the input list to a heap\n    hq.heapify(iterable)\n    \n    # Sort the heap using a list as a temporary storage\n    temp = []\n    while iterable:\n        # Append the minimum element to the output list\n        temp.append(hq.heappop(iterable))\n    \n    # Convert the temporary list back to a heap again\n    hq.heapify(temp)\n    \n    # Copy the sorted list back to the original input list\n    for i in range(len(temp)):\n        hq.heappush(iterable, temp[i])"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments:\n    actual_cost: The actual cost of the sale\n    sale_amount: The amount of the sale\n\n    The function returns True if the sale has no profit and no loss,\n    otherwise it returns False.\n    '''\n\n    if sale_amount <= 0:\n        return False\n\n    if actual_cost >= sale_amount:\n        return False\n\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    # Check whether the profit is positive or negative\n    if profit > 0:\n        print(\"Profit\")\n    elif profit < 0:\n        print(\"Loss\")\n    else:\n        print(\"No profit and loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit and loss are both positive or both negative\n    if profit >= 0 and loss <= 0:\n        print(\"The sale has no profit and no loss.\")\n    elif profit <= 0 and loss >= 0:\n        print(\"The sale has no loss but a profit.\")\n    elif profit <= 0 and loss <= 0:\n        print(\"The sale has a loss of more than a profit.\")\n    elif profit >= 0 and loss >= 0:\n        print(\"The sale has a loss of less than a profit.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n    actual_cost (int): the cost of the item before any sales have been made\n    sale_amount (int): the amount of the item that has been sold\n\n    Returns:\n    (bool, bool): a tuple of two boolean values, indicating whether the amount has no profit and no loss\n    '''\n\n    # Check if the sale amount is more than the cost of the item\n    if sale_amount > actual_cost:\n        return False, False\n\n    # Check if the sale amount is equal to the cost of the item, and there have been no sales\n    if sale_amount == actual_cost and sale_amount == 0:\n        return True, True\n\n    # Check if the sale amount is greater than the cost of the item, but has been partially sold\n    if sale_amount > actual_cost and sale_amount > sale_amount//2:\n        return True, False\n\n    # Check if the sale amount is less than the cost of the item, but has been partially sold\n    if sale_amount < actual_cost and sale_amount < sale_amount//2:\n        return False, True\n\n    # If the sale amount is equal to the cost of the item and has been sold, it must be a profit\n    if sale_amount == actual_cost and sale_amount > 0:\n        return True, False\n\n    # If we've made it this far, the amount has no profit and no loss\n    return True, True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \n    Args:\n    actual_cost (float): actual cost of the sale \n    sale_amount (float): amount of the sale\n    \n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    elif sale_amount > actual_cost:\n        return False\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n\n    Args:\n    actual_cost (int): Actual cost of the sale\n    sale_amount (int): Amount of money spent on the sale\n\n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n\n    if sale_amount == 0:\n        return True\n\n    if actual_cost == 0:\n        return False\n\n    if actual_cost > sale_amount:\n        return False\n\n    if sale_amount > 0:\n        return True\n\n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount >= actual_cost: \n        print(\"No profit and no loss\")\n        return True\n    else:\n        print(\"Profitable amount\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert the temperature to Fahrenheit\n    t = (t * 1.8) + 32\n\n    # calculate the wind chill temperature using the given formula\n    wct = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.12))\n\n    # calculate the wind chill index using the given formula\n    wci = (wct - 32) * 5 / 9\n\n    # round the wind chill index to the next integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the heat capacity ratio\n    R = 461.5 # J/kgK\n    Cp = 1005 # J/kgK\n    Cd = 216.6 # J/kgK\n    \n    # Calculate the heat capacity at the given temperature\n    Cp_t = Cp * math.exp((17.625*t)/(t+243.125))\n    Cd_t = Cd * math.exp((17.625*t)/(t+243.125))\n    \n    # Calculate the heat capacity at the freezing point\n    Cp_0 = Cp * (1 + 0.0065 * (t - 273.15))\n    Cd_0 = Cd * (1 + 0.0065 * (t - 273.15))\n    \n    # Calculate the heat conductivity\n    K = (Cp_t - Cp_0) / (t - t_f)\n    \n    # Calculate the air density\n    rho_air = 1.225 # kg/m^3\n    \n    # Calculate the thermal conductivity\n    k_th = K / rho_air\n    \n    # Calculate the air resistance\n    R_air = 0.000665 * k_th * (v**2)\n    \n    # Calculate the surface wind speed\n    w_surf = math.sqrt(2 * R_air * Cp_t / (Cd_t - Cp_t))\n    \n    # Calculate the speed of sound\n    w_soun = math.sqrt(0.0000001 * (t + 273.15))\n    \n    # Calculate the skin friction factor\n    f_sk = 1 - (0.0004 * (v**2) * (t - 273.15))\n    \n    # Calculate the skin temperature\n    T_sk = (w_surf * f_sk) / w_soun\n    \n    # Calculate the wind chill index\n    wc_i = T_sk - 459.67\n    \n    # Round the wind chill index to the nearest integer\n    wc_i = math.ceil(wc_i)\n    \n    return wc_i"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Fahrenheit\n    fahrenheit = (t * 1.8) + 32\n\n    # Calculate the wind chill index\n    wc = (13.12 + (0.6215 * v) + (11.37 * fahrenheit)) / (237.3 + (0.3965 * v) + (17.01 * fahrenheit))\n\n    # Round to the nearest integer\n    wc = math.ceil(wc)\n\n    # Return the wind chill index\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert wind speed and temperature to SI units\n    v = v * 1.60934  # km/h to m/s\n    t = t - 273.15  # Kelvin to Celsius\n    \n    # Calculate the wind chill temperature\n    wchill = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 0.16) + 0.3965 * math.pow(t, 0.16) * math.sin(1.349 * math.pi * t)\n    \n    # Calculate the wind chill dew point\n    dewpoint = (wchill + 273.15) / 1.8 - 459.67\n    \n    # Calculate the wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 0.16) + 0.3965 * math.pow(t, 0.16) * math.sin(1.349 * math.pi * t)\n    \n    # Calculate the air pressure\n    pres = 1013.25 * math.exp(17.67 * (t - 243.15) / (t - 273.15))\n    \n    # Calculate the air density\n    rho = 1.21 * math.pow(pres / 1000, 0.19)\n    \n    # Calculate the air specific heat capacity\n    cp = 0.0065 * (1 + 0.033 * t)\n    \n    # Calculate the air viscosity\n    visc = 0.001 * math.pow(cp / (1000 * (273.15 + t)), 0.285)\n    \n    # Calculate the drag coefficient\n    cd = 0.34 + 0.00066 * math.pow(t, 0.16)\n    \n    # Calculate the lift coefficient\n    cl = 0.0065 * math.pow(t, 0.5)\n    \n    # Calculate the drag force\n    df = cd * (v * (u - u_wind))\n    \n    # Calculate the lift force\n    lf = cl * (v * (u_wind - u))\n    \n    # Calculate the total lift and drag forces\n    Tlf = df + lf\n    \n    # Calculate the total wind speed\n    Tv = math.sqrt(u * u + v * v)\n    \n    # Calculate the lift coefficient (pressure-based)\n    clp = 0.0068 * math.pow(t, 0.5)\n    \n    # Calculate the drag coefficient (pressure-based)\n    cdp = 0.33 + 0.00066 * math.pow(t, 0.16)\n    \n    # Calculate the pressure difference\n    Pdiff = math.abs(v_wind - u_wind)\n    \n    # Calculate the lift force (pressure-based)\n    lf_p = clp * (v_wind * (u_wind - u))\n    \n    # Calculate the drag force (pressure-based)\n    df_p = cdp * (v_wind * (u - u_wind))\n    \n    # Calculate the total lift and drag forces (pressure-based)\n    Tlf_p = df_p + lf_p\n    \n    # Calculate the drag force coefficient (pressure-based)\n    cd_p = 0.45 + 0.0006 * math.pow(t, 0.16)\n    \n    # Calculate the lift force coefficient (pressure-based)\n    cl_p = 0.006 * math.pow(t, 0.5)\n    \n    # Calculate the drag coefficient (pressure-based)\n    cdp_p = 0.3 + 0.00066 * math.pow(t, 0.16)\n    \n    # Calculate the pressure at 10m\n    P10 = Pdiff / 10\n    \n    # Calculate the pressure at 25m\n    P25 = Pdiff / 25\n    \n    # Calculate the pressure at 50m\n    P50 = Pdiff / 50\n    \n    # Calculate the pressure at 100m\n    P1"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    t = t + 273.15\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v)\n\n    # Round the wind chill index to the next integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index (WC) for a given temperature and wind speed in km/h.\n\n    Args:\n    v (float): Wind speed in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    float: Wind chill index rounded to the next integer.\n    '''\n\n    # Calculate the wind chill coefficient based on the temperature\n    if t <= 0 or t >= 20:\n        return None\n    wc_coeff = {\n        'cold': 0.0065,\n        'normal': 0.0065 + 0.0396 * math.log10(t) + 0.0012 * t,\n        'warm': 0.0065 + 0.0396 * math.log10(t) - 0.0008 * t,\n        'hot': 0.0065 + 0.0396 * math.log10(t) - 0.0008 * t + 0.0012 * t\n    }\n\n    # Calculate the wind chill using the formula\n    wc = math.floor(wc_coeff['normal'] + wc_coeff['normal'] * v)\n\n    # Check if the calculated wind chill is within the range of valid indices\n    if wc < 0:\n        return None\n    if wc > 99:\n        return None\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the heat capacity of water at constant pressure\n    cp = 1004.6  # J/kg/K\n\n    # Convert temperature from Celsius to Kelvin\n    t = t + 273.15\n\n    # Calculate the dew point temperature\n    dp = 250.37 * (math.log(t/25) + (0.0065 * t) - (35.72 * (t/25)**2) + 0.000133 * (t/25)**3)\n\n    # Calculate the wind chill index based on the dew point temperature\n    wci = 23.44 * v * dp / (cp * t)\n\n    # Round the wind chill index to the nearest integer\n    return int(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 10:\n        return round(23.4 + 0.6215 * t - 3.567 * math.log(v) + 0.16 * math.log(v) ** 2)\n    elif 10 < v <= 15:\n        return round(21.1 + 0.3965 * t - 3.567 * math.log(v) + 0.16 * math.log(v) ** 2)\n    elif 15 < v <= 20:\n        return round(18.9 + 0.2806 * t - 3.567 * math.log(v) + 0.16 * math.log(v) ** 2)\n    elif 20 < v <= 25:\n        return round(16.9 + 0.1868 * t - 3.567 * math.log(v) + 0.16 * math.log(v) ** 2)\n    elif 25 < v <= 30:\n        return round(14.8 + 0.1127 * t - 3.567 * math.log(v) + 0.16 * math.log(v) ** 2)\n    else:\n        return round(12.8 + 0.0548 * t - 3.567 * math.log(v) + 0.16 * math.log(v) ** 2)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v == 0:\n        return 0\n    \n    c = 25 # degrees Celsius\n    \n    # Calculate the wind chill temperature in Celsius\n    wc = c + 0.6215 * (v - 10) + 17.625 * math.exp(-t / 237.3)\n    \n    # Calculate the wind chill index rounded to the nearest integer\n    wind_chill_index = round(wc)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to Fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the heat index\n    heat_index = math.floor((t_f + 8.0) * (13.12 + 0.6215 * t_f) / (2.75 * v**0.16))\n\n    # Calculate the wind chill index\n    wind_chill_index = math.floor((heat_index - 32) * (1.8 - 0.14 * v / 160) / (237.7 + 0.0065 * v / 160) + 32)\n\n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_of_lengths += len(name)\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum variable to 0\n    total_length = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if so, skip it\n            continue\n        # if the name does not start with a lowercase letter, add its length to the total length\n        total_length += len(name)\n        \n    # return the total length of all the names that do not start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the length of the names\n    total_length = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove the names that start with a lowercase letter\n        if not name.startswith('a'):\n            # Add the length of the name to the total length\n            total_length += len(name)\n    # Return the total length of the names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    total_length = sum([len(name) for name in filtered_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through the sample_names list\n    for name in sample_names:\n\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n\n            # If yes, skip the name and move to the next one\n            continue\n\n        # Otherwise, add the length of the name to the counter\n        count += len(name)\n\n    # Return the sum of the lengths of the names that didn't start with a lowercase letter\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            length_sum += len(name)\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # create an empty list to store the names that meet the criteria\n    names = []\n    # loop through each name in the sample list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, add it to the empty list\n        if not name[0].isupper():\n            names.append(name)\n    # sum the lengths of the names in the list\n    total_length = sum([len(name) for name in names])\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^)]*\\)')\n    return regex.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the pattern to match the parenthesis\n    pattern = re.compile(r'\\([^)]+\\)')\n    \n    # Find all the parenthesis in the string\n    matches = pattern.findall(items)\n    \n    # Iterate over the matches and replace them with an empty string\n    for match in matches:\n        items = items.replace(match, '')\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regex to extract only the text inside the parenthesis\n    pattern = r'\\((.*?)\\)'\n    result = re.findall(pattern, items)\n    \n    # Join the text into a single string\n    result =''.join(result)\n    \n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern for removing parenthesis\n    pattern = r'\\([^)]*\\)'\n    \n    # Replace all the parenthesis with an empty string\n    items = re.sub(pattern, '', items)\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # create a regular expression to match parenthesis\n    paren_pattern = r'\\([^)]*\\)'\n\n    # replace the parenthesis with an empty string\n    items = re.sub(paren_pattern, '', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to remove the parenthesis\n    items = re.sub(r'\\([^()]*\\)', '', items)\n    # Use list comprehension to remove any spaces between the items\n    items = [i.strip() for i in items.split(',')]\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    else:\n        return 2 * (n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define a function to check if a number is nonagonal\n    def is_nonagonal_helper(num):\n        # If the number is even, return True\n        if num % 2 == 0:\n            return True\n        # If the number is odd, check if it is divisible by the square of the previous nonagonal number\n        else:\n            prev_num = 0\n            for i in range(1, n):\n                prev_num += 4 * (i + 1) ** 2\n            return num % prev_num == 0\n\n    # Calculate and return the nth nonagonal number\n    count = 0\n    prev_num = 0\n    for i in range(1, n):\n        count += 4 * (i + 1) ** 2\n        prev_num = count\n    return prev_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the sum of the squares of the first n natural numbers\n    sum_of_squares = 1 + 2*2 + 3*3 + 4*4 +... + n*n\n    # Calculate the sum of the squares of the first n natural numbers starting from n^2\n    sum_of_squares_n_squared = (n**2) + (n**4) + (n**6) +... + (n**2*n)\n    # Subtract the sum of squares starting from n^2\n    difference = sum_of_squares_n_squared - sum_of_squares\n    # Return the difference\n    return difference"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def helper(num):\n        '''\n        Recursive function to find the nth nonagonal number.\n        '''\n        if num == 1:\n            return 1\n        else:\n            return num + helper(num - 1)\n    \n    return helper(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initializing a variable to store the sum of all nonagonal numbers up to the nth nonagonal number\n    total = 0\n    \n    # initializing a variable to store the nth nonagonal number\n    current_nonagonal = 0\n    \n    # loop to iterate through the nonagonal numbers up to the nth nonagonal number\n    for i in range(1, n+1):\n        # adding the current nonagonal number to the sum of all nonagonal numbers\n        total += current_nonagonal\n        \n        # adding the current nonagonal number to the variable to store the nth nonagonal number\n        current_nonagonal = i * (i + 1)\n    \n    # checking if the sum of all nonagonal numbers up to the nth nonagonal number is equal to the nth nonagonal number\n    if total == n * (n + 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n and returns the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    count = 0\n    while count < n:\n        if i + j == 2 * i - 1:\n            count += 1\n        i += 1\n        j += 1\n    return i - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (n * (n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # The first nonagonal number is 3\n    if n == 1:\n        return 3\n    # The first two nonagonal numbers are 5 and 11\n    elif n == 2:\n        return 5\n    # The first three nonagonal numbers are 7, 21, and 35\n    elif n == 3:\n        return 7\n    else:\n        # We can calculate each subsequent nonagonal number as the sum of the previous two\n        nonagonal = 2 * (n - 1)\n        # We subtract 1 from n since we've already calculated the first two nonagonal numbers\n        return nonagonal - 1"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z[a-z]*)(?![a-z]*[z])(?![a-z]*[z])\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Iterate over all words and check if 'z' is at the start and end of the word\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    \n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b[zZ]\\w+\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[^z]\\w*\\z'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[zZ]\\w*\\b')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[Zz]\\w+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![\\w\\s])(z)(?![\\w\\s])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define regular expression pattern to match 'z' at the start and end of a word\n    pattern = r'\\b[zZ]\\w+\\b'\n    \n    # use re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # return True if the pattern is found in the text, False otherwise\n    return bool(matches)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the first k elements of the array\n    input[0:k] = input[0:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    # Reverse the original array\n    input = input[::-1]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    if k > len(input):\n        return \"Invalid input. k should be less than the length of the input array.\"\n    elif k == 1:\n        return [input[-1]]\n    else:\n        input.reverse()\n        reverse_Array_Upto_K(input[:k-1], k-1)\n        input.reverse()\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Reverse the input array from 0 to k-1\n    for i in range(k):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    \n    # Reverse the input array from k to len(input)-1\n    for i in range(k, len(input)):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k < 1 or k > n:\n        return \"Invalid Input\"\n    if k == 1:\n        input.reverse()\n        return input\n    \n    input = input[:k-1]\n    input.reverse()\n    input.append(input.pop(0))\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Length of the input array\n    n = len(input)\n    \n    # Loop from k to end of the array\n    for i in range(k, n): \n        # Swap the elements at i and n-i-1\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return input\n    else:\n        return input[:k] + list(reversed(input[k:])) + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Convert input list to string to enable slicing with negative indices\n    input_str = ''.join(map(str, input))\n    \n    # Reverse the first k characters of the string\n    input_str = input_str[:k][::-1]\n    \n    # Convert the reversed string back to a list and return it\n    return list(map(int, input_str))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    for i in range(n):\n        if i < k:\n            continue\n        j = i\n        while j < k:\n            temp = input[j]\n            input[j] = input[i]\n            input[i] = temp\n            j += 1\n            i -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function reverses an array upto a given position.\n\n    Args:\n    input (list): The input array to be reversed.\n    k (int): The position where the reverse should start.\n\n    Returns:\n    list: The reversed array upto position `k`.\n    '''\n\n    # Get the length of the array\n    n = len(input)\n\n    # Check if the position is valid\n    if k > n:\n        print(\"Error: The position is greater than the length of the array.\")\n        return\n\n    # Reverse the array from position 0 to k - 1\n    for i in range(k):\n        input[i], input[n - i - 1] = input[n - i - 1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the array from index 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to n-1\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary that contains the items from the test dictionary and the test tuple\n    new_dict = {**test_dict, **test_tup}\n    # Convert the new dictionary to a tuple\n    new_tuple = tuple(new_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a list of tuples\n    dict_list = [(k, v) for k, v in test_dict.items()]\n    # add the dictionary to the tuple\n    new_tup = test_tup + tuple(dict_list)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = tuple(test_tup)\n        test_tup += (key, value)\n        test_tup = tuple(test_tup)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Concatenate the tuple and dictionary and store the result in a new tuple\n    new_tup = tuple(test_tup) + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Use a loop to iterate through the dictionary and add it to the tuple\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + tuple(test_dict.items())\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup += (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[0 for j in range(N)] for i in range(N)]\n    max_avg = 0\n    max_path = None\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                visited[i][j] = 1\n            elif i == 0:\n                visited[i][j] = visited[i][j-1] + cost[i][j]\n            elif j == 0:\n                visited[i][j] = visited[i-1][j] + cost[i][j]\n            else:\n                visited[i][j] = visited[i-1][j] + visited[i][j-1] + cost[i][j]\n            if visited[i][j] > max_avg:\n                max_avg = visited[i][j]\n                max_path = [(i, j)]\n            elif visited[i][j] == max_avg:\n                max_path.append((i, j))\n    \n    if max_path:\n        avg = max_avg / len(max_path)\n        return avg, max_path\n    else:\n        return 0, None"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Calculate the dimensions of the matrix\n    N = len(cost)\n    if N == 0:\n        return 0\n\n    # Initialize variables\n    max_average = 0\n    total_cost = 0\n    path_length = 0\n    current_path = []\n    current_cost = 0\n\n    # Traverse the matrix\n    for i in range(N):\n        for j in range(N):\n            # If the current cell is already part of the path, skip it\n            if (i, j) in current_path:\n                continue\n\n            # Calculate the cost of the next cell in the path\n            if i < N-1 and (cost[i+1][j] > cost[i][j]):\n                next_cost = cost[i+1][j]\n            else:\n                next_cost = cost[i][j]\n\n            # Update the current path and cost\n            current_path.append((i, j))\n            current_cost += next_cost\n\n            # Update the total cost and path length\n            total_cost += current_cost\n            path_length += 1\n\n            # Check if the current path is the longest path found so far\n            if path_length > 1 and path_length > max_average:\n                max_average = path_length\n                max_path = current_path\n\n            # Backtrack to remove the last cell from the path\n            current_path.pop()\n            current_cost -= next_cost\n            path_length -= 1\n\n    # Return the maximum average path\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n\n    # Base case\n    dp[0][0] = cost[0][0]\n    max_avg = dp[0][0]\n\n    # Filling up the dp table\n    for i in range(1, n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        visited[0][i] = visited[i][0] = cost[0][i]\n        max_avg = max(max_avg, cost[0][i])\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i][j] > cost[i-1][j] + cost[i][j-1]:\n                visited[i][j] = cost[i][j] + visited[i-1][j]\n            else:\n                visited[i][j] = cost[i][j] + visited[i][j-1]\n            max_avg = max(max_avg, visited[i][j])\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                left_cost = 0\n                right_cost = cost[i][j]\n            elif j == 0:\n                left_cost = cost[i][j]\n                right_cost = 0\n            else:\n                left_cost = cost[i][j]\n                right_cost = min(cost[i-1][j], cost[i][j-1])\n            current_avg = (left_cost + right_cost) / 2\n            if current_avg > max_avg:\n                max_avg = current_avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    # Step 1: Initialize a variable to store the maximum average found so far\n    max_average = 0\n\n    # Step 2: Traverse through all possible paths starting from the top-left cell and ending on the bottom-right cell\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Step 3: If the current cell is already visited, skip it\n            if i > 0 and j > 0:\n                continue\n\n            # Step 4: Recursively find the maximum average path starting from this cell\n            sub_max_average = maxAverageOfPath(cost)\n\n            # Step 5: Update the maximum average if this is a better path\n            if sub_max_average > max_average:\n                max_average = sub_max_average\n\n    # Step 6: Return the maximum average found so far\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Finding the number of cells in the matrix\n    n = len(cost)\n    \n    # Initializing variables\n    max_avg = 0\n    curr_avg = 0\n    max_path = []\n    \n    # Looping through all possible paths\n    for i in range(n):\n        for j in range(n):\n            \n            # If the current cell is not a corner, then we can move right or down\n            if i == 0 or j == 0:\n                for k in range(2):\n                    \n                    # Checking if the current path is valid\n                    if i+k < n and j+k < n:\n                        curr_path = [cost[i][j]]\n                        curr_avg = cost[i][j]\n                        \n                        # Moving in the right direction\n                        while i+k < n and j+k < n:\n                            curr_avg += cost[i+k][j+k]\n                            curr_path.append(cost[i+k][j+k])\n                            i += k\n                            j += k\n                        \n                        # Moving in the down direction\n                        while i+k < n and j+k < n:\n                            curr_avg += cost[i+k][j+k]\n                            curr_path.append(cost[i+k][j+k])\n                            i += k\n                            j += k\n                        \n                        # Adding the total cost of the path to the total cost of the max path\n                        curr_avg = curr_avg/len(curr_path)\n                        if curr_avg > max_avg:\n                            max_avg = curr_avg\n                            max_path = curr_path\n    \n    # Returning the maximum average over all paths\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(r, c, cost, visited, total_cost):\n        if r == n - 1 and c == m - 1:\n            # base case: we reached the bottom-right cell\n            visited.add((r, c))\n            total_cost -= cost[r][c]\n            if len(visited) > 0:\n                visited.pop()\n            return total_cost / len(visited)\n        if (r, c) not in visited:\n            visited.add((r, c))\n            total_cost += cost[r][c]\n            if r < n - 1:\n                total_cost = max(total_cost, dfs(r + 1, c, cost, visited, total_cost))\n            if c < m - 1:\n                total_cost = max(total_cost, dfs(r, c + 1, cost, visited, total_cost))\n            visited.pop()\n        return total_cost / len(visited)\n\n    n = len(cost)\n    m = len(cost[0])\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            visited = {(i, j)}\n            total_cost = cost[i][j]\n            max_avg = max(max_avg, dfs(i, j, cost, visited, total_cost))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def helper(i, j, visited, path_cost, max_avg):\n        if i == N-1 and j == N-1:\n            path_cost.append(visited)\n            total_cost = sum(path_cost)\n            avg = total_cost/len(path_cost)\n            if avg > max_avg:\n                max_avg = avg\n            return max_avg\n            \n        if i < N and j < N:\n            visited.append((i, j))\n            path_cost.append(cost[i][j])\n            max_avg = max(helper(i+1, j, visited, path_cost, max_avg), helper(i, j+1, visited, path_cost, max_avg))\n            visited.pop()\n            path_cost.pop()\n        return max_avg\n\n    N = len(cost)\n    max_avg = -float('inf')\n    for i in range(N):\n        for j in range(N):\n            visited = [(i, j)]\n            path_cost = []\n            max_avg = max(helper(i, j, visited, path_cost, max_avg), max_avg)\n    \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student, info in students.items():\n        if info[0] > h and info[1] > w:\n            result[student] = info\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # loop through the students dictionary\n    for name, data in students.items():\n        # unpack the data tuple into separate height and weight variables\n        height, weight = data\n\n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # print the name if it satisfies the condition\n            print(name)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result.append(i)\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create a dictionary to store the frequency of each value in nums2\n    freq = {}\n    for num in nums2:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Use the count_if function from the itertools library to count the frequency of each value in nums1\n    from itertools import count_if\n    same_pair_indices = count_if(lambda i: freq[nums1[i]] == freq[nums2[i]], count())\n\n    # Convert the same_pair_indices iterator to a list and return the result\n    return list(same_pair_indices)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # create a dictionary to store the count of each value in the first list\n    counts = {}\n    for num in nums1:\n        counts[num] = counts.get(num, 0) + 1\n    \n    # loop through the second list and count the indices where the values match the first list\n    count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in counts:\n            count += 1\n    \n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    for i in range(power):\n        sum_digits += int(base) % 10\n        base //= 10\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Iterate through each digit of the base\n    for digit in str(base):\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit) ** power\n    # Return the sum of all digits raised to the power of the specified power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    sum_of_digits = 0\n\n    for digit in base_str:\n        sum_of_digits += int(digit) ** power\n\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to 0\n    sum_digits = 0\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the power of the digit\n        power_digit = digit_int ** power\n        # Add the power of the digit to the sum\n        sum_digits += power_digit\n    # Return the sum of all digits\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum_digits = 0\n    # Loop through each digit of the base\n    while base > 0:\n        # Get the last digit of the base\n        digit = base % 10\n        # Add it to the sum variable\n        sum_digits += digit\n        # Remove the last digit from the base\n        base //= 10\n    # Calculate the final sum using the specified power\n    final_sum = sum_digits ** power\n    return final_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    num = base\n    while power > 0:\n        digit = num % 10\n        total += digit\n        power -= 1\n        num //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize a variable to hold the sum of digits\n    digit_sum = 0\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of digits raised to the specified power\n        digit_sum += digit_int ** power\n    # Return the sum of digits raised to the specified power\n    return digit_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        result += int(base) % 10\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and returns a list of all values between quotation marks \" \".\n    '''\n    # Define a regular expression pattern to match values between quotation marks \" \"\n    pattern = r'(\".*?\")'\n    # Use re.findall() to extract all values between quotation marks \" \"\n    matches = re.findall(pattern, text)\n    # Return a list of all values between quotation marks \" \"\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define a regular expression pattern for matching quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # use re.findall() to find all matches of the pattern in the string\n    matches = re.findall(pattern, text1)\n\n    # remove any leading/trailing spaces from each match\n    for i in range(len(matches)):\n        matches[i] = matches[i].strip()\n\n    # return the list of matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regular expression to extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n\n    # printing the extracted values\n    for i in result:\n        print(i)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # create a regular expression pattern to match values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # use the pattern to find all the matches in the string\n    matches = re.findall(pattern, text1)\n    \n    # return a list of all the matches found\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")\\w+(?(?=\")\\s|$)' # regex pattern to match values between quotation marks\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Create a regular expression pattern to match any sequence of characters that\n    # is surrounded by double quotes \" \".\n    pattern = r'\"([^\"]*)\"'\n    # Use the re.findall() function to find all the substrings that match the pattern.\n    matches = re.findall(pattern, text)\n    # Return a list of all the extracted substrings.\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        new_tup = []\n        for i in range(len(test_tup)-1):\n            new_tup.append(test_tup[i] * test_tup[i+1])\n        new_tup.append(test_tup[-1] * test_tup[0])\n        return multiply_elements(tuple(new_tup))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = [test_tup[0]]\n    for i in range(N):\n        result.append(result[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1 # length of the tuple minus 1 (since the first element is the multiplier)\n    result = [0] * N # create an empty list of length N to store the result\n    for i in range(N): # iterate over the range of indices from 0 to N\n        result[i] = test_tup[i] * test_tup[i+1] # multiply the current element with the next element and append to the result list\n    return result # return the result list"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize the empty list to store the result\n    result = []\n\n    # Loop through the tuple and multiply each element with the next element\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n\n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initializing an empty tuple to store the result\n    result_tup = ()\n    \n    # iterating through the input tuple\n    for i in range(len(test_tup)-1):\n        # multiplying the i-th and (i+1)-th elements of the input tuple and appending it to the result_tup\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    # adding the last element of the input tuple to the result_tup\n    result_tup += (test_tup[-1],)\n    \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns the sum of their elements.\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their sum as a list.\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = [lst1[i] + lst2[i] for i in range(len(lst1))]\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    result = []\n    for key, group in groupby(nums_dict.items()):\n        if len(list(group)) == 1:\n            continue\n        else:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == next(group):\n            nums.remove(key)\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if key == nums[0]:\n            continue\n        if not group:\n            result.append(nums[0])\n        else:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools.groupby() to group the numbers by their indices and their values\n    grouped = groupby(enumerate(nums), lambda x: x[0] == x[1])\n    \n    # Use a list comprehension to create a new list with the non-consecutive duplicates\n    return list(filter(lambda x: x[1] == False, grouped))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n\n    Args:\n        nums (list): a list of integers\n\n    Returns:\n        list: a list with consecutive duplicates removed\n    \"\"\"\n    # Group the numbers by their common prefix\n    prefix_groups = groupby(enumerate(nums), key=lambda x: x[0] // len(nums))\n\n    # Combine consecutive groups of duplicates\n    result = []\n    for prefix, group in prefix_groups:\n        group = list(group)\n        if len(group) > 1 and group[0][1] == group[-1][1]:\n            del group[-1]\n        result.extend(group)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    nums_set = set(nums)\n\n    # Create a list to store the consecutive duplicates\n    consecutive_duplicates = []\n\n    # Iterate over the set and group consecutive duplicates together\n    for group in groupby(nums_set):\n        # Check if the group consists of only one element\n        if len(list(group)) == 1:\n            # If so, append it to the list\n            consecutive_duplicates.append(list(group)[0])\n\n    # Remove the duplicates from the main list and return the result\n    return list(set(nums) - set(consecutive_duplicates))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function takes a list of integers as input and returns a new list\n    containing only the unique consecutive duplicates of the input list.\n\n    Example:\n    consecutive_duplicates([1, 2, 2, 2, 3, 3, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]\n    consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5]) -> [1, 2, 3, 4, 5]\n    consecutive_duplicates([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4]) -> []\n    '''\n\n    # Create a dictionary to store consecutive duplicates\n    consecutive_dict = {}\n\n    # Loop through the input list and add each unique consecutive duplicate to the dictionary\n    for num in nums:\n        if num not in consecutive_dict:\n            consecutive_dict[num] = True\n        elif consecutive_dict[num]:\n            consecutive_dict[num] = False\n\n    # Create a new list to store only the unique consecutive duplicates\n    consecutive_nums = []\n\n    # Loop through the dictionary and add each unique consecutive duplicate to the new list\n    for key, value in consecutive_dict.items():\n        if value:\n            consecutive_nums.append(key)\n\n    # Return the new list containing only the unique consecutive duplicates\n    return consecutive_nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area\n    lateral_surface_area = 2 * (math.pi * r**2) + 2 * math.pi * r * h + 2 * math.pi * h**2 - 4 * math.pi * r**2 * h\n    \n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the semi-perimeter (half the length of the cone)\n    s = (2 * r * h) / 3\n    # Calculate the area of the cone using Heron's formula\n    A = math.sqrt(s * (s - r) * (s - 2 * r) * (s - h))\n    # Multiply the lateral surface area by the height to get the total surface area\n    LSA = A * h\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r**2 * h\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2)*h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the surface area of the cone using Heron's formula\n    s = (3*r**2*math.tan(math.pi/6)) + (3*r**2*math.tan(math.pi/6)) + (math.pi*r**2*h)\n    \n    # calculate the lateral surface area using the formula\n    L = (3*r**2*h)/s\n    \n    return L"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r ** 2 * h\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the area of the cone\n    area = math.pi * r**2\n    # calculate the lateral surface area\n    lateral_area = area * 2 / 3\n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = 0.5 * math.pi * r**2\n    return lateral_area\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nlateral_surface_area = lateralsurface_cone(radius, height)\n\nprint(\"The lateral surface area of the cone is:\", lateral_surface_area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Base area of the cone\n    A_base = math.pi * r ** 2\n\n    # Height of the cone above the base\n    h_above_base = h - r\n\n    # Lateral surface area of the cone\n    LSA = A_base * h_above_base / 2\n\n    return LSA"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[ ]|[,|.]'\n    text = re.sub(pattern, ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\. ]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+','', text)  # replace multiple spaces with a single space\n    text = re.sub(r'[^\\w\\s]', '', text)  # remove any characters that are not word characters or whitespace\n    text = re.sub(r'\\s', ':', text)  # replace any remaining spaces with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n\n    # replace spaces with colon\n    text = re.sub(r'\\s+', ':', text)\n\n    # replace commas with colon\n    text = re.sub(r',+', ':', text)\n\n    # replace dots with colon\n    text = re.sub(r'\\.', ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]') # matches any character that is not a word character or a whitespace\n    colon_pattern = re.compile(r'[^\\w\\s]') # matches any character that is not a word character or a whitespace\n    text = pattern.sub('', text) # remove all special characters\n    text = colon_pattern.sub(':', text) # replace spaces with colons\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9]+')\n    text = pattern.sub('', text)\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace(' ', ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # create a regular expression pattern to match any of the special characters\n    special_char_pattern = re.compile(r'[\\s,.]+')\n    # replace all matches of the special characters with a colon\n    return special_char_pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'\\s|,|\\.'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'\\s*,\\s*', r':', text)\n    text = re.sub(r'\\s+\\.\\s+', r':', text)\n    \n    # return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Check if array is sorted\n    if A[0] > A[-1]:\n        print(\"Array is not sorted!\")\n        return None\n\n    # Initialize index to -1\n    index = -1\n\n    # Iterate through array\n    for i in range(len(A)):\n        if A[i] == x:\n            index = i\n            break\n\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if A[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the index variable to -1\n    index = -1\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Traverse the array from the beginning\n    for i in range(len(A)):\n        # If the element at current index is equal to x\n        if A[i] == x:\n            # Increment the count variable\n            count += 1\n            # If the count variable is equal to 1, update the index variable to the current index\n            if count == 1:\n                index = i\n    # Return the index variable\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    for i in range(1, len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the index to the first element of the array\n    index = 0\n    \n    # Loop through the array until the element is found or the end of the array is reached\n    while index < len(A) and A[index] < x:\n        # Increment the index to the next element\n        index += 1\n        \n    # If the element is found, return its index\n    if index < len(A) and A[index] == x:\n        return index\n    \n    # If the element is not found, return -1\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x in the array A.\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    \n    # If the first element greater than or equal to x is not found, return -1.\n    if i == len(A):\n        return -1\n    \n    # Find the index of the first occurrence of x in the remaining elements in the array A[i:].\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n    \n    # Return the index of the first occurrence of x.\n    return j"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index to -1\n    index = -1\n    \n    # loop through the array until the index is found or the end of the array is reached\n    for i in range(len(A)):\n        if A[i] == x:\n            index = i\n            break\n    \n    # return the index\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not present in A, the function will return -1.\n    \"\"\"\n\n    # Initialize the left and right pointers to the first and last indices of A, respectively\n    left = 0\n    right = len(A) - 1\n\n    # If x is present in A, then return the left pointer\n    while left <= right and A[left]!= x:\n        left += 1\n\n    if left <= right:\n        return left\n\n    # If x is not present in A, then return -1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prime = [True] * (n + 1)\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n\n    prod = 1\n    sub_sum = 0\n    sub_product = 1\n\n    for i in range(n):\n        if (prime[i + 1] == True):\n            sub_product *= arr[i]\n            sub_sum += arr[i]\n            prod *= sub_product\n\n    return sub_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n\n    # Calculate prefix sum of the array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    # Calculate sum of products of subarrays\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            product = prefix_sum[j] - prefix_sum[i]\n            ans += product * product\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Create a list to store the products of sublists\n    sublist_products = []\n    \n    # Initialize a variable to store the sum of products\n    sum_of_products = 0\n    \n    # Initialize two pointers, one at the beginning and one at the end of the list\n    left = 0\n    right = len(arr) - 1\n    \n    # Loop through the list and calculate the products of sublists of length i\n    while left < right:\n        sublist_products.append(arr[left] * arr[right])\n        sum_of_products += arr[left] * arr[right]\n        left += 1\n        right -= 1\n        \n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    def helper(arr, start, end):\n        # base case\n        if start == end:\n            return 1\n        # divide and conquer\n        mid = (start + end) // 2\n        left_sum = helper(arr, start, mid)\n        right_sum = helper(arr, mid + 1, end)\n        prod_sum = (mid - start + 1) * arr[start] * (end - mid) * arr[mid]\n        return left_sum + right_sum + prod_sum\n    \n    return helper(arr, 0, len(arr) - 1)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize result\n    result = 0\n    # Initialize prefix array and initialize product array\n    prefix = [1] * n\n    prod = [1] * n\n    # Calculate prefix array\n    for i in range(1, n):\n        prefix[i] = prefix[i-1] * arr[i-1]\n    # Calculate product array\n    for i in range(1, n):\n        prod[i] = prod[i-1] * arr[i-1]\n    # Calculate sum of products of all possible sublists\n    for i in range(1, n):\n        for j in range(n-i):\n            result += prod[j] * prefix[j+i]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    suffix_sum = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        suffix_sum[i] = suffix_sum[i + 1] + arr[i]\n\n    subarray_prod = [0] * (n + 1)\n    for i in range(1, n):\n        subarray_prod[i] = prefix_sum[i] * suffix_sum[i]\n\n    ans = 0\n    for i in range(1, n - 1):\n        ans += subarray_prod[i]\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_arr = [0] * (2 * n + 1)\n\n    # Compute prefix sum of array\n    for i in range(n):\n        sum_arr[i+1] = sum_arr[i] + arr[i]\n\n    # Initialize two pointers: one for each sublist\n    left, right = 0, 0\n    res = 0\n\n    # Compute sum of products of each sublist\n    while right < n:\n        if sum_arr[right+1] - sum_arr[left] >= 0:\n            res += arr[left] * arr[right+1]\n            left += 1\n            right += 1\n        else:\n            if left == 0:\n                right += 1\n            else:\n                res += sum_arr[left] * (sum_arr[right+1] - sum_arr[left-1])\n                left = right = 0\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Define a helper function to find the sum of products of sublists of length i\n    def helper(arr, i):\n        if i == 0:\n            return 1\n        else:\n            return helper(arr, i-1) * arr[i-1]\n\n    # Initialize variables\n    n = len(arr)\n    total = 0\n\n    # Iterate over all possible sublists of length i\n    for i in range(1, n+1):\n        # Calculate the sum of products of sublists of length i\n        sublist_sum = helper(arr, i)\n\n        # Update the total sum with the sum of products\n        total += sublist_sum\n\n    # Return the final sum of products of all sublists\n    return total"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    dp = [1] * (n + 1)\n    dp[1] = arr[0]\n    for i in range(1, n):\n        dp[i + 1] = dp[i] * arr[i]\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[j + 1] += dp[i] * dp[j]\n    return dp[-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n\n    # Compute prefix sum of arr\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n    # Initialize result\n    result = 0\n\n    # Compute product of all sublists from i to n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            result += prefix_sum[j] - prefix_sum[i - 1] * prefix_sum[j - 1]\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the two variables\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n    # toggle the bits of the number except the first and the last bit\n    n = ((n & 0xAAAAAAAA) ^ 0xAAAAAAAA) & 0x55555555\n    n = ((n & 0xCCCCCCCC) ^ 0xCCCCCCCC) & 0x33333333\n    n = ((n & 0xF0F0F0F0) ^ 0xF0F0F0F0) & 0x0C0C0C0C\n    n = ((n & 0x03030303) ^ 0x03030303) & 0x000F000F\n    n = ((n & 0x55555555) ^ 0x55555555) & 0xAAAAAAAA\n    n = ((n & 0xAAAAAAAA) ^ 0xAAAAAAAA) & 0x55555555\n    n = ((n & 0xCCCCCCCC) ^ 0xCCCCCCCC) & 0x33333333\n    n = ((n & 0xF0F0F0F0) ^ 0xF0F0F0F0) & 0x0C0C0C0C\n    n = ((n & 0x03030303) ^ 0x03030303) & 0x000F000F\n    # toggle the two bits of the number except the first and the last bit\n    n = (n ^ (first_bit ^ last_bit)) ^ (n & (first_bit ^ last_bit))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Get the first and last bits\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n\n    # XOR first and last bits to get middle bits\n    middle_bits = first_bit ^ last_bit\n\n    # Set middle bits to 1\n    n |= middle_bits\n\n    # Set middle bits to 0\n    n &= ~(middle_bits)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles bits of the number except the first and last bit.\n\n    Args:\n        n: An integer number.\n\n    Returns:\n        The new number after toggling bits of the number except the first and last bit.\n    \"\"\"\n    # Find the length of the binary representation of n\n    binary_length = len(bin(n)[2:])\n\n    # Find the index of the last bit and the index of the first bit\n    last_bit = binary_length - 1\n    first_bit = 0\n\n    # Initialize the new number with the same value as n\n    new_n = n\n\n    # Toggle the bits of the number except the first and last bit\n    for i in range(last_bit, first_bit - 1, -1):\n        new_n = new_n ^ (1 << i)\n\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Find the position of the last and first set bits\n    last_set_bit = n.bit_length() - 1\n    first_set_bit = 0\n\n    # Find the position of the first and last set bits\n    for i in range(n.bit_length()-1):\n        if n & (1 << i):\n            last_set_bit = i\n            break\n\n    for i in range(n.bit_length()-1, -1, -1):\n        if n & (1 << i):\n            first_set_bit = i\n            break\n\n    # Toggle the middle bits\n    middle_bits = n ^ (1 << first_set_bit) ^ (1 << last_set_bit)\n\n    # Combine the first and middle bits with the last and middle bits\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # initialize the first and last bits of n\n    first_bit = n & 1\n    last_bit = n & (2 ** (n.bit_length() - 1))\n\n    # toggle the middle bits\n    middle_bits = n & ~(first_bit ^ last_bit)\n\n    # combine the first and last bits with the middle bits\n    new_n = (first_bit | last_bit) ^ middle_bits\n\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # extract the first two bits of the number\n    first_two_bits = n & 0b11\n    \n    # toggle the first bit\n    toggled_first_bit = (first_two_bits ^ 0b1)\n    \n    # extract the last four bits of the number\n    last_four_bits = n >> 2 & 0b1111\n    \n    # toggle the last bit\n    toggled_last_bit = (last_four_bits ^ 0b1) << 2\n    \n    # combine the two bits to get the final result\n    result = toggled_first_bit | toggled_last_bit\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    n = bin(n)[2:]\n    n = n[0:-1]\n\n    n = n[::-1]\n\n    i = 0\n    while i < len(n):\n        if n[i] == '0':\n            n = n[:i] + '1' + n[i+1:]\n        else:\n            n = n[:i] + '0' + n[i+1:]\n        i += 1\n\n    n = int(n, 2)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    \n    # Find the position of the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n    \n    # Toggle the bits except for the first and the last\n    n = n ^ (first_bit + last_bit)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & ~(1 << (n.bit_length()-1))\n    last_bit = n & ~(1 << 0)\n    new_number = first_bit | last_bit\n    \n    return new_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # Get the length of the binary representation of n\n    length = len(bin(n)[2:])\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through the bits of n in reverse order\n    for i in range(length - 2, -1, -1):\n        # Get the current bit of n\n        bit = (n & (1 << i)) >> i\n\n        # Toggle the bit if it is not the first or last bit\n        if i not in [0, length - 1]:\n            bit = not bit\n\n        # Add the current bit to the result variable\n        result |= bit << i\n\n    # Return the result\n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Binary search the sorted list to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is already present in the sorted list, return the index of the last occurrence\n    if index!= len(a) and a[index] == x:\n        return index\n    # If the value is not present in the sorted list, return the index of the last insertion point\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # find the index of the leftmost element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    \n    # if the index is the length of the list, x is the last element in the list\n    if index == len(a):\n        return len(a)\n    \n    # if the index is greater than 0, x is the element at index - 1\n    if index > 0:\n        return index - 1\n    \n    # if the index is equal to 0 and x is greater than the first element, x is the first element\n    if a[0] > x:\n        return 0\n    \n    # if x is equal to the first element, x is the second element\n    if a[1] == x:\n        return 1\n    \n    # if the index is equal to 1 and x is less than the second element, x is the third element\n    if a[1] < x and a[2] == x:\n        return 2\n    \n    # if the index is equal to 2 and x is less than the third element, x is the fourth element\n    if a[2] < x and a[3] == x:\n        return 3\n    \n    # if x is greater than the third element, x must be the last element\n    return len(a) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return index\n    elif index == len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    # use bisect to find the left insertion point\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        # if the value is greater than all elements in the list, i will be the length of the list\n        return i\n    if i == 0:\n        # if the value is less than the first element in the list, return 0\n        return i\n    # if the value is between the first and second element in the list, return 1\n    if a[i-1]!= x:\n        return i\n    # if the value is between the first and the second element in the list, return i\n    return i + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    # Use the built-in bisect_left function from the bisect module to find the insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is already present, return the index of the leftmost occurrence\n    if index!= len(a) and a[index] == x:\n        return index\n    # Otherwise, return the index of the insertion point\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return i + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left_index = bisect.bisect_left(a, x)\n    return left_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        i = -1\n    elif a[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return len(a)\n    else:\n        return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(pattern, string)\n    if match: \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return \"Valid String\"\n    else:\n        return \"Invalid String\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nn = int(input(\"Enter a value for n: \"))\nprint(\"The geometric sum of\", n-1, \"is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1 + geometric_sum(n-1)) * (1 / n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n * geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * (1 - (1 / geometric_sum(n-1)))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    index = (n - 1) * (n - 2) / 2\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Taking the sum of digits of n\n    sum_of_digits = sum([int(digit) for digit in str(n)])\n\n    # finding the minimum number of digits required to form the triangular number\n    min_digits = 1\n    while (math.sqrt(sum_of_digits * 10**min_digits) - math.sqrt(sum_of_digits * 10**(min_digits-1)))/2 < 10**(min_digits-1):\n        min_digits += 1\n\n    # finding the index of smallest triangular number with n digits\n    for i in range(1, 10**min_digits):\n        triangular_num = i * 10**(min_digits-1) + sum_of_digits * 10**(i)\n        if math.sqrt(triangular_num*10**(i+1)) - math.sqrt(triangular_num*10**(i)) < 10**(i-1):\n            return i - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n\n    Args:\n        n: an integer representing the number of digits required for the smallest triangular number.\n\n    Returns:\n        an integer representing the index of the smallest triangular number with n digits.\n    \"\"\"\n\n    # Find the sum of all the digits of n\n    sum_of_digits = 0\n    for i in range(n):\n        sum_of_digits += math.floor(math.log10(n))\n\n    # Find the maximum value of n that is smaller than or equal to the square root of the sum of digits\n    max_n = math.ceil(math.sqrt(sum_of_digits))\n\n    # Initialize the index of the smallest triangular number\n    index = 0\n\n    # Iterate over all the values of n up to the maximum value of n\n    for n_value in range(2, max_n + 1):\n        # Calculate the sum of the digits of n_value\n        sum_of_digits_value = 0\n        for i in range(n):\n            sum_of_digits_value += math.floor(math.log10(n_value))\n\n        # If the sum of the digits of n_value is less than or equal to the sum of digits, then n_value is the smallest triangular number with n digits\n        if sum_of_digits_value <= sum_of_digits:\n            index = n_value\n            break\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        triangular_numbers = []\n        for i in range(n-2):\n            triangular_numbers.append(int(math.pow(5, i)))\n        min_triangular = min(triangular_numbers)\n        index = triangular_numbers.index(min_triangular)\n        return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the upper limit of the triangle\n    upper_limit = 10**n\n    \n    # Initialize the smallest triangular number to be 1\n    smallest_number = 1\n    \n    # Loop through the triangle numbers from 1 to upper_limit\n    for num in range(1, upper_limit):\n        # Check if the current triangle number is a triangular number with n digits\n        if num*num - (2*num) + smallest_number >= 0:\n            # Update the smallest triangular number if the current triangle number is smaller\n            if num < smallest_number:\n                smallest_number = num\n    \n    # Return the index of the smallest triangular number with n digits\n    return math.log10(smallest_number) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    minTriangular = 0\n    i = 1\n    while minTriangular < n:\n        minTriangular = i*i\n        i += 1\n    return i-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the sum of all integers from 1 to n\n    total_sum = sum(range(1, n+1))\n\n    # Calculate the maximum number of digits for the triangular number\n    max_digits = int(math.log10(total_sum))+1\n\n    # Calculate the sum of all integers from 1 to max_digits\n    max_sum = sum(range(1, max_digits+1))\n\n    # Find the sum of the first n-max_digits integers\n    first_n_sum = total_sum - max_sum\n\n    # Calculate the smallest triangular number with n digits\n    smallest_triangular_number = first_n_sum * 10**(max_digits-n)\n\n    # Calculate the index of the smallest triangular number\n    index = sum(range(1, smallest_triangular_number)) - first_n_sum\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # base case\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        # find the largest factorial of n\n        factorial = 1\n        for i in range(2, n+1):\n            factorial *= i\n        # find the index of smallest triangular number with n digits\n        triangular_num = math.factorial(n+1) // factorial\n        index = 1\n        while triangular_num > math.factorial(n-index) * math.factorial(index):\n            triangular_num -= math.factorial(n-index) * math.factorial(index)\n            index += 1\n        return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = [0]\n    while len(str(triangular_numbers[-1])) < n:\n        triangular_numbers.append(triangular_numbers[-1] + triangular_numbers[-2])\n    \n    return triangular_numbers.index(min(triangular_numbers))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the first n digits of the smallest triangular number\n    smallest_triangular = 10**(n-1)\n    triangular_index = 1\n    \n    # Loop through all the triangular numbers less than or equal to the smallest triangular number\n    while triangular_index * triangular_index <= smallest_triangular:\n        triangular_index += 1\n    \n    # Calculate the index of the smallest triangular number with n digits\n    triangular_number = triangular_index * triangular_index\n    triangular_index -= 1\n    \n    while triangular_index >= 0 and triangular_number >= smallest_triangular:\n        triangular_number = triangular_index * triangular_index + triangular_number\n        triangular_index -= 1\n    \n    # Return the index of the smallest triangular number with n digits\n    return triangular_index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    result_dict = {}\n    for i in range(len(test_tup)):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # creating an empty dictionary\n    my_dict = {}\n    \n    # iterating through the tuple and adding each element as a key-value pair to the dictionary\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    \n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_result = {}\n    for i in range(0, len(test_tup), 2):\n        dict_result[test_tup[i]] = test_tup[i+1]\n    return dict_result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    dictionary = {}\n    for i in range(len(test_tup)-1):\n        key = i\n        value = test_tup[i+1]\n        dictionary[key] = value\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Using a dictionary comprehension to create the dictionary\n    return {k: test_tup[i+1] for i, k in enumerate(test_tup)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_ = {}\n    for i in range(len(test_tup) - 1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    # Use zip() function to iterate over the tuple and adjacent elements\n    new_dict = dict(zip(test_tup, test_tup[1:]))\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Create an empty dictionary\n    result_dict = {}\n\n    # Use two nested loops to iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Use the index of the current element as the key and the next element as the value\n        result_dict[i] = test_tup[i+1]\n\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    new_dict = {}\n    for i in range(len(test_tup)):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Find the first character of the string\n    first_char = s[0]\n    # Iterate over the rest of the string\n    for char in s[1:]:\n        # If the current character is different from the first character, return False\n        if char!= first_char:\n            return False\n    # If we reach here, all characters are the same, so return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Use dictionary to keep track of character count\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Check if all the count values are 1\n    all_count = True\n    for count in char_count.values():\n        if count!= 1:\n            all_count = False\n            break\n\n    # Return True if all character are same else False\n    return all_count"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    # convert the string to lowercase\n    s = s.lower()\n    # get the first character of the string\n    first = s[0]\n    # check if all the characters in the string are same or not\n    for i in range(1, len(s)):\n        if s[i]!= first:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for value in count.values():\n        if value > 1:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Initialize a variable to store the count of characters in the string\n    count = 0\n\n    # Loop through each character in the string\n    for i in s:\n        # Increment the count variable by 1 for each character found\n        count += 1\n\n    # If the count is 1, then all characters are the same, else not all characters are the same\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/3) * side ** 2\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)\n    area = (1/6) * s * math.sqrt(3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = 3*side\n\n    # Calculate the area of a sphere with radius equal to the semi-perimeter\n    radius = math.sqrt(semi_perimeter**2 - side**2)\n\n    # Calculate the area of the tetrahedron\n    area = (1/3)*side*side*side\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = side / 2\n    area = math.sqrt(3) / 4 * half_perimeter ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Find the semi-perimeter of the tetrahedron\n    semi_perimeter = 4 * side\n    \n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(semi_perimeter * (semi_perimeter - side) * (semi_perimeter - 2 * side) * (semi_perimeter - 3 * side))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = 2 * side + math.sqrt(3) * side + math.sqrt(3) * side + math.sqrt(3) * side\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter * (semi_perimeter - side) * (semi_perimeter - 2 * side) * (semi_perimeter - 3 * side))\n    \n    # Return the area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/6 * side ** 2 * math.sin(math.pi/6)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the length of the sides of the tetrahedron\n    s = math.sqrt(3) / 2 * side\n    \n    # Calculate the area using Heron's formula\n    area = (s * (s - side) * (s - 2 * side)) ** 0.5\n    \n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # Check if the list is empty\n    if not list:\n        return []\n    \n    # Get the length of the list\n    n = len(list)\n    \n    # If the rotation is greater than the length of the list,\n    # then rotate the list to the left instead\n    if m > n:\n        m = m % n\n    \n    # Create a new list to store the rotated items\n    rotated_list = []\n    \n    # Traverse the original list from the end to the second last item\n    for i in range(n-2, -1, -1):\n        # If the current item is at the end of the list, then\n        # move to the second last item and append it to the rotated list\n        if i == n-2:\n            rotated_list.append(list[n-1])\n            rotated_list.append(list[i])\n        else:\n            # Append the current item to the rotated list\n            rotated_list.append(list[i])\n    \n    # If the rotation is greater than zero, then rotate the rotated list to the right\n    if m > 0:\n        rotated_list = rotated_list[-m:] + rotated_list[:-m]\n    \n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    length = len(lst)\n    # Rotate the list n items to the right\n    for i in range(n):\n        lst.append(lst.pop(0))\n    # Return the rotated list\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If m is greater than or equal to n, no rotation is required.\n    if m >= n:\n        return list\n    \n    # Reverse the entire list.\n    list = list[::-1]\n    \n    # Find the index of the first element that is not in mth position.\n    i = 0\n    while i < n and list[i] == m:\n        i += 1\n        \n    # Rotate the list by m-i items.\n    list = list[i:] + list[:i]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m %= n\n    list[:m], list[m:] = list[m:].rsplit(list[:m]), list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list and a number m as input and rotates the list to the right by m items.\n    '''\n    n = len(list)\n    m = m % n  # ensure m is within the range of 0 to n-1\n\n    # Reverse the first m items of the list\n    list[:m] = list[:m][::-1]\n\n    # Reverse the remaining items of the list\n    list[m:] = list[m:][::-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function takes a list and an integer m as input and rotates the list by m items to the right direction.\n    '''\n    n = len(lst)\n    # calculating the new length of the list after rotation\n    new_length = (n - m) % n\n    # copying the items of the list to a new list\n    new_lst = lst[:new_length]\n    # copying the items of the list from index m to the end to the beginning of the new list\n    for i in range(new_length, n):\n        new_lst.append(lst[i])\n    # returning the new list after rotation\n    return new_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): A list to be rotated.\n        m (int): An integer representing the number of items to be rotated.\n\n    Returns:\n        list: A rotated list.\n    \"\"\"\n\n    # Check if m is less than the length of the list\n    if m >= len(lst):\n        raise ValueError(\"m should be less than the length of the list.\")\n\n    # Move the first m items to the end of the list\n    lst[:m] = lst[-m:]\n\n    # Move the last n-m items to the beginning of the list\n    lst[-m:] = lst[:-m]\n\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m >= n:\n        return list\n    else:\n        left_half = list[:m]\n        right_half = list[m:]\n        return right_half + left_half"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(i is None for i in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if there is a none value in the tuple, otherwise returns False.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda num: all(int(d) % num == 0 for d in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(digit in str(x) for digit in str(x)) and x >= startnum and x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(d in str(x) for d in str(startnum)) and all(d in str(x) for d in str(endnum))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n    \n    # Using filter() to filter out numbers that are not divisible by every digit\n    divisible_numbers = list(filter(is_divisible_by_digit, range(startnum, endnum + 1)))\n    \n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda num: all(int(digit) % num == 0 for digit in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = [int(d) for d in str(startnum)]\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    :param startnum: The starting number.\n    :param endnum: The ending number.\n    :return: A list of numbers that are divisible by every digit in the range.\n    \"\"\"\n\n    # Define a lambda function to check if a number is divisible by a digit.\n    is_divisible_by_digit = lambda num, digit: num % digit == 0\n\n    # Define a lambda function to check if a number is divisible by each digit in a string.\n    is_divisible_by_string = lambda num, string: all(is_divisible_by_digit(num, int(digit)) for digit in string)\n\n    # Use a list comprehension to create a list of all numbers within the range that are divisible by every digit.\n    divisible_numbers = [num for num in range(startnum, endnum + 1) if is_divisible_by_string(num, str(num))]\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # create a list of all the digits in the range\n    digits = list(str(startnum)) + list(str(endnum))\n    \n    # iterate through all the numbers in the range\n    for num in range(startnum, endnum+1):\n        # check if the number is divisible by every digit in the list\n        if all(int(d) % num == 0 for d in digits):\n            yield num"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r*r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # check if angle is within 360 degrees\n    if a > 360:\n        return None\n    \n    # calculate area\n    area = r * math.sin(math.radians(a))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if the angle is within the acceptable range (0 <= angle <= 360 degrees)\n    if a > 360 or a < 0:\n        return None\n    else:\n        # Calculate the area of the sector using the formula A = (\u03c0r^2) * sin(angle/180*\u03c0)\n        area = (math.pi * r**2) * math.sin(a/180*math.pi)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Convert angle to radians\n    angle = math.radians(a)\n    # Check if angle is within valid range\n    if angle > math.pi * 2:\n        return None\n    # Calculate area using formula for circle with radius r and angle a\n    area = math.pi * r**2 * a / 360\n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = (r * r * math.sin(math.radians(a)))\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * math.sin(math.radians(a/360))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 2D array to store the length of LCS for all possible prefixes\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # fill the 2D array using dynamic programming\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # backtrack to find the actual LCS\n    i = m\n    j = n\n    lcs = []\n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # reverse the LCS to get the original order\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a table to store lengths of LCS of substrings \n    table = [[0] * (len(Y)+1) for i in range(len(X)+1)] \n\n    # Fill table in bottom up manner \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                table[i][j] = table[i-1][j-1] + 1\n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n\n    # Backtrack to find LCS \n    m = len(X) \n    n = len(Y) \n    lcs = [] \n\n    # Start from last cell and move up, left diagonals \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif table[i-1][j] > table[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Reverse the list \n    lcs = list(reversed(lcs)) \n\n    # Convert to string and return \n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n    # create a table to store lengths of longest common subsequences of prefixes of X[], Y[], and Z[] \n    L = [[0] * (n+1) for i in range(m+1)] \n    # Fill in L[][] in bottom up manner. Note that L[i][j] contains length of LCS of X[0..i-1], Y[0..j-1] and Z[0..p-1] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i==0 or j==0 or k==0: \n                    L[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1 \n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    #print L\n    # return length of LCS of X[], Y[] and Z[] \n    return L[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n  \n    # creating a table to store lengths of longest common subsequence for all prefixes of X, Y and Z \n    L = [[[0] * (o + 1) for j in range(n + 1)] for i in range(m + 1)] \n  \n    # initializing the base cases \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n  \n                # if L[i-1][j][k] is already calculated then we don't need to calculate again \n                if L[i][j][k]!= 0: \n                    continue \n  \n                # if i is 0 or j is 0 or k is 0 then the length of LCS is 0 \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0 \n                    continue \n  \n                # if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1] then LCS length is L[i-1][j-1][k-1] + 1 \n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1 \n  \n                # if X[i-1]!= Y[j-1] and Y[j-1]!= Z[k-1] then LCS length is maximum of L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1] \n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1]) \n  \n    # LCS is stored in L[m][n][o] \n    return L[m][n][o] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][k-1])\n\n    return dp[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(s1, s2):\n        m = len(s1)\n        n = len(s2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    dp = [[[0] * (o + 1) for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                    if dp[i][j][k] == dp[i - 1][j - 1][k]:\n                        dp[i][j][k] = dp[i][j - 1][k]\n                    if dp[i][j][k] == dp[i - 1][j][k - 1]:\n                        dp[i][j][k] = dp[i][j][k - 1]\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i - 1][j][k - 1])\n\n    lcs_length = dp[m][n][o]\n    lcs_seq = ''\n\n    i = m\n    j = n\n    k = o\n\n    while lcs_length > 0:\n        lcs_seq = Z[k - 1] + lcs_seq\n        i -= 1\n        j -= 1\n        k -= 1\n        lcs_length = dp[i][j][k]\n\n    return lcs_seq[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store the length of LCS of subsequence ending at each position\n    L = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # fill in the table using dynamic programming\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # backtrack from the table to find the LCS of the given three strings\n    i, j, k = m, n, o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i - 1][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0 for j in range(p+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] == Z[i-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return X[:dp[m][p]]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a 3D table to store the length of LCS of substrings of X[0:i], Y[0:j], and Z[0:k]\n    n, m, p = len(X), len(Y), len(Z)\n    table = [[[0] * (p+1) for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j-1][k-1])\n\n    # Find the length of the LCS and backtrack to find it\n    length = table[n][m][p]\n    lcs = \"\"\n    i, j, k = n, m, p\n    while length > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n            length -= 1\n        elif table[i-1][j][k] == table[i][j][k]:\n            i -= 1\n        else:\n            j -= 1\n        if i == 0 or j == 0 or k == 0:\n            break\n\n    # Reverse the LCS\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, l = len(X), len(Y), len(Z)\n    dp = [[0] * (l+1) for i in range(n+1)]\n    for i in range(n, -1, -1):\n        for j in range(m, -1, -1):\n            if X[i] == Y[j]:\n                dp[i][j] = dp[i+1][j+1] + 1\n            elif X[i] == Z[j]:\n                dp[i][j] = dp[i+1][j+1] + 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j+1])\n    i, j = n, m\n    lcs = ''\n    while i >= 0 and j >= 0:\n        if X[i] == Y[j]:\n            lcs = X[i] + lcs\n            i -= 1\n            j -= 1\n        elif X[i] == Z[j]:\n            lcs = X[i] + lcs\n            i -= 1\n            j -= 1\n        else:\n            if dp[i+1][j] > dp[i][j+1]:\n                i -= 1\n            else:\n                j -= 1\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match capital words\n    pattern = r'\\b([A-Z][a-z]+)\\b'\n\n    # Use the re.sub() function to replace all matches of the pattern with a single space\n    result = re.sub(pattern, r'\\1 ', str1)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # replace the matched words with spaces\n    string = re.sub(pattern, r'\\1 ', string)\n\n    return string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    \n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the first character of the word is a capital letter\n        if words[i][0].isupper():\n            # Find the index of the first character that is not a capital letter\n            j = i\n            while words[j][0].isupper():\n                j += 1\n            \n            # If there are more words to the right, move them back by one space\n            if j < len(words) - 1:\n                words[i:j+1] = [''+ word for word in words[i:j+1]]\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match capital words\n    pattern = r'(?<![a-zA-Z])[A-Z](?=[a-z])'\n    # Use re.sub() method to replace the pattern with a space\n    return re.sub(pattern,'', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall('\\b[A-Z][a-z]+\\b', str1)\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'(?<![A-Z])[A-Z](?=[a-z])')\n    \n    # use the re.sub() function to replace all matches with a space\n    str2 = pattern.sub(r' \\1', str1)\n    \n    # return the modified string\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # use regular expression to find all words in string\n    words = re.findall(r'\\b\\w+\\b', string)\n    # capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    # join the capitalized words with spaces\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w+\\b', str1)\n    for i in range(len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        nums_str: List of strings of numbers\n\n    Returns:\n        List of sorted strings of numbers.\n    \"\"\"\n    # Define a regular expression pattern to match numbers in strings\n    pattern = r'\\d+'\n\n    # Extract numbers from each string in the list\n    nums = [int(num) for num in nums_str if re.match(pattern, num)]\n\n    # Sort the numbers in ascending order\n    nums.sort()\n\n    # Convert the sorted numbers back to strings and return the list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Use the sorted() function to sort the strings numerically.\n    sorted_nums_str = sorted(nums_str, key=lambda x: int(x))\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function sorts a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: (int(x[1:-1]), x[0]))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    num_list = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            num_list.append(int(num_str))\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to numeric values and sort them\n    sorted_nums = sorted(map(float, nums_str))\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_list = []\n    str_list = []\n\n    for i in nums_str:\n        if i.isdigit():\n            num_list.append(int(i))\n        else:\n            str_list.append(i)\n\n    num_list.sort()\n    str_list.sort()\n\n    sorted_list = num_list + str_list\n\n    return sorted_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Copy the original list into a new variable to prevent changes to the original list\n    new_list = test_list.copy()\n    # Add the given tuple to the new list\n    new_list.extend(test_tup)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    test_list.append(test_tup)\n\n    # print the updated list\n    print(\"Updated List:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # We can use the `extend()` method to add the tuple to the list.\n    test_list.extend(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[(i-1)//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n    \"\"\"\n    if i >= len(arr):\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\n    return check_min_heap_helper(arr, i)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i >= len(arr) // 2:\n        # Base case: If the root is at the end of the array, it means the heap is full\n        return True\n    if arr[i] < arr[2 * i + 1]:\n        # If the root is less than both of its children, it means the heap is not full\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    # check if the array is a min heap or not\n    for i in range(1, n):\n        if arr[i] < arr[i//2]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    n = len(arr)\n    if i >= n:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i+1)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    if not is_min_heap(arr):\n        return False\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[int((i-1) / 2)]:\n        return False\n    else:\n        return check_min_heap_helper(arr, int((i-1) / 2))\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if current node is greater than its child nodes\n    if i >= 1 and arr[i] < arr[i//2]:\n        return False\n    \n    # Recursively check child nodes\n    for j in range(2*i, len(arr), 2):\n        if j < len(arr) and arr[j] < arr[j+1]:\n            return False\n        \n    return True\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    if len(arr) <= 1:\n        return True\n    \n    for i in range(len(arr)-1):\n        if not check_min_heap_helper(arr, i):\n            return False\n        \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i // 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    # check if left child is smaller than current node\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    # check if right child is smaller than current node\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    # if smallest is not current node, swap them and continue checking\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    for i in range(len(arr)//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    # check if the last node is root\n    if arr[0] > arr[-1]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) // 2:\n        if arr[2 * i] > arr[i] or arr[2 * i + 1] > arr[i]:\n            return False\n    else:\n        if arr[len(arr) - 1] > arr[i]:\n            return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * jacobsthal_num(n//2)) + 1\n    else:\n        return jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 4*jacobsthal_num(n-2) - 2*jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_num = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            jacob_num += 2**(n-i)\n        else:\n            jacob_num += 2**(n-i-1)\n    return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    j = 0\n    a = 0\n    b = 1\n    while b <= n:\n        a, b = b, 4 * a * b + j\n        j += 1\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n // 2)\n    else:\n        return 3 * jacobsthal_num((n - 1) // 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    j = 1\n\n    while j <= n:\n        a, b = b, a + b\n        j += 1\n\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # Initialize the first two jacobsthal numbers\n    j0, j1 = 0, 1\n    # Iterate through the remaining jacobsthal numbers\n    for i in range(2, n + 1):\n        # Calculate the next jacobsthal number as the sum of the previous two\n        j = (j0 + j1) % 2\n        # Update the values of j0 and j1 for the next iteration\n        j0 = j1\n        j1 = j\n    return j1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_nums = [0, 1]\n    for i in range(2, n):\n        jacobsthal_nums.append(jacobsthal_nums[i-1] + jacobsthal_nums[i-2])\n    return jacobsthal_nums[n-1]\n\nn = int(input(\"Enter a number: \"))\nprint(\"The nth Jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_list = [0, 1]\n    for i in range(2, n+1):\n        jacob_list.append(jacob_list[i-1] + jacob_list[i-2])\n    return jacob_list[n]\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    This function takes a list of tuples as input and returns the minimum k records from the list.\n    If there are less than k records in the list, the function will return all records in the list.\n    \"\"\"\n\n    # Sort the list of tuples based on the second element (i.e., second tuple element)\n    test_list.sort(key=lambda x: x[1])\n\n    # Find the minimum k records and return them\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the tuple list by the second element in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize a variable to keep track of the minimum k records\n    minimum_records = []\n\n    # Iterate through the sorted list and add minimum k records to the minimum_records list\n    for i in range(len(sorted_list)):\n        if len(minimum_records) < K:\n            minimum_records.append(sorted_list[i])\n        else:\n            # Check if the current record is smaller than the minimum record\n            if sorted_list[i][1] < minimum_records[-1][1]:\n                # If yes, replace the minimum record with the current record\n                minimum_records[-1] = sorted_list[i]\n\n    # Return the minimum k records\n    return minimum_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    min_list = []\n    count = 0\n    for i in range(len(test_list)):\n        if count < K and len(min_list) < K:\n            min_list.append(test_list[i])\n            count += 1\n        elif count < K and len(min_list) == K:\n            if test_list[i][0] < min_list[0][0]:\n                min_list[0] = test_list[i]\n            elif test_list[i][0] == min_list[0][0]:\n                if test_list[i][1] < min_list[0][1]:\n                    min_list[0] = test_list[i]\n            count += 1\n    if len(min_list) == K:\n        min_list = sorted(min_list, key=lambda x: x[1])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Find the minimum k records from a tuple list.\n    \"\"\"\n    if len(test_list) < K:\n        return None\n\n    # Sort the list by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the minimum record to the first record\n    minimum = sorted_list[0]\n\n    # Loop through the sorted list\n    for i in range(1, len(sorted_list)):\n        if i < K:\n            # If the current record has a smaller first element than the minimum, update the minimum\n            if sorted_list[i][0] < minimum[0]:\n                minimum = sorted_list[i]\n        else:\n            # If the current record has a smaller first element than the minimum, return it\n            if sorted_list[i][0] < minimum[0]:\n                return minimum\n\n    # If the minimum is still less than K, return it\n    if len(test_list) < K:\n        return minimum\n    else:\n        return None\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1], reverse=True) # sort the list by value in descending order\n    min_k_records = []\n    for i in range(K):\n        min_k_records.append(test_list[i])\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # Create a set to store unique records from test_list\n    unique_set = set(test_list)\n    # Sort the unique set in descending order\n    unique_set = sorted(unique_set, key=lambda x: x[1], reverse=True)\n    # Return the first K elements of the sorted set\n    return unique_set[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Find the minimum k records from a list of tuples.\n\n    Args:\n        test_list (list[tuple[int]]): A list of tuples, where each tuple represents a person and contains their name and age.\n        K (int): The number of records to retrieve from the list.\n\n    Returns:\n        tuple[str, int]: The name and age of the person with the minimum age among the first K records in the list.\n\n    Raises:\n        ValueError: If K is not a positive integer.\n    \"\"\"\n    if not isinstance(K, int) or K <= 0:\n        raise ValueError(\"K must be a positive integer.\")\n\n    # Sort the list of tuples based on age in ascending order\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize the minimum age and the name of the person with the minimum age\n    min_age = None\n    min_name = None\n\n    # Iterate over the first K records in the sorted list\n    for i in range(K):\n        # If the current record has a minimum age and name, update the minimum age and name\n        if min_age is None or test_list[i][1] < min_age:\n            min_age = test_list[i][1]\n            min_name = test_list[i][0]\n\n    return min_name, min_age"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns the minimum K records from the list.\n    If the number of records in the list is less than K, then all the records are returned as the result.\n    '''\n    if len(test_list) < K:\n        return test_list\n    \n    test_list.sort(key=lambda x: x[0])\n    \n    min_records = []\n    i = 0\n    while i < len(test_list):\n        min_records.append(test_list[i])\n        i += 1\n        if i < len(test_list) and min_records[-1][0] == min_records[-2][0]:\n            i += 1\n    \n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the count of each value in the list\n    count_dict = {}\n    for item in test_list:\n        if item[1] in count_dict:\n            count_dict[item[1]] += 1\n        else:\n            count_dict[item[1]] = 1\n\n    # sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n\n    # return the first K keys (which correspond to the K smallest values)\n    return sorted_dict.keys()[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    This function finds the minimum K records from a tuple list and returns them.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the common elements\n    common_elements = {}\n\n    # Loop through each element in l1\n    for i in range(len(l1)):\n        # Check if the element is in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, check if it's already in the dictionary\n            if l1[i] in common_elements:\n                # If it is, increment the count\n                common_elements[l1[i]] += 1\n            else:\n                # If it's not, add it to the dictionary with a count of 1\n                common_elements[l1[i]] = 1\n\n    # Convert the dictionary to a list of tuples\n    common_elements_list = list(common_elements.items())\n\n    # Sort the list of tuples based on the element and count\n    common_elements_list.sort(key=lambda x: (-x[1], x[0]))\n\n    # Extract the common elements from the list of tuples\n    common_elements_list = [x[0] for x in common_elements_list]\n\n    return common_elements_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create a set for each list to remove duplicates\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n\n    # Find the intersection of the sets\n    common_set = l1_set.intersection(l2_set, l3_set)\n\n    # Convert the set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = set()\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            index_list.add(i)\n    return list(index_list)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List should have at least two elements.\"\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        second_smallest = float('inf')\n        for number in numbers:\n            if number < second_smallest and number!= min(numbers):\n                second_smallest = number\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least two elements\")\n    \n    numbers.sort()  # sort the list in ascending order\n    \n    return numbers[-2]  # return the second smallest number\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # Return the second element of the sorted list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = len(numbers)\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Find the second smallest number\n    second_smallest_number = sorted_numbers[1]\n\n    return second_smallest_number"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=(b+))'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.match(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"ab+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b*)')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n\ntext = \"abcab\"\nresult = text_match_zero_one(text)\nprint(result) # Output: ab"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(b)*')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b.*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a[b]*')\n    return pattern.match(text) is not None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        # split the string into two parts\n        first_part, second_part = string.split()\n        # reverse the second part\n        second_part = second_part[::-1]\n        # check if the reversed string is in the original string\n        if second_part in first_part:\n            # count the pair of strings\n            count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    count = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(len(test_list)):\n                if i!= k and j!= len(test_list[k]) - 1:\n                    if test_list[i][j] == test_list[k][len(test_list[k]) - 1]:\n                        count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # Initialize a counter variable to keep track of the number of reverse pairs found\n    count = 0\n    \n    # Iterate over the given string list\n    for i in range(len(test_list)):\n        \n        # Iterate over the remaining elements in the list after this one\n        for j in range(i+1, len(test_list)):\n            \n            # Check if the current pair of strings is a reverse of each other\n            if test_list[i][::-1] == test_list[j][::-1]:\n                \n                # Increment the counter variable\n                count += 1\n    \n    # Return the final count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_tuples = [(tuple(x)) for x in list1]\n    unique_sublists = {}\n\n    for sublist in list_tuples:\n        if sublist in unique_sublists:\n            unique_sublists[sublist] += 1\n        else:\n            unique_sublists[sublist] = 1\n\n    return unique_sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n\n    # iterate over each list in the main list\n    for sublist in list1:\n\n        # convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sorted(sublist)) not in sublist_count:\n            sublist_count[tuple(sorted(sublist))] = 1\n\n        # if the sublist is not in the dictionary, add it with a count of 1\n        else:\n            sublist_count[tuple(sorted(sublist))] += 1\n\n    # return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_count = {}\n    for item in list1:\n        if item in unique_count:\n            unique_count[item] += 1\n        else:\n            unique_count[item] = 1\n    return unique_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublist_count = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_sublist_count:\n            unique_sublist_count[sublist_tuple] += 1\n        else:\n            unique_sublist_count[sublist_tuple] = 1\n    \n    return unique_sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert the list into a set to get unique elements\n    unique_set = set(list1)\n    # create a dictionary to store the count of tuples for each unique element\n    count_dict = {}\n    # iterate through each unique element in the set\n    for element in unique_set:\n        # create a tuple with the unique element and its count in the list\n        count_tuple = (element, list1.count(element))\n        # add the tuple to the dictionary\n        count_dict[count_tuple] = count_dict.get(count_tuple, 0) + 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique sublists within a list.\n\n    :param lst: The list to be counted.\n    :return: A dictionary where the keys are tuples of the sublists and the values are the number of occurrences of those sublists in the original list.\n    \"\"\"\n    # Convert each element of the list to a tuple\n    sublists = [tuple(sublist) for sublist in lst]\n    # Count the number of occurrences of each tuple in the list\n    counts = {}\n    for sublist in sublists:\n        counts[sublist] = counts.get(sublist, 0) + 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in sublist_counts:\n            sublist_counts[item_tuple] += 1\n        else:\n            sublist_counts[item_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert list to tuple to count individual occurrences of sublists\n    list2 = tuple(list1)\n    # Create dictionary to store sublist counts\n    sublist_counts = {}\n    # Iterate over tuples in list2 to count occurrences of sublists\n    for sublist in list2:\n        # Check if sublist is already in dictionary\n        if sublist in sublist_counts:\n            # Increment count of sublist in dictionary\n            sublist_counts[sublist] += 1\n        else:\n            # Add sublist to dictionary with count of 1\n            sublist_counts[sublist] = 1\n    # Return dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_lists = {}\n    \n    for item in list1:\n        if isinstance(item, list):\n            tuple_item = tuple(item)\n            if tuple_item in unique_lists:\n                unique_lists[tuple_item] += 1\n            else:\n                unique_lists[tuple_item] = 1\n                \n    return unique_lists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) not in unique_dict:\n            unique_dict[tuple(list1[i])] = 1\n        else:\n            unique_dict[tuple(list1[i])] += 1\n    return unique_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num:\n            num = num.replace('.', '')\n            if len(num) > 2 and num[0] == '0':\n                num = num[1:]\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the string is a valid number with a precision of 2\n    try:\n        float(num)\n    except ValueError:\n        return False\n    # Convert the string to a float with a precision of 2\n    num = float(\"{0:.2f}\".format(float(num)))\n    # Check if the float is a valid decimal number with a precision of 2\n    if not (int(num) == num):\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 1 and num[0] == '-' and num[1].isdigit():\n        num = num[1:]\n    for i in range(len(num)):\n        if i == 0 and num[i] == '0':\n            continue\n        if num[i] == '.' or not num[i].isdigit():\n            return False\n        if i > 0 and num[i] == '0' and num[i-1] == '.':\n            return False\n    if '.' in num and num.split('.')[1].isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    \n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    \n    int_part, dec_part = parts\n    if len(int_part) > 10 or len(dec_part) > 2:\n        return False\n    \n    for char in int_part:\n        if not char.isdigit():\n            return False\n    \n    for char in dec_part:\n        if not char.isdigit():\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n    \n    # check if the number is an integer\n    if int(num) == float_num:\n        return True\n    \n    # check if the number has a precision of 2\n    if abs(float_num - int(num)) > 0.0001:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Split the string into digits and decimal point\n    digits, decimal = num.split('.')\n\n    # Check if the number of digits is less than or equal to 2\n    if len(digits) > 2 or (len(digits) == 2 and len(decimal) > 2):\n        return False\n\n    # Check if the digits are valid integers\n    for digit in digits:\n        if not digit.isdigit() or int(digit) >= 10:\n            return False\n\n    # Check if the decimal point is present and within the length of the number\n    if '.' not in num or len(decimal) > len(num) - 1:\n        return False\n\n    # Check if the decimal point is valid\n    for digit in decimal:\n        if not digit.isdigit() or int(digit) >= 10:\n            return False\n\n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        # Check if there are only two decimal places\n        if len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        # Remove non-numeric characters from the string\n        num = ''.join(filter(str.isdigit, num))\n        # Check if the string has only one digit\n        if len(num)!= 1:\n            # Convert the string to an integer\n            num = int(num)\n            # Check if the integer is a decimal number with a precision of 2\n            if num % 10 == 0:\n                # If the integer is a decimal number with a precision of 2, return True\n                return True\n            else:\n                # If the integer is not a decimal number with a precision of 2, return False\n                return False\n        else:\n            # If the string has only one digit, return False\n            return False\n    except ValueError:\n        # If the string cannot be converted to an integer, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set from the input array to remove duplicates\n    unique_set = set(arr)\n    # Check if the length of the set is equal to 1, indicating that there is only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)  # convert the list to a set to remove duplicates\n    if len(distinct_elements) == 1:  # check if the set has only one element\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains more than one distinct element\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for num in arr:\n        if num not in unique:\n            unique.append(num)\n            if len(unique) == len(set(arr)):\n                return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return False\n    else:\n        unique = True\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    unique = False\n                    break\n        return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= arr[i+1:n]:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_set = set(arr)\n    if len(distinct_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    else:\n        unique_elements = set(arr)\n        if len(unique_elements) == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number.\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        if monthnum3 % 2 == 0:\n            if monthnum3 in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n\n    # Months with 30 days\n    months_with_30 = [4, 6, 9, 11]\n\n    # Check if month number is in the list of months with 30 days\n    if monthnum3 in months_with_30:\n        return True\n\n    # Check if month number has 30 days\n    if monthnum3 % 2 == 0:\n        return True\n\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13):\n        if monthnum == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return days[monthnum - 1]\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    elif monthnum3 % 2 == 1:\n        if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        return True\n    elif monthnum3 % 2!= 0 and monthnum3!= 2:\n        return False\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if (monthnum2 >= 1 and monthnum2 <= 9):\n                if (daynum2 == 29 or daynum2 == 0):\n                    return True\n                else:\n                    return False\n            else:\n                if (daynum2 >= 1 and daynum2 <= 29):\n                    return True\n                else:\n                    return False\n        else:\n            if (monthnum2 >= 1 and monthnum2 <= 9):\n                if (daynum2 == 28 or daynum2 == 0):\n                    return True\n                else:\n                    return False\n            else:\n                if (daynum2 >= 1 and daynum2 <= 28):\n                    return True\n                else:\n                    return False\n    else:\n        if (monthnum2 >= 1 and monthnum2 <= 9):\n            if (daynum2 >= 1 and daynum2 <= 31):\n                return True\n            else:\n                return False\n        else:\n            if (daynum2 >= 1 and daynum2 <= 30):\n                return True\n            else:\n                return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum3 in [4,6,9,11]:\n        return True\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"Month has 30 days.\")\n    else:\n        print(\"Month does not have 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return \"The given month number contains 30 days.\"\n    else:\n        return \"The given month number does not contain 30 days.\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')\n    min_pair = None\n\n    # Find the minimum difference and the corresponding pair of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])\n\n    return min_pair"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if i+1 < n:\n            diff = arr[i+1] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize minimum difference and min element\n    min_diff = arr[1] - arr[0]\n    min_element = arr[0]\n    # Loop through the array starting from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i - 1]\n        # If the difference is smaller than the minimum difference, update the minimum difference and the min element\n        if diff < min_diff:\n            min_diff = diff\n            min_element = arr[i - 1]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    :param arr: list, the given array\n    :param n: int, the size of the array\n    :return: int, the minimum difference between any two elements in the given array\n    \"\"\"\n\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Traverse through the array\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n\n            # Update the minimum difference if the current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n): \n    # Initialize minimum difference to be positive infinity\n    min_diff = float('inf')\n\n    # Sort the given array\n    arr.sort()\n\n    # Traverse through the sorted array and check if there is any pair whose difference is less than current minimum difference\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize variables for minimum difference and current difference\n    min_diff = float('inf')\n    curr_diff = 0\n\n    # Loop through the sorted array and calculate the difference between adjacent elements\n    for i in range(1, n):\n        curr_diff = abs(arr[i] - arr[i-1])\n        # Update minimum difference if current difference is smaller\n        min_diff = min(min_diff, curr_diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum value in the array\n    min_val = min(arr)\n    \n    # Initialize two variables to store the minimum difference and the minimum value\n    min_diff = float('inf')\n    min_diff_index = 0\n    \n    # Loop through the array and find the minimum difference\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            \n            # Update the minimum difference and the index if the difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_index = i\n    \n    # Return the minimum difference and the index of the minimum difference\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    diff = abs(arr[n-1] - arr[0])\n    for i in range(1, n-1):\n        if arr[i] - arr[i-1] < diff:\n            diff = arr[i] - arr[i-1]\n    return diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    if n <= 0:\n        return None\n    \n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return is_polite(n // 2) + 1\n    \n    return is_polite((n - 1) // 2) + 2\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_polite_prime(num):\n        return is_prime(num) and is_prime(num - 1)\n\n    def nth_polite_prime(n):\n        if n < 1:\n            return None\n        count = 1\n        num = 3\n        while count <= n:\n            if is_polite_prime(num):\n                count += 1\n            num += 2\n        return num - 2\n\n    return nth_polite_prime(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the n-th polite number. The polite number is a number that is at least as large as n, but is not divisible by 10.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    # Initialize the base and increment for the calculation\n    base = 1\n    increment = 2\n\n    # Compute the nth polite number\n    polite = 0\n    while increment <= n:\n        if increment % 10 == 0:\n            polite += increment // 10 * base\n        else:\n            polite += increment * base\n        base += 1\n        increment += 2\n\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Calculate the square of the nth prime\n    prime_square = math.ceil(math.sqrt(n)) ** 2\n    \n    # Calculate the nth prime\n    nth_prime = prime_square + n\n    \n    # Check if the nth prime is a polite number\n    is_polite = True\n    for i in range(1, int(math.sqrt(nth_prime))+1):\n        if nth_prime % i == 0:\n            is_polite = False\n            break\n    \n    # Return the result\n    return is_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # if n is less than or equal to 0, return -1\n    if n <= 0:\n        return -1\n\n    # initialize a variable \"count\" to 0\n    count = 0\n\n    # loop till count becomes n\n    while count < n:\n        # if count is odd, increment count by 1\n        if count % 2 == 1:\n            count += 1\n\n        # else if count is even, increment count by 3\n        else:\n            count += 3\n\n    # return the value of count\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    if n < 1: \n        return \"Invalid input\" \n    elif n % 2 == 0: \n        return n \n    else: \n        sum_of_natural_numbers = sum(range(1, n+1))**2 \n        if sum_of_natural_numbers == n**2: \n            return sum_of_natural_numbers \n        else: \n            return n "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Function to check whether a number is a polite number or not.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_primes(n):\n        count = 0\n        for i in range(2, n+1):\n            if is_prime(i):\n                count += 1\n        return count\n\n    polite_numbers = [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n\n    while count < n:\n        if is_prime(polite_numbers[-1]):\n            count += 1\n        polite_numbers.append(polite_numbers[-1] + 2)\n\n    return polite_numbers[n-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize a variable to keep track of the count of polite numbers\n    count = 0\n    \n    # Initialize the variables to keep track of the number of digits and the power of 10\n    digits = len(str(n))\n    power = 1\n    \n    # Loop through the digits of the number\n    for digit in str(n):\n        \n        # If the digit is odd, increment the count and multiply the power of 10\n        if int(digit) % 2 == 1:\n            count += 1\n            power *= 10\n        \n        # If the count is equal to the nth polite number, return the power\n        if count == n:\n            return power\n        \n        # Increment the count by one and divide the power by 10\n        count += 1\n        power /= 10\n        \n    # If the loop is exited without finding the nth polite number, return None\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    def nth_polite_number(n):\n        if n == 1:\n            return 3\n        elif n == 2:\n            return 5\n        elif n == 3:\n            return 7\n        else:\n            # nth_polite_number(n) = 3 * gcd(5 * nth_polite_number(n-1), 2) + nth_polite_number(n-1)\n            return 3 * gcd(5 * nth_polite_number(n-1), 2) + nth_polite_number(n-1)\n\n    if is_prime(n):\n        return nth_polite_number(n)\n    else:\n        return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        # Calculate the sum of squares of the first n natural numbers\n        sum_of_squares = 0\n        for i in range(1, n+1):\n            sum_of_squares += i**2\n        \n        # Calculate the sum of the first n natural numbers raised to the power of 2\n        sum_of_n = 0\n        for i in range(1, n+1):\n            sum_of_n += i**2\n        \n        # Calculate the nth polite number by raising the sum of the first n natural numbers to the power of 2\n        nth_polite = pow(sum_of_n, 2)\n        \n        return nth_polite"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # initialize the result list\n    result = []\n    # iterate over the list\n    for i in range(len(l1)-1):\n        # add the pair to the result list\n        result.append((l1[i], l1[i+1]))\n    # return the result list\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in that list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Using set() to remove duplicates from both lists and then getting the difference using set() again\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are present in list 1 but not in list 2.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Creating a set from the first list to remove duplicates\n    set1 = set(li1)\n    # Creating a set from the second list to remove duplicates\n    set2 = set(li2)\n    # Using the difference method to get the difference between the two sets\n    diff = set1.difference(set2)\n    # Converting the set back to a list and returning the result\n    return list(diff)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Calculate the difference between two lists.\n\n    Parameters\n    ----------\n    li1 : list\n        List of numbers.\n    li2 : list\n        List of numbers.\n\n    Returns\n    -------\n    list\n        List of numbers that are in li1 but not in li2.\n    \"\"\"\n    diff = []\n    for num in li1:\n        if num not in li2:\n            diff.append(num)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes in two lists and returns their difference.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Find the fourth power of the odd number i\n        fourth_power = i**4\n        # Add the fourth power to the sum variable\n        sum += fourth_power\n    # Return the final sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = odd_num_sum(n)\nprint(\"The sum of fourth power of first n odd natural numbers is:\", result)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum_of_fourth_power = 0\n    \n    # Iterate through first n odd natural numbers\n    for i in range(n):\n        # Check if number is odd\n        if i % 2!= 0:\n            # Add fourth power of the number to the sum\n            sum_of_fourth_power += i ** 4\n    \n    # Return the sum of fourth power\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i ** 4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    num = 3\n    while num <= n:\n        sum += num**4\n        num += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    #initialize a variable to store the sum\n    sum = 0\n    #loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        #calculate the fourth power of the number\n        fourth_power = i ** 4\n        #add the fourth power to the sum\n        sum += fourth_power\n    #return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2!=0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '[', '{']:\n                if char!= top_char:\n                    return False\n            else:\n                if char!= top_char:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            if exp[j] == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', '[', '{']:\n                if char!= top:\n                    return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if len(stack) == 0:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n\n    return len(stack) == 0"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the non-K-length words\n    non_k_words = []\n    # Iterate over the words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Append the non-K-length word to the non_k_words list\n            non_k_words.append(word)\n    # Join the non-K-length words back into a string\n    result =''.join(non_k_words)\n    # Return the result\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the modified words\n    modified_words = []\n    # Iterate through the words and remove words with length K\n    for word in words:\n        if len(word)!= K:\n            modified_words.append(word)\n    # Join the modified words back into a string\n    modified_str =''.join(modified_words)\n    return modified_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the non-K-length words\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, add it to the result list\n        if len(word)!= K:\n            result.append(word)\n    # Return the result list as a string\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words that need to be removed\n    to_remove = []\n\n    # Loop through the words and check if their length is equal to K\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            to_remove.append(i)\n\n    # Remove the words from the list\n    for i in sorted(to_remove, reverse=True):\n        words.pop(i)\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with k length\n    words_k = []\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, append it to the list of words with k length\n        if len(word)!= K:\n            words_k.append(word)\n    # Join the list of words with k length into a string and return it\n    return''.join(words_k)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #find all occurrences of pattern in text and store them in a list\n    matches = re.findall(pattern,text)\n    \n    #check if the list is empty\n    if not matches:\n        return None\n    \n    #initialize a dictionary to store the position and occurrence of each substring\n    substrings = {}\n    \n    #loop through the matches and add each substring to the dictionary along with its position\n    for match in matches:\n        #check if the match is already in the dictionary\n        if match not in substrings:\n            substrings[match] = [text.find(match),1]\n        else:\n            #if the match is already in the dictionary, increment its occurrence count\n            substrings[match][1] += 1\n            \n    #return the list of substrings\n    return substrings\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        result = []\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            result.append((start_index, end_index, match))\n        return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    \n    for match in matches:\n        print(\"Match found at position: \", text.find(match))\n        print(\"Occurrences: \", text.count(match))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        result = re.findall(pattern, text)\n        if len(result) > 0:\n            return result[0], pattern.find(result[0])\n        else:\n            return None\n    except:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # Use regex to search for pattern in text\n    match = re.search(pattern, text)\n\n    # If pattern is found, return the start and end position of the match\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return m.group(), m.start(), m.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:])) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if any(nums[i] % 2!= 0):\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            # check if the number at odd index is odd\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a boolean value.\n    The function checks whether every odd index contains odd numbers.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if sum(nums[i-1:i+1:2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if not any(num % 2 == 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # iterate through the list\n    for i in range(0, len(nums)):\n        # check if the current number is odd\n        if nums[i] % 2!= 0:\n            # if it's odd, check if the current index is odd\n            if i % 2!= 0:\n                # if the current index is odd, return False as there's an odd number at an odd index\n                return False\n\n    # if all numbers in the list are even, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if index is even\n            odd_count = 0\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 1:\n                    odd_count += 1\n            if odd_count == 0:\n                return False # if there is no odd number in the odd position, return False\n    return True # if every odd position has odd numbers, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    odd_count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n    return odd_count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:  # check if the index is odd\n            if any(nums[i] % 2!= 0 for j in range(len(nums)-i-1)):  # check if the remaining odd numbers are odd\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i, len(test_str)):\n            if test_str[i:j+1] in vowels and (i==0 or test_str[i-1] not in vowels) and (j==len(test_str)-1 or test_str[j+1] not in vowels):\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowel_count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            vowel_count += 1\n            \n    return vowel_count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0 and test_str[i-1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'} # create a set of vowels\n    count = 0 # initialize count to zero\n    \n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # check if the character is a vowel\n        if test_str[i] in vowels:\n            # check if the character is the first or last character in the string\n            if i == 0 or i == len(test_str)-1:\n                # if it is, increment the count\n                count += 1\n            else:\n                # if it's not, check if the character to its left and right are also vowels\n                if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                    # if they are, increment the count\n                    count += 1\n    \n    return count # return the final count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    # Initialize a variable to store the sum of unique elements\n    sum_unique = 0\n    # Iterate through the set of unique elements and add their values to the sum\n    for num in unique_set:\n        sum_unique += num\n    # Return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements from the list\n    unique_elements = set(arr)\n    # initialize a variable to store the sum of unique elements\n    sum_unique = 0\n    # iterate through the set to find the sum of unique elements\n    for element in unique_elements:\n        sum_unique += element\n    # return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list of integers as input and returns the sum of all the non-repeated elements in the list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count = {}\n    # loop through the list and update the count dictionary\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    # loop through the list again and add up all the elements with a count of 1\n    total = 0\n    for num in arr:\n        if count[num] == 1:\n            total += num\n    # return the total sum\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Initialize a variable to store the sum of unique elements\n    sum_of_unique = 0\n    # Iterate over the unique elements of the set\n    for element in unique_set: \n        # Add the element to the sum of unique elements\n        sum_of_unique += element\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sum the elements that appear only once\n    sum_unique = 0\n    for num in freq:\n        if freq[num] == 1:\n            sum_unique += num\n\n    # Return the sum of the unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    \n    # Find the sum of the unique elements\n    sum_of_unique_elements = sum(unique_elements)\n    \n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the indices of each element in the array\n    indices = {}\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is not already in the dictionary, add it and its index to the dictionary\n        if arr[i] not in indices:\n            indices[arr[i]] = [i]\n        # If the current element is already in the dictionary, add its index to the list of indices\n        else:\n            indices[arr[i]].append(i)\n            \n    # Iterate through the dictionary and add up the indices of non-repeated elements\n    for i in indices:\n        # If the list of indices has only one element, it's a non-repeated element\n        if len(indices[i]) == 1:\n            sum += i\n            \n    # Return the sum of non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Iterate through the unique set and add its values to the sum variable\n    for element in unique_set:\n        sum += element\n    # Return the final sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a set to store unique elements of the list\n    unique_set = set(arr)\n    \n    # summing the values of the unique set\n    sum_unique = sum(unique_set)\n    \n    # returning the sum of unique set\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the non-repeated elements\n    unique_elements = set(arr)\n\n    # Initialize the sum to zero\n    sum_elements = 0\n\n    # Iterate over the unique elements and add their sum to the sum_elements\n    for element in unique_elements:\n        sum_elements += element\n\n    return sum_elements"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby to group the list elements based on their indices\n    grouped_list = groupby(enumerate(list1), key=lambda x: x[0])\n    \n    # Create an empty list to hold the sublists\n    sublists = []\n    \n    # Iterate over the grouped list\n    for index, group in grouped_list:\n        # Create a list to hold the consecutive duplicates\n        sublist = list(group)\n        \n        # Check if the length of the sublist is greater than 1\n        if len(sublist) > 1:\n            # Check if the sublist contains consecutive duplicates\n            for i in range(len(sublist) - 1):\n                if sublist[i] == sublist[i + 1]:\n                    # If it contains consecutive duplicates, pack them into a new sublist\n                    new_sublist = [sublist[0]]\n                    j = i + 2\n                    while j < len(sublist) and sublist[j] == sublist[i]:\n                        new_sublist.append(sublist[j])\n                        j += 1\n                    sublist = new_sublist\n                    \n                    # Add the sublist to the sublists list\n                    sublists.append(sublist)\n        else:\n            # If the length of the sublist is 1, add it to the sublists list\n            sublists.append(sublist)\n            \n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by the same elements\n    grouped = groupby(list1)\n    # initialize an empty list to store the sublists\n    sublists = []\n    # loop through the grouped items and pack consecutive duplicates into sublists\n    for key, group in grouped:\n        if len(list(group)) > 1:\n            sublists.append(list(group))\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item, group in groupby(list1):\n        if not group:  # no duplicates\n            continue\n        if len(list(group)) == 1:  # single element group\n            result.append(item)\n        else:  # multiple elements group\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        list1 (list): A list of integers.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates of the original list.\n    \"\"\"\n\n    def group_duplicates(iterable):\n        \"\"\"\n        A helper function to group consecutive duplicates of the list elements.\n\n        Args:\n            iterable (iterable): A sequence of integers.\n\n        Returns:\n            list: A list of tuples, where each tuple contains consecutive duplicates of the list elements.\n        \"\"\"\n        return [list(group) for key, group in groupby(iterable)]\n\n    grouped_duplicates = group_duplicates(list1)\n    return grouped_duplicates"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(list1) if key == list1[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1) if k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list, pack consecutive duplicates of elements into sublists.\n    \"\"\"\n    # create a generator object to group consecutive duplicates of elements\n    grouped = groupby(lst)\n    # create an empty list to store sublists\n    result = []\n    # loop through the grouped object\n    for group in grouped:\n        # check if the group is the first consecutive duplicate of an element\n        if not group[0] in result:\n            # add the first element of the group to the result list\n            result.append(group[0])\n        # check if the group is the last consecutive duplicate of an element\n        elif group[1] == lst[-1]:\n            # add the first element of the group to the result list\n            result[-1] += group[0]\n        # check if the group is a middle consecutive duplicate of an element\n        else:\n            # create a new sublist to store the consecutive duplicates\n            sublist = [group[0]]\n            # loop through the rest of the group\n            for elem in group[1:]:\n                # if the current element is not the same as the last element in the sublist, add it to the sublist\n                if elem!= lst[-1]:\n                    sublist.append(elem)\n                # if the current element is the same as the last element in the sublist, add the sublist to the result list and start a new sublist with the current element\n                else:\n                    # add the sublist to the result list\n                    result.append(sublist)\n                    # start a new sublist with the current element\n                    sublist = [elem]\n            # if there are any remaining elements in the sublist, add them to the result list\n            if sublist:\n                result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Split the list into a generator of tuples, where each tuple contains a group of consecutive duplicates\n    grouped_duplicates = groupby(enumerate(list1), lambda x: x[0] == x[1])\n\n    # Iterate over the generator and pack each group into a list\n    packed_list = []\n    for group in grouped_duplicates:\n        packed_list.append([elem[1] for elem in group])\n\n    return packed_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for element in list1:\n        if isinstance(element, list):\n            if element not in unique_lists:\n                unique_lists[element] = 1\n            else:\n                unique_lists[element] += 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create an empty dictionary to store unique lists and their counts\n    unique_list_counts = {}\n\n    # iterate over the lists in the input list\n    for sublist in lst:\n        # check if the current sublist is already a tuple\n        if isinstance(sublist, tuple):\n            # if it is, simply increment its count in the dictionary\n            unique_list_counts[sublist] += 1\n        else:\n            # if not, convert it to a tuple and increment its count in the dictionary\n            unique_list_counts[tuple(sublist)] += 1\n\n    return unique_list_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_lists = set(tuple(l) for l in list1)\n    # Count the number of occurrences of each list\n    count_dict = {}\n    for l in unique_lists:\n        count_dict[l] = list1.count(l)\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Initialize an empty dictionary to store the number of occurrences of each tuple\n    count_dict = {}\n    # Iterate through the list and convert each sublist to a tuple\n    for sublist in list1:\n        # Check if the tuple is already in the dictionary\n        if sublist not in count_dict:\n            # If not, add it with a count of 1\n            count_dict[sublist] = 1\n        else:\n            # If it is, increment its count by 1\n            count_dict[sublist] += 1\n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in sublists:\n            sublists[item_tuple] += 1\n        else:\n            sublists[item_tuple] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the sublist counts\n    counts = {}\n    # loop through each list in the input list\n    for lst in list1:\n        # check if the list is already in the dictionary\n        if lst in counts:\n            # if it is, increment its count by 1\n            counts[lst] += 1\n        # if it's not, add it to the dictionary with a count of 1\n        else:\n            counts[lst] = 1\n    # return the dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Use a dictionary to store the unique lists and their counts\n    counts = {}\n    \n    # Loop through the lists in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        if sublist not in counts:\n            # If the tuple isn't in the dictionary, add it with a count of 1\n            counts[sublist] = 1\n        else:\n            # If the tuple is in the dictionary, increment its count by 1\n            counts[sublist] += 1\n    \n    # Return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    lst = tuple(lst)\n    sublist_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            if item in count:\n                count[item] += 1\n            else:\n                count[item] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # convert the list to a set to get unique lists\n    unique_list = set(list1)\n\n    # create a dictionary to store the count of each unique list\n    count_dict = {}\n\n    # loop through each unique list and count its occurrences\n    for sublist in unique_list:\n        count = list1.count(sublist)\n        count_dict[tuple(sublist)] = count\n\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    for comb in combinations(test_list, r=2):\n        if sum(comb) == 0:\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the given list of tuples\n    test_list.sort(key=lambda x: x[0])\n    # Initialize the sum of the tuples to be zero\n    current_sum = 0\n    # Initialize a variable to store the combinations\n    combinations_list = []\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Add the first element of the current tuple to the sum\n        current_sum += test_list[i][0]\n        # Initialize a variable to store the combination of tuples with the current element added to the sum\n        combination = []\n        # Loop through the remaining elements of the current tuple and add them to the combination if the sum equals the target sum\n        for j in range(i+1, len(test_list)):\n            # Add the current element to the combination if the sum equals the target sum\n            if current_sum == test_list[j][1]:\n                combination.append(test_list[j])\n                # If the sum is greater than the target sum, break the loop\n                if current_sum > test_list[j][1]:\n                    break\n        # If the combination is not empty, add it to the list of combinations\n        if combination:\n            combinations_list.append(combination)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Define a helper function to find all possible combinations of two numbers in a list\n    def find_combinations_helper(lst, target_sum, start, current_sum):\n        if current_sum == target_sum:\n            result.append(lst[start:start+2])\n        elif current_sum < target_sum:\n            for i in range(start, len(lst)):\n                find_combinations_helper(lst, target_sum, i+1, current_sum+lst[i])\n\n    # Initialize the result list to store the combinations\n    result = []\n\n    # Iterate through all pairs of tuples in the test_list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Define the target sum as the sum of the current pair of tuples\n            target_sum = sum(test_list[i]) + sum(test_list[j])\n            # Find all possible combinations of two numbers in the current pair of tuples\n            find_combinations_helper(test_list[i], target_sum, 0, 0)\n\n    # Return the result list of combinations\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            for combo in combinations(test_list, r=2):\n                if sum(combo) == 0:\n                    if combo not in result:\n                        result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a list of tuples from the given list\n    tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            tuples_list.append(tuple(sorted(test_list[i:j])))\n    \n    # Find all the combinations of sums with tuples in the given list\n    result = []\n    for i in range(len(tuples_list)):\n        for j in combinations(tuples_list, i+1):\n            result.append(tuple(sorted(j)))\n    \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Convert the list of tuples into a list of lists\n    test_list = [list(x) for x in test_list]\n\n    # Find all possible pairs of tuples in the list\n    pairs = combinations(test_list, 2)\n\n    # Initialize an empty set to store the combinations\n    combinations_set = set()\n\n    # Iterate over each pair of tuples and check if the sum of their first elements is equal to the second element\n    for pair in pairs:\n        if sum(pair[0][0], pair[0][1]) == pair[1]:\n            combinations_set.add(tuple(pair[0]))\n\n    # Return the set of combinations as a list of tuples\n    return list(combinations_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    def find_sum_combinations(lst, n, target):\n        # create a set to store the combinations\n        comb_set = set()\n        # sort the list to make it easier to remove duplicates\n        lst.sort()\n        # loop through all possible combinations of length n\n        for i in range(len(lst) - n + 1):\n            # compute the current combination of length n\n            comb = tuple(lst[i:i+n])\n            # check if the combination is in the set\n            if comb in comb_set:\n                continue\n            # if the sum of the elements in the combination is equal to the target, add the combination to the set\n            if sum(comb) == target:\n                comb_set.add(comb)\n        # return the combinations set\n        return comb_set\n    \n    # initialize the empty set to store the combinations\n    comb_set = set()\n    # loop through all possible combinations of sums of length 2\n    for comb in combinations(test_list, 2):\n        # find the sum of the current combination\n        sum_comb = sum(comb)\n        # add the combination to the set if it's less than or equal to the target sum\n        if sum_comb <= target:\n            comb_set.add(comb)\n    \n    # return the combinations set\n    return comb_set"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and finds the combinations of sums with tuples in the given list.\n    '''\n\n    def find_combinations_helper(arr, start, target, current_sum, res):\n        if current_sum == target:\n            res.append(tuple(arr))\n            return\n        \n        for i in range(start, len(arr)):\n            if i > start and arr[i] == arr[i-1]:\n                continue\n            current_sum += arr[i]\n            find_combinations_helper(arr, i+1, target, current_sum, res)\n            current_sum -= arr[i]\n\n    def find_combinations_helper2(arr, target, current_sum, res):\n        for i in range(len(arr)):\n            current_sum += arr[i]\n            if current_sum == target:\n                res.append(tuple(arr))\n                current_sum -= arr[i]\n                if current_sum == 0:\n                    res.pop()\n                return\n            elif current_sum > target:\n                current_sum -= arr[i]\n                return\n            find_combinations_helper2(arr, target, current_sum, res)\n            current_sum -= arr[i]\n\n    # Finding combinations of sums using itertools.combinations\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] <= test_list[j][k] for k in range(len(test_list[i]))) and all(test_list[j][k] <= test_list[i][k] for k in range(len(test_list[j]))) and test_list[i][0] <= test_list[j][0]:\n                for comb in combinations(test_list[i], len(test_list[j])):\n                    if comb not in res:\n                        res.append(comb)\n\n    # Finding combinations of sums using the custom helper function\n    test_list_sum = sum(sum(tup) for tup in test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] <= test_list[j][k] for k in range(len(test_list[i]))) and all(test_list[j][k] <= test_list[i][k] for k in range(len(test_list[j]))) and test_list[i][0] <= test_list[j][0]:\n                res.append(tuple(sorted(test_list[i]+test_list[j])))\n                res.remove(tuple(sorted(test_list[i]+test_list[j])))\n\n    # Finding combinations of sums using the custom helper function\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] <= test_list[j][k] for k in range(len(test_list[i]))) and all(test_list[j][k] <= test_list[i][k] for k in range(len(test_list[j]))) and test_list[i][0] <= test_list[j][0]:\n                res.append(tuple(sorted(test_list[i])))\n                res.remove(tuple(sorted(test_list[i])))\n\n    return res"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum(sum(i) for i in test_list)\n    return list(combinations(test_list, len(test_list[0])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Create a list of tuples of tuples from the given list\n    tuples_tuples_list = [tuple(i) for i in test_list]\n\n    # Find all combinations of sums using itertools.combinations function\n    combinations_list = list(combinations(tuples_tuples_list, len(test_list[0])))\n\n    # Create a list of tuples of tuples from the combinations list\n    combinations_tuples_list = [tuple(i) for i in combinations_list]\n\n    # Return the list of combinations of sums\n    return combinations_tuples_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a Python function to count the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n            if i!= n // i:\n                count += 1\n    if n > 1:\n        count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if the count of divisors is even, otherwise False.\n    \"\"\"\n    if n <= 1:\n        return False\n    else:\n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                count += 1\n                if count > 2:\n                    return False\n        if count == 2:\n            return True\n        elif count > 2:\n            return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_divisors(n):\n    \"\"\"\n    Returns True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1:\n        return False\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    # function to check count of divisors\n    def count_divisors_helper(num):\n        count = 0\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                count += 1\n        return count\n\n    # calculate count of divisors\n    count_div = count_divisors_helper(n)\n\n    # check if count of divisors is even or odd\n    if count_div % 2 == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # Counting divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    # Checking if the count of divisors is even\n    even_count = len(divisors) % 2\n    # Returning the result\n    return even_count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            subarray = arr[i:j+1]\n            if len(subarray) % 2 == 1:\n                total += sum(subarray)\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    n = len(arr)\n    sum_odd = 0\n    start = 0\n    end = 0\n    max_sum = 0\n\n    while end < n:\n        if end - start + 1 % 2 == 1:\n            sum_odd += arr[end]\n            if sum_odd > max_sum:\n                max_sum = sum_odd\n\n        if end == n - 1 or arr[end+1] % 2!= 0:\n            end += 1\n        else:\n            end += 2\n\n    return max_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += arr[j-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length_subarrays = 0\n    \n    # iterate over all possible starting indices\n    for i in range(n):\n        current_sum = 0\n        \n        # iterate over all possible ending indices\n        for j in range(i, n):\n            current_sum += arr[j]\n            \n            # if the current subarray has odd length, add it to the sum\n            if (j - i + 1) % 2!= 0:\n                sum_odd_length_subarrays += current_sum\n                \n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    # Initialize the sum variable to 0\n    sum_odd_length = 0\n    # Loop through each subarray of the array\n    for i in range(len(arr) - 1):\n        # Check if the subarray has an odd length\n        if len(arr[i:i+2]) % 2 == 1:\n            # Add the sum of the subarray to the sum variable\n            sum_odd_length += sum(arr[i:i+2])\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n    \n    for i in range(n):\n        for j in range(i+1, n, 2):\n            total += arr[j] - arr[i-1] + arr[i] - arr[j]\n    \n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 0:\n            count = 0\n            for j in range(i, n, 2):\n                count += arr[j]\n            if count % 2!= 0:\n                continue\n            total_sum = sum([arr[i] + arr[j] for j in range(i, n, 2)])\n            if total_sum % 2!= 0:\n                continue\n            return total_sum\n    return 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize the sum variable to 0\n    sum_odd = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Initialize the current subarray sum to 0\n        subarray_sum = 0\n\n        # Loop through the current subarray\n        for j in range(i, len(arr)):\n            # Add the current element to the subarray sum\n            subarray_sum += arr[j]\n\n            # Check if the subarray sum is odd\n            if j - i + 1 % 2 == 1:\n                # If it is, add it to the overall sum\n                sum_odd += subarray_sum\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_ = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (j-i)%2 == 1:\n                sum_ += sum(arr[i:j])\n    return sum_"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum of odd length subarrays to zero\n    sum_of_odds = 0\n    \n    # Iterate through the array and add odd length subarrays to the sum\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            # Check if the length of the subarray is odd\n            if j-i+1 % 2 == 1:\n                # Add the subarray to the sum\n                sum_of_odds += sum(arr[i:j+1])\n    \n    # Return the sum of odd length subarrays\n    return sum_of_odds"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    Parameters:\n    r (int): Red component of the color (0-255)\n    g (int): Green component of the color (0-255)\n    b (int): Blue component of the color (0-255)\n\n    Returns:\n    h (float): Hue component of the color (0-360)\n    s (float): Saturation component of the color (0-1)\n    v (float): Value component of the color (0-1)\n    \"\"\"\n\n    # Convert RGB values to floating-point numbers\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Find the greatest and smallest values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the delta value and the sum of the delta values\n    delta = max_val - min_val\n\n    # Set the default hue value to 0\n    h = 0\n\n    # Set the default saturation and value values to 0\n    s = 0\n    v = max_val\n\n    # If the maximum value is not 0, calculate the saturation and value components\n    if max_val!= 0:\n        s = delta / max_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n        # Convert the hue value from degrees to radians\n        h *= 2 * math.pi / 360.0\n\n    # Return the hue, saturation, and value components\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # If the difference is 0, the color is a shade of gray\n    if diff == 0:\n        h = 0\n        s = 0\n    # If the maximum value is r, g, or b, the color is in the H range (0-60 degrees)\n    elif max_val == r:\n        h = (g - b) / diff\n        s = diff / (max_val + min_val)\n    elif max_val == g:\n        h = 2 + (b - r) / diff\n        s = diff / (max_val + min_val)\n    else:\n        h = 4 + (r - g) / diff\n        s = diff / (max_val + min_val)\n\n    # Convert the hue to degrees\n    h = h * 60.0\n\n    # If the hue is greater than 360 degrees, wrap it around to the first value\n    if h > 360.0:\n        h = 0.0\n\n    # If the saturation is 0, the color is a shade of gray\n    if s == 0:\n        v = max_val\n    # Otherwise, find the saturation based on the hue\n    else:\n        v = max_val\n\n        # If the saturation is greater than 1, multiply it by 255\n        if s > 1.0:\n            s = 1.0\n\n        if max_val == r:\n            f = (v - b) / (diff)\n        elif max_val == g:\n            f = (v - r) / (diff)\n        else:\n            f = (v - g) / (diff)\n\n        if h >= 60.0 and h < 120.0:\n            s = s * f\n        elif h >= 120.0 and h < 180.0:\n            s = s * (1.0 - f)\n        elif h >= 180.0 and h < 240.0:\n            s = s * (1.0 - f)\n        elif h >= 240.0 and h < 300.0:\n            s = s * f\n        else:\n            s = s * (1.0 - f)\n\n        # If the value is greater than 255, multiply it by 255\n        if v > 255:\n            v = 255\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    '''\n\n    r, g, b = r / 255, g / 255, b / 255\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    h = 0\n    s = 0\n    v = max_val\n\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:\n        h = 60 * (((r - g) / delta) + 4)\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    h, s, v = int(h), int(s * 255), int(v * 255)\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert RGB to HSV\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n    \n    if max_rgb == 0:\n        h = 0\n    else:\n        if max_rgb == r:\n            h = 60 * ((g - b) / delta_rgb)\n        elif max_rgb == g:\n            h = 60 * ((b - r) / delta_rgb) + 120\n        else:\n            h = 60 * ((r - g) / delta_rgb) + 240\n    \n    if delta_rgb == 0:\n        s = 0\n    else:\n        if max_rgb == r:\n            s = delta_rgb / (max_rgb + min_rgb)\n        elif max_rgb == g:\n            s = delta_rgb / (max_rgb + min_rgb)\n        else:\n            s = delta_rgb / (max_rgb + min_rgb)\n    \n    if max_rgb == 0:\n        v = 0\n    else:\n        v = max_rgb\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    \"\"\"\n    # Convert RGB to HSV\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n        s = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h * 60\n    if h < 0:\n        h += 360\n\n    s = delta / (1 - abs(2 * cmax - 1))\n\n    return [int(h), int(s * 255), int(cmax * 255)]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three integer values r, g, b representing an rgb color and returns a tuple representing an hsv color.\n\n    The HSV color model (hue, saturation, and value) is a popular choice for representing colors in computer graphics.\n    It describes colors by their hue, which represents the color's position within the spectrum, from red (0 degrees) to yellow (180 degrees),\n    and by their saturation, which represents the intensity of the color within that hue, from a completely grayscale color (0% saturation)\n    to a fully colorful color (100% saturation). The value represents the lightness or brightness of the color,\n    from a black color (0% brightness) to a white color (100% brightness).\n\n    Here's how the function works:\n    - The function first calculates the maximum and minimum values of the r, g, and b values.\n    - The function then calculates the sum of the maximum and minimum values.\n    - The function then calculates the difference between the maximum and minimum values.\n    - The function calculates the sum of the maximum and minimum values and divides it by 2.\n    - The function calculates the value of the saturation by dividing the sum of the maximum and minimum values by the sum of the maximum and minimum values times the difference between the maximum and minimum values.\n    - The function calculates the value of the hue by calculating the angle between the line between the minimum and maximum values and the line between the minimum and maximum values and the center of the color space (0, 0).\n    - Finally, the function returns a tuple containing the hue, saturation, and value of the input color.\n    \"\"\"\n\n    # Find the maximum and minimum values of r, g, and b\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the sum of the maximum and minimum values\n    sum_value = max_value + min_value\n\n    # Calculate the difference between the maximum and minimum values\n    difference = max_value - min_value\n\n    # Calculate the value of the saturation\n    saturation = difference / sum_value * 100\n\n    # Calculate the value of the hue\n    if sum_value == 0:\n        hue = 0\n    elif r == max_value:\n        hue = ((g - b) / difference) % 6\n    elif g == max_value:\n        hue = (b - r) / difference + 2\n    else:\n        hue = (r - g) / difference + 4\n\n    # Return the hsv color as a tuple\n    return (hue, saturation, max_value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    h, s, v = 0, 0, max_c\n    delta = max_c - min_c\n    if max_c == min_c:\n        h = 0\n    elif max_c == r:\n        h = (g - b) / delta\n    elif max_c == g:\n        h = 2 + (b - r) / delta\n    elif max_c == b:\n        h = 4 + (r - g) / delta\n    if delta!= 0:\n        s = delta / max_c\n    if max_c == 0:\n        v = 0\n    else:\n        v = max_c\n    h, s, v = map(lambda x: x * 60, [h, s, v])\n    h, s, v = [round(x) for x in [h, s, v]]\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    h = 0.0\n    s = 0.0\n    v = 0.0\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    del_val = max_val - min_val\n    if max_val == min_val:\n        h, s = 0.0, 0.0\n    else:\n        if max_val == r:\n            h = (g - b) / del_val\n        elif max_val == g:\n            h = 2.0 + (b - r) / del_val\n        elif max_val == b:\n            h = 4.0 + (r - g) / del_val\n        h = h / 6.0\n        if h < 0:\n            h = h + 1.0\n        if s == 0.0:\n            s = del_val / max_val\n        else:\n            s = del_val / (1.0 - abs(2.0 * max_val - del_val))\n    v = max_val\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Calculate the minimum and maximum values in the RGB color space\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values in the RGB color space\n    delta = max_val - min_val\n\n    # Calculate the Hue value\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    hue = round(hue * 60, 2)\n\n    # Calculate the Saturation value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Calculate the Value value\n    value = max_val\n\n    # Convert the Hue, Saturation, and Value to a tuple and return the result\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Convert r, g, b to floats\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n\n    # Find greatest and smallest values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate difference between max and min values\n    diff = max_value - min_value\n\n    # Calculate the hue\n    if max_value == r:\n        hue = (g - b) / diff\n    elif max_value == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # Normalize the hue\n    if hue < 0:\n        hue += 6\n    hue /= 6\n\n    # Calculate the saturation\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_value\n\n    # Calculate the value\n    value = max_value\n\n    # Return the hsv values\n    return hue, saturation, value"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    return list1[0] * list1[1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= num\n    if even_count == 0:\n        return None\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= num\n    if even_count!= 0:\n        product *= 2\n    if odd_count!= 0:\n        product *= 3\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num1 = 0\n    num2 = 1\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    if even_count > 0 and odd_count > 0:\n        num1 = num2\n        num2 = 1\n        for num in lst[even_count:]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num2 *= num\n        return num1 * num2\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n    # Iterate over the list and count the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    # Return the product of even and odd numbers\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    \n    if even_count == 0 or odd_count == 0:\n        return \"The list does not have any even or odd numbers.\"\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize variables for even and odd numbers\n    even_sum = 0\n    odd_sum = 0\n\n    # iterate through the list and calculate sum of even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    # calculate the product of even and odd numbers\n    product = even_sum * odd_sum\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and first odd number in the list.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            return lst[i]\n    return lst[1]"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    tup_list = test_str.split(',')\n    \n    # Convert each string in the list to an integer\n    tup_list = [int(x.strip()) for x in tup_list]\n    \n    # Convert the list of integers into a tuple\n    tup = tuple(tup_list)\n    \n    # Return the tuple\n    return tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n\n    Args:\n    test_str (str): A string of integers separated by commas.\n\n    Returns:\n    tuple: A tuple of integers from the input string.\n    '''\n    int_tuple = []\n    for num in test_str.split(','):\n        int_tuple.append(int(num))\n    return tuple(int_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    # Create a list to store the integers\n    int_list = []\n    \n    # Split the string into a list of strings\n    str_list = test_str.split()\n    \n    # Iterate through the list of strings\n    for str_elem in str_list:\n        # Convert the string to an integer and append to the list\n        int_list.append(int(str_elem))\n    \n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the tuple string into list of tuples\n    tuple_list = [tuple(map(int, t.split(','))) for t in test_str.split('(')]\n    return tuple_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    lst_str = test_str.split(',')\n    \n    # Convert each string to an integer\n    lst_int = [int(i.strip()) for i in lst_str]\n    \n    # Return the integer tuple\n    return tuple(lst_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    tuple_list = test_str.split(',')\n    \n    # Create an empty list to store the integer values\n    int_list = []\n    \n    # Iterate over the list of strings and convert each string to an integer\n    for string in tuple_list:\n        int_list.append(int(string))\n    \n    # Convert the integer list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    try:\n        for str_num in test_str:\n            int_tuple += (int(str_num),)\n    except ValueError:\n        print(\"Error: Invalid input string\")\n        return None\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    # initialize an empty list to store the integer tuples\n    int_tuples = []\n    \n    # loop through each string in the tuple\n    for string in test_str:\n        # try to convert the string to an integer\n        try:\n            # if the conversion is successful, add the integer to the list of integers\n            int_tuples.append(int(string))\n        except ValueError:\n            # if the conversion fails, print an error message and skip to the next string\n            print(f\"Error: Could not convert {string} to an integer.\")\n            continue\n    \n    # return the list of integer tuples\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    return tuple(int(i) for i in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list of tuples\n    list_tuples = test_str.split(',')\n    # Convert list of tuples to list of integers\n    list_integers = [int(i) for i in list_tuples]\n    # Convert list of integers to tuple\n    tuple_integers = tuple(list_integers)\n    return tuple_integers"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Args:\n        a: a sorted list of integers\n        x: an integer to locate the right insertion point for\n\n    Returns:\n        the index of the right insertion point for x\n\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        # x is not in the list\n        index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right insertion point\n    i = bisect.bisect_right(a, x)\n\n    # Check if the value is already present at the right insertion point\n    if i < len(a) and a[i] == x:\n        return i\n\n    # Otherwise, the value is not present at the right insertion point, so we need to insert it\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n\n    # Find the right index where to insert the element\n    index = bisect.bisect_right(a, x)\n\n    # Return the insertion point\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the right insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            # If the mid element is equal to x, the left half of the array contains the insertion point\n            left = mid + 1\n        elif a[mid] < x:\n            # If the mid element is less than x, the left half of the array contains the insertion point\n            left = mid + 1\n        else:\n            # If the mid element is greater than x, the right half of the array contains the insertion point\n            right = mid - 1\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect.bisect_right() returns the index where the element should be inserted\n    # to maintain the sorted order of the list\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Locate the index of the first element greater than x\n    index = bisect.bisect_right(a, x)\n    # If the value is already present in the list, return its index\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, insert the value at the rightmost index and return it's index\n    a.insert(index, x)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Initialize the left and right pointers\n    left, right = 0, len(a) - 1\n    \n    # Use binary search to find the right insertion point\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the value is present at the middle position\n        if a[mid] == x:\n            # If the value is present, return the mid index\n            return mid\n        \n        # If the value is smaller than the mid element, ignore the left half\n        elif a[mid] < x:\n            left = mid + 1\n        \n        # If the value is greater than the mid element, ignore the right half\n        else:\n            right = mid - 1\n    \n    # If the value is not present in the array, return the left insertion point\n    return left"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=.*b{3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(b){3}')\n    matches = pattern.findall(text)\n    return matches\n\ntext = 'This is a big ball that has been broken.'\nmatches = text_match_three(text)\nprint(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w{3}b'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found:'+ match.group()\n    else:\n        return 'No match found.'"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_list)\n    new_list.append(test_str)\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_tuple = tuple(test_list)\n\n    # Convert the string to a tuple\n    new_tuple += (tuple(test_str),)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # split the given string into a list of characters\n    char_list = list(test_str)\n    # create a new tuple by joining the list of characters with the given list\n    new_tuple = tuple(test_list + char_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    tuple_list = tuple(test_list)\n\n    # Combine the tuple_list and test_str into a new tuple\n    new_tuple = tuple_list + (test_str,)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert the list to tuple\n    test_tuple = tuple(test_list)\n    # concatenate the tuple and string\n    new_tuple = test_tuple + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return tuple(test_str + \" \" + str(item) for item in test_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    count += 1\n                else:\n                    break\n            if count % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum([1 for j in range(i+1, len(nums), 2)]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2]))!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n            if even_count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                even_count += 1\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_found = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and nums[i] % 2 == 0:\n            even_found.append(nums[i])\n    if len(even_found) == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2]))!= len(nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count = 0\n            for j in range(i, len(nums)):\n                if nums[j] % 2 == 0:\n                    even_count += 1\n                if even_count == 0:\n                    return False\n            if even_count > 0:\n                return True\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n\n    Args:\n        test_tup: a tuple containing tuples to be removed\n\n    Returns:\n        A new tuple with all the tuples removed\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(elem) for elem in test_tup if not isinstance(elem, tuple))\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = test_tup\n    while isinstance(nested_tup, tuple):\n        test_tup = nested_tup\n        nested_tup = test_tup\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flattened_tup.extend(remove_nested(item))\n        else:\n            flattened_tup.append(item)\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes a list of lists as input and returns the number of lists in the input.\n    \"\"\"\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if x not in arr:\n        return \"Element not found in array\"\n\n    left, right = 0, len(arr) - 1\n    mid = (left + right) // 2\n\n    if arr[mid] == x:\n        while mid > 0 and arr[mid - 1] == x:\n            mid -= 1\n        return mid\n\n    elif arr[mid] > x:\n        return \"Element not found in array\"\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid\n\n    return \"Element not found in array\""
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    :param arr: Sorted array.\n    :param x: Element to find its last position.\n    :return: The last position of x in arr. If x is not in arr, returns -1.\n    \"\"\"\n\n    # Initialize the last position to -1\n    last_pos = -1\n\n    # Initialize the left and right pointers to the first and last indices of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search on the sorted array until the last position is found\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If x is found at the mid index, update the last position\n        if arr[mid] == x:\n            last_pos = mid\n            right = mid - 1\n        # If x is greater than the mid element, search in the right half of the array\n        elif arr[mid] < x:\n            left = mid + 1\n        # If x is smaller than the mid element, search in the left half of the array\n        else:\n            right = mid - 1\n\n    # Return the last position of x in the array\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    \n    # Loop until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        # Calculate the midpoint of the array\n        mid = (left + right) // 2\n        \n        # If the midpoint element is equal to the target element, update the left pointer to mid + 1\n        if arr[mid] == x:\n            left = mid + 1\n        \n        # If the midpoint element is less than the target element, update the left pointer to mid\n        elif arr[mid] < x:\n            left = mid\n        \n        # If the midpoint element is greater than the target element, update the right pointer to mid - 1\n        else:\n            right = mid - 1\n    \n    # Return the left pointer, which will be the last position of the target element\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # initialize variables\n    start, end = 0, len(arr) - 1\n\n    # iterate through the array until the element is found\n    while arr[start] < x:\n        start += 1\n\n    # if the element is not found, return -1\n    if arr[start]!= x:\n        return -1\n\n    # iterate through the array again and find the last position of the element\n    while arr[end] == x:\n        end -= 1\n\n    # return the last position of the element\n    return end"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = n - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    n = len(arr)\n    while i < n:\n        if arr[i] == x:\n            return i\n        i += 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): A sorted array.\n        x (int): The element to search for in the array.\n\n    Returns:\n        int: The last position of x in the array.\n\n    Raises:\n        ValueError: If the element is not present in the array.\n    \"\"\"\n    if x not in arr:\n        raise ValueError(\"Element not found in array\")\n    return arr.index(x)"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters:\n    arr: A sorted array\n    x: An element to search for\n\n    The function finds the last position of the element x in the array arr.\n    \"\"\"\n    # Initialize the left and right pointers of the search\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the result variable to -1\n    result = -1\n\n    # Loop until the left pointer is greater than the right pointer\n    while left <= right:\n        # Calculate the middle index of the current search range\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the target, update the result variable\n        if arr[mid] == x:\n            result = mid\n\n        # If the middle element is less than the target, update the search range to the right of the middle index\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the middle element is greater than the target, update the search range to the left of the middle index\n        else:\n            right = mid - 1\n\n    # Return the result variable\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right if left == len(arr) - 1 and arr[left] == x else -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for value in dict.values():\n        sum_ += value\n    return sum_"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for key, value in dict.items():\n        sum_ += value\n    return sum_"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n\n    # iterate over all key-value pairs in the dictionary\n    total = 0\n    for key, value in dict.items():\n        # add the value to the total sum\n        total += value\n    # return the total sum\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    s = 0\n    while l <= r:\n        s += l\n        l += 2\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    odd_sum = 0\n    for i in range(l, r+1, 2):\n        odd_sum += i\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n\n    :param l: lower bound of the range\n    :param r: upper bound of the range\n    :return: the sum of all odd natural numbers within the range l and r\n    \"\"\"\n    total = 0\n    for i in range(l, r + 1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    sum = 0\n    # loop through the range of odd natural numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the current odd natural number to the sum\n        sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the lower and upper limit of the range: \").split())\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            odd_sum += i\n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is:\", odd_sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1, 2):\n        result += i\n    return result"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two parameters, l and r, which are the lower and upper limits of the range.\n    It returns the sum of all odd natural numbers within the range.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range 1 to n.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input from user\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    \n    # initialize sum variable\n    sum = 0\n    \n    # loop through range of odd natural numbers\n    for i in range(l, r+1, 2):\n        # add each odd number to sum variable\n        sum += i\n    \n    # print sum of odd numbers\n    print(\"Sum of odd numbers between\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Iterate through each element in the array\n    for i in arr:\n        # Add the element to the sum\n        sum += i\n    # Return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # Initialize the sum variable to zero\n    total = 0\n\n    # Loop through each element in the array\n    for num in arr:\n        # Add the element to the total\n        total += num\n\n    # Return the final total\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n\n    # Iterate through the array and add each element to the sum\n    for num in arr:\n        total += num\n\n    # Return the final sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        n = n & 0xFFFFFFFF\n        mask = (1 << d) - 1\n        return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # convert the input number to a string so we can perform bitwise operations on it\n    num_str = bin(n)[2:]\n\n    # pad the string with zeroes so we have d bits to rotate to\n    num_str = '0' * (32 - d) + num_str\n\n    # rotate the bits to the left by d positions and convert back to an integer\n    rotated_num = int(num_str, 2)\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n    # Append zeros to make the binary string d bits long\n    zeros = '0' * d\n    # Convert the binary string to a number\n    num = int(binary_str + zeros, 2)\n    # Return the rotated number\n    return num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if d == 0:\n        return n\n    elif d > 0:\n        return (n << d) | (n >> (32 - d))\n    else:\n        return (n >> abs(d)) | (n << (32 - abs(d)))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    bits_to_rotate = d % 32\n    \n    # If the number of bits to rotate is 0, return the original number\n    if bits_to_rotate == 0:\n        return n\n    \n    # Calculate the number of bits to shift the number to the left\n    shift = 32 - bits_to_rotate\n    \n    # Calculate the mask to extract the bits to rotate\n    mask = (1 << bits_to_rotate) - 1\n    \n    # Extract the bits to rotate\n    bits_to_rotate_extract = (n >> shift) & mask\n    \n    # Calculate the number of bits to shift the rotated bits to the right\n    shift_right = d // 32\n    \n    # Shift the rotated bits to the right\n    shifted_bits = (bits_to_rotate_extract >> shift_right) | (n & ((1 << shift_right) - 1))\n    \n    # Return the shifted and rotated bits\n    return shifted_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    bin_str = bin(n)[2:]\n    \n    # Calculate the number of zeros to be added\n    zeros = '0' * d\n    \n    # Add zeros to the left of the binary string\n    new_bin_str = zeros + bin_str\n    \n    # Convert the new binary string back to decimal\n    new_n = int(new_bin_str, 2)\n    \n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the given number to binary\n    binary_num = bin(n)[2:]\n    # check if the number of bits is less than the required number of bits\n    if len(binary_num) < d:\n        # add leading zeros to the binary number\n        binary_num = '0' * (d - len(binary_num)) + binary_num\n    # rotate the binary number by d bits\n    rotated_binary = binary_num[-d:] + binary_num[:-d]\n    # convert the rotated binary number back to decimal\n    rotated_num = int(rotated_binary, 2)\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to be rotated\n    d_bits = d % 32\n    # Calculate the number of bits to be shifted\n    shift_bits = 32 - d_bits\n    # Perform the rotation by shifting left and adding the original number\n    return ((n << shift_bits) & ((1 << 32) - 1)) | ((n >> d_bits) & ((1 << d_bits) - 1))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the input number to binary and reverse it\n    binary_number = bin(n)[2:].zfill(32)\n    binary_number = binary_number[::-1]\n\n    # Get the number of bits to rotate by\n    rotated_bits = int(d) % 32\n\n    # Remove the least significant bits\n    binary_number = binary_number[-rotated_bits:]\n\n    # Convert back to integer and return\n    return int(binary_number, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert n to binary string\n    bin_str = bin(n)[2:]\n    # Pad the binary string with leading zeros\n    padded_bin_str = bin_str.zfill(32)\n    # Extract the last d bits and reverse them\n    last_d_bits = padded_bin_str[-d:]\n    reversed_last_d_bits = last_d_bits[::-1]\n    # Reverse the binary string without the last d bits\n    rotated_bin_str = padded_bin_str[d:] + reversed_last_d_bits\n    # Convert the rotated binary string to an integer\n    rotated_int = int(rotated_bin_str, 2)\n    return rotated_int"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    # Use regular expression to match all whitespace characters and replace them with an empty string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == y and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z:\n        count += 1\n    if x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # initialize the count variable to zero\n    count = 0\n\n    # loop through each number from x to z\n    for i in range(x, z+1):\n\n        # if the number is equal to both y and z, increment the count\n        if i == y or i == z:\n            count += 1\n\n    # return the count of equal numbers between y and z\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # initialize variables to keep track of count and frequency\n    count = 0\n    freq = {}\n\n    # loop through the three given integers\n    for i in range(1,x+1):\n        for j in range(1,y+1):\n            for k in range(1,z+1):\n                # if i,j,k are equal, increment the count and update the frequency dictionary\n                if i == j == k:\n                    count += 1\n                    if i in freq:\n                        freq[i] += 1\n                    else:\n                        freq[i] = 1\n\n    # return the count and frequency dictionary\n    return count, freq"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers x, y and z and counts the number of equal numbers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and x[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    rotations = 0\n    for i in range(n):\n        if arr[i] > arr[n-1-i]:\n            rotations += 1\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    k = 0\n    count = 0\n    for i in range(n-k):\n        # Check if the smallest element is in the remaining array\n        if arr[i] < arr[i+k]:\n            count += 1\n        # Slide the window over the array to remove the smallest element\n        arr.pop(0)\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function will count the number of rotations required to generate a sorted array.\n\n    Input:\n    arr: List of integers\n\n    Output:\n    int: Number of rotations required to generate a sorted array\n\n    \"\"\"\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n\n    # First check if the array is already sorted\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 0\n\n    # If the array is not sorted, find the smallest element and swap it with the last element\n    for i in range(n - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            arr[i], arr[n - 1] = arr[n - 1], arr[i]\n            break\n\n    # Count the number of rotations required to generate a sorted array\n    rotations = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-1-i]:\n            return i+1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # If array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # Check if the array is already rotated\n    if arr[0] < arr[1] < arr[2]:\n        return 0\n\n    # Sort the array using insertion sort\n    for i in range(1, n):\n        key = arr[i]\n        j = i - 1\n\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n\n        arr[j + 1] = key\n\n    # Calculate the number of rotations required\n    count = 0\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n-1 and arr[j] > arr[j+1]:\n            j += 1\n        if j!= n-1:\n            # swap arr[i] with arr[j]\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # check if the array is already sorted or not\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n\n    # if the array is already sorted, return 0\n    if n == 1:\n        return 0\n\n    # check if the array is already in ascending order\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n\n    # if the array is in ascending order, return 0\n    if n == 2:\n        return 0\n\n    # check if the array is already in descending order\n    for i in range(n-2):\n        if arr[i] < arr[i+1]:\n            return 0\n\n    # if the array is in descending order, return 0\n    if n == 3:\n        return 0\n\n    # find the pivot element\n    pivot = arr[0]\n    i = 0\n    j = n-1\n\n    # iterate through the array and count the number of rotations required\n    while i < j:\n        if arr[i] < pivot:\n            i += 1\n        elif arr[j] > pivot:\n            j -= 1\n        else:\n            # swap the pivot with the last element\n            arr[i], arr[j] = arr[j], arr[i]\n            # count the number of rotations required to sort the array\n            count = 0\n            for k in range(n-1):\n                if arr[k] > arr[k+1]:\n                    count += 1\n            return count\n\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n and arr[j] > arr[j+1]:\n            j += 1\n        if j == n:\n            continue\n        while j > i:\n            if arr[j-1] > arr[j]:\n                count += 1\n            j -= 1\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # find the smallest element in the array\n    smallest = min(arr)\n    # if the smallest element is already the first element, no rotation required\n    if smallest == arr[0]:\n        return 0\n    # count the number of rotations required to generate a sorted array\n    count = 0\n    # keep track of the next index to be checked\n    i = 1\n    while i < n:\n        # if the next element is greater than the current smallest element,\n        # the array must be partially sorted\n        if arr[i] > smallest:\n            # update the smallest element to the next element\n            smallest = arr[i]\n            # increment the count of rotations required\n            count += 1\n        i += 1\n    # if the next element is greater than the current smallest element,\n    # the array must be fully sorted\n    if arr[i] > smallest:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        j = i + 1\n        while j < n and arr[j] < arr[i]:\n            j += 1\n            \n        if j < n:\n            k = j - 1\n            while k >= i and arr[k] > arr[i]:\n                k -= 1\n            \n            count += j - k\n            \n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Loop till the square root of n\n    sqrt_n = int(n ** 0.5)\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    x = n\n    y = n * n\n    while x!= y:\n        x = (x + y) // 2\n        y = n * x * x\n    return y == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # Find the square root of n using the Newton-Raphson method\n    guess = n // 2\n    while abs(guess*guess - n) > 0.0001:\n        guess = (guess + n//guess) // 2\n\n    # Check if the guess is a perfect square\n    if guess * guess == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n**0.5)\n    return root**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # Function to check whether the given number is a perfect square or not\n    def is_perfect_square_helper(x):\n        # Calculate the square root of x\n        root = int(x ** 0.5) + 1\n        # Check if the square of the root is equal to the original number\n        if root * root == x:\n            return True\n        else:\n            return False\n\n    # Check if the given number is a perfect square\n    if is_perfect_square_helper(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    root = math.sqrt(n)\n    return root == int(root)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return False\n\n    # Check if n is equal to 1\n    if n == 1:\n        return True\n\n    # Check if n is divisible by 4\n    if n % 4 == 0:\n        return False\n\n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if sqrt_n is equal to the square root of n\n    if sqrt_n ** 2 == n:\n        return True\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the given number is negative or zero\n    if n <= 0:\n        return False\n    \n    # calculate the square root of the given number\n    square = int(n ** 0.5) + 1\n    \n    # check if the square is equal to the given number\n    if square * square == n:\n        return True\n    \n    # if the square is greater than the given number, it is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the given number is positive or not\n    if n <= 0:\n        return False\n\n    # Use the Babylonian method to check if the given number is a perfect square or not\n    a = n\n    b = int(n**0.5)\n\n    while b**2 <= n:\n        a = b\n        b = (a + n//b) // 2\n\n    return b**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n\n    Parameters:\n    n: int\n        The number to be checked for perfect square.\n\n    Returns:\n    bool\n        Returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n\n    # Return True if n is a perfect square, False otherwise.\n    def is_perfect_square_helper(num):\n        \"\"\"\n        Helper function for checking whether a given number is a perfect square or not.\n\n        Parameters:\n        num: int\n            The number to be checked for perfect square.\n\n        Returns:\n        bool\n            Returns True if the given number is a perfect square, False otherwise.\n        \"\"\"\n\n        # Base case: if num is less than or equal to 1, it is a perfect square.\n        if num <= 1:\n            return True\n\n        # Iterate from 2 to num-1 and check whether num is a perfect square or not.\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n\n        # If we reach here, num is a perfect square.\n        return True\n\n    return is_perfect_square_helper(n)"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # get the product of the numbers in the list\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and returns True if the product of all the integers in the list is even, and False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize a variable to store the product of all numbers in the list\n    product = 1\n\n    # Loop through each number in the list\n    for num in arr: \n        # Multiply the current product by the number and add it to the variable\n        product *= num\n\n    # Check if the product is even or not\n    if product % 2 == 0: \n        # If the product is even, print \"The product of the list is even.\"\n        print(\"The product of the list is even.\")\n    else: \n        # If the product is odd, print \"The product of the list is odd.\"\n        print(\"The product of the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n\n    Parameters:\n    arr (list): List of numbers to be checked.\n\n    Returns:\n    bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                for l in range(len(lists[i][j][k])):\n                    current_sum = lists[i][j][k][l] + lists[i][j][k][l+1] + lists[i][j][k][l+2] + lists[i][j][k+1][l+2]\n                    if current_sum > max_sum:\n                        max_sum = current_sum\n                        max_list = [lists[i][j][k][l], lists[i][j][k][l+1], lists[i][j][k][l+2], lists[i][j][k+1][l+2]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                current_sum = lists[i][j]\n            elif i == 0:\n                current_sum = lists[i][j] + lists[i][j-1]\n            else:\n                current_sum = lists[i][j] + lists[i][j-1] + lists[i-1][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [[lists[i][j]]]\n            elif current_sum == max_sum:\n                max_list.append([lists[i][j]])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                total = lists[i][j][k]\n                for l in range(len(lists[i][j][k])):\n                    total += lists[i][j][k][l]\n                if total > max_sum:\n                    max_sum = total\n                    max_list = lists[i][j][k]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                result = [lists[i][j]]\n            elif lists[i][j] == max_sum:\n                result.append(lists[i][j])\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            sub_sum = lists[i][j]\n            for k in range(len(lists)):\n                if k!= i and k!= j:\n                    sub_sum += lists[k][j]\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n                max_list = [lists[i][j]]\n            elif sub_sum == max_sum:\n                max_list.append(lists[i][j])\n                \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through each list in the input list\n    for lst in lists:\n        # Iterate through each element in the list\n        for num in lst:\n            # Add the element to the current sum\n            current_sum += num\n\n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    # Return the list with the maximum sum\n    return [lst for lst in lists if sum(lst) == max_sum]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n\n    # Find the maximum sum in each sublist\n    max_sum_sublists = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if not max_sum_sublists or current_sum > max_sum_sublists[0]:\n            max_sum_sublists = [current_sum]\n        elif current_sum == max_sum_sublists[0]:\n            max_sum_sublists.append(current_sum)\n\n    # Find the list with the maximum sum\n    max_sum = max(max_sum_sublists)\n    max_sum_list = []\n    for sublist in lists:\n        if sum(sublist) == max_sum:\n            max_sum_list = sublist\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = None\n    for lst in lists:\n        total = sum(lst)\n        if total > max_sum:\n            max_sum = total\n            max_lists = lst\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to keep track of the maximum sum\n    max_sum = float('-inf')\n\n    # Iterate over each list in the input list of lists\n    for list in lists:\n        # Calculate the sum of the elements in the list\n        total = sum(list)\n\n        # If the sum is greater than the maximum sum, update the maximum sum\n        if total > max_sum:\n            max_sum = total\n\n    # Create a list of lists where each inner list contains a single element equal to the maximum sum\n    result = [[max_sum]]\n\n    # Return the result list of lists\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to store the sum of the current list\n    current_sum = 0\n    # Initialize a variable to store the maximum sum\n    max_sum = 0\n    # Initialize a variable to store the maximum list\n    max_list = []\n    # Loop through each list in the input list of lists\n    for list_i in lists:\n        # Loop through each element in the current list\n        for element in list_i:\n            # Add the element to the current sum\n            current_sum += element\n            # If the current sum is greater than the maximum sum so far, update the maximum sum and maximum list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = list_i\n    # Return the maximum list\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of the current run of uppercase characters and the maximum run\n    current_run = 0\n    max_run = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run count\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase and the current run count is greater than the maximum run, update the maximum run\n        elif current_run > max_run:\n            max_run = current_run\n        # If the character is not uppercase and the current run count is less than or equal to the maximum run, reset the current run count\n        else:\n            current_run = 0\n            \n    # Return the maximum run of uppercase characters in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 1\n    current_run = 1\n    uppercase_count = 0\n    \n    # Iterate through the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increment the count and update the current run if necessary\n            uppercase_count += 1\n            if current_run < uppercase_count:\n                current_run = uppercase_count\n        else:\n            # If it's not, reset the count and the current run\n            uppercase_count = 1\n            current_run = 1\n        \n        # Update the maximum run if necessary\n        if current_run > max_run:\n            max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start_index = 0\n    end_index = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start_index = end_index - max_count + 1\n                end_index = i\n        else:\n            count = 0\n            if max_count > 0:\n                max_count = 0\n\n    return test_str[start_index:end_index+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of the current run and the maximum run found so far\n    current_run = 1\n    max_run = 1\n\n    # Loop through each character in the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase, increase the current run by 1\n        if test_str[i].isupper():\n            current_run += 1\n        # If the current character is not uppercase, reset the current run to 1\n        else:\n            current_run = 1\n\n        # If the current run is greater than the maximum run found so far, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n\n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    max_run_start = 0\n    current_run = 0\n    current_run_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                max_run_start = current_run_start\n        else:\n            current_run = 0\n        current_run_start = i\n    return max_run_start, max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_count = 0\n    max_start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = start\n        else:\n            count = 0\n            start = i + 1\n\n    return max_count, test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    start = 0\n    max_count = 0\n    max_start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = start\n        else:\n            count = 0\n            start = i + 1\n\n    return test_str[max_start:max_start + max_count]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            uppercase_count = max(uppercase_count, current_run)\n        else:\n            current_run = 0\n    return uppercase_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_length = 0\n    current_length = 0\n    current_index = 0\n    # iterate through the string\n    for i in range(len(test_str)):\n        # if the character is uppercase, increment the current length and check if it's longer than the max length\n        if test_str[i].isupper():\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n                current_index = i - current_length + 1\n        else:\n            current_length = 0\n    # return the maximum length and the starting index of the run\n    return max_length, current_index"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    start = 0\n    max_count = 1\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i - count + 1\n        else:\n            count = 1\n            \n    return test_str[start:start+max_count]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:  # check if the number is odd\n            return num  # return the odd number if found\n    return None  # if no odd number found, return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # Loop through the list of numbers and check if each number is odd or even\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    # If no odd number was found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if any(k in test_tup for k in K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    for i in test_tup:\n        if i == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(f\"{K} found in the given tuples\")\n    else:\n        print(f\"{K} not found in the given tuples\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(\"The given tuple contains the k value: \", K)\n    else:\n        print(\"The given tuple does not contain the k value: \", K)"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    return count > 0"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Length of the two tuples must be equal.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tupples are not the same length\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuple lengths do not match\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    # iterate over elements of first tuple\n    for i in range(len(test_tup1)):\n        # check if element of first tuple is smaller than element of second tuple\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # if no mismatch found, return True\n    return True"
    }
]